

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Nov 06 12:03:37 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F46K80
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1,group=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1
    75                           	psect	text58,global,reloc=2,class=CODE,delta=1
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1
    77                           	psect	text60,global,reloc=2,class=CODE,delta=1
    78                           	psect	text61,global,reloc=2,class=CODE,delta=1
    79                           	psect	text62,global,reloc=2,class=CODE,delta=1
    80                           	psect	text63,global,reloc=2,class=CODE,delta=1
    81                           	psect	text64,global,reloc=2,class=CODE,delta=1
    82                           	psect	text65,global,reloc=2,class=CODE,delta=1
    83                           	psect	text66,global,reloc=2,class=CODE,delta=1
    84                           	psect	text67,global,reloc=2,class=CODE,delta=1
    85                           	psect	text68,global,reloc=2,class=CODE,delta=1
    86                           	psect	text69,global,reloc=2,class=CODE,delta=1,group=1
    87                           	psect	text70,global,reloc=2,class=CODE,delta=1,group=1
    88                           	psect	text71,global,reloc=2,class=CODE,delta=1
    89                           	psect	text72,global,reloc=2,class=CODE,delta=1
    90                           	psect	text73,global,reloc=2,class=CODE,delta=1
    91                           	psect	text74,global,reloc=2,class=CODE,delta=1
    92                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    93                           	psect	text75,global,reloc=2,class=CODE,delta=1
    94                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    95                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    96  0000                     
    97                           ; Version 1.45
    98                           ; Generated 16/11/2017 GMT
    99                           ; 
   100                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   101                           ; All rights reserved.
   102                           ; 
   103                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   104                           ; 
   105                           ; Redistribution and use in source and binary forms, with or without modification, are
   106                           ; permitted provided that the following conditions are met:
   107                           ; 
   108                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   109                           ;        conditions and the following disclaimer.
   110                           ; 
   111                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   112                           ;        of conditions and the following disclaimer in the documentation and/or other
   113                           ;        materials provided with the distribution.
   114                           ; 
   115                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   116                           ;        software without specific prior written permission.
   117                           ; 
   118                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   119                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   120                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   121                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   122                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   123                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   124                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   125                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   126                           ; 
   127                           ; 
   128                           ; Code-generator required, PIC18F46K80 Definitions
   129                           ; 
   130                           ; SFR Addresses
   131  0000                     
   132                           	psect	idataCOMRAM
   133  001B22                     __pidataCOMRAM:
   134                           	opt stack 0
   135                           
   136                           ;initializer for _i2c_upperAddressFlag
   137  001B22  01                 	db	1
   138                           
   139                           ;initializer for _I2C_slaveWriteData
   140  001B23  55                 	db	85
   141                           
   142                           	psect	idataBANK0
   143  001B18                     __pidataBANK0:
   144                           	opt stack 0
   145                           
   146                           ;initializer for lcd_number@F15340
   147  001B18  0A                 	db	10
   148  001B19  00                 	db	0
   149  001B1A  00                 	db	0
   150  001B1B  00                 	db	0
   151  001B1C  00                 	db	0
   152                           
   153                           	psect	mediumconst
   154  00FB38                     __pmediumconst:
   155                           	opt stack 0
   156  00FB38  00                 	db	0
   157  00FB39                     _digitos:
   158                           	opt stack 0
   159  00FB39  07E0               	dw	2016
   160  00FB3B  0FF0               	dw	4080
   161  00FB3D  1008               	dw	4104
   162  00FB3F  300C               	dw	12300
   163  00FB41  300C               	dw	12300
   164  00FB43  300C               	dw	12300
   165  00FB45  300C               	dw	12300
   166  00FB47  300C               	dw	12300
   167  00FB49  300C               	dw	12300
   168  00FB4B  300C               	dw	12300
   169  00FB4D  300C               	dw	12300
   170  00FB4F  300C               	dw	12300
   171  00FB51  300C               	dw	12300
   172  00FB53  300C               	dw	12300
   173  00FB55  300C               	dw	12300
   174  00FB57  300C               	dw	12300
   175  00FB59  300C               	dw	12300
   176  00FB5B  300C               	dw	12300
   177  00FB5D  300C               	dw	12300
   178  00FB5F  1008               	dw	4104
   179  00FB61  0FF0               	dw	4080
   180  00FB63  07E0               	dw	2016
   181  00FB65  0780               	dw	1920
   182  00FB67  0780               	dw	1920
   183  00FB69  0180               	dw	384
   184  00FB6B  0180               	dw	384
   185  00FB6D  0180               	dw	384
   186  00FB6F  0180               	dw	384
   187  00FB71  0180               	dw	384
   188  00FB73  0180               	dw	384
   189  00FB75  0180               	dw	384
   190  00FB77  0180               	dw	384
   191  00FB79  0180               	dw	384
   192  00FB7B  0180               	dw	384
   193  00FB7D  0180               	dw	384
   194  00FB7F  0180               	dw	384
   195  00FB81  0180               	dw	384
   196  00FB83  0180               	dw	384
   197  00FB85  0180               	dw	384
   198  00FB87  0180               	dw	384
   199  00FB89  0180               	dw	384
   200  00FB8B  0180               	dw	384
   201  00FB8D  1FF8               	dw	8184
   202  00FB8F  1FF8               	dw	8184
   203  00FB91  07E0               	dw	2016
   204  00FB93  0FF0               	dw	4080
   205  00FB95  1008               	dw	4104
   206  00FB97  000C               	dw	12
   207  00FB99  0006               	dw	6
   208  00FB9B  0006               	dw	6
   209  00FB9D  0006               	dw	6
   210  00FB9F  000C               	dw	12
   211  00FBA1  001C               	dw	28
   212  00FBA3  0038               	dw	56
   213  00FBA5  0070               	dw	112
   214  00FBA7  00E0               	dw	224
   215  00FBA9  01C0               	dw	448
   216  00FBAB  0380               	dw	896
   217  00FBAD  0700               	dw	1792
   218  00FBAF  0E00               	dw	3584
   219  00FBB1  1C00               	dw	7168
   220  00FBB3  1800               	dw	6144
   221  00FBB5  3000               	dw	12288
   222  00FBB7  3000               	dw	12288
   223  00FBB9  3FFE               	dw	16382
   224  00FBBB  3FFE               	dw	16382
   225  00FBBD  1FF0               	dw	8176
   226  00FBBF  3FF8               	dw	16376
   227  00FBC1  601C               	dw	24604
   228  00FBC3  000C               	dw	12
   229  00FBC5  000C               	dw	12
   230  00FBC7  000C               	dw	12
   231  00FBC9  000C               	dw	12
   232  00FBCB  000C               	dw	12
   233  00FBCD  000C               	dw	12
   234  00FBCF  0018               	dw	24
   235  00FBD1  07F0               	dw	2032
   236  00FBD3  07F0               	dw	2032
   237  00FBD5  0018               	dw	24
   238  00FBD7  000C               	dw	12
   239  00FBD9  000C               	dw	12
   240  00FBDB  000C               	dw	12
   241  00FBDD  000C               	dw	12
   242  00FBDF  000C               	dw	12
   243  00FBE1  000C               	dw	12
   244  00FBE3  601C               	dw	24604
   245  00FBE5  3FF8               	dw	16376
   246  00FBE7  1FF0               	dw	8176
   247  00FBE9  0000               	dw	0
   248  00FBEB  000C               	dw	12
   249  00FBED  001C               	dw	28
   250  00FBEF  003C               	dw	60
   251  00FBF1  006C               	dw	108
   252  00FBF3  00CC               	dw	204
   253  00FBF5  018C               	dw	396
   254  00FBF7  030C               	dw	780
   255  00FBF9  060C               	dw	1548
   256  00FBFB  0C0C               	dw	3084
   257  00FBFD  180C               	dw	6156
   258  00FBFF  300C               	dw	12300
   259  00FC01  3FFE               	dw	16382
   260  00FC03  3FFE               	dw	16382
   261  00FC05  000C               	dw	12
   262  00FC07  000C               	dw	12
   263  00FC09  000C               	dw	12
   264  00FC0B  000C               	dw	12
   265  00FC0D  000C               	dw	12
   266  00FC0F  000C               	dw	12
   267  00FC11  000C               	dw	12
   268  00FC13  000C               	dw	12
   269  00FC15  7FF8               	dw	32760
   270  00FC17  7FF8               	dw	32760
   271  00FC19  6000               	dw	24576
   272  00FC1B  6000               	dw	24576
   273  00FC1D  6000               	dw	24576
   274  00FC1F  6000               	dw	24576
   275  00FC21  6000               	dw	24576
   276  00FC23  6000               	dw	24576
   277  00FC25  6000               	dw	24576
   278  00FC27  6000               	dw	24576
   279  00FC29  7FF0               	dw	32752
   280  00FC2B  7FF8               	dw	32760
   281  00FC2D  000C               	dw	12
   282  00FC2F  000C               	dw	12
   283  00FC31  000C               	dw	12
   284  00FC33  000C               	dw	12
   285  00FC35  000C               	dw	12
   286  00FC37  000C               	dw	12
   287  00FC39  000C               	dw	12
   288  00FC3B  000C               	dw	12
   289  00FC3D  7FF8               	dw	32760
   290  00FC3F  7FF0               	dw	32752
   291  00FC41  0FF0               	dw	4080
   292  00FC43  1FF0               	dw	8176
   293  00FC45  3000               	dw	12288
   294  00FC47  6000               	dw	24576
   295  00FC49  6000               	dw	24576
   296  00FC4B  6000               	dw	24576
   297  00FC4D  6000               	dw	24576
   298  00FC4F  6000               	dw	24576
   299  00FC51  6000               	dw	24576
   300  00FC53  6000               	dw	24576
   301  00FC55  6FF0               	dw	28656
   302  00FC57  7FF8               	dw	32760
   303  00FC59  700C               	dw	28684
   304  00FC5B  600C               	dw	24588
   305  00FC5D  600C               	dw	24588
   306  00FC5F  600C               	dw	24588
   307  00FC61  600C               	dw	24588
   308  00FC63  600C               	dw	24588
   309  00FC65  600C               	dw	24588
   310  00FC67  600C               	dw	24588
   311  00FC69  3FF8               	dw	16376
   312  00FC6B  1FF0               	dw	8176
   313  00FC6D  3FFC               	dw	16380
   314  00FC6F  3FFC               	dw	16380
   315  00FC71  000C               	dw	12
   316  00FC73  000C               	dw	12
   317  00FC75  0018               	dw	24
   318  00FC77  0018               	dw	24
   319  00FC79  0030               	dw	48
   320  00FC7B  0030               	dw	48
   321  00FC7D  0060               	dw	96
   322  00FC7F  0060               	dw	96
   323  00FC81  00C0               	dw	192
   324  00FC83  00C0               	dw	192
   325  00FC85  0180               	dw	384
   326  00FC87  0180               	dw	384
   327  00FC89  0300               	dw	768
   328  00FC8B  0300               	dw	768
   329  00FC8D  0600               	dw	1536
   330  00FC8F  0600               	dw	1536
   331  00FC91  0C00               	dw	3072
   332  00FC93  0C00               	dw	3072
   333  00FC95  1800               	dw	6144
   334  00FC97  1800               	dw	6144
   335  00FC99  07E0               	dw	2016
   336  00FC9B  0FF0               	dw	4080
   337  00FC9D  1008               	dw	4104
   338  00FC9F  300C               	dw	12300
   339  00FCA1  300C               	dw	12300
   340  00FCA3  300C               	dw	12300
   341  00FCA5  300C               	dw	12300
   342  00FCA7  300C               	dw	12300
   343  00FCA9  300C               	dw	12300
   344  00FCAB  1818               	dw	6168
   345  00FCAD  0FF0               	dw	4080
   346  00FCAF  0FF0               	dw	4080
   347  00FCB1  1818               	dw	6168
   348  00FCB3  300C               	dw	12300
   349  00FCB5  300C               	dw	12300
   350  00FCB7  300C               	dw	12300
   351  00FCB9  300C               	dw	12300
   352  00FCBB  300C               	dw	12300
   353  00FCBD  300C               	dw	12300
   354  00FCBF  1008               	dw	4104
   355  00FCC1  0FF0               	dw	4080
   356  00FCC3  07E0               	dw	2016
   357  00FCC5  07F8               	dw	2040
   358  00FCC7  1FFC               	dw	8188
   359  00FCC9  180C               	dw	6156
   360  00FCCB  3006               	dw	12294
   361  00FCCD  3006               	dw	12294
   362  00FCCF  3006               	dw	12294
   363  00FCD1  3006               	dw	12294
   364  00FCD3  3006               	dw	12294
   365  00FCD5  3006               	dw	12294
   366  00FCD7  180E               	dw	6158
   367  00FCD9  1FFE               	dw	8190
   368  00FCDB  07F6               	dw	2038
   369  00FCDD  0006               	dw	6
   370  00FCDF  0006               	dw	6
   371  00FCE1  0006               	dw	6
   372  00FCE3  0006               	dw	6
   373  00FCE5  0006               	dw	6
   374  00FCE7  0006               	dw	6
   375  00FCE9  000C               	dw	12
   376  00FCEB  0018               	dw	24
   377  00FCED  0FF0               	dw	4080
   378  00FCEF  0FE0               	dw	4064
   379  00FCF1  0000               	dw	0
   380  00FCF3  0000               	dw	0
   381  00FCF5  0000               	dw	0
   382  00FCF7  0000               	dw	0
   383  00FCF9  0000               	dw	0
   384  00FCFB  0000               	dw	0
   385  00FCFD  0000               	dw	0
   386  00FCFF  0000               	dw	0
   387  00FD01  0000               	dw	0
   388  00FD03  0000               	dw	0
   389  00FD05  0000               	dw	0
   390  00FD07  0000               	dw	0
   391  00FD09  0000               	dw	0
   392  00FD0B  0000               	dw	0
   393  00FD0D  0000               	dw	0
   394  00FD0F  0000               	dw	0
   395  00FD11  0000               	dw	0
   396  00FD13  0000               	dw	0
   397  00FD15  0000               	dw	0
   398  00FD17  0000               	dw	0
   399  00FD19  0000               	dw	0
   400  00FD1B  0000               	dw	0
   401  00FD1D                     __end_of_digitos:
   402                           	opt stack 0
   403  00FD1D                     _texto:
   404                           	opt stack 0
   405  00FD1D  00                 	db	0
   406  00FD1E  7E                 	db	126
   407  00FD1F  A1                 	db	161
   408  00FD20  91                 	db	145
   409  00FD21  89                 	db	137
   410  00FD22  85                 	db	133
   411  00FD23  7E                 	db	126
   412  00FD24  00                 	db	0
   413  00FD25  00                 	db	0
   414  00FD26  00                 	db	0
   415  00FD27  82                 	db	130
   416  00FD28  FF                 	db	255
   417  00FD29  80                 	db	128
   418  00FD2A  00                 	db	0
   419  00FD2B  00                 	db	0
   420  00FD2C  00                 	db	0
   421  00FD2D  00                 	db	0
   422  00FD2E  C2                 	db	194
   423  00FD2F  A1                 	db	161
   424  00FD30  91                 	db	145
   425  00FD31  89                 	db	137
   426  00FD32  86                 	db	134
   427  00FD33  00                 	db	0
   428  00FD34  00                 	db	0
   429  00FD35  00                 	db	0
   430  00FD36  00                 	db	0
   431  00FD37  81                 	db	129
   432  00FD38  81                 	db	129
   433  00FD39  89                 	db	137
   434  00FD3A  95                 	db	149
   435  00FD3B  63                 	db	99
   436  00FD3C  00                 	db	0
   437  00FD3D  00                 	db	0
   438  00FD3E  00                 	db	0
   439  00FD3F  18                 	db	24
   440  00FD40  14                 	db	20
   441  00FD41  12                 	db	18
   442  00FD42  FF                 	db	255
   443  00FD43  10                 	db	16
   444  00FD44  00                 	db	0
   445  00FD45  00                 	db	0
   446  00FD46  8F                 	db	143
   447  00FD47  89                 	db	137
   448  00FD48  89                 	db	137
   449  00FD49  89                 	db	137
   450  00FD4A  89                 	db	137
   451  00FD4B  70                 	db	112
   452  00FD4C  00                 	db	0
   453  00FD4D  00                 	db	0
   454  00FD4E  7E                 	db	126
   455  00FD4F  89                 	db	137
   456  00FD50  89                 	db	137
   457  00FD51  89                 	db	137
   458  00FD52  89                 	db	137
   459  00FD53  70                 	db	112
   460  00FD54  00                 	db	0
   461  00FD55  00                 	db	0
   462  00FD56  01                 	db	1
   463  00FD57  C1                 	db	193
   464  00FD58  31                 	db	49
   465  00FD59  09                 	db	9
   466  00FD5A  05                 	db	5
   467  00FD5B  03                 	db	3
   468  00FD5C  00                 	db	0
   469  00FD5D  00                 	db	0
   470  00FD5E  76                 	db	118
   471  00FD5F  89                 	db	137
   472  00FD60  89                 	db	137
   473  00FD61  89                 	db	137
   474  00FD62  76                 	db	118
   475  00FD63  00                 	db	0
   476  00FD64  00                 	db	0
   477  00FD65  00                 	db	0
   478  00FD66  0E                 	db	14
   479  00FD67  91                 	db	145
   480  00FD68  91                 	db	145
   481  00FD69  91                 	db	145
   482  00FD6A  7E                 	db	126
   483  00FD6B  00                 	db	0
   484  00FD6C  00                 	db	0
   485  00FD6D  00                 	db	0
   486  00FD6E  00                 	db	0
   487  00FD6F  00                 	db	0
   488  00FD70  CC                 	db	204
   489  00FD71  CC                 	db	204
   490  00FD72  00                 	db	0
   491  00FD73  00                 	db	0
   492  00FD74  00                 	db	0
   493  00FD75  00                 	db	0
   494  00FD76  00                 	db	0
   495  00FD77  48                 	db	72
   496  00FD78  48                 	db	72
   497  00FD79  48                 	db	72
   498  00FD7A  48                 	db	72
   499  00FD7B  00                 	db	0
   500  00FD7C  00                 	db	0
   501  00FD7D  00                 	db	0
   502  00FD7E  FC                 	db	252
   503  00FD7F  12                 	db	18
   504  00FD80  11                 	db	17
   505  00FD81  12                 	db	18
   506  00FD82  FC                 	db	252
   507  00FD83  00                 	db	0
   508  00FD84  00                 	db	0
   509  00FD85  00                 	db	0
   510  00FD86  FF                 	db	255
   511  00FD87  89                 	db	137
   512  00FD88  89                 	db	137
   513  00FD89  89                 	db	137
   514  00FD8A  76                 	db	118
   515  00FD8B  00                 	db	0
   516  00FD8C  00                 	db	0
   517  00FD8D  00                 	db	0
   518  00FD8E  7E                 	db	126
   519  00FD8F  81                 	db	129
   520  00FD90  81                 	db	129
   521  00FD91  81                 	db	129
   522  00FD92  81                 	db	129
   523  00FD93  00                 	db	0
   524  00FD94  00                 	db	0
   525  00FD95  00                 	db	0
   526  00FD96  FF                 	db	255
   527  00FD97  81                 	db	129
   528  00FD98  81                 	db	129
   529  00FD99  81                 	db	129
   530  00FD9A  81                 	db	129
   531  00FD9B  7E                 	db	126
   532  00FD9C  00                 	db	0
   533  00FD9D  00                 	db	0
   534  00FD9E  FF                 	db	255
   535  00FD9F  89                 	db	137
   536  00FDA0  89                 	db	137
   537  00FDA1  89                 	db	137
   538  00FDA2  81                 	db	129
   539  00FDA3  00                 	db	0
   540  00FDA4  00                 	db	0
   541  00FDA5  00                 	db	0
   542  00FDA6  FF                 	db	255
   543  00FDA7  09                 	db	9
   544  00FDA8  09                 	db	9
   545  00FDA9  09                 	db	9
   546  00FDAA  01                 	db	1
   547  00FDAB  00                 	db	0
   548  00FDAC  00                 	db	0
   549  00FDAD  00                 	db	0
   550  00FDAE  7E                 	db	126
   551  00FDAF  81                 	db	129
   552  00FDB0  91                 	db	145
   553  00FDB1  91                 	db	145
   554  00FDB2  F0                 	db	240
   555  00FDB3  00                 	db	0
   556  00FDB4  00                 	db	0
   557  00FDB5  00                 	db	0
   558  00FDB6  FF                 	db	255
   559  00FDB7  10                 	db	16
   560  00FDB8  10                 	db	16
   561  00FDB9  10                 	db	16
   562  00FDBA  FF                 	db	255
   563  00FDBB  00                 	db	0
   564  00FDBC  00                 	db	0
   565  00FDBD  00                 	db	0
   566  00FDBE  00                 	db	0
   567  00FDBF  81                 	db	129
   568  00FDC0  FF                 	db	255
   569  00FDC1  81                 	db	129
   570  00FDC2  00                 	db	0
   571  00FDC3  00                 	db	0
   572  00FDC4  00                 	db	0
   573  00FDC5  00                 	db	0
   574  00FDC6  41                 	db	65
   575  00FDC7  81                 	db	129
   576  00FDC8  7F                 	db	127
   577  00FDC9  01                 	db	1
   578  00FDCA  00                 	db	0
   579  00FDCB  00                 	db	0
   580  00FDCC  00                 	db	0
   581  00FDCD  00                 	db	0
   582  00FDCE  FF                 	db	255
   583  00FDCF  18                 	db	24
   584  00FDD0  24                 	db	36
   585  00FDD1  42                 	db	66
   586  00FDD2  80                 	db	128
   587  00FDD3  00                 	db	0
   588  00FDD4  00                 	db	0
   589  00FDD5  00                 	db	0
   590  00FDD6  FF                 	db	255
   591  00FDD7  80                 	db	128
   592  00FDD8  80                 	db	128
   593  00FDD9  80                 	db	128
   594  00FDDA  80                 	db	128
   595  00FDDB  00                 	db	0
   596  00FDDC  00                 	db	0
   597  00FDDD  FF                 	db	255
   598  00FDDE  02                 	db	2
   599  00FDDF  04                 	db	4
   600  00FDE0  08                 	db	8
   601  00FDE1  04                 	db	4
   602  00FDE2  02                 	db	2
   603  00FDE3  FF                 	db	255
   604  00FDE4  00                 	db	0
   605  00FDE5  00                 	db	0
   606  00FDE6  FF                 	db	255
   607  00FDE7  06                 	db	6
   608  00FDE8  08                 	db	8
   609  00FDE9  10                 	db	16
   610  00FDEA  60                 	db	96
   611  00FDEB  FF                 	db	255
   612  00FDEC  00                 	db	0
   613  00FDED  00                 	db	0
   614  00FDEE  7E                 	db	126
   615  00FDEF  81                 	db	129
   616  00FDF0  81                 	db	129
   617  00FDF1  81                 	db	129
   618  00FDF2  81                 	db	129
   619  00FDF3  7E                 	db	126
   620  00FDF4  00                 	db	0
   621  00FDF5  00                 	db	0
   622  00FDF6  FF                 	db	255
   623  00FDF7  11                 	db	17
   624  00FDF8  11                 	db	17
   625  00FDF9  11                 	db	17
   626  00FDFA  0E                 	db	14
   627  00FDFB  00                 	db	0
   628  00FDFC  00                 	db	0
   629  00FDFD  00                 	db	0
   630  00FDFE  7E                 	db	126
   631  00FDFF  81                 	db	129
   632  00FE00  A1                 	db	161
   633  00FE01  C1                 	db	193
   634  00FE02  7E                 	db	126
   635  00FE03  00                 	db	0
   636  00FE04  00                 	db	0
   637  00FE05  00                 	db	0
   638  00FE06  FF                 	db	255
   639  00FE07  31                 	db	49
   640  00FE08  31                 	db	49
   641  00FE09  51                 	db	81
   642  00FE0A  8E                 	db	142
   643  00FE0B  00                 	db	0
   644  00FE0C  00                 	db	0
   645  00FE0D  00                 	db	0
   646  00FE0E  86                 	db	134
   647  00FE0F  89                 	db	137
   648  00FE10  89                 	db	137
   649  00FE11  89                 	db	137
   650  00FE12  71                 	db	113
   651  00FE13  00                 	db	0
   652  00FE14  00                 	db	0
   653  00FE15  01                 	db	1
   654  00FE16  01                 	db	1
   655  00FE17  01                 	db	1
   656  00FE18  FF                 	db	255
   657  00FE19  01                 	db	1
   658  00FE1A  01                 	db	1
   659  00FE1B  01                 	db	1
   660  00FE1C  00                 	db	0
   661  00FE1D  00                 	db	0
   662  00FE1E  7F                 	db	127
   663  00FE1F  80                 	db	128
   664  00FE20  80                 	db	128
   665  00FE21  80                 	db	128
   666  00FE22  80                 	db	128
   667  00FE23  7F                 	db	127
   668  00FE24  00                 	db	0
   669  00FE25  00                 	db	0
   670  00FE26  3F                 	db	63
   671  00FE27  40                 	db	64
   672  00FE28  80                 	db	128
   673  00FE29  80                 	db	128
   674  00FE2A  40                 	db	64
   675  00FE2B  3F                 	db	63
   676  00FE2C  00                 	db	0
   677  00FE2D  1E                 	db	30
   678  00FE2E  60                 	db	96
   679  00FE2F  C0                 	db	192
   680  00FE30  30                 	db	48
   681  00FE31  30                 	db	48
   682  00FE32  C0                 	db	192
   683  00FE33  60                 	db	96
   684  00FE34  1E                 	db	30
   685  00FE35  00                 	db	0
   686  00FE36  84                 	db	132
   687  00FE37  48                 	db	72
   688  00FE38  30                 	db	48
   689  00FE39  30                 	db	48
   690  00FE3A  48                 	db	72
   691  00FE3B  84                 	db	132
   692  00FE3C  00                 	db	0
   693  00FE3D  01                 	db	1
   694  00FE3E  02                 	db	2
   695  00FE3F  04                 	db	4
   696  00FE40  F8                 	db	248
   697  00FE41  04                 	db	4
   698  00FE42  02                 	db	2
   699  00FE43  01                 	db	1
   700  00FE44  00                 	db	0
   701  00FE45  00                 	db	0
   702  00FE46  C1                 	db	193
   703  00FE47  A1                 	db	161
   704  00FE48  91                 	db	145
   705  00FE49  89                 	db	137
   706  00FE4A  85                 	db	133
   707  00FE4B  83                 	db	131
   708  00FE4C  00                 	db	0
   709  00FE4D  00                 	db	0
   710  00FE4E  00                 	db	0
   711  00FE4F  00                 	db	0
   712  00FE50  00                 	db	0
   713  00FE51  00                 	db	0
   714  00FE52  00                 	db	0
   715  00FE53  00                 	db	0
   716  00FE54  00                 	db	0
   717  00FE55  00                 	db	0
   718  00FE56  00                 	db	0
   719  00FE57  00                 	db	0
   720  00FE58  00                 	db	0
   721  00FE59  00                 	db	0
   722  00FE5A  00                 	db	0
   723  00FE5B  00                 	db	0
   724  00FE5C  00                 	db	0
   725  00FE5D  00                 	db	0
   726  00FE5E  00                 	db	0
   727  00FE5F  00                 	db	0
   728  00FE60  00                 	db	0
   729  00FE61  00                 	db	0
   730  00FE62  00                 	db	0
   731  00FE63  00                 	db	0
   732  00FE64  00                 	db	0
   733  00FE65  00                 	db	0
   734  00FE66  00                 	db	0
   735  00FE67  00                 	db	0
   736  00FE68  00                 	db	0
   737  00FE69  00                 	db	0
   738  00FE6A  00                 	db	0
   739  00FE6B  00                 	db	0
   740  00FE6C  00                 	db	0
   741  00FE6D  00                 	db	0
   742  00FE6E  00                 	db	0
   743  00FE6F  00                 	db	0
   744  00FE70  00                 	db	0
   745  00FE71  00                 	db	0
   746  00FE72  00                 	db	0
   747  00FE73  00                 	db	0
   748  00FE74  00                 	db	0
   749  00FE75                     __end_of_texto:
   750                           	opt stack 0
   751  00FE75                     _digit:
   752                           	opt stack 0
   753  00FE75  1C                 	db	28
   754  00FE76  22                 	db	34
   755  00FE77  26                 	db	38
   756  00FE78  2A                 	db	42
   757  00FE79  32                 	db	50
   758  00FE7A  22                 	db	34
   759  00FE7B  1C                 	db	28
   760  00FE7C  00                 	db	0
   761  00FE7D  08                 	db	8
   762  00FE7E  18                 	db	24
   763  00FE7F  08                 	db	8
   764  00FE80  08                 	db	8
   765  00FE81  08                 	db	8
   766  00FE82  08                 	db	8
   767  00FE83  1C                 	db	28
   768  00FE84  00                 	db	0
   769  00FE85  18                 	db	24
   770  00FE86  24                 	db	36
   771  00FE87  04                 	db	4
   772  00FE88  08                 	db	8
   773  00FE89  10                 	db	16
   774  00FE8A  20                 	db	32
   775  00FE8B  3C                 	db	60
   776  00FE8C  00                 	db	0
   777  00FE8D  3C                 	db	60
   778  00FE8E  02                 	db	2
   779  00FE8F  02                 	db	2
   780  00FE90  1C                 	db	28
   781  00FE91  02                 	db	2
   782  00FE92  02                 	db	2
   783  00FE93  3C                 	db	60
   784  00FE94  00                 	db	0
   785  00FE95  04                 	db	4
   786  00FE96  0C                 	db	12
   787  00FE97  14                 	db	20
   788  00FE98  24                 	db	36
   789  00FE99  3E                 	db	62
   790  00FE9A  04                 	db	4
   791  00FE9B  04                 	db	4
   792  00FE9C  00                 	db	0
   793  00FE9D  3E                 	db	62
   794  00FE9E  20                 	db	32
   795  00FE9F  20                 	db	32
   796  00FEA0  3C                 	db	60
   797  00FEA1  02                 	db	2
   798  00FEA2  02                 	db	2
   799  00FEA3  3C                 	db	60
   800  00FEA4  00                 	db	0
   801  00FEA5  1C                 	db	28
   802  00FEA6  20                 	db	32
   803  00FEA7  20                 	db	32
   804  00FEA8  3C                 	db	60
   805  00FEA9  22                 	db	34
   806  00FEAA  22                 	db	34
   807  00FEAB  1C                 	db	28
   808  00FEAC  00                 	db	0
   809  00FEAD  3E                 	db	62
   810  00FEAE  02                 	db	2
   811  00FEAF  04                 	db	4
   812  00FEB0  08                 	db	8
   813  00FEB1  10                 	db	16
   814  00FEB2  20                 	db	32
   815  00FEB3  20                 	db	32
   816  00FEB4  00                 	db	0
   817  00FEB5  1C                 	db	28
   818  00FEB6  22                 	db	34
   819  00FEB7  22                 	db	34
   820  00FEB8  1C                 	db	28
   821  00FEB9  22                 	db	34
   822  00FEBA  22                 	db	34
   823  00FEBB  1C                 	db	28
   824  00FEBC  00                 	db	0
   825  00FEBD  1C                 	db	28
   826  00FEBE  22                 	db	34
   827  00FEBF  22                 	db	34
   828  00FEC0  1E                 	db	30
   829  00FEC1  02                 	db	2
   830  00FEC2  02                 	db	2
   831  00FEC3  1C                 	db	28
   832  00FEC4  00                 	db	0
   833  00FEC5  08                 	db	8
   834  00FEC6  14                 	db	20
   835  00FEC7  22                 	db	34
   836  00FEC8  3E                 	db	62
   837  00FEC9  22                 	db	34
   838  00FECA  22                 	db	34
   839  00FECB  22                 	db	34
   840  00FECC  00                 	db	0
   841  00FECD  3C                 	db	60
   842  00FECE  22                 	db	34
   843  00FECF  22                 	db	34
   844  00FED0  3C                 	db	60
   845  00FED1  22                 	db	34
   846  00FED2  22                 	db	34
   847  00FED3  3C                 	db	60
   848  00FED4  00                 	db	0
   849  00FED5  1E                 	db	30
   850  00FED6  20                 	db	32
   851  00FED7  20                 	db	32
   852  00FED8  20                 	db	32
   853  00FED9  20                 	db	32
   854  00FEDA  20                 	db	32
   855  00FEDB  1E                 	db	30
   856  00FEDC  00                 	db	0
   857  00FEDD  3C                 	db	60
   858  00FEDE  22                 	db	34
   859  00FEDF  22                 	db	34
   860  00FEE0  22                 	db	34
   861  00FEE1  22                 	db	34
   862  00FEE2  22                 	db	34
   863  00FEE3  3C                 	db	60
   864  00FEE4  00                 	db	0
   865  00FEE5  3E                 	db	62
   866  00FEE6  20                 	db	32
   867  00FEE7  20                 	db	32
   868  00FEE8  3C                 	db	60
   869  00FEE9  20                 	db	32
   870  00FEEA  20                 	db	32
   871  00FEEB  3E                 	db	62
   872  00FEEC  00                 	db	0
   873  00FEED  3E                 	db	62
   874  00FEEE  20                 	db	32
   875  00FEEF  20                 	db	32
   876  00FEF0  3C                 	db	60
   877  00FEF1  20                 	db	32
   878  00FEF2  20                 	db	32
   879  00FEF3  20                 	db	32
   880  00FEF4  00                 	db	0
   881  00FEF5  1C                 	db	28
   882  00FEF6  20                 	db	32
   883  00FEF7  20                 	db	32
   884  00FEF8  3E                 	db	62
   885  00FEF9  22                 	db	34
   886  00FEFA  22                 	db	34
   887  00FEFB  1C                 	db	28
   888  00FEFC  00                 	db	0
   889  00FEFD  22                 	db	34
   890  00FEFE  22                 	db	34
   891  00FEFF  22                 	db	34
   892  00FF00  3E                 	db	62
   893  00FF01  22                 	db	34
   894  00FF02  22                 	db	34
   895  00FF03  22                 	db	34
   896  00FF04  00                 	db	0
   897  00FF05  1C                 	db	28
   898  00FF06  08                 	db	8
   899  00FF07  08                 	db	8
   900  00FF08  08                 	db	8
   901  00FF09  08                 	db	8
   902  00FF0A  08                 	db	8
   903  00FF0B  1C                 	db	28
   904  00FF0C  00                 	db	0
   905  00FF0D  3E                 	db	62
   906  00FF0E  08                 	db	8
   907  00FF0F  08                 	db	8
   908  00FF10  08                 	db	8
   909  00FF11  08                 	db	8
   910  00FF12  28                 	db	40
   911  00FF13  18                 	db	24
   912  00FF14  00                 	db	0
   913  00FF15  20                 	db	32
   914  00FF16  24                 	db	36
   915  00FF17  28                 	db	40
   916  00FF18  30                 	db	48
   917  00FF19  28                 	db	40
   918  00FF1A  24                 	db	36
   919  00FF1B  22                 	db	34
   920  00FF1C  00                 	db	0
   921  00FF1D  20                 	db	32
   922  00FF1E  20                 	db	32
   923  00FF1F  20                 	db	32
   924  00FF20  20                 	db	32
   925  00FF21  20                 	db	32
   926  00FF22  20                 	db	32
   927  00FF23  3E                 	db	62
   928  00FF24  00                 	db	0
   929  00FF25  22                 	db	34
   930  00FF26  36                 	db	54
   931  00FF27  2A                 	db	42
   932  00FF28  22                 	db	34
   933  00FF29  22                 	db	34
   934  00FF2A  22                 	db	34
   935  00FF2B  22                 	db	34
   936  00FF2C  00                 	db	0
   937  00FF2D  22                 	db	34
   938  00FF2E  22                 	db	34
   939  00FF2F  32                 	db	50
   940  00FF30  2A                 	db	42
   941  00FF31  26                 	db	38
   942  00FF32  22                 	db	34
   943  00FF33  22                 	db	34
   944  00FF34  00                 	db	0
   945  00FF35  1C                 	db	28
   946  00FF36  22                 	db	34
   947  00FF37  22                 	db	34
   948  00FF38  22                 	db	34
   949  00FF39  22                 	db	34
   950  00FF3A  22                 	db	34
   951  00FF3B  1C                 	db	28
   952  00FF3C  00                 	db	0
   953  00FF3D  3C                 	db	60
   954  00FF3E  22                 	db	34
   955  00FF3F  22                 	db	34
   956  00FF40  3C                 	db	60
   957  00FF41  20                 	db	32
   958  00FF42  20                 	db	32
   959  00FF43  20                 	db	32
   960  00FF44  00                 	db	0
   961  00FF45  1C                 	db	28
   962  00FF46  22                 	db	34
   963  00FF47  22                 	db	34
   964  00FF48  22                 	db	34
   965  00FF49  22                 	db	34
   966  00FF4A  1C                 	db	28
   967  00FF4B  02                 	db	2
   968  00FF4C  00                 	db	0
   969  00FF4D  3C                 	db	60
   970  00FF4E  22                 	db	34
   971  00FF4F  22                 	db	34
   972  00FF50  3C                 	db	60
   973  00FF51  28                 	db	40
   974  00FF52  24                 	db	36
   975  00FF53  22                 	db	34
   976  00FF54  00                 	db	0
   977  00FF55  1E                 	db	30
   978  00FF56  20                 	db	32
   979  00FF57  20                 	db	32
   980  00FF58  1C                 	db	28
   981  00FF59  02                 	db	2
   982  00FF5A  02                 	db	2
   983  00FF5B  3C                 	db	60
   984  00FF5C  00                 	db	0
   985  00FF5D  3E                 	db	62
   986  00FF5E  08                 	db	8
   987  00FF5F  08                 	db	8
   988  00FF60  08                 	db	8
   989  00FF61  08                 	db	8
   990  00FF62  08                 	db	8
   991  00FF63  08                 	db	8
   992  00FF64  00                 	db	0
   993  00FF65  22                 	db	34
   994  00FF66  22                 	db	34
   995  00FF67  22                 	db	34
   996  00FF68  22                 	db	34
   997  00FF69  22                 	db	34
   998  00FF6A  22                 	db	34
   999  00FF6B  1C                 	db	28
  1000  00FF6C  00                 	db	0
  1001  00FF6D  22                 	db	34
  1002  00FF6E  22                 	db	34
  1003  00FF6F  22                 	db	34
  1004  00FF70  22                 	db	34
  1005  00FF71  22                 	db	34
  1006  00FF72  14                 	db	20
  1007  00FF73  08                 	db	8
  1008  00FF74  00                 	db	0
  1009  00FF75  00                 	db	0
  1010  00FF76  00                 	db	0
  1011  00FF77  00                 	db	0
  1012  00FF78  00                 	db	0
  1013  00FF79  00                 	db	0
  1014  00FF7A  00                 	db	0
  1015  00FF7B  00                 	db	0
  1016  00FF7C  00                 	db	0
  1017  00FF7D  00                 	db	0
  1018  00FF7E  00                 	db	0
  1019  00FF7F  00                 	db	0
  1020  00FF80  00                 	db	0
  1021  00FF81  00                 	db	0
  1022  00FF82  00                 	db	0
  1023  00FF83  00                 	db	0
  1024  00FF84  00                 	db	0
  1025  00FF85  22                 	db	34
  1026  00FF86  14                 	db	20
  1027  00FF87  08                 	db	8
  1028  00FF88  08                 	db	8
  1029  00FF89  08                 	db	8
  1030  00FF8A  08                 	db	8
  1031  00FF8B  08                 	db	8
  1032  00FF8C  00                 	db	0
  1033  00FF8D  3E                 	db	62
  1034  00FF8E  02                 	db	2
  1035  00FF8F  04                 	db	4
  1036  00FF90  08                 	db	8
  1037  00FF91  10                 	db	16
  1038  00FF92  20                 	db	32
  1039  00FF93  3E                 	db	62
  1040  00FF94  00                 	db	0
  1041  00FF95  00                 	db	0
  1042  00FF96  00                 	db	0
  1043  00FF97  00                 	db	0
  1044  00FF98  00                 	db	0
  1045  00FF99  00                 	db	0
  1046  00FF9A  00                 	db	0
  1047  00FF9B  00                 	db	0
  1048  00FF9C  00                 	db	0
  1049  00FF9D                     __end_of_digit:
  1050                           	opt stack 0
  1051  00FF9D                     _dpowers:
  1052                           	opt stack 0
  1053  00FF9D  0001               	dw	1
  1054  00FF9F  000A               	dw	10
  1055  00FFA1  0064               	dw	100
  1056  00FFA3  03E8               	dw	1000
  1057  00FFA5  2710               	dw	10000
  1058  00FFA7                     __end_of_dpowers:
  1059                           	opt stack 0
  1060  00FFA7                     STR_7:
  1061                           
  1062                           ; BSR set to: 0
  1063  00FFA7  50                 	db	80	;'P'
  1064  00FFA8  45                 	db	69	;'E'
  1065  00FFA9  53                 	db	83	;'S'
  1066  00FFAA  4F                 	db	79	;'O'
  1067  00FFAB  20                 	db	32
  1068  00FFAC  20                 	db	32
  1069  00FFAD  20                 	db	32
  1070  00FFAE  20                 	db	32
  1071  00FFAF  20                 	db	32
  1072  00FFB0  20                 	db	32
  1073  00FFB1  20                 	db	32
  1074  00FFB2  20                 	db	32
  1075  00FFB3  20                 	db	32
  1076  00FFB4  20                 	db	32
  1077  00FFB5  20                 	db	32
  1078  00FFB6  00                 	db	0
  1079  00FFB7                     STR_2:
  1080                           
  1081                           ; BSR set to: 0
  1082  00FFB7  52                 	db	82	;'R'
  1083  00FFB8  45                 	db	69	;'E'
  1084  00FFB9  51                 	db	81	;'Q'
  1085  00FFBA  55                 	db	85	;'U'
  1086  00FFBB  45                 	db	69	;'E'
  1087  00FFBC  52                 	db	82	;'R'
  1088  00FFBD  49                 	db	73	;'I'
  1089  00FFBE  44                 	db	68	;'D'
  1090  00FFBF  41                 	db	65	;'A'
  1091  00FFC0  20                 	db	32
  1092  00FFC1  20                 	db	32
  1093  00FFC2  20                 	db	32
  1094  00FFC3  20                 	db	32
  1095  00FFC4  20                 	db	32
  1096  00FFC5  20                 	db	32
  1097  00FFC6  00                 	db	0
  1098  00FFC7                     STR_1:
  1099                           
  1100                           ; BSR set to: 0
  1101  00FFC7  43                 	db	67	;'C'
  1102  00FFC8  41                 	db	65	;'A'
  1103  00FFC9  4C                 	db	76	;'L'
  1104  00FFCA  49                 	db	73	;'I'
  1105  00FFCB  42                 	db	66	;'B'
  1106  00FFCC  52                 	db	82	;'R'
  1107  00FFCD  41                 	db	65	;'A'
  1108  00FFCE  43                 	db	67	;'C'
  1109  00FFCF  49                 	db	73	;'I'
  1110  00FFD0  4F                 	db	79	;'O'
  1111  00FFD1  4E                 	db	78	;'N'
  1112  00FFD2  20                 	db	32
  1113  00FFD3  20                 	db	32
  1114  00FFD4  20                 	db	32
  1115  00FFD5  20                 	db	32
  1116  00FFD6  00                 	db	0
  1117  00FFD7                     STR_3:
  1118                           
  1119                           ; BSR set to: 0
  1120  00FFD7  57                 	db	87	;'W'
  1121  00FFD8  72                 	db	114	;'r'
  1122  00FFD9  69                 	db	105	;'i'
  1123  00FFDA  74                 	db	116	;'t'
  1124  00FFDB  65                 	db	101	;'e'
  1125  00FFDC  20                 	db	32
  1126  00FFDD  6F                 	db	111	;'o'
  1127  00FFDE  75                 	db	117	;'u'
  1128  00FFDF  74                 	db	116	;'t'
  1129  00FFE0  70                 	db	112	;'p'
  1130  00FFE1  75                 	db	117	;'u'
  1131  00FFE2  74                 	db	116	;'t'
  1132  00FFE3  0A                 	db	10
  1133  00FFE4  00                 	db	0
  1134  00FFE5                     STR_5:
  1135                           
  1136                           ; BSR set to: 0
  1137  00FFE5  57                 	db	87	;'W'
  1138  00FFE6  72                 	db	114	;'r'
  1139  00FFE7  69                 	db	105	;'i'
  1140  00FFE8  74                 	db	116	;'t'
  1141  00FFE9  65                 	db	101	;'e'
  1142  00FFEA  20                 	db	32
  1143  00FFEB  69                 	db	105	;'i'
  1144  00FFEC  6E                 	db	110	;'n'
  1145  00FFED  70                 	db	112	;'p'
  1146  00FFEE  75                 	db	117	;'u'
  1147  00FFEF  74                 	db	116	;'t'
  1148  00FFF0  0A                 	db	10
  1149  00FFF1  00                 	db	0
  1150  00FFF2                     STR_6:
  1151                           
  1152                           ; BSR set to: 0
  1153  00FFF2  49                 	db	73	;'I'
  1154  00FFF3  32                 	db	50	;'2'
  1155  00FFF4  43                 	db	67	;'C'
  1156  00FFF5  20                 	db	32
  1157  00FFF6  69                 	db	105	;'i'
  1158  00FFF7  73                 	db	115	;'s'
  1159  00FFF8  72                 	db	114	;'r'
  1160  00FFF9  0A                 	db	10
  1161  00FFFA  00                 	db	0
  1162  00FFFB                     STR_4:
  1163                           
  1164                           ; BSR set to: 0
  1165  00FFFB  25                 	db	37
  1166  00FFFC  64                 	db	100	;'d'
  1167  00FFFD  00                 	db	0
  1168                           
  1169                           ; #config settings
  1170  00FFFE  00                 	db	0	; dummy byte at the end
  1171  0000                     
  1172                           	psect	nvBANK0
  1173  0000E1                     __pnvBANK0:
  1174                           	opt stack 0
  1175  0000E1                     _I2C_InterruptHandler:
  1176                           	opt stack 0
  1177  0000E1                     	ds	2
  1178  0000E3                     _EUSART1_RxDefaultInterruptHandler:
  1179                           	opt stack 0
  1180  0000E3                     	ds	2
  1181  0000E5                     _EUSART1_TxDefaultInterruptHandler:
  1182                           	opt stack 0
  1183  0000E5                     	ds	2
  1184  0000E7                     _TMR2_InterruptHandler:
  1185                           	opt stack 0
  1186  0000E7                     	ds	2
  1187  0000E9                     _IOCB7_InterruptHandler:
  1188                           	opt stack 0
  1189  0000E9                     	ds	2
  1190  0000EB                     _IOCB6_InterruptHandler:
  1191                           	opt stack 0
  1192  0000EB                     	ds	2
  1193  0000ED                     _IOCB5_InterruptHandler:
  1194                           	opt stack 0
  1195  0000ED                     	ds	2
  1196  0000EF                     _IOCB4_InterruptHandler:
  1197                           	opt stack 0
  1198  0000EF                     	ds	2
  1199  0000F1                     _EUSART2_RxDefaultInterruptHandler:
  1200                           	opt stack 0
  1201  0000F1                     	ds	2
  1202  0000F3                     _EUSART2_TxDefaultInterruptHandler:
  1203                           	opt stack 0
  1204  0000F3                     	ds	2
  1205  0000F5                     _eusart1TxBufferRemaining:
  1206                           	opt stack 0
  1207  0000F5                     	ds	1
  1208  0000F6                     _eusart2TxBufferRemaining:
  1209                           	opt stack 0
  1210  0000F6                     	ds	1
  1211  0000                     _IOCBbits	set	3930
  1212  0000                     _WPUB	set	3931
  1213  0000                     _ANCON1	set	3932
  1214  0000                     _ANCON0	set	3933
  1215  0000                     _SSPCON2bits	set	4037
  1216  0000                     _SSPCON2	set	4037
  1217  0000                     _RCREG1	set	4014
  1218  0000                     _RCSTA1bits	set	4011
  1219  0000                     _TXREG1	set	4013
  1220  0000                     _TXSTA1bits	set	4012
  1221  0000                     _SPBRGH1	set	3965
  1222  0000                     _SPBRG1	set	4015
  1223  0000                     _TXSTA1	set	4012
  1224  0000                     _RCSTA1	set	4011
  1225  0000                     _BAUDCON1	set	4007
  1226  0000                     _SSPSTATbits	set	4039
  1227  0000                     _SSPBUF	set	4041
  1228  0000                     _SSPCON1bits	set	4038
  1229  0000                     _SSPADD	set	4040
  1230  0000                     _SSPCON1	set	4038
  1231  0000                     _SSPSTAT	set	4039
  1232  0000                     _TXREG2	set	3961
  1233  0000                     _TXSTA2bits	set	4026
  1234  0000                     _RCSTA2bits	set	4006
  1235  0000                     _RCREG2	set	3962
  1236  0000                     _SPBRGH2	set	3964
  1237  0000                     _SPBRG2	set	3963
  1238  0000                     _TXSTA2	set	4026
  1239  0000                     _RCSTA2	set	4006
  1240  0000                     _BAUDCON2	set	4025
  1241  0000                     _PIR3bits	set	4004
  1242  0000                     _PIE3bits	set	4003
  1243  0000                     _RCONbits	set	4048
  1244  0000                     _REFOCON	set	3994
  1245  0000                     _OSCTUNE	set	3995
  1246  0000                     _OSCCON2	set	4050
  1247  0000                     _OSCCON	set	4051
  1248  0000                     _T2CONbits	set	4042
  1249  0000                     _T2CON	set	4042
  1250  0000                     _PIE1bits	set	3997
  1251  0000                     _PIR1bits	set	3998
  1252  0000                     _TMR2	set	4044
  1253  0000                     _PR2	set	4043
  1254  0000                     _PORTBbits	set	3969
  1255  0000                     _INTCONbits	set	4082
  1256  0000                     _INTCON2bits	set	4081
  1257  0000                     _TRISD	set	3989
  1258  0000                     _TRISC	set	3988
  1259  0000                     _TRISB	set	3987
  1260  0000                     _TRISA	set	3986
  1261  0000                     _TRISE	set	3990
  1262  0000                     _LATC	set	3979
  1263  0000                     _LATB	set	3978
  1264  0000                     _LATA	set	3977
  1265  0000                     _LATD	set	3980
  1266  0000                     _LATE	set	3981
  1267  0000                     _LATA1	set	31817
  1268  0000                     _LATA0	set	31816
  1269  0000                     _LATA2	set	31818
  1270  0000                     _LATA3	set	31819
  1271  0000                     _LATB0	set	31824
  1272  0000                     _LATB1	set	31825
  1273  0000                     _LATB2	set	31826
  1274  0000                     _LATB3	set	31827
  1275                           
  1276                           	psect	cinit
  1277  00138A                     __pcinit:
  1278                           	opt stack 0
  1279  00138A                     start_initialization:
  1280                           	opt stack 0
  1281  00138A                     __initialization:
  1282                           	opt stack 0
  1283                           
  1284                           ; Initialize objects allocated to BANK0 (5 bytes)
  1285                           ; load TBLPTR registers with __pidataBANK0
  1286  00138A  0E18               	movlw	low __pidataBANK0
  1287  00138C  6EF6               	movwf	tblptrl,c
  1288  00138E  0E1B               	movlw	high __pidataBANK0
  1289  001390  6EF7               	movwf	tblptrh,c
  1290  001392  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1291  001394  6EF8               	movwf	tblptru,c
  1292  001396  EE00  F0F7         	lfsr	0,__pdataBANK0
  1293  00139A  EE10 F005          	lfsr	1,5
  1294  00139E                     copy_data0:
  1295  00139E  0009               	tblrd		*+
  1296  0013A0  CFF5 FFEE          	movff	tablat,postinc0
  1297  0013A4  50E5               	movf	postdec1,w,c
  1298  0013A6  50E1               	movf	fsr1l,w,c
  1299  0013A8  E1FA               	bnz	copy_data0
  1300                           
  1301                           ; Initialize objects allocated to COMRAM (2 bytes)
  1302                           ; load TBLPTR registers with __pidataCOMRAM
  1303  0013AA  0E22               	movlw	low __pidataCOMRAM
  1304  0013AC  6EF6               	movwf	tblptrl,c
  1305  0013AE  0E1B               	movlw	high __pidataCOMRAM
  1306  0013B0  6EF7               	movwf	tblptrh,c
  1307  0013B2  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1308  0013B4  6EF8               	movwf	tblptru,c
  1309  0013B6  0009               	tblrd		*+	;fetch initializer
  1310  0013B8  CFF5 F05C          	movff	tablat,__pdataCOMRAM
  1311  0013BC  0009               	tblrd		*+	;fetch initializer
  1312  0013BE  CFF5 F05D          	movff	tablat,__pdataCOMRAM+1
  1313                           
  1314                           ; Clear objects allocated to BANK1 (15 bytes)
  1315  0013C2  EE01  F000         	lfsr	0,__pbssBANK1
  1316  0013C6  0E0F               	movlw	15
  1317  0013C8                     clear_0:
  1318  0013C8  6AEE               	clrf	postinc0,c
  1319  0013CA  06E8               	decf	wreg,f,c
  1320  0013CC  E1FD               	bnz	clear_0
  1321                           
  1322                           ; Clear objects allocated to BANK0 (89 bytes)
  1323  0013CE  EE00  F060         	lfsr	0,__pbssBANK0
  1324  0013D2  0E59               	movlw	89
  1325  0013D4                     clear_1:
  1326  0013D4  6AEE               	clrf	postinc0,c
  1327  0013D6  06E8               	decf	wreg,f,c
  1328  0013D8  E1FD               	bnz	clear_1
  1329                           
  1330                           ; Clear objects allocated to COMRAM (19 bytes)
  1331  0013DA  EE00  F049         	lfsr	0,__pbssCOMRAM
  1332  0013DE  0E13               	movlw	19
  1333  0013E0                     clear_2:
  1334  0013E0  6AEE               	clrf	postinc0,c
  1335  0013E2  06E8               	decf	wreg,f,c
  1336  0013E4  E1FD               	bnz	clear_2
  1337  0013E6                     end_of_initialization:
  1338                           	opt stack 0
  1339  0013E6                     __end_of__initialization:
  1340                           	opt stack 0
  1341  0013E6  905E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1342  0013E8  925E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1343  0013EA  0100               	movlb	0
  1344  0013EC  EFBE  F008         	goto	_main	;jump to C main() function
  1345                           tblptru	equ	0xFF8
  1346                           tblptrh	equ	0xFF7
  1347                           tblptrl	equ	0xFF6
  1348                           tablat	equ	0xFF5
  1349                           postinc0	equ	0xFEE
  1350                           wreg	equ	0xFE8
  1351                           postdec1	equ	0xFE5
  1352                           fsr1l	equ	0xFE1
  1353                           
  1354                           	psect	bssCOMRAM
  1355  000049                     __pbssCOMRAM:
  1356                           	opt stack 0
  1357  000049                     TMR2_ISR@CountCallBack:
  1358                           	opt stack 0
  1359  000049                     	ds	2
  1360  00004B                     _printEnable:
  1361                           	opt stack 0
  1362  00004B                     	ds	1
  1363  00004C                     _i2c_transmit_byte:
  1364                           	opt stack 0
  1365  00004C                     	ds	1
  1366  00004D                     _i2c_received_byte:
  1367                           	opt stack 0
  1368  00004D                     	ds	1
  1369  00004E                     _k_count:
  1370                           	opt stack 0
  1371  00004E                     	ds	1
  1372  00004F                     _key:
  1373                           	opt stack 0
  1374  00004F                     	ds	1
  1375  000050                     _read_key:
  1376                           	opt stack 0
  1377  000050                     	ds	1
  1378  000051                     _q:
  1379                           	opt stack 0
  1380  000051                     	ds	1
  1381  000052                     _k:
  1382                           	opt stack 0
  1383  000052                     	ds	1
  1384  000053                     _uartBuff:
  1385                           	opt stack 0
  1386  000053                     	ds	1
  1387  000054                     _neg:
  1388                           	opt stack 0
  1389  000054                     	ds	1
  1390  000055                     _spiDummy:
  1391                           	opt stack 0
  1392  000055                     	ds	1
  1393  000056                     _i2c_addressUpper:
  1394                           	opt stack 0
  1395  000056                     	ds	1
  1396  000057                     _i2c_addressLow:
  1397                           	opt stack 0
  1398  000057                     	ds	1
  1399  000058                     _eusart1RxCount:
  1400                           	opt stack 0
  1401  000058                     	ds	1
  1402  000059                     _eusart1RxTail:
  1403                           	opt stack 0
  1404  000059                     	ds	1
  1405  00005A                     _eusart2RxCount:
  1406                           	opt stack 0
  1407  00005A                     	ds	1
  1408  00005B                     _eusart2RxTail:
  1409                           	opt stack 0
  1410  00005B                     	ds	1
  1411                           tblptru	equ	0xFF8
  1412                           tblptrh	equ	0xFF7
  1413                           tblptrl	equ	0xFF6
  1414                           tablat	equ	0xFF5
  1415                           postinc0	equ	0xFEE
  1416                           wreg	equ	0xFE8
  1417                           postdec1	equ	0xFE5
  1418                           fsr1l	equ	0xFE1
  1419                           
  1420                           	psect	dataCOMRAM
  1421  00005C                     __pdataCOMRAM:
  1422                           	opt stack 0
  1423  00005C                     _i2c_upperAddressFlag:
  1424                           	opt stack 0
  1425  00005C                     	ds	1
  1426  00005D                     _I2C_slaveWriteData:
  1427                           	opt stack 0
  1428  00005D                     	ds	1
  1429                           tblptru	equ	0xFF8
  1430                           tblptrh	equ	0xFF7
  1431                           tblptrl	equ	0xFF6
  1432                           tablat	equ	0xFF5
  1433                           postinc0	equ	0xFEE
  1434                           wreg	equ	0xFE8
  1435                           postdec1	equ	0xFE5
  1436                           fsr1l	equ	0xFE1
  1437                           
  1438                           	psect	bssBANK0
  1439  000060                     __pbssBANK0:
  1440                           	opt stack 0
  1441  000060                     _rxBuffer:
  1442                           	opt stack 0
  1443  000060                     	ds	15
  1444  00006F                     _eusart1RxBuffer:
  1445                           	opt stack 0
  1446  00006F                     	ds	8
  1447  000077                     _eusart1TxBuffer:
  1448                           	opt stack 0
  1449  000077                     	ds	8
  1450  00007F                     _eusart2RxBuffer:
  1451                           	opt stack 0
  1452  00007F                     	ds	8
  1453  000087                     _eusart2TxBuffer:
  1454                           	opt stack 0
  1455  000087                     	ds	8
  1456  00008F                     _key_text:
  1457                           	opt stack 0
  1458  00008F                     	ds	6
  1459  000095                     _text:
  1460                           	opt stack 0
  1461  000095                     	ds	6
  1462  00009B                     _indice:
  1463                           	opt stack 0
  1464  00009B                     	ds	4
  1465  00009F                     _eusart1RxHead:
  1466                           	opt stack 0
  1467  00009F                     	ds	1
  1468  0000A0                     _eusart1TxTail:
  1469                           	opt stack 0
  1470  0000A0                     	ds	1
  1471  0000A1                     _eusart1TxHead:
  1472                           	opt stack 0
  1473  0000A1                     	ds	1
  1474  0000A2                     _eusart2RxHead:
  1475                           	opt stack 0
  1476  0000A2                     	ds	1
  1477  0000A3                     _eusart2TxTail:
  1478                           	opt stack 0
  1479  0000A3                     	ds	1
  1480  0000A4                     _eusart2TxHead:
  1481                           	opt stack 0
  1482  0000A4                     	ds	1
  1483  0000A5                     _mensaje:
  1484                           	opt stack 0
  1485  0000A5                     	ds	20
  1486                           tblptru	equ	0xFF8
  1487                           tblptrh	equ	0xFF7
  1488                           tblptrl	equ	0xFF6
  1489                           tablat	equ	0xFF5
  1490                           postinc0	equ	0xFEE
  1491                           wreg	equ	0xFE8
  1492                           postdec1	equ	0xFE5
  1493                           fsr1l	equ	0xFE1
  1494                           
  1495                           	psect	dataBANK0
  1496  0000F7                     __pdataBANK0:
  1497                           	opt stack 0
  1498  0000F7                     lcd_number@F15340:
  1499                           	opt stack 0
  1500  0000F7                     	ds	5
  1501                           tblptru	equ	0xFF8
  1502                           tblptrh	equ	0xFF7
  1503                           tblptrl	equ	0xFF6
  1504                           tablat	equ	0xFF5
  1505                           postinc0	equ	0xFEE
  1506                           wreg	equ	0xFE8
  1507                           postdec1	equ	0xFE5
  1508                           fsr1l	equ	0xFE1
  1509                           
  1510                           	psect	bssBANK1
  1511  000100                     __pbssBANK1:
  1512                           	opt stack 0
  1513  000100                     _buff:
  1514                           	opt stack 0
  1515  000100                     	ds	15
  1516                           tblptru	equ	0xFF8
  1517                           tblptrh	equ	0xFF7
  1518                           tblptrl	equ	0xFF6
  1519                           tablat	equ	0xFF5
  1520                           postinc0	equ	0xFEE
  1521                           wreg	equ	0xFE8
  1522                           postdec1	equ	0xFE5
  1523                           fsr1l	equ	0xFE1
  1524                           
  1525                           	psect	cstackBANK0
  1526  0000B9                     __pcstackBANK0:
  1527                           	opt stack 0
  1528  0000B9                     ?___wmul:
  1529                           	opt stack 0
  1530  0000B9                     putch@data:
  1531                           	opt stack 0
  1532  0000B9                     lcd_write_bus@data:
  1533                           	opt stack 0
  1534  0000B9                     IOCB4_SetInterruptHandler@InterruptHandler:
  1535                           	opt stack 0
  1536  0000B9                     IOCB5_SetInterruptHandler@InterruptHandler:
  1537                           	opt stack 0
  1538  0000B9                     IOCB6_SetInterruptHandler@InterruptHandler:
  1539                           	opt stack 0
  1540  0000B9                     IOCB7_SetInterruptHandler@InterruptHandler:
  1541                           	opt stack 0
  1542  0000B9                     TMR2_SetInterruptHandler@InterruptHandler:
  1543                           	opt stack 0
  1544  0000B9                     EUSART2_SetTxInterruptHandler@interruptHandler:
  1545                           	opt stack 0
  1546  0000B9                     EUSART2_SetRxInterruptHandler@interruptHandler:
  1547                           	opt stack 0
  1548  0000B9                     EUSART1_SetTxInterruptHandler@interruptHandler:
  1549                           	opt stack 0
  1550  0000B9                     EUSART1_SetRxInterruptHandler@interruptHandler:
  1551                           	opt stack 0
  1552  0000B9                     I2C_SetInterruptHandler@interruptHandler:
  1553                           	opt stack 0
  1554  0000B9                     bitRead@number:
  1555                           	opt stack 0
  1556  0000B9                     ___wmul@multiplier:
  1557                           	opt stack 0
  1558  0000B9                     strcpy@to:
  1559                           	opt stack 0
  1560                           
  1561                           ; 2 bytes @ 0x0
  1562  0000B9                     	ds	1
  1563  0000BA                     lcd_write_command@cmd:
  1564                           	opt stack 0
  1565                           
  1566                           ; 1 bytes @ 0x1
  1567  0000BA                     	ds	1
  1568  0000BB                     ??_lcd_init:
  1569  0000BB                     EUSART2_Initialize@drop:
  1570                           	opt stack 0
  1571  0000BB                     bitRead@position:
  1572                           	opt stack 0
  1573  0000BB                     lcd_set_address@x1:
  1574                           	opt stack 0
  1575  0000BB                     ___wmul@multiplicand:
  1576                           	opt stack 0
  1577  0000BB                     strcpy@from:
  1578                           	opt stack 0
  1579                           
  1580                           ; 2 bytes @ 0x2
  1581  0000BB                     	ds	1
  1582  0000BC                     
  1583                           ; 1 bytes @ 0x3
  1584  0000BC                     	ds	1
  1585  0000BD                     ??_bitRead:
  1586  0000BD                     lcd_set_address@y1:
  1587                           	opt stack 0
  1588  0000BD                     ___wmul@product:
  1589                           	opt stack 0
  1590  0000BD                     strcpy@cp:
  1591                           	opt stack 0
  1592                           
  1593                           ; 2 bytes @ 0x4
  1594  0000BD                     	ds	2
  1595  0000BF                     lcd_set_address@x2:
  1596                           	opt stack 0
  1597                           
  1598                           ; 2 bytes @ 0x6
  1599  0000BF                     	ds	2
  1600  0000C1                     lcd_set_address@y2:
  1601                           	opt stack 0
  1602                           
  1603                           ; 2 bytes @ 0x8
  1604  0000C1                     	ds	2
  1605  0000C3                     lcd_set_background@color:
  1606                           	opt stack 0
  1607  0000C3                     lcd_pix@x:
  1608                           	opt stack 0
  1609                           
  1610                           ; 2 bytes @ 0xA
  1611  0000C3                     	ds	2
  1612  0000C5                     lcd_set_background@i:
  1613                           	opt stack 0
  1614  0000C5                     lcd_pix@y:
  1615                           	opt stack 0
  1616                           
  1617                           ; 2 bytes @ 0xC
  1618  0000C5                     	ds	2
  1619  0000C7                     lcd_pix@c:
  1620                           	opt stack 0
  1621  0000C7                     lcd_set_background@j:
  1622                           	opt stack 0
  1623                           
  1624                           ; 2 bytes @ 0xE
  1625  0000C7                     	ds	1
  1626  0000C8                     lcd_pix@size:
  1627                           	opt stack 0
  1628                           
  1629                           ; 1 bytes @ 0xF
  1630  0000C8                     	ds	1
  1631  0000C9                     ??_lcd_pix:
  1632                           
  1633                           ; 1 bytes @ 0x10
  1634  0000C9                     	ds	4
  1635  0000CD                     lcd_pix@n1:
  1636                           	opt stack 0
  1637                           
  1638                           ; 1 bytes @ 0x14
  1639  0000CD                     	ds	1
  1640  0000CE                     lcd_pix@i:
  1641                           	opt stack 0
  1642                           
  1643                           ; 2 bytes @ 0x15
  1644  0000CE                     	ds	2
  1645  0000D0                     lcd_point@place:
  1646                           	opt stack 0
  1647  0000D0                     lcd_text@msjPtr:
  1648                           	opt stack 0
  1649                           
  1650                           ; 2 bytes @ 0x17
  1651  0000D0                     	ds	2
  1652  0000D2                     ??_lcd_text:
  1653                           
  1654                           ; 1 bytes @ 0x19
  1655  0000D2                     	ds	5
  1656  0000D7                     _lcd_text$2702:
  1657                           	opt stack 0
  1658                           
  1659                           ; 2 bytes @ 0x1E
  1660  0000D7                     	ds	2
  1661  0000D9                     lcd_text@renglon:
  1662                           	opt stack 0
  1663                           
  1664                           ; 1 bytes @ 0x20
  1665  0000D9                     	ds	1
  1666  0000DA                     lcd_text@i:
  1667                           	opt stack 0
  1668                           
  1669                           ; 2 bytes @ 0x21
  1670  0000DA                     	ds	2
  1671  0000DC                     lcd_text@j:
  1672                           	opt stack 0
  1673                           
  1674                           ; 2 bytes @ 0x23
  1675  0000DC                     	ds	2
  1676  0000DE                     lcd_text@k:
  1677                           	opt stack 0
  1678                           
  1679                           ; 2 bytes @ 0x25
  1680  0000DE                     	ds	2
  1681  0000E0                     ??_main:
  1682                           
  1683                           ; 1 bytes @ 0x27
  1684  0000E0                     	ds	1
  1685                           tblptru	equ	0xFF8
  1686                           tblptrh	equ	0xFF7
  1687                           tblptrl	equ	0xFF6
  1688                           tablat	equ	0xFF5
  1689                           postinc0	equ	0xFEE
  1690                           wreg	equ	0xFE8
  1691                           postdec1	equ	0xFE5
  1692                           fsr1l	equ	0xFE1
  1693                           
  1694                           	psect	cstackCOMRAM
  1695  000001                     __pcstackCOMRAM:
  1696                           	opt stack 0
  1697  000001                     ?___awdiv:
  1698                           	opt stack 0
  1699  000001                     ?___lwdiv:
  1700                           	opt stack 0
  1701  000001                     ?i2___wmul:
  1702                           	opt stack 0
  1703  000001                     I2C_StatusCallback@i2c_bus_state:
  1704                           	opt stack 0
  1705  000001                     save_uart_data@index:
  1706                           	opt stack 0
  1707  000001                     i2putch@data:
  1708                           	opt stack 0
  1709  000001                     i2lcd_write_bus@data:
  1710                           	opt stack 0
  1711  000001                     ___awdiv@dividend:
  1712                           	opt stack 0
  1713  000001                     ___lwdiv@dividend:
  1714                           	opt stack 0
  1715  000001                     i2bitRead@number:
  1716                           	opt stack 0
  1717  000001                     i2___wmul@multiplier:
  1718                           	opt stack 0
  1719  000001                     i2strcpy@to:
  1720                           	opt stack 0
  1721                           
  1722                           ; 2 bytes @ 0x0
  1723  000001                     	ds	1
  1724  000002                     I2C_ISR@i2c_data:
  1725                           	opt stack 0
  1726  000002                     save_uart_data@inData:
  1727                           	opt stack 0
  1728  000002                     i2lcd_write_command@cmd:
  1729                           	opt stack 0
  1730                           
  1731                           ; 1 bytes @ 0x1
  1732  000002                     	ds	1
  1733  000003                     ___awdiv@divisor:
  1734                           	opt stack 0
  1735  000003                     ___lwdiv@divisor:
  1736                           	opt stack 0
  1737  000003                     i2bitRead@position:
  1738                           	opt stack 0
  1739  000003                     i2lcd_set_address@x1:
  1740                           	opt stack 0
  1741  000003                     i2___wmul@multiplicand:
  1742                           	opt stack 0
  1743  000003                     i2strcpy@from:
  1744                           	opt stack 0
  1745                           
  1746                           ; 2 bytes @ 0x2
  1747  000003                     	ds	2
  1748  000005                     ??i2_bitRead:
  1749  000005                     ___awdiv@counter:
  1750                           	opt stack 0
  1751  000005                     ___lwdiv@quotient:
  1752                           	opt stack 0
  1753  000005                     i2lcd_set_address@y1:
  1754                           	opt stack 0
  1755  000005                     i2___wmul@product:
  1756                           	opt stack 0
  1757  000005                     i2strcpy@cp:
  1758                           	opt stack 0
  1759                           
  1760                           ; 2 bytes @ 0x4
  1761  000005                     	ds	1
  1762  000006                     ___awdiv@sign:
  1763                           	opt stack 0
  1764                           
  1765                           ; 1 bytes @ 0x5
  1766  000006                     	ds	1
  1767  000007                     ___lwdiv@counter:
  1768                           	opt stack 0
  1769  000007                     ___awdiv@quotient:
  1770                           	opt stack 0
  1771  000007                     i2lcd_set_address@x2:
  1772                           	opt stack 0
  1773                           
  1774                           ; 2 bytes @ 0x6
  1775  000007                     	ds	1
  1776  000008                     ?___lwmod:
  1777                           	opt stack 0
  1778  000008                     ___lwmod@dividend:
  1779                           	opt stack 0
  1780                           
  1781                           ; 2 bytes @ 0x7
  1782  000008                     	ds	1
  1783  000009                     i2lcd_set_address@y2:
  1784                           	opt stack 0
  1785                           
  1786                           ; 2 bytes @ 0x8
  1787  000009                     	ds	1
  1788  00000A                     ___lwmod@divisor:
  1789                           	opt stack 0
  1790                           
  1791                           ; 2 bytes @ 0x9
  1792  00000A                     	ds	1
  1793  00000B                     lcd_pix_color@x:
  1794                           	opt stack 0
  1795  00000B                     i2lcd_pix@x:
  1796                           	opt stack 0
  1797                           
  1798                           ; 2 bytes @ 0xA
  1799  00000B                     	ds	1
  1800  00000C                     ___lwmod@counter:
  1801                           	opt stack 0
  1802                           
  1803                           ; 1 bytes @ 0xB
  1804  00000C                     	ds	1
  1805  00000D                     ?_printf:
  1806                           	opt stack 0
  1807  00000D                     lcd_pix_color@y:
  1808                           	opt stack 0
  1809  00000D                     printf@f:
  1810                           	opt stack 0
  1811  00000D                     i2lcd_pix@y:
  1812                           	opt stack 0
  1813                           
  1814                           ; 2 bytes @ 0xC
  1815  00000D                     	ds	2
  1816  00000F                     lcd_pix_color@c:
  1817                           	opt stack 0
  1818  00000F                     i2lcd_pix@c:
  1819                           	opt stack 0
  1820                           
  1821                           ; 1 bytes @ 0xE
  1822  00000F                     	ds	1
  1823  000010                     lcd_pix_color@size:
  1824                           	opt stack 0
  1825  000010                     i2lcd_pix@size:
  1826                           	opt stack 0
  1827                           
  1828                           ; 1 bytes @ 0xF
  1829  000010                     	ds	1
  1830  000011                     ??_printf:
  1831  000011                     ??_lcd_pix_color:
  1832  000011                     ??i2_lcd_pix:
  1833                           
  1834                           ; 1 bytes @ 0x10
  1835  000011                     	ds	1
  1836  000012                     printf@ap:
  1837                           	opt stack 0
  1838                           
  1839                           ; 2 bytes @ 0x11
  1840  000012                     	ds	2
  1841  000014                     printf@flag:
  1842                           	opt stack 0
  1843                           
  1844                           ; 1 bytes @ 0x13
  1845  000014                     	ds	1
  1846  000015                     lcd_pix_color@n1:
  1847                           	opt stack 0
  1848  000015                     printf@prec:
  1849                           	opt stack 0
  1850  000015                     i2lcd_pix@n1:
  1851                           	opt stack 0
  1852                           
  1853                           ; 1 bytes @ 0x14
  1854  000015                     	ds	1
  1855  000016                     lcd_pix_color@i:
  1856                           	opt stack 0
  1857  000016                     printf@val:
  1858                           	opt stack 0
  1859  000016                     i2lcd_pix@i:
  1860                           	opt stack 0
  1861                           
  1862                           ; 2 bytes @ 0x15
  1863  000016                     	ds	2
  1864  000018                     lcd_sign@enable:
  1865                           	opt stack 0
  1866  000018                     printf@c:
  1867                           	opt stack 0
  1868  000018                     i2lcd_point@place:
  1869                           	opt stack 0
  1870  000018                     lcd_text_color@msjPtr:
  1871                           	opt stack 0
  1872  000018                     i2lcd_text@msjPtr:
  1873                           	opt stack 0
  1874                           
  1875                           ; 2 bytes @ 0x17
  1876  000018                     	ds	1
  1877  000019                     I2C_StatusCallback2@i2c_bus_state:
  1878                           	opt stack 0
  1879  000019                     lcd_number@number:
  1880                           	opt stack 0
  1881                           
  1882                           ; 2 bytes @ 0x18
  1883  000019                     	ds	1
  1884  00001A                     ??_lcd_text_color:
  1885  00001A                     ??i2_lcd_text:
  1886  00001A                     I2C_custom_isr@i2c_data:
  1887                           	opt stack 0
  1888                           
  1889                           ; 1 bytes @ 0x19
  1890  00001A                     	ds	1
  1891  00001B                     ??_lcd_number:
  1892                           
  1893                           ; 1 bytes @ 0x1A
  1894  00001B                     	ds	4
  1895  00001F                     _lcd_text_color$2776:
  1896                           	opt stack 0
  1897  00001F                     i2_lcd_text$2777:
  1898                           	opt stack 0
  1899                           
  1900                           ; 2 bytes @ 0x1E
  1901  00001F                     	ds	1
  1902  000020                     lcd_number@index:
  1903                           	opt stack 0
  1904                           
  1905                           ; 5 bytes @ 0x1F
  1906  000020                     	ds	1
  1907  000021                     lcd_text_color@renglon:
  1908                           	opt stack 0
  1909  000021                     i2lcd_text@renglon:
  1910                           	opt stack 0
  1911                           
  1912                           ; 1 bytes @ 0x20
  1913  000021                     	ds	1
  1914  000022                     lcd_text_color@i:
  1915                           	opt stack 0
  1916  000022                     i2lcd_text@i:
  1917                           	opt stack 0
  1918                           
  1919                           ; 2 bytes @ 0x21
  1920  000022                     	ds	2
  1921  000024                     lcd_text_color@j:
  1922                           	opt stack 0
  1923  000024                     i2lcd_text@j:
  1924                           	opt stack 0
  1925                           
  1926                           ; 2 bytes @ 0x23
  1927  000024                     	ds	1
  1928  000025                     lcd_number@i:
  1929                           	opt stack 0
  1930                           
  1931                           ; 1 bytes @ 0x24
  1932  000025                     	ds	1
  1933  000026                     lcd_number@j:
  1934                           	opt stack 0
  1935  000026                     lcd_text_color@k:
  1936                           	opt stack 0
  1937  000026                     i2lcd_text@k:
  1938                           	opt stack 0
  1939                           
  1940                           ; 2 bytes @ 0x25
  1941  000026                     	ds	1
  1942  000027                     lcd_number@k:
  1943                           	opt stack 0
  1944                           
  1945                           ; 1 bytes @ 0x26
  1946  000027                     	ds	1
  1947  000028                     ??_tmr2_custom_isr:
  1948                           
  1949                           ; 1 bytes @ 0x27
  1950  000028                     	ds	5
  1951  00002D                     tmr2_custom_isr@j:
  1952                           	opt stack 0
  1953                           
  1954                           ; 1 bytes @ 0x2C
  1955  00002D                     	ds	1
  1956  00002E                     tmr2_custom_isr@j_1912:
  1957                           	opt stack 0
  1958                           
  1959                           ; 1 bytes @ 0x2D
  1960  00002E                     	ds	1
  1961  00002F                     tmr2_custom_isr@eoc:
  1962                           	opt stack 0
  1963                           
  1964                           ; 1 bytes @ 0x2E
  1965  00002F                     	ds	1
  1966  000030                     tmr2_custom_isr@i:
  1967                           	opt stack 0
  1968                           
  1969                           ; 1 bytes @ 0x2F
  1970  000030                     	ds	1
  1971  000031                     tmr2_custom_isr@peso:
  1972                           	opt stack 0
  1973                           
  1974                           ; 2 bytes @ 0x30
  1975  000031                     	ds	2
  1976  000033                     tmr2_custom_isr@i_1909:
  1977                           	opt stack 0
  1978                           
  1979                           ; 1 bytes @ 0x32
  1980  000033                     	ds	1
  1981  000034                     tmr2_custom_isr@i_1911:
  1982                           	opt stack 0
  1983                           
  1984                           ; 1 bytes @ 0x33
  1985  000034                     	ds	1
  1986  000035                     tmr2_custom_isr@multiplicador:
  1987                           	opt stack 0
  1988                           
  1989                           ; 2 bytes @ 0x34
  1990  000035                     	ds	2
  1991  000037                     ??_INTERRUPT_InterruptManager:
  1992                           
  1993                           ; 1 bytes @ 0x36
  1994  000037                     	ds	18
  1995                           tblptru	equ	0xFF8
  1996                           tblptrh	equ	0xFF7
  1997                           tblptrl	equ	0xFF6
  1998                           tablat	equ	0xFF5
  1999                           postinc0	equ	0xFEE
  2000                           wreg	equ	0xFE8
  2001                           postdec1	equ	0xFE5
  2002                           fsr1l	equ	0xFE1
  2003                           
  2004 ;;
  2005 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2006 ;;
  2007 ;; *************** function _main *****************
  2008 ;; Defined at:
  2009 ;;		line 372 in file "main.c"
  2010 ;; Parameters:    Size  Location     Type
  2011 ;;		None
  2012 ;; Auto vars:     Size  Location     Type
  2013 ;;		None
  2014 ;; Return value:  Size  Location     Type
  2015 ;;                  1    wreg      void 
  2016 ;; Registers used:
  2017 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2018 ;; Tracked objects:
  2019 ;;		On entry : 0/0
  2020 ;;		On exit  : 0/0
  2021 ;;		Unchanged: 0/0
  2022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2024 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2025 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2026 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2027 ;;Total ram usage:        1 bytes
  2028 ;; Hardware stack levels required when called:   15
  2029 ;; This function calls:
  2030 ;;		_EUSART2_SetRxInterruptHandler
  2031 ;;		_I2C_SetInterruptHandler
  2032 ;;		_SYSTEM_Initialize
  2033 ;;		_TMR2_SetInterruptHandler
  2034 ;;		_lcd_init
  2035 ;;		_lcd_point
  2036 ;;		_lcd_set_background
  2037 ;;		_lcd_text
  2038 ;;		_putch
  2039 ;;		_strcpy
  2040 ;; This function is called by:
  2041 ;;		Startup code after reset
  2042 ;; This function uses a non-reentrant model
  2043 ;;
  2044                           
  2045                           	psect	text0
  2046  00117C                     __ptext0:
  2047                           	opt stack 0
  2048  00117C                     _main:
  2049                           	opt stack 16
  2050                           
  2051                           ;main.c: 374: SYSTEM_Initialize();
  2052                           
  2053                           ;incstack = 0
  2054  00117C  ECE9  F00C         	call	_SYSTEM_Initialize	;wreg free
  2055                           
  2056                           ;main.c: 375: _delay((unsigned long)((1)*(16000000/4000.0)));
  2057  001180  0E06               	movlw	6
  2058  001182  0100               	movlb	0	; () banked
  2059  001184  6FE0               	movwf	??_main& (0+255),b
  2060  001186  0E30               	movlw	48
  2061  001188                     u3607:
  2062  001188  2EE8               	decfsz	wreg,f,c
  2063  00118A  D7FE               	bra	u3607
  2064  00118C  2FE0               	decfsz	??_main& (0+255),f,b
  2065  00118E  D7FC               	bra	u3607
  2066  001190  F000               	nop	
  2067                           
  2068                           ;main.c: 377: TMR2_SetInterruptHandler(tmr2_custom_isr);
  2069  001192  0E3C               	movlw	low _tmr2_custom_isr
  2070  001194  0100               	movlb	0	; () banked
  2071  001196  6FB9               	movwf	TMR2_SetInterruptHandler@InterruptHandler& (0+255),b
  2072  001198  0E01               	movlw	high _tmr2_custom_isr
  2073  00119A  6FBA               	movwf	(TMR2_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  2074  00119C  EC52  F00D         	call	_TMR2_SetInterruptHandler	;wreg free
  2075                           
  2076                           ;main.c: 378: EUSART2_SetRxInterruptHandler(uart2_rx_custom_isr);
  2077  0011A0  0E7A               	movlw	low _uart2_rx_custom_isr
  2078  0011A2  0100               	movlb	0	; () banked
  2079  0011A4  6FB9               	movwf	EUSART2_SetRxInterruptHandler@interruptHandler& (0+255),b
  2080  0011A6  0E18               	movlw	high _uart2_rx_custom_isr
  2081  0011A8  6FBA               	movwf	(EUSART2_SetRxInterruptHandler@interruptHandler+1)& (0+255),b
  2082  0011AA  EC75  F00D         	call	_EUSART2_SetRxInterruptHandler	;wreg free
  2083                           
  2084                           ;main.c: 389: I2C_SetInterruptHandler(I2C_custom_isr);
  2085  0011AE  0E4A               	movlw	low _I2C_custom_isr
  2086  0011B0  0100               	movlb	0	; () banked
  2087  0011B2  6FB9               	movwf	I2C_SetInterruptHandler@interruptHandler& (0+255),b
  2088  0011B4  0E15               	movlw	high _I2C_custom_isr
  2089  0011B6  6FBA               	movwf	(I2C_SetInterruptHandler@interruptHandler+1)& (0+255),b
  2090  0011B8  EC6B  F00D         	call	_I2C_SetInterruptHandler	;wreg free
  2091                           
  2092                           ;main.c: 391: (INTCONbits.GIE = 1);
  2093  0011BC  8EF2               	bsf	intcon,7,c	;volatile
  2094                           
  2095                           ;main.c: 397: (INTCONbits.PEIE = 1);
  2096  0011BE  8CF2               	bsf	intcon,6,c	;volatile
  2097                           
  2098                           ;main.c: 400: lcd_init();
  2099  0011C0  ECCA  F004         	call	_lcd_init	;wreg free
  2100                           
  2101                           ;main.c: 401: lcd_set_background(0xFFFF);
  2102  0011C4  0EFF               	movlw	255
  2103  0011C6  0100               	movlb	0	; () banked
  2104  0011C8  6FC4               	movwf	(lcd_set_background@color+1)& (0+255),b
  2105  0011CA  69C3               	setf	lcd_set_background@color& (0+255),b
  2106  0011CC  EC8A  F009         	call	_lcd_set_background	;wreg free
  2107                           
  2108                           ;main.c: 402: strcpy(mensaje,"PESO           ");
  2109  0011D0  0EA5               	movlw	low _mensaje
  2110  0011D2  0100               	movlb	0	; () banked
  2111  0011D4  6FB9               	movwf	strcpy@to& (0+255),b
  2112  0011D6  0E00               	movlw	high _mensaje
  2113  0011D8  6FBA               	movwf	(strcpy@to+1)& (0+255),b
  2114  0011DA  0EA7               	movlw	low STR_7
  2115  0011DC  6FBB               	movwf	strcpy@from& (0+255),b
  2116  0011DE  0EFF               	movlw	high STR_7
  2117  0011E0  6FBC               	movwf	(strcpy@from+1)& (0+255),b
  2118  0011E2  EC96  F00B         	call	_strcpy	;wreg free
  2119                           
  2120                           ;main.c: 403: lcd_text(1,mensaje);
  2121  0011E6  0EA5               	movlw	low _mensaje
  2122  0011E8  0100               	movlb	0	; () banked
  2123  0011EA  6FD0               	movwf	lcd_text@msjPtr& (0+255),b
  2124  0011EC  0E00               	movlw	high _mensaje
  2125  0011EE  6FD1               	movwf	(lcd_text@msjPtr+1)& (0+255),b
  2126  0011F0  0E01               	movlw	1
  2127  0011F2  EC86  F001         	call	_lcd_text
  2128                           
  2129                           ;main.c: 404: lcd_point(1);
  2130  0011F6  0E01               	movlw	1
  2131  0011F8  EC05  F008         	call	_lcd_point
  2132                           
  2133                           ;main.c: 405: putch(2);
  2134  0011FC  0E02               	movlw	2
  2135  0011FE  EC31  F00D         	call	_putch
  2136                           
  2137                           ;main.c: 406: putch('R');
  2138  001202  0E52               	movlw	82
  2139  001204  EC31  F00D         	call	_putch
  2140                           
  2141                           ;main.c: 407: putch('\n');
  2142  001208  0E0A               	movlw	10
  2143  00120A  EC31  F00D         	call	_putch
  2144                           
  2145                           ;main.c: 408: printEnable = 1;
  2146  00120E  0E01               	movlw	1
  2147  001210  6E4B               	movwf	_printEnable,c
  2148  001212                     l774:
  2149  001212  D7FF               	goto	l774
  2150  001214                     __end_of_main:
  2151                           	opt stack 0
  2152                           tblptru	equ	0xFF8
  2153                           tblptrh	equ	0xFF7
  2154                           tblptrl	equ	0xFF6
  2155                           tablat	equ	0xFF5
  2156                           intcon	equ	0xFF2
  2157                           postinc0	equ	0xFEE
  2158                           wreg	equ	0xFE8
  2159                           postdec1	equ	0xFE5
  2160                           fsr1l	equ	0xFE1
  2161                           
  2162 ;; *************** function _strcpy *****************
  2163 ;; Defined at:
  2164 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcpy.c"
  2165 ;; Parameters:    Size  Location     Type
  2166 ;;  to              2    0[BANK0 ] PTR unsigned char 
  2167 ;;		 -> mensaje(20), 
  2168 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  2169 ;;		 -> STR_7(16), STR_2(16), STR_1(16), 
  2170 ;; Auto vars:     Size  Location     Type
  2171 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  2172 ;;		 -> mensaje(20), 
  2173 ;; Return value:  Size  Location     Type
  2174 ;;                  2    0[BANK0 ] PTR unsigned char 
  2175 ;; Registers used:
  2176 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  2177 ;; Tracked objects:
  2178 ;;		On entry : 0/0
  2179 ;;		On exit  : 0/0
  2180 ;;		Unchanged: 0/0
  2181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2182 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2183 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2184 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2185 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2186 ;;Total ram usage:        6 bytes
  2187 ;; Hardware stack levels used:    1
  2188 ;; Hardware stack levels required when called:   10
  2189 ;; This function calls:
  2190 ;;		Nothing
  2191 ;; This function is called by:
  2192 ;;		_main
  2193 ;; This function uses a non-reentrant model
  2194 ;;
  2195                           
  2196                           	psect	text1
  2197  00172C                     __ptext1:
  2198                           	opt stack 0
  2199  00172C                     _strcpy:
  2200                           	opt stack 20
  2201                           
  2202                           ;incstack = 0
  2203  00172C  C0B9  F0BD         	movff	strcpy@to,strcpy@cp
  2204  001730  C0BA  F0BE         	movff	strcpy@to+1,strcpy@cp+1
  2205  001734  D005               	goto	l1498
  2206  001736  0100               	movlb	0	; () banked
  2207  001738  4BBD               	infsnz	strcpy@cp& (0+255),f,b
  2208  00173A  2BBE               	incf	(strcpy@cp+1)& (0+255),f,b
  2209  00173C  4BBB               	infsnz	strcpy@from& (0+255),f,b
  2210  00173E  2BBC               	incf	(strcpy@from+1)& (0+255),f,b
  2211  001740                     l1498:
  2212                           
  2213                           ; BSR set to: 0
  2214  001740  C0BB  FFF6         	movff	strcpy@from,tblptrl
  2215  001744  C0BC  FFF7         	movff	strcpy@from+1,tblptrh
  2216  001748                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2217  001748  6AF8               	clrf	tblptru,c
  2218  00174A                     	endif
  2219  00174A                     	if	0	;tblptru may be non-zero
  2220  00174A                     	endif
  2221  00174A  C0BD  FFD9         	movff	strcpy@cp,fsr2l
  2222  00174E  C0BE  FFDA         	movff	strcpy@cp+1,fsr2h
  2223  001752  0008               	tblrd		*
  2224  001754  CFF5 FFDF          	movff	tablat,indf2
  2225  001758  50DF               	movf	indf2,w,c
  2226  00175A  B4D8               	btfsc	status,2,c
  2227  00175C  0012               	return	
  2228  00175E  D7EB               	goto	l1499
  2229  001760                     __end_of_strcpy:
  2230                           	opt stack 0
  2231                           tblptru	equ	0xFF8
  2232                           tblptrh	equ	0xFF7
  2233                           tblptrl	equ	0xFF6
  2234                           tablat	equ	0xFF5
  2235                           intcon	equ	0xFF2
  2236                           postinc0	equ	0xFEE
  2237                           wreg	equ	0xFE8
  2238                           postdec1	equ	0xFE5
  2239                           fsr1l	equ	0xFE1
  2240                           indf2	equ	0xFDF
  2241                           fsr2h	equ	0xFDA
  2242                           fsr2l	equ	0xFD9
  2243                           status	equ	0xFD8
  2244                           
  2245 ;; *************** function _putch *****************
  2246 ;; Defined at:
  2247 ;;		line 69 in file "main.c"
  2248 ;; Parameters:    Size  Location     Type
  2249 ;;  data            1    wreg     unsigned char 
  2250 ;; Auto vars:     Size  Location     Type
  2251 ;;  data            1    0[BANK0 ] unsigned char 
  2252 ;; Return value:  Size  Location     Type
  2253 ;;                  1    wreg      void 
  2254 ;; Registers used:
  2255 ;;		wreg
  2256 ;; Tracked objects:
  2257 ;;		On entry : 0/0
  2258 ;;		On exit  : 0/0
  2259 ;;		Unchanged: 0/0
  2260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2262 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2264 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2265 ;;Total ram usage:        1 bytes
  2266 ;; Hardware stack levels used:    1
  2267 ;; Hardware stack levels required when called:   10
  2268 ;; This function calls:
  2269 ;;		Nothing
  2270 ;; This function is called by:
  2271 ;;		_main
  2272 ;; This function uses a non-reentrant model
  2273 ;;
  2274                           
  2275                           	psect	text2
  2276  001A62                     __ptext2:
  2277                           	opt stack 0
  2278  001A62                     _putch:
  2279                           	opt stack 20
  2280                           
  2281                           ;incstack = 0
  2282                           ;putch@data stored from wreg
  2283  001A62  0100               	movlb	0	; () banked
  2284  001A64  6FB9               	movwf	putch@data& (0+255),b
  2285  001A66                     
  2286                           ;main.c: 71: continue;
  2287                           
  2288                           ;main.c: 70: while(!PIR3bits.TX2IF)
  2289  001A66  A8A4               	btfss	4004,4,c	;volatile
  2290  001A68  D7FE               	goto	l3768
  2291                           
  2292                           ;main.c: 72: TXREG2 = data;
  2293  001A6A  C0B9  FF79         	movff	putch@data,3961	;volatile
  2294  001A6E  0012               	return		;funcret
  2295  001A70                     __end_of_putch:
  2296                           	opt stack 0
  2297                           tblptru	equ	0xFF8
  2298                           tblptrh	equ	0xFF7
  2299                           tblptrl	equ	0xFF6
  2300                           tablat	equ	0xFF5
  2301                           intcon	equ	0xFF2
  2302                           postinc0	equ	0xFEE
  2303                           wreg	equ	0xFE8
  2304                           postdec1	equ	0xFE5
  2305                           fsr1l	equ	0xFE1
  2306                           indf2	equ	0xFDF
  2307                           fsr2h	equ	0xFDA
  2308                           fsr2l	equ	0xFD9
  2309                           status	equ	0xFD8
  2310                           
  2311 ;; *************** function _lcd_text *****************
  2312 ;; Defined at:
  2313 ;;		line 238 in file "tft.c"
  2314 ;; Parameters:    Size  Location     Type
  2315 ;;  renglon         1    wreg     unsigned char 
  2316 ;;  msjPtr          2   23[BANK0 ] PTR unsigned char 
  2317 ;;		 -> mensaje(20), 
  2318 ;; Auto vars:     Size  Location     Type
  2319 ;;  renglon         1   32[BANK0 ] unsigned char 
  2320 ;;  k               2   37[BANK0 ] unsigned int 
  2321 ;;  j               2   35[BANK0 ] unsigned int 
  2322 ;;  i               2   33[BANK0 ] unsigned int 
  2323 ;; Return value:  Size  Location     Type
  2324 ;;                  1    wreg      void 
  2325 ;; Registers used:
  2326 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2327 ;; Tracked objects:
  2328 ;;		On entry : 0/0
  2329 ;;		On exit  : 0/0
  2330 ;;		Unchanged: 0/0
  2331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2332 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2333 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2334 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2335 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2336 ;;Total ram usage:       16 bytes
  2337 ;; Hardware stack levels used:    1
  2338 ;; Hardware stack levels required when called:   14
  2339 ;; This function calls:
  2340 ;;		___wmul
  2341 ;;		_bitRead
  2342 ;;		_lcd_pix
  2343 ;; This function is called by:
  2344 ;;		_main
  2345 ;; This function uses a non-reentrant model
  2346 ;;
  2347                           
  2348                           	psect	text3
  2349  00030C                     __ptext3:
  2350                           	opt stack 0
  2351  00030C                     _lcd_text:
  2352                           	opt stack 16
  2353                           
  2354                           ;incstack = 0
  2355                           ;lcd_text@renglon stored from wreg
  2356  00030C  0100               	movlb	0	; () banked
  2357  00030E  6FD9               	movwf	lcd_text@renglon& (0+255),b
  2358                           
  2359                           ;tft.c: 239: unsigned int i,j,k;
  2360                           ;tft.c: 241: for (k=0;k<15;k++) {
  2361  000310  0E00               	movlw	0
  2362  000312  0100               	movlb	0	; () banked
  2363  000314  6FDF               	movwf	(lcd_text@k+1)& (0+255),b
  2364  000316  0E00               	movlw	0
  2365  000318  6FDE               	movwf	lcd_text@k& (0+255),b
  2366                           
  2367                           ; BSR set to: 0
  2368  00031A  51DF               	movf	(lcd_text@k+1)& (0+255),w,b
  2369  00031C  E105               	bnz	u3090
  2370  00031E  0E0F               	movlw	15
  2371  000320  5DDE               	subwf	lcd_text@k& (0+255),w,b
  2372  000322  B0D8               	btfsc	status,0,c
  2373  000324  0012               	return	
  2374  000326  D001               	goto	l895
  2375  000328                     u3090:
  2376                           
  2377                           ; BSR set to: 0
  2378  000328  0012               	return	
  2379  00032A                     l895:
  2380                           
  2381                           ; BSR set to: 0
  2382                           ;tft.c: 242: if (*(msjPtr+k) == 32 || *(msjPtr+k) == 0) {
  2383                           
  2384                           ; BSR set to: 0
  2385  00032A  51DE               	movf	lcd_text@k& (0+255),w,b
  2386  00032C  25D0               	addwf	lcd_text@msjPtr& (0+255),w,b
  2387  00032E  6ED9               	movwf	fsr2l,c
  2388  000330  51DF               	movf	(lcd_text@k+1)& (0+255),w,b
  2389  000332  21D1               	addwfc	(lcd_text@msjPtr+1)& (0+255),w,b
  2390  000334  6EDA               	movwf	fsr2h,c
  2391  000336  0E20               	movlw	32
  2392  000338  18DE               	xorwf	postinc2,w,c
  2393  00033A  B4D8               	btfsc	status,2,c
  2394  00033C  D009               	goto	u3110
  2395                           
  2396                           ; BSR set to: 0
  2397  00033E  51DE               	movf	lcd_text@k& (0+255),w,b
  2398  000340  25D0               	addwf	lcd_text@msjPtr& (0+255),w,b
  2399  000342  6ED9               	movwf	fsr2l,c
  2400  000344  51DF               	movf	(lcd_text@k+1)& (0+255),w,b
  2401  000346  21D1               	addwfc	(lcd_text@msjPtr+1)& (0+255),w,b
  2402  000348  6EDA               	movwf	fsr2h,c
  2403  00034A  50DF               	movf	indf2,w,c
  2404  00034C  A4D8               	btfss	status,2,c
  2405  00034E  D008               	goto	l897
  2406  000350                     u3110:
  2407                           
  2408                           ; BSR set to: 0
  2409                           ;tft.c: 243: *(msjPtr+k) = 38;
  2410                           
  2411                           ; BSR set to: 0
  2412  000350  51DE               	movf	lcd_text@k& (0+255),w,b
  2413  000352  25D0               	addwf	lcd_text@msjPtr& (0+255),w,b
  2414  000354  6ED9               	movwf	fsr2l,c
  2415  000356  51DF               	movf	(lcd_text@k+1)& (0+255),w,b
  2416  000358  21D1               	addwfc	(lcd_text@msjPtr+1)& (0+255),w,b
  2417  00035A  6EDA               	movwf	fsr2h,c
  2418  00035C  0E26               	movlw	38
  2419  00035E  6EDF               	movwf	indf2,c
  2420  000360                     l897:
  2421                           
  2422                           ; BSR set to: 0
  2423                           ;tft.c: 244: }
  2424                           ;tft.c: 245: if (*(msjPtr+k) > 47 && *(msjPtr+k) < 58) {
  2425  000360  51DE               	movf	lcd_text@k& (0+255),w,b
  2426  000362  25D0               	addwf	lcd_text@msjPtr& (0+255),w,b
  2427  000364  6ED9               	movwf	fsr2l,c
  2428  000366  51DF               	movf	(lcd_text@k+1)& (0+255),w,b
  2429  000368  21D1               	addwfc	(lcd_text@msjPtr+1)& (0+255),w,b
  2430  00036A  6EDA               	movwf	fsr2h,c
  2431  00036C  0E2F               	movlw	47
  2432  00036E  64DF               	cpfsgt	indf2,c
  2433  000370  D011               	goto	l900
  2434                           
  2435                           ; BSR set to: 0
  2436  000372  51DE               	movf	lcd_text@k& (0+255),w,b
  2437  000374  25D0               	addwf	lcd_text@msjPtr& (0+255),w,b
  2438  000376  6ED9               	movwf	fsr2l,c
  2439  000378  51DF               	movf	(lcd_text@k+1)& (0+255),w,b
  2440  00037A  21D1               	addwfc	(lcd_text@msjPtr+1)& (0+255),w,b
  2441  00037C  6EDA               	movwf	fsr2h,c
  2442  00037E  0E3A               	movlw	58
  2443  000380  60DF               	cpfslt	indf2,c
  2444  000382  D008               	goto	l900
  2445                           
  2446                           ; BSR set to: 0
  2447                           ;tft.c: 246: *(msjPtr+k) -= 48;
  2448  000384  51DE               	movf	lcd_text@k& (0+255),w,b
  2449  000386  25D0               	addwf	lcd_text@msjPtr& (0+255),w,b
  2450  000388  6ED9               	movwf	fsr2l,c
  2451  00038A  51DF               	movf	(lcd_text@k+1)& (0+255),w,b
  2452  00038C  21D1               	addwfc	(lcd_text@msjPtr+1)& (0+255),w,b
  2453  00038E  6EDA               	movwf	fsr2h,c
  2454  000390  0E30               	movlw	48
  2455  000392  5EDF               	subwf	indf2,f,c
  2456  000394                     l900:
  2457                           
  2458                           ; BSR set to: 0
  2459                           ;tft.c: 247: }
  2460                           ;tft.c: 248: if (*(msjPtr+k) > 64) {
  2461  000394  51DE               	movf	lcd_text@k& (0+255),w,b
  2462  000396  25D0               	addwf	lcd_text@msjPtr& (0+255),w,b
  2463  000398  6ED9               	movwf	fsr2l,c
  2464  00039A  51DF               	movf	(lcd_text@k+1)& (0+255),w,b
  2465  00039C  21D1               	addwfc	(lcd_text@msjPtr+1)& (0+255),w,b
  2466  00039E  6EDA               	movwf	fsr2h,c
  2467  0003A0  0E40               	movlw	64
  2468  0003A2  64DF               	cpfsgt	indf2,c
  2469  0003A4  D008               	goto	l901
  2470                           
  2471                           ; BSR set to: 0
  2472                           ;tft.c: 249: *(msjPtr+k) -= 53;
  2473  0003A6  51DE               	movf	lcd_text@k& (0+255),w,b
  2474  0003A8  25D0               	addwf	lcd_text@msjPtr& (0+255),w,b
  2475  0003AA  6ED9               	movwf	fsr2l,c
  2476  0003AC  51DF               	movf	(lcd_text@k+1)& (0+255),w,b
  2477  0003AE  21D1               	addwfc	(lcd_text@msjPtr+1)& (0+255),w,b
  2478  0003B0  6EDA               	movwf	fsr2h,c
  2479  0003B2  0E35               	movlw	53
  2480  0003B4  5EDF               	subwf	indf2,f,c
  2481  0003B6                     l901:
  2482                           
  2483                           ; BSR set to: 0
  2484                           ;tft.c: 250: }
  2485                           ;tft.c: 252: for (i=0;i<8;i++) {
  2486                           
  2487                           ; BSR set to: 0
  2488  0003B6  0E00               	movlw	0
  2489  0003B8  6FDB               	movwf	(lcd_text@i+1)& (0+255),b
  2490  0003BA  0E00               	movlw	0
  2491  0003BC  6FDA               	movwf	lcd_text@i& (0+255),b
  2492                           
  2493                           ; BSR set to: 0
  2494  0003BE  51DB               	movf	(lcd_text@i+1)& (0+255),w,b
  2495  0003C0  E174               	bnz	l903
  2496  0003C2  0E08               	movlw	8
  2497  0003C4  5DDA               	subwf	lcd_text@i& (0+255),w,b
  2498  0003C6  B0D8               	btfsc	status,0,c
  2499  0003C8  D070               	goto	u3180
  2500                           
  2501                           ; BSR set to: 0
  2502                           ;tft.c: 253: for (j=0;j<8;j++) {
  2503                           
  2504                           ; BSR set to: 0
  2505                           
  2506                           ; BSR set to: 0
  2507  0003CA  0E00               	movlw	0
  2508  0003CC  6FDD               	movwf	(lcd_text@j+1)& (0+255),b
  2509  0003CE  0E00               	movlw	0
  2510  0003D0  6FDC               	movwf	lcd_text@j& (0+255),b
  2511  0003D2                     l3818:
  2512                           
  2513                           ; BSR set to: 0
  2514  0003D2  51DD               	movf	(lcd_text@j+1)& (0+255),w,b
  2515  0003D4  E165               	bnz	l3830
  2516  0003D6  0E08               	movlw	8
  2517  0003D8  5DDC               	subwf	lcd_text@j& (0+255),w,b
  2518  0003DA  B0D8               	btfsc	status,0,c
  2519  0003DC  D061               	goto	u3170
  2520                           
  2521                           ; BSR set to: 0
  2522                           ;tft.c: 254: lcd_pix(1+j+(renglon-1)*9,1+i+k*8,bitRead(texto[*(msjPtr+k)][i],j),4);
  2523                           
  2524                           ; BSR set to: 0
  2525                           
  2526                           ; BSR set to: 0
  2527  0003DE  0EFF               	movlw	255
  2528  0003E0  25D9               	addwf	lcd_text@renglon& (0+255),w,b
  2529  0003E2  6FB9               	movwf	___wmul@multiplier& (0+255),b
  2530  0003E4  6BBA               	clrf	(___wmul@multiplier+1)& (0+255),b
  2531  0003E6  0EFF               	movlw	255
  2532  0003E8  23BA               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
  2533  0003EA  0E00               	movlw	0
  2534  0003EC  6FBC               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2535  0003EE  0E09               	movlw	9
  2536  0003F0  6FBB               	movwf	___wmul@multiplicand& (0+255),b
  2537  0003F2  EC52  F00C         	call	___wmul	;wreg free
  2538  0003F6  0100               	movlb	0	; () banked
  2539  0003F8  51DC               	movf	lcd_text@j& (0+255),w,b
  2540  0003FA  27B9               	addwf	?___wmul& (0+255),f,b
  2541  0003FC  51DD               	movf	(lcd_text@j+1)& (0+255),w,b
  2542  0003FE  23BA               	addwfc	(?___wmul+1)& (0+255),f,b
  2543  000400  0E01               	movlw	1
  2544  000402  25B9               	addwf	?___wmul& (0+255),w,b
  2545  000404  6FD7               	movwf	_lcd_text$2702& (0+255),b
  2546  000406  0E00               	movlw	0
  2547  000408  21BA               	addwfc	(?___wmul+1)& (0+255),w,b
  2548  00040A  6FD8               	movwf	(_lcd_text$2702+1)& (0+255),b
  2549                           
  2550                           ; BSR set to: 0
  2551                           ;tft.c: 254: lcd_pix(1+j+(renglon-1)*9,1+i+k*8,bitRead(texto[*(msjPtr+k)][i],j),4);
  2552  00040C  C0D7  F0C3         	movff	_lcd_text$2702,lcd_pix@x
  2553  000410  C0D8  F0C4         	movff	_lcd_text$2702+1,lcd_pix@x+1
  2554  000414  C0DE  F0D2         	movff	lcd_text@k,??_lcd_text
  2555  000418  C0DF  F0D3         	movff	lcd_text@k+1,??_lcd_text+1
  2556  00041C  90D8               	bcf	status,0,c
  2557  00041E  37D2               	rlcf	??_lcd_text& (0+255),f,b
  2558  000420  37D3               	rlcf	(??_lcd_text+1)& (0+255),f,b
  2559  000422  90D8               	bcf	status,0,c
  2560  000424  37D2               	rlcf	??_lcd_text& (0+255),f,b
  2561  000426  37D3               	rlcf	(??_lcd_text+1)& (0+255),f,b
  2562  000428  90D8               	bcf	status,0,c
  2563  00042A  37D2               	rlcf	??_lcd_text& (0+255),f,b
  2564  00042C  37D3               	rlcf	(??_lcd_text+1)& (0+255),f,b
  2565  00042E  51DA               	movf	lcd_text@i& (0+255),w,b
  2566  000430  27D2               	addwf	??_lcd_text& (0+255),f,b
  2567  000432  51DB               	movf	(lcd_text@i+1)& (0+255),w,b
  2568  000434  23D3               	addwfc	(??_lcd_text+1)& (0+255),f,b
  2569  000436  0E01               	movlw	1
  2570  000438  25D2               	addwf	??_lcd_text& (0+255),w,b
  2571  00043A  6FC5               	movwf	lcd_pix@y& (0+255),b
  2572  00043C  0E00               	movlw	0
  2573  00043E  21D3               	addwfc	(??_lcd_text+1)& (0+255),w,b
  2574  000440  6FC6               	movwf	(lcd_pix@y+1)& (0+255),b
  2575  000442  51DE               	movf	lcd_text@k& (0+255),w,b
  2576  000444  25D0               	addwf	lcd_text@msjPtr& (0+255),w,b
  2577  000446  6ED9               	movwf	fsr2l,c
  2578  000448  51DF               	movf	(lcd_text@k+1)& (0+255),w,b
  2579  00044A  21D1               	addwfc	(lcd_text@msjPtr+1)& (0+255),w,b
  2580  00044C  6EDA               	movwf	fsr2h,c
  2581  00044E  50DF               	movf	indf2,w,c
  2582  000450  6FD4               	movwf	(??_lcd_text+2)& (0+255),b
  2583  000452  51D4               	movf	(??_lcd_text+2)& (0+255),w,b
  2584  000454  0D08               	mullw	8
  2585  000456  0E1D               	movlw	low _texto
  2586  000458  6FD5               	movwf	(??_lcd_text+3)& (0+255),b
  2587  00045A  0EFD               	movlw	high _texto
  2588  00045C  6FD6               	movwf	(??_lcd_text+4)& (0+255),b
  2589  00045E  50F3               	movf	prodl,w,c
  2590  000460  27D5               	addwf	(??_lcd_text+3)& (0+255),f,b
  2591  000462  50F4               	movf	prodh,w,c
  2592  000464  23D6               	addwfc	(??_lcd_text+4)& (0+255),f,b
  2593  000466  51DA               	movf	lcd_text@i& (0+255),w,b
  2594  000468  27D5               	addwf	(??_lcd_text+3)& (0+255),f,b
  2595  00046A  51DB               	movf	(lcd_text@i+1)& (0+255),w,b
  2596  00046C  23D6               	addwfc	(??_lcd_text+4)& (0+255),f,b
  2597  00046E  C0D5  FFF6         	movff	??_lcd_text+3,tblptrl
  2598  000472  C0D6  FFF7         	movff	??_lcd_text+4,tblptrh
  2599  000476                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2600  000476  6AF8               	clrf	tblptru,c
  2601  000478                     	endif
  2602  000478                     	if	0	;tblptru may be non-zero
  2603  000478                     	endif
  2604  000478  0008               	tblrd		*
  2605  00047A  50F5               	movf	tablat,w,c
  2606  00047C  6FB9               	movwf	bitRead@number& (0+255),b
  2607  00047E  6BBA               	clrf	(bitRead@number+1)& (0+255),b
  2608  000480  C0DC  F0BB         	movff	lcd_text@j,bitRead@position
  2609  000484  C0DD  F0BC         	movff	lcd_text@j+1,bitRead@position+1
  2610  000488  EC16  F00B         	call	_bitRead	;wreg free
  2611  00048C  0100               	movlb	0	; () banked
  2612  00048E  6FC7               	movwf	lcd_pix@c& (0+255),b
  2613  000490  0E04               	movlw	4
  2614  000492  6FC8               	movwf	lcd_pix@size& (0+255),b
  2615  000494  EC8D  F006         	call	_lcd_pix	;wreg free
  2616  000498  0100               	movlb	0	; () banked
  2617  00049A  4BDC               	infsnz	lcd_text@j& (0+255),f,b
  2618  00049C  2BDD               	incf	(lcd_text@j+1)& (0+255),f,b
  2619  00049E  D799               	goto	l3818
  2620  0004A0                     u3170:
  2621  0004A0                     l3830:
  2622                           
  2623                           ; BSR set to: 0
  2624  0004A0  4BDA               	infsnz	lcd_text@i& (0+255),f,b
  2625  0004A2  2BDB               	incf	(lcd_text@i+1)& (0+255),f,b
  2626                           
  2627                           ; BSR set to: 0
  2628  0004A4  51DB               	movf	(lcd_text@i+1)& (0+255),w,b
  2629  0004A6  E101               	bnz	l3834
  2630  0004A8  D78C               	goto	L1
  2631  0004AA                     u3180:
  2632  0004AA                     l903:
  2633  0004AA                     l3834:
  2634                           
  2635                           ; BSR set to: 0
  2636  0004AA  4BDE               	infsnz	lcd_text@k& (0+255),f,b
  2637  0004AC  2BDF               	incf	(lcd_text@k+1)& (0+255),f,b
  2638                           
  2639                           ; BSR set to: 0
  2640  0004AE  51DF               	movf	(lcd_text@k+1)& (0+255),w,b
  2641  0004B0  E101               	bnz	l906
  2642  0004B2  D735               	goto	L2
  2643  0004B4                     l906:
  2644                           
  2645                           ; BSR set to: 0
  2646  0004B4  0012               	return		;funcret
  2647  0004B6                     __end_of_lcd_text:
  2648                           	opt stack 0
  2649                           tblptru	equ	0xFF8
  2650                           tblptrh	equ	0xFF7
  2651                           tblptrl	equ	0xFF6
  2652                           tablat	equ	0xFF5
  2653                           prodh	equ	0xFF4
  2654                           prodl	equ	0xFF3
  2655                           intcon	equ	0xFF2
  2656                           postinc0	equ	0xFEE
  2657                           wreg	equ	0xFE8
  2658                           postdec1	equ	0xFE5
  2659                           fsr1l	equ	0xFE1
  2660                           indf2	equ	0xFDF
  2661                           postinc2	equ	0xFDE
  2662                           fsr2h	equ	0xFDA
  2663                           fsr2l	equ	0xFD9
  2664                           status	equ	0xFD8
  2665                           
  2666 ;; *************** function _bitRead *****************
  2667 ;; Defined at:
  2668 ;;		line 3 in file "tft.c"
  2669 ;; Parameters:    Size  Location     Type
  2670 ;;  number          2    0[BANK0 ] unsigned int 
  2671 ;;  position        2    2[BANK0 ] unsigned int 
  2672 ;; Auto vars:     Size  Location     Type
  2673 ;;		None
  2674 ;; Return value:  Size  Location     Type
  2675 ;;                  1    wreg      unsigned char 
  2676 ;; Registers used:
  2677 ;;		wreg, status,2, status,0
  2678 ;; Tracked objects:
  2679 ;;		On entry : 0/0
  2680 ;;		On exit  : 0/0
  2681 ;;		Unchanged: 0/0
  2682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2683 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2684 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2685 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2686 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2687 ;;Total ram usage:        7 bytes
  2688 ;; Hardware stack levels used:    1
  2689 ;; Hardware stack levels required when called:   10
  2690 ;; This function calls:
  2691 ;;		Nothing
  2692 ;; This function is called by:
  2693 ;;		_lcd_text
  2694 ;; This function uses a non-reentrant model
  2695 ;;
  2696                           
  2697                           	psect	text4
  2698  00162C                     __ptext4:
  2699                           	opt stack 0
  2700  00162C                     _bitRead:
  2701                           	opt stack 19
  2702                           
  2703                           ;tft.c: 4: position = 1 << position;
  2704                           
  2705                           ; BSR set to: 0
  2706                           ;incstack = 0
  2707  00162C  C0BB  F0BD         	movff	bitRead@position,??_bitRead
  2708  001630  0E01               	movlw	1
  2709  001632  0100               	movlb	0	; () banked
  2710  001634  6FBE               	movwf	(??_bitRead+1)& (0+255),b
  2711  001636  0E00               	movlw	0
  2712  001638  6FBF               	movwf	(??_bitRead+2)& (0+255),b
  2713  00163A  2BBD               	incf	??_bitRead& (0+255),f,b
  2714  00163C  D003               	goto	u2804
  2715  00163E                     u2805:
  2716  00163E  90D8               	bcf	status,0,c
  2717  001640  37BE               	rlcf	(??_bitRead+1)& (0+255),f,b
  2718  001642  37BF               	rlcf	(??_bitRead+2)& (0+255),f,b
  2719  001644                     u2804:
  2720  001644  2FBD               	decfsz	??_bitRead& (0+255),f,b
  2721  001646  D7FB               	goto	u2805
  2722  001648  C0BE  F0BB         	movff	??_bitRead+1,bitRead@position
  2723  00164C  C0BF  F0BC         	movff	??_bitRead+2,bitRead@position+1
  2724                           
  2725                           ;tft.c: 5: if (number & position) {
  2726  001650  0100               	movlb	0	; () banked
  2727  001652  51BB               	movf	bitRead@position& (0+255),w,b
  2728  001654  15B9               	andwf	bitRead@number& (0+255),w,b
  2729  001656  6FBD               	movwf	??_bitRead& (0+255),b
  2730  001658  51BC               	movf	(bitRead@position+1)& (0+255),w,b
  2731  00165A  15BA               	andwf	(bitRead@number+1)& (0+255),w,b
  2732  00165C  6FBE               	movwf	(??_bitRead+1)& (0+255),b
  2733  00165E  51BD               	movf	??_bitRead& (0+255),w,b
  2734  001660  11BE               	iorwf	(??_bitRead+1)& (0+255),w,b
  2735  001662  B4D8               	btfsc	status,2,c
  2736  001664  D002               	goto	l808
  2737                           
  2738                           ; BSR set to: 0
  2739                           ;tft.c: 6: return 1;
  2740  001666  0E01               	movlw	1
  2741                           
  2742                           ; BSR set to: 0
  2743                           ;tft.c: 7: } else {
  2744                           
  2745                           ; BSR set to: 0
  2746  001668  0012               	return	
  2747  00166A                     l808:
  2748                           
  2749                           ; BSR set to: 0
  2750                           ;tft.c: 8: return 0;
  2751                           
  2752                           ; BSR set to: 0
  2753  00166A  0E00               	movlw	0
  2754                           
  2755                           ; BSR set to: 0
  2756  00166C  0012               	return	
  2757  00166E                     __end_of_bitRead:
  2758                           	opt stack 0
  2759                           tblptru	equ	0xFF8
  2760                           tblptrh	equ	0xFF7
  2761                           tblptrl	equ	0xFF6
  2762                           tablat	equ	0xFF5
  2763                           prodh	equ	0xFF4
  2764                           prodl	equ	0xFF3
  2765                           intcon	equ	0xFF2
  2766                           postinc0	equ	0xFEE
  2767                           wreg	equ	0xFE8
  2768                           postdec1	equ	0xFE5
  2769                           fsr1l	equ	0xFE1
  2770                           indf2	equ	0xFDF
  2771                           postinc2	equ	0xFDE
  2772                           fsr2h	equ	0xFDA
  2773                           fsr2l	equ	0xFD9
  2774                           status	equ	0xFD8
  2775                           
  2776 ;; *************** function _lcd_set_background *****************
  2777 ;; Defined at:
  2778 ;;		line 102 in file "tft.c"
  2779 ;; Parameters:    Size  Location     Type
  2780 ;;  color           2   10[BANK0 ] unsigned int 
  2781 ;; Auto vars:     Size  Location     Type
  2782 ;;  j               2   14[BANK0 ] unsigned int 
  2783 ;;  i               2   12[BANK0 ] unsigned int 
  2784 ;; Return value:  Size  Location     Type
  2785 ;;                  1    wreg      void 
  2786 ;; Registers used:
  2787 ;;		wreg, status,2, status,0, cstack
  2788 ;; Tracked objects:
  2789 ;;		On entry : 0/0
  2790 ;;		On exit  : 0/0
  2791 ;;		Unchanged: 0/0
  2792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2793 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2794 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2795 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2796 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2797 ;;Total ram usage:        6 bytes
  2798 ;; Hardware stack levels used:    1
  2799 ;; Hardware stack levels required when called:   13
  2800 ;; This function calls:
  2801 ;;		_lcd_memory_start
  2802 ;;		_lcd_set_address
  2803 ;;		_lcd_write_bus
  2804 ;; This function is called by:
  2805 ;;		_main
  2806 ;; This function uses a non-reentrant model
  2807 ;;
  2808                           
  2809                           	psect	text5
  2810  001314                     __ptext5:
  2811                           	opt stack 0
  2812  001314                     _lcd_set_background:
  2813                           	opt stack 17
  2814                           
  2815                           ;tft.c: 103: LATA1 = 0;
  2816                           
  2817                           ; BSR set to: 0
  2818                           ;incstack = 0
  2819  001314  9289               	bcf	3977,1,c	;volatile
  2820                           
  2821                           ;tft.c: 104: lcd_set_address(0,0,319,479);
  2822  001316  0E00               	movlw	0
  2823  001318  0100               	movlb	0	; () banked
  2824  00131A  6FBC               	movwf	(lcd_set_address@x1+1)& (0+255),b
  2825  00131C  0E00               	movlw	0
  2826  00131E  6FBB               	movwf	lcd_set_address@x1& (0+255),b
  2827  001320  0E00               	movlw	0
  2828  001322  6FBE               	movwf	(lcd_set_address@y1+1)& (0+255),b
  2829  001324  0E00               	movlw	0
  2830  001326  6FBD               	movwf	lcd_set_address@y1& (0+255),b
  2831  001328  0E01               	movlw	1
  2832  00132A  6FC0               	movwf	(lcd_set_address@x2+1)& (0+255),b
  2833  00132C  0E3F               	movlw	63
  2834  00132E  6FBF               	movwf	lcd_set_address@x2& (0+255),b
  2835  001330  0E01               	movlw	1
  2836  001332  6FC2               	movwf	(lcd_set_address@y2+1)& (0+255),b
  2837  001334  0EDF               	movlw	223
  2838  001336  6FC1               	movwf	lcd_set_address@y2& (0+255),b
  2839  001338  ECCD  F00A         	call	_lcd_set_address	;wreg free
  2840                           
  2841                           ;tft.c: 105: lcd_memory_start();
  2842  00133C  EC84  F00D         	call	_lcd_memory_start	;wreg free
  2843                           
  2844                           ;tft.c: 106: for (unsigned int i=0;i<320;i++) {
  2845  001340  0E00               	movlw	0
  2846  001342  0100               	movlb	0	; () banked
  2847  001344  6FC6               	movwf	(lcd_set_background@i+1)& (0+255),b
  2848  001346  0E00               	movlw	0
  2849  001348  6FC5               	movwf	lcd_set_background@i& (0+255),b
  2850  00134A  D017               	goto	l3948
  2851  00134C                     
  2852                           ; BSR set to: 0
  2853                           ;tft.c: 107: for (unsigned int j=0;j<480;j++) {
  2854                           
  2855                           ; BSR set to: 0
  2856  00134C  0E00               	movlw	0
  2857  00134E  6FC8               	movwf	(lcd_set_background@j+1)& (0+255),b
  2858  001350  0E00               	movlw	0
  2859  001352  6FC7               	movwf	lcd_set_background@j& (0+255),b
  2860  001354                     l3936:
  2861                           
  2862                           ; BSR set to: 0
  2863  001354  0EE0               	movlw	224
  2864  001356  5DC7               	subwf	lcd_set_background@j& (0+255),w,b
  2865  001358  0E01               	movlw	1
  2866  00135A  59C8               	subwfb	(lcd_set_background@j+1)& (0+255),w,b
  2867  00135C  B0D8               	btfsc	status,0,c
  2868  00135E  D00B               	goto	u3280
  2869                           
  2870                           ; BSR set to: 0
  2871                           ;tft.c: 108: lcd_write_bus(color >> 8);
  2872                           
  2873                           ; BSR set to: 0
  2874                           
  2875                           ; BSR set to: 0
  2876  001360  51C4               	movf	(lcd_set_background@color+1)& (0+255),w,b
  2877  001362  EC38  F00D         	call	_lcd_write_bus
  2878                           
  2879                           ;tft.c: 109: lcd_write_bus(color);
  2880  001366  0100               	movlb	0	; () banked
  2881  001368  51C3               	movf	lcd_set_background@color& (0+255),w,b
  2882  00136A  EC38  F00D         	call	_lcd_write_bus
  2883  00136E  0100               	movlb	0	; () banked
  2884  001370  4BC7               	infsnz	lcd_set_background@j& (0+255),f,b
  2885  001372  2BC8               	incf	(lcd_set_background@j+1)& (0+255),f,b
  2886  001374  D7EF               	goto	l3936
  2887  001376                     u3280:
  2888                           
  2889                           ; BSR set to: 0
  2890                           
  2891                           ; BSR set to: 0
  2892  001376  4BC5               	infsnz	lcd_set_background@i& (0+255),f,b
  2893  001378  2BC6               	incf	(lcd_set_background@i+1)& (0+255),f,b
  2894  00137A                     l3948:
  2895                           
  2896                           ; BSR set to: 0
  2897  00137A  0E40               	movlw	64
  2898  00137C  5DC5               	subwf	lcd_set_background@i& (0+255),w,b
  2899  00137E  0E01               	movlw	1
  2900  001380  59C6               	subwfb	(lcd_set_background@i+1)& (0+255),w,b
  2901  001382  A0D8               	btfss	status,0,c
  2902  001384  D7E3               	goto	l828
  2903                           
  2904                           ; BSR set to: 0
  2905                           ;tft.c: 110: }
  2906                           ;tft.c: 111: }
  2907                           ;tft.c: 112: LATA1 = 1;
  2908  001386  8289               	bsf	3977,1,c	;volatile
  2909                           
  2910                           ; BSR set to: 0
  2911  001388  0012               	return		;funcret
  2912  00138A                     __end_of_lcd_set_background:
  2913                           	opt stack 0
  2914                           tblptru	equ	0xFF8
  2915                           tblptrh	equ	0xFF7
  2916                           tblptrl	equ	0xFF6
  2917                           tablat	equ	0xFF5
  2918                           prodh	equ	0xFF4
  2919                           prodl	equ	0xFF3
  2920                           intcon	equ	0xFF2
  2921                           postinc0	equ	0xFEE
  2922                           wreg	equ	0xFE8
  2923                           postdec1	equ	0xFE5
  2924                           fsr1l	equ	0xFE1
  2925                           indf2	equ	0xFDF
  2926                           postinc2	equ	0xFDE
  2927                           fsr2h	equ	0xFDA
  2928                           fsr2l	equ	0xFD9
  2929                           status	equ	0xFD8
  2930                           
  2931 ;; *************** function _lcd_point *****************
  2932 ;; Defined at:
  2933 ;;		line 186 in file "tft.c"
  2934 ;; Parameters:    Size  Location     Type
  2935 ;;  place           1    wreg     unsigned char 
  2936 ;; Auto vars:     Size  Location     Type
  2937 ;;  place           1   23[BANK0 ] unsigned char 
  2938 ;; Return value:  Size  Location     Type
  2939 ;;                  1    wreg      void 
  2940 ;; Registers used:
  2941 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2942 ;; Tracked objects:
  2943 ;;		On entry : 0/0
  2944 ;;		On exit  : 0/0
  2945 ;;		Unchanged: 0/0
  2946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2947 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2948 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2949 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2950 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2951 ;;Total ram usage:        1 bytes
  2952 ;; Hardware stack levels used:    1
  2953 ;; Hardware stack levels required when called:   14
  2954 ;; This function calls:
  2955 ;;		_lcd_pix
  2956 ;; This function is called by:
  2957 ;;		_main
  2958 ;; This function uses a non-reentrant model
  2959 ;;
  2960                           
  2961                           	psect	text6
  2962  00100A                     __ptext6:
  2963                           	opt stack 0
  2964  00100A                     _lcd_point:
  2965                           	opt stack 16
  2966                           
  2967                           ; BSR set to: 0
  2968                           ;incstack = 0
  2969                           ;lcd_point@place stored from wreg
  2970  00100A  0100               	movlb	0	; () banked
  2971  00100C  6FD0               	movwf	lcd_point@place& (0+255),b
  2972                           
  2973                           ;tft.c: 187: lcd_pix(62,96 - 18 * place,1,5);
  2974  00100E  0E00               	movlw	0
  2975  001010  0100               	movlb	0	; () banked
  2976  001012  6FC4               	movwf	(lcd_pix@x+1)& (0+255),b
  2977  001014  0E3E               	movlw	62
  2978  001016  6FC3               	movwf	lcd_pix@x& (0+255),b
  2979  001018  51D0               	movf	lcd_point@place& (0+255),w,b
  2980  00101A  0D12               	mullw	18
  2981  00101C  1EF3               	comf	prodl,f,c
  2982  00101E  1EF4               	comf	prodh,f,c
  2983  001020  4AF3               	infsnz	prodl,f,c
  2984  001022  2AF4               	incf	prodh,f,c
  2985  001024  0E60               	movlw	96
  2986  001026  24F3               	addwf	prodl,w,c
  2987  001028  6FC5               	movwf	lcd_pix@y& (0+255),b
  2988  00102A  0E00               	movlw	0
  2989  00102C  20F4               	addwfc	prodh,w,c
  2990  00102E  6FC6               	movwf	(lcd_pix@y+1)& (0+255),b
  2991  001030  0E01               	movlw	1
  2992  001032  6FC7               	movwf	lcd_pix@c& (0+255),b
  2993  001034  0E05               	movlw	5
  2994  001036  6FC8               	movwf	lcd_pix@size& (0+255),b
  2995  001038  EC8D  F006         	call	_lcd_pix	;wreg free
  2996                           
  2997                           ;tft.c: 188: lcd_pix(61,96 - 18 * place,1,5);
  2998  00103C  0E00               	movlw	0
  2999  00103E  0100               	movlb	0	; () banked
  3000  001040  6FC4               	movwf	(lcd_pix@x+1)& (0+255),b
  3001  001042  0E3D               	movlw	61
  3002  001044  6FC3               	movwf	lcd_pix@x& (0+255),b
  3003  001046  51D0               	movf	lcd_point@place& (0+255),w,b
  3004  001048  0D12               	mullw	18
  3005  00104A  1EF3               	comf	prodl,f,c
  3006  00104C  1EF4               	comf	prodh,f,c
  3007  00104E  4AF3               	infsnz	prodl,f,c
  3008  001050  2AF4               	incf	prodh,f,c
  3009  001052  0E60               	movlw	96
  3010  001054  24F3               	addwf	prodl,w,c
  3011  001056  6FC5               	movwf	lcd_pix@y& (0+255),b
  3012  001058  0E00               	movlw	0
  3013  00105A  20F4               	addwfc	prodh,w,c
  3014  00105C  6FC6               	movwf	(lcd_pix@y+1)& (0+255),b
  3015  00105E  0E01               	movlw	1
  3016  001060  6FC7               	movwf	lcd_pix@c& (0+255),b
  3017  001062  0E05               	movlw	5
  3018  001064  6FC8               	movwf	lcd_pix@size& (0+255),b
  3019  001066  EC8D  F006         	call	_lcd_pix	;wreg free
  3020                           
  3021                           ;tft.c: 189: lcd_pix(62,97 - 18 * place,1,5);
  3022  00106A  0E00               	movlw	0
  3023  00106C  0100               	movlb	0	; () banked
  3024  00106E  6FC4               	movwf	(lcd_pix@x+1)& (0+255),b
  3025  001070  0E3E               	movlw	62
  3026  001072  6FC3               	movwf	lcd_pix@x& (0+255),b
  3027  001074  51D0               	movf	lcd_point@place& (0+255),w,b
  3028  001076  0D12               	mullw	18
  3029  001078  1EF3               	comf	prodl,f,c
  3030  00107A  1EF4               	comf	prodh,f,c
  3031  00107C  4AF3               	infsnz	prodl,f,c
  3032  00107E  2AF4               	incf	prodh,f,c
  3033  001080  0E61               	movlw	97
  3034  001082  24F3               	addwf	prodl,w,c
  3035  001084  6FC5               	movwf	lcd_pix@y& (0+255),b
  3036  001086  0E00               	movlw	0
  3037  001088  20F4               	addwfc	prodh,w,c
  3038  00108A  6FC6               	movwf	(lcd_pix@y+1)& (0+255),b
  3039  00108C  0E01               	movlw	1
  3040  00108E  6FC7               	movwf	lcd_pix@c& (0+255),b
  3041  001090  0E05               	movlw	5
  3042  001092  6FC8               	movwf	lcd_pix@size& (0+255),b
  3043  001094  EC8D  F006         	call	_lcd_pix	;wreg free
  3044                           
  3045                           ;tft.c: 190: lcd_pix(61,97 - 18 * place,1,5);
  3046  001098  0E00               	movlw	0
  3047  00109A  0100               	movlb	0	; () banked
  3048  00109C  6FC4               	movwf	(lcd_pix@x+1)& (0+255),b
  3049  00109E  0E3D               	movlw	61
  3050  0010A0  6FC3               	movwf	lcd_pix@x& (0+255),b
  3051  0010A2  51D0               	movf	lcd_point@place& (0+255),w,b
  3052  0010A4  0D12               	mullw	18
  3053  0010A6  1EF3               	comf	prodl,f,c
  3054  0010A8  1EF4               	comf	prodh,f,c
  3055  0010AA  4AF3               	infsnz	prodl,f,c
  3056  0010AC  2AF4               	incf	prodh,f,c
  3057  0010AE  0E61               	movlw	97
  3058  0010B0  24F3               	addwf	prodl,w,c
  3059  0010B2  6FC5               	movwf	lcd_pix@y& (0+255),b
  3060  0010B4  0E00               	movlw	0
  3061  0010B6  20F4               	addwfc	prodh,w,c
  3062  0010B8  6FC6               	movwf	(lcd_pix@y+1)& (0+255),b
  3063  0010BA  0E01               	movlw	1
  3064  0010BC  6FC7               	movwf	lcd_pix@c& (0+255),b
  3065  0010BE  0E05               	movlw	5
  3066  0010C0  6FC8               	movwf	lcd_pix@size& (0+255),b
  3067  0010C2  EC8D  F006         	call	_lcd_pix	;wreg free
  3068  0010C6  0012               	return		;funcret
  3069  0010C8                     __end_of_lcd_point:
  3070                           	opt stack 0
  3071                           tblptru	equ	0xFF8
  3072                           tblptrh	equ	0xFF7
  3073                           tblptrl	equ	0xFF6
  3074                           tablat	equ	0xFF5
  3075                           prodh	equ	0xFF4
  3076                           prodl	equ	0xFF3
  3077                           intcon	equ	0xFF2
  3078                           postinc0	equ	0xFEE
  3079                           wreg	equ	0xFE8
  3080                           postdec1	equ	0xFE5
  3081                           fsr1l	equ	0xFE1
  3082                           indf2	equ	0xFDF
  3083                           postinc2	equ	0xFDE
  3084                           fsr2h	equ	0xFDA
  3085                           fsr2l	equ	0xFD9
  3086                           status	equ	0xFD8
  3087                           
  3088 ;; *************** function _lcd_pix *****************
  3089 ;; Defined at:
  3090 ;;		line 115 in file "tft.c"
  3091 ;; Parameters:    Size  Location     Type
  3092 ;;  x               2   10[BANK0 ] unsigned int 
  3093 ;;  y               2   12[BANK0 ] unsigned int 
  3094 ;;  c               1   14[BANK0 ] unsigned char 
  3095 ;;  size            1   15[BANK0 ] unsigned char 
  3096 ;; Auto vars:     Size  Location     Type
  3097 ;;  i               2   21[BANK0 ] unsigned int 
  3098 ;;  n1              1   20[BANK0 ] unsigned char 
  3099 ;; Return value:  Size  Location     Type
  3100 ;;                  1    wreg      void 
  3101 ;; Registers used:
  3102 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3103 ;; Tracked objects:
  3104 ;;		On entry : 0/0
  3105 ;;		On exit  : 0/0
  3106 ;;		Unchanged: 0/0
  3107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3108 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3109 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3110 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3111 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3112 ;;Total ram usage:       13 bytes
  3113 ;; Hardware stack levels used:    1
  3114 ;; Hardware stack levels required when called:   13
  3115 ;; This function calls:
  3116 ;;		___wmul
  3117 ;;		_lcd_memory_start
  3118 ;;		_lcd_set_address
  3119 ;;		_lcd_write_bus
  3120 ;; This function is called by:
  3121 ;;		_lcd_point
  3122 ;;		_lcd_text
  3123 ;; This function uses a non-reentrant model
  3124 ;;
  3125                           
  3126                           	psect	text7
  3127  000D1A                     __ptext7:
  3128                           	opt stack 0
  3129  000D1A                     _lcd_pix:
  3130                           	opt stack 16
  3131                           
  3132                           ;tft.c: 116: unsigned int i;
  3133                           ;tft.c: 117: char n1;
  3134                           ;tft.c: 119: x *= size;
  3135                           
  3136                           ;incstack = 0
  3137  000D1A  C0C3  F0B9         	movff	lcd_pix@x,___wmul@multiplier
  3138  000D1E  C0C4  F0BA         	movff	lcd_pix@x+1,___wmul@multiplier+1
  3139  000D22  C0C8  F0BB         	movff	lcd_pix@size,___wmul@multiplicand
  3140  000D26  0100               	movlb	0	; () banked
  3141  000D28  6BBC               	clrf	(___wmul@multiplicand+1)& (0+255),b
  3142  000D2A  EC52  F00C         	call	___wmul	;wreg free
  3143  000D2E  C0B9  F0C3         	movff	?___wmul,lcd_pix@x
  3144  000D32  C0BA  F0C4         	movff	?___wmul+1,lcd_pix@x+1
  3145                           
  3146                           ;tft.c: 120: y *= size;
  3147  000D36  C0C5  F0B9         	movff	lcd_pix@y,___wmul@multiplier
  3148  000D3A  C0C6  F0BA         	movff	lcd_pix@y+1,___wmul@multiplier+1
  3149  000D3E  C0C8  F0BB         	movff	lcd_pix@size,___wmul@multiplicand
  3150  000D42  0100               	movlb	0	; () banked
  3151  000D44  6BBC               	clrf	(___wmul@multiplicand+1)& (0+255),b
  3152  000D46  EC52  F00C         	call	___wmul	;wreg free
  3153  000D4A  C0B9  F0C5         	movff	?___wmul,lcd_pix@y
  3154  000D4E  C0BA  F0C6         	movff	?___wmul+1,lcd_pix@y+1
  3155                           
  3156                           ;tft.c: 121: n1 = size * size;
  3157  000D52  0100               	movlb	0	; () banked
  3158  000D54  51C8               	movf	lcd_pix@size& (0+255),w,b
  3159  000D56  03C8               	mulwf	lcd_pix@size& (0+255),b
  3160  000D58  CFF3 F0CD          	movff	prodl,lcd_pix@n1
  3161                           
  3162                           ; BSR set to: 0
  3163                           ;tft.c: 122: LATA1 = 0;
  3164  000D5C  9289               	bcf	3977,1,c	;volatile
  3165                           
  3166                           ; BSR set to: 0
  3167                           ;tft.c: 123: lcd_set_address(x,y,x+size-1,y+size-1);
  3168  000D5E  C0C3  F0BB         	movff	lcd_pix@x,lcd_set_address@x1
  3169  000D62  C0C4  F0BC         	movff	lcd_pix@x+1,lcd_set_address@x1+1
  3170  000D66  C0C5  F0BD         	movff	lcd_pix@y,lcd_set_address@y1
  3171  000D6A  C0C6  F0BE         	movff	lcd_pix@y+1,lcd_set_address@y1+1
  3172  000D6E  51C8               	movf	lcd_pix@size& (0+255),w,b
  3173  000D70  25C3               	addwf	lcd_pix@x& (0+255),w,b
  3174  000D72  6FC9               	movwf	??_lcd_pix& (0+255),b
  3175  000D74  0E00               	movlw	0
  3176  000D76  21C4               	addwfc	(lcd_pix@x+1)& (0+255),w,b
  3177  000D78  6FCA               	movwf	(??_lcd_pix+1)& (0+255),b
  3178  000D7A  0EFF               	movlw	255
  3179  000D7C  25C9               	addwf	??_lcd_pix& (0+255),w,b
  3180  000D7E  6FBF               	movwf	lcd_set_address@x2& (0+255),b
  3181  000D80  0EFF               	movlw	255
  3182  000D82  21CA               	addwfc	(??_lcd_pix+1)& (0+255),w,b
  3183  000D84  6FC0               	movwf	(lcd_set_address@x2+1)& (0+255),b
  3184  000D86  51C8               	movf	lcd_pix@size& (0+255),w,b
  3185  000D88  25C5               	addwf	lcd_pix@y& (0+255),w,b
  3186  000D8A  6FCB               	movwf	(??_lcd_pix+2)& (0+255),b
  3187  000D8C  0E00               	movlw	0
  3188  000D8E  21C6               	addwfc	(lcd_pix@y+1)& (0+255),w,b
  3189  000D90  6FCC               	movwf	(??_lcd_pix+3)& (0+255),b
  3190  000D92  0EFF               	movlw	255
  3191  000D94  25CB               	addwf	(??_lcd_pix+2)& (0+255),w,b
  3192  000D96  6FC1               	movwf	lcd_set_address@y2& (0+255),b
  3193  000D98  0EFF               	movlw	255
  3194  000D9A  21CC               	addwfc	(??_lcd_pix+3)& (0+255),w,b
  3195  000D9C  6FC2               	movwf	(lcd_set_address@y2+1)& (0+255),b
  3196  000D9E  ECCD  F00A         	call	_lcd_set_address	;wreg free
  3197                           
  3198                           ;tft.c: 124: lcd_memory_start();
  3199  000DA2  EC84  F00D         	call	_lcd_memory_start	;wreg free
  3200                           
  3201                           ;tft.c: 126: switch (c) {
  3202  000DA6  D031               	goto	l835
  3203  000DA8                     
  3204                           ;tft.c: 128: for(i=0;i<n1;i++) {
  3205  000DA8  0E00               	movlw	0
  3206  000DAA  0100               	movlb	0	; () banked
  3207  000DAC  6FCF               	movwf	(lcd_pix@i+1)& (0+255),b
  3208  000DAE  0E00               	movlw	0
  3209  000DB0  6FCE               	movwf	lcd_pix@i& (0+255),b
  3210  000DB2  D009               	goto	l837
  3211  000DB4                     
  3212                           ; BSR set to: 0
  3213                           ;tft.c: 129: lcd_write_bus(0x00);
  3214                           
  3215                           ; BSR set to: 0
  3216  000DB4  0E00               	movlw	0
  3217  000DB6  EC38  F00D         	call	_lcd_write_bus
  3218                           
  3219                           ;tft.c: 130: lcd_write_bus(0x00);
  3220  000DBA  0E00               	movlw	0
  3221  000DBC  EC38  F00D         	call	_lcd_write_bus
  3222  000DC0  0100               	movlb	0	; () banked
  3223  000DC2  4BCE               	infsnz	lcd_pix@i& (0+255),f,b
  3224  000DC4  2BCF               	incf	(lcd_pix@i+1)& (0+255),f,b
  3225  000DC6                     l837:
  3226                           
  3227                           ; BSR set to: 0
  3228                           
  3229                           ; BSR set to: 0
  3230  000DC6  51CD               	movf	lcd_pix@n1& (0+255),w,b
  3231  000DC8  6FC9               	movwf	??_lcd_pix& (0+255),b
  3232  000DCA  6BCA               	clrf	(??_lcd_pix+1)& (0+255),b
  3233  000DCC  51C9               	movf	??_lcd_pix& (0+255),w,b
  3234  000DCE  5DCE               	subwf	lcd_pix@i& (0+255),w,b
  3235  000DD0  51CA               	movf	(??_lcd_pix+1)& (0+255),w,b
  3236  000DD2  59CF               	subwfb	(lcd_pix@i+1)& (0+255),w,b
  3237  000DD4  B0D8               	btfsc	status,0,c
  3238  000DD6  D021               	goto	l840
  3239  000DD8  D7ED               	goto	l838
  3240  000DDA                     
  3241                           ; BSR set to: 0
  3242                           ;tft.c: 134: for(i=0;i<n1;i++) {
  3243                           
  3244                           ; BSR set to: 0
  3245  000DDA  0E00               	movlw	0
  3246  000DDC  6FCF               	movwf	(lcd_pix@i+1)& (0+255),b
  3247  000DDE  0E00               	movlw	0
  3248  000DE0  6FCE               	movwf	lcd_pix@i& (0+255),b
  3249  000DE2  D009               	goto	l842
  3250  000DE4                     
  3251                           ; BSR set to: 0
  3252                           ;tft.c: 135: lcd_write_bus(0xFF);
  3253                           
  3254                           ; BSR set to: 0
  3255  000DE4  0EFF               	movlw	255
  3256  000DE6  EC38  F00D         	call	_lcd_write_bus
  3257                           
  3258                           ;tft.c: 136: lcd_write_bus(0xFF);
  3259  000DEA  0EFF               	movlw	255
  3260  000DEC  EC38  F00D         	call	_lcd_write_bus
  3261  000DF0  0100               	movlb	0	; () banked
  3262  000DF2  4BCE               	infsnz	lcd_pix@i& (0+255),f,b
  3263  000DF4  2BCF               	incf	(lcd_pix@i+1)& (0+255),f,b
  3264  000DF6                     l842:
  3265                           
  3266                           ; BSR set to: 0
  3267                           
  3268                           ; BSR set to: 0
  3269  000DF6  51CD               	movf	lcd_pix@n1& (0+255),w,b
  3270  000DF8  6FC9               	movwf	??_lcd_pix& (0+255),b
  3271  000DFA  6BCA               	clrf	(??_lcd_pix+1)& (0+255),b
  3272  000DFC  51C9               	movf	??_lcd_pix& (0+255),w,b
  3273  000DFE  5DCE               	subwf	lcd_pix@i& (0+255),w,b
  3274  000E00  51CA               	movf	(??_lcd_pix+1)& (0+255),w,b
  3275  000E02  59CF               	subwfb	(lcd_pix@i+1)& (0+255),w,b
  3276  000E04  B0D8               	btfsc	status,0,c
  3277  000E06  D009               	goto	l840
  3278  000E08  D7ED               	goto	l843
  3279  000E0A                     l835:
  3280                           
  3281                           ; BSR set to: 0
  3282  000E0A  0100               	movlb	0	; () banked
  3283  000E0C  51C7               	movf	lcd_pix@c& (0+255),w,b
  3284                           
  3285                           ; Switch size 1, requested type "space"
  3286                           ; Number of cases is 2, Range of values is 0 to 1
  3287                           ; switch strategies available:
  3288                           ; Name         Instructions Cycles
  3289                           ; simple_byte            7     4 (average)
  3290                           ;	Chosen strategy is simple_byte
  3291  000E0E  0A00               	xorlw	0	; case 0
  3292  000E10  B4D8               	btfsc	status,2,c
  3293  000E12  D7E3               	goto	l841
  3294  000E14  0A01               	xorlw	1	; case 1
  3295  000E16  B4D8               	btfsc	status,2,c
  3296  000E18  D7C7               	goto	l836
  3297  000E1A                     l840:
  3298                           
  3299                           ; BSR set to: 0
  3300                           ;tft.c: 141: LATA1 = 1;
  3301  000E1A  8289               	bsf	3977,1,c	;volatile
  3302                           
  3303                           ; BSR set to: 0
  3304  000E1C  0012               	return		;funcret
  3305  000E1E                     __end_of_lcd_pix:
  3306                           	opt stack 0
  3307                           tblptru	equ	0xFF8
  3308                           tblptrh	equ	0xFF7
  3309                           tblptrl	equ	0xFF6
  3310                           tablat	equ	0xFF5
  3311                           prodh	equ	0xFF4
  3312                           prodl	equ	0xFF3
  3313                           intcon	equ	0xFF2
  3314                           postinc0	equ	0xFEE
  3315                           wreg	equ	0xFE8
  3316                           postdec1	equ	0xFE5
  3317                           fsr1l	equ	0xFE1
  3318                           indf2	equ	0xFDF
  3319                           postinc2	equ	0xFDE
  3320                           fsr2h	equ	0xFDA
  3321                           fsr2l	equ	0xFD9
  3322                           status	equ	0xFD8
  3323                           
  3324 ;; *************** function _lcd_set_address *****************
  3325 ;; Defined at:
  3326 ;;		line 25 in file "tft.c"
  3327 ;; Parameters:    Size  Location     Type
  3328 ;;  x1              2    2[BANK0 ] unsigned int 
  3329 ;;  y1              2    4[BANK0 ] unsigned int 
  3330 ;;  x2              2    6[BANK0 ] unsigned int 
  3331 ;;  y2              2    8[BANK0 ] unsigned int 
  3332 ;; Auto vars:     Size  Location     Type
  3333 ;;		None
  3334 ;; Return value:  Size  Location     Type
  3335 ;;                  1    wreg      void 
  3336 ;; Registers used:
  3337 ;;		wreg, status,2, cstack
  3338 ;; Tracked objects:
  3339 ;;		On entry : 0/0
  3340 ;;		On exit  : 0/0
  3341 ;;		Unchanged: 0/0
  3342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3343 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3344 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3345 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3346 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3347 ;;Total ram usage:        8 bytes
  3348 ;; Hardware stack levels used:    1
  3349 ;; Hardware stack levels required when called:   12
  3350 ;; This function calls:
  3351 ;;		_lcd_write_bus
  3352 ;;		_lcd_write_command
  3353 ;; This function is called by:
  3354 ;;		_lcd_set_background
  3355 ;;		_lcd_pix
  3356 ;; This function uses a non-reentrant model
  3357 ;;
  3358                           
  3359                           	psect	text8
  3360  00159A                     __ptext8:
  3361                           	opt stack 0
  3362  00159A                     _lcd_set_address:
  3363                           	opt stack 16
  3364                           
  3365                           ;tft.c: 26: lcd_write_command(0x2A);
  3366                           
  3367                           ; BSR set to: 0
  3368                           ;incstack = 0
  3369  00159A  0E2A               	movlw	42
  3370  00159C  EC1F  F00D         	call	_lcd_write_command
  3371                           
  3372                           ;tft.c: 27: lcd_write_bus(x1>>8);
  3373  0015A0  0100               	movlb	0	; () banked
  3374  0015A2  51BC               	movf	(lcd_set_address@x1+1)& (0+255),w,b
  3375  0015A4  EC38  F00D         	call	_lcd_write_bus
  3376                           
  3377                           ;tft.c: 28: lcd_write_bus(x1);
  3378  0015A8  0100               	movlb	0	; () banked
  3379  0015AA  51BB               	movf	lcd_set_address@x1& (0+255),w,b
  3380  0015AC  EC38  F00D         	call	_lcd_write_bus
  3381                           
  3382                           ;tft.c: 29: lcd_write_bus(x2>>8);
  3383  0015B0  0100               	movlb	0	; () banked
  3384  0015B2  51C0               	movf	(lcd_set_address@x2+1)& (0+255),w,b
  3385  0015B4  EC38  F00D         	call	_lcd_write_bus
  3386                           
  3387                           ;tft.c: 30: lcd_write_bus(x2);
  3388  0015B8  0100               	movlb	0	; () banked
  3389  0015BA  51BF               	movf	lcd_set_address@x2& (0+255),w,b
  3390  0015BC  EC38  F00D         	call	_lcd_write_bus
  3391                           
  3392                           ;tft.c: 32: lcd_write_command(0x2B);
  3393  0015C0  0E2B               	movlw	43
  3394  0015C2  EC1F  F00D         	call	_lcd_write_command
  3395                           
  3396                           ;tft.c: 33: lcd_write_bus(y1>>8);
  3397  0015C6  0100               	movlb	0	; () banked
  3398  0015C8  51BE               	movf	(lcd_set_address@y1+1)& (0+255),w,b
  3399  0015CA  EC38  F00D         	call	_lcd_write_bus
  3400                           
  3401                           ;tft.c: 34: lcd_write_bus(y1);
  3402  0015CE  0100               	movlb	0	; () banked
  3403  0015D0  51BD               	movf	lcd_set_address@y1& (0+255),w,b
  3404  0015D2  EC38  F00D         	call	_lcd_write_bus
  3405                           
  3406                           ;tft.c: 35: lcd_write_bus(y2>>8);
  3407  0015D6  0100               	movlb	0	; () banked
  3408  0015D8  51C2               	movf	(lcd_set_address@y2+1)& (0+255),w,b
  3409  0015DA  EC38  F00D         	call	_lcd_write_bus
  3410                           
  3411                           ;tft.c: 36: lcd_write_bus(y2);
  3412  0015DE  0100               	movlb	0	; () banked
  3413  0015E0  51C1               	movf	lcd_set_address@y2& (0+255),w,b
  3414  0015E2  EC38  F00D         	call	_lcd_write_bus
  3415  0015E6  0012               	return		;funcret
  3416  0015E8                     __end_of_lcd_set_address:
  3417                           	opt stack 0
  3418                           tblptru	equ	0xFF8
  3419                           tblptrh	equ	0xFF7
  3420                           tblptrl	equ	0xFF6
  3421                           tablat	equ	0xFF5
  3422                           prodh	equ	0xFF4
  3423                           prodl	equ	0xFF3
  3424                           intcon	equ	0xFF2
  3425                           postinc0	equ	0xFEE
  3426                           wreg	equ	0xFE8
  3427                           postdec1	equ	0xFE5
  3428                           fsr1l	equ	0xFE1
  3429                           indf2	equ	0xFDF
  3430                           postinc2	equ	0xFDE
  3431                           fsr2h	equ	0xFDA
  3432                           fsr2l	equ	0xFD9
  3433                           status	equ	0xFD8
  3434                           
  3435 ;; *************** function _lcd_memory_start *****************
  3436 ;; Defined at:
  3437 ;;		line 39 in file "tft.c"
  3438 ;; Parameters:    Size  Location     Type
  3439 ;;		None
  3440 ;; Auto vars:     Size  Location     Type
  3441 ;;		None
  3442 ;; Return value:  Size  Location     Type
  3443 ;;                  1    wreg      void 
  3444 ;; Registers used:
  3445 ;;		wreg, status,2, cstack
  3446 ;; Tracked objects:
  3447 ;;		On entry : 0/0
  3448 ;;		On exit  : 0/0
  3449 ;;		Unchanged: 0/0
  3450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3452 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3453 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3454 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3455 ;;Total ram usage:        0 bytes
  3456 ;; Hardware stack levels used:    1
  3457 ;; Hardware stack levels required when called:   12
  3458 ;; This function calls:
  3459 ;;		_lcd_write_command
  3460 ;; This function is called by:
  3461 ;;		_lcd_set_background
  3462 ;;		_lcd_pix
  3463 ;; This function uses a non-reentrant model
  3464 ;;
  3465                           
  3466                           	psect	text9
  3467  001B08                     __ptext9:
  3468                           	opt stack 0
  3469  001B08                     _lcd_memory_start:
  3470                           	opt stack 16
  3471                           
  3472                           ;tft.c: 40: lcd_write_command(0x2C);
  3473                           
  3474                           ;incstack = 0
  3475  001B08  0E2C               	movlw	44
  3476  001B0A  EC1F  F00D         	call	_lcd_write_command
  3477  001B0E  0012               	return		;funcret
  3478  001B10                     __end_of_lcd_memory_start:
  3479                           	opt stack 0
  3480                           tblptru	equ	0xFF8
  3481                           tblptrh	equ	0xFF7
  3482                           tblptrl	equ	0xFF6
  3483                           tablat	equ	0xFF5
  3484                           prodh	equ	0xFF4
  3485                           prodl	equ	0xFF3
  3486                           intcon	equ	0xFF2
  3487                           postinc0	equ	0xFEE
  3488                           wreg	equ	0xFE8
  3489                           postdec1	equ	0xFE5
  3490                           fsr1l	equ	0xFE1
  3491                           indf2	equ	0xFDF
  3492                           postinc2	equ	0xFDE
  3493                           fsr2h	equ	0xFDA
  3494                           fsr2l	equ	0xFD9
  3495                           status	equ	0xFD8
  3496                           
  3497 ;; *************** function ___wmul *****************
  3498 ;; Defined at:
  3499 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  3500 ;; Parameters:    Size  Location     Type
  3501 ;;  multiplier      2    0[BANK0 ] unsigned int 
  3502 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  3503 ;; Auto vars:     Size  Location     Type
  3504 ;;  product         2    4[BANK0 ] unsigned int 
  3505 ;; Return value:  Size  Location     Type
  3506 ;;                  2    0[BANK0 ] unsigned int 
  3507 ;; Registers used:
  3508 ;;		wreg, status,2, status,0, prodl, prodh
  3509 ;; Tracked objects:
  3510 ;;		On entry : 0/0
  3511 ;;		On exit  : 0/0
  3512 ;;		Unchanged: 0/0
  3513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3514 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3515 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3517 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3518 ;;Total ram usage:        6 bytes
  3519 ;; Hardware stack levels used:    1
  3520 ;; Hardware stack levels required when called:   10
  3521 ;; This function calls:
  3522 ;;		Nothing
  3523 ;; This function is called by:
  3524 ;;		_lcd_pix
  3525 ;;		_lcd_text
  3526 ;; This function uses a non-reentrant model
  3527 ;;
  3528                           
  3529                           	psect	text10
  3530  0018A4                     __ptext10:
  3531                           	opt stack 0
  3532  0018A4                     ___wmul:
  3533                           	opt stack 18
  3534                           
  3535                           ;incstack = 0
  3536  0018A4  0100               	movlb	0	; () banked
  3537  0018A6  51B9               	movf	___wmul@multiplier& (0+255),w,b
  3538  0018A8  03BB               	mulwf	___wmul@multiplicand& (0+255),b
  3539  0018AA  CFF3 F0BD          	movff	prodl,___wmul@product
  3540  0018AE  CFF4 F0BE          	movff	prodh,___wmul@product+1
  3541  0018B2  51B9               	movf	___wmul@multiplier& (0+255),w,b
  3542  0018B4  03BC               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  3543  0018B6  50F3               	movf	prodl,w,c
  3544  0018B8  27BE               	addwf	(___wmul@product+1)& (0+255),f,b
  3545  0018BA  51BA               	movf	(___wmul@multiplier+1)& (0+255),w,b
  3546  0018BC  03BB               	mulwf	___wmul@multiplicand& (0+255),b
  3547  0018BE  50F3               	movf	prodl,w,c
  3548  0018C0  27BE               	addwf	(___wmul@product+1)& (0+255),f,b
  3549                           
  3550                           ; BSR set to: 0
  3551  0018C2  C0BD  F0B9         	movff	___wmul@product,?___wmul
  3552  0018C6  C0BE  F0BA         	movff	___wmul@product+1,?___wmul+1
  3553  0018CA  0012               	return	
  3554  0018CC                     __end_of___wmul:
  3555                           	opt stack 0
  3556                           tblptru	equ	0xFF8
  3557                           tblptrh	equ	0xFF7
  3558                           tblptrl	equ	0xFF6
  3559                           tablat	equ	0xFF5
  3560                           prodh	equ	0xFF4
  3561                           prodl	equ	0xFF3
  3562                           intcon	equ	0xFF2
  3563                           postinc0	equ	0xFEE
  3564                           wreg	equ	0xFE8
  3565                           postdec1	equ	0xFE5
  3566                           fsr1l	equ	0xFE1
  3567                           indf2	equ	0xFDF
  3568                           postinc2	equ	0xFDE
  3569                           fsr2h	equ	0xFDA
  3570                           fsr2l	equ	0xFD9
  3571                           status	equ	0xFD8
  3572                           
  3573 ;; *************** function _lcd_init *****************
  3574 ;; Defined at:
  3575 ;;		line 43 in file "tft.c"
  3576 ;; Parameters:    Size  Location     Type
  3577 ;;		None
  3578 ;; Auto vars:     Size  Location     Type
  3579 ;;		None
  3580 ;; Return value:  Size  Location     Type
  3581 ;;                  1    wreg      void 
  3582 ;; Registers used:
  3583 ;;		wreg, status,2, cstack
  3584 ;; Tracked objects:
  3585 ;;		On entry : 0/0
  3586 ;;		On exit  : 0/0
  3587 ;;		Unchanged: 0/0
  3588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3589 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3590 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3591 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3592 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3593 ;;Total ram usage:        2 bytes
  3594 ;; Hardware stack levels used:    1
  3595 ;; Hardware stack levels required when called:   12
  3596 ;; This function calls:
  3597 ;;		_lcd_write_bus
  3598 ;;		_lcd_write_command
  3599 ;; This function is called by:
  3600 ;;		_main
  3601 ;; This function uses a non-reentrant model
  3602 ;;
  3603                           
  3604                           	psect	text11
  3605  000994                     __ptext11:
  3606                           	opt stack 0
  3607  000994                     _lcd_init:
  3608                           	opt stack 18
  3609                           
  3610                           ;tft.c: 44: LATA = 0xFF;
  3611                           
  3612                           ; BSR set to: 0
  3613                           ;incstack = 0
  3614  000994  6889               	setf	3977,c	;volatile
  3615                           
  3616                           ;tft.c: 45: _delay((unsigned long)((5)*(16000000/4000.0)));
  3617  000996  0E1A               	movlw	26
  3618  000998  0100               	movlb	0	; () banked
  3619  00099A  6FBB               	movwf	??_lcd_init& (0+255),b
  3620  00099C  0EF8               	movlw	248
  3621  00099E                     u3617:
  3622  00099E  2EE8               	decfsz	wreg,f,c
  3623  0009A0  D7FE               	bra	u3617
  3624  0009A2  2FBB               	decfsz	??_lcd_init& (0+255),f,b
  3625  0009A4  D7FC               	bra	u3617
  3626  0009A6  F000               	nop	
  3627                           
  3628                           ;tft.c: 46: LATA0 = 0;
  3629  0009A8  9089               	bcf	3977,0,c	;volatile
  3630                           
  3631                           ;tft.c: 47: _delay((unsigned long)((15)*(16000000/4000.0)));
  3632  0009AA  0E4E               	movlw	78
  3633  0009AC  0100               	movlb	0	; () banked
  3634  0009AE  6FBB               	movwf	??_lcd_init& (0+255),b
  3635  0009B0  0EEB               	movlw	235
  3636  0009B2                     u3627:
  3637  0009B2  2EE8               	decfsz	wreg,f,c
  3638  0009B4  D7FE               	bra	u3627
  3639  0009B6  2FBB               	decfsz	??_lcd_init& (0+255),f,b
  3640  0009B8  D7FC               	bra	u3627
  3641                           
  3642                           ;tft.c: 48: LATA0 = 1;
  3643  0009BA  8089               	bsf	3977,0,c	;volatile
  3644                           
  3645                           ;tft.c: 49: _delay((unsigned long)((15)*(16000000/4000.0)));
  3646  0009BC  0E4E               	movlw	78
  3647  0009BE  0100               	movlb	0	; () banked
  3648  0009C0  6FBB               	movwf	??_lcd_init& (0+255),b
  3649  0009C2  0EEB               	movlw	235
  3650  0009C4                     u3637:
  3651  0009C4  2EE8               	decfsz	wreg,f,c
  3652  0009C6  D7FE               	bra	u3637
  3653  0009C8  2FBB               	decfsz	??_lcd_init& (0+255),f,b
  3654  0009CA  D7FC               	bra	u3637
  3655                           
  3656                           ;tft.c: 51: LATA1 = 0;
  3657  0009CC  9289               	bcf	3977,1,c	;volatile
  3658                           
  3659                           ;tft.c: 53: lcd_write_command(0x11);
  3660  0009CE  0E11               	movlw	17
  3661  0009D0  EC1F  F00D         	call	_lcd_write_command
  3662                           
  3663                           ;tft.c: 54: _delay((unsigned long)((20)*(16000000/4000.0)));
  3664  0009D4  0E68               	movlw	104
  3665  0009D6  0100               	movlb	0	; () banked
  3666  0009D8  6FBB               	movwf	??_lcd_init& (0+255),b
  3667  0009DA  0EE4               	movlw	228
  3668  0009DC                     u3647:
  3669  0009DC  2EE8               	decfsz	wreg,f,c
  3670  0009DE  D7FE               	bra	u3647
  3671  0009E0  2FBB               	decfsz	??_lcd_init& (0+255),f,b
  3672  0009E2  D7FC               	bra	u3647
  3673  0009E4  F000               	nop	
  3674                           
  3675                           ;tft.c: 55: lcd_write_command(0xD0);
  3676  0009E6  0ED0               	movlw	208
  3677  0009E8  EC1F  F00D         	call	_lcd_write_command
  3678                           
  3679                           ;tft.c: 56: lcd_write_bus(0x07);
  3680  0009EC  0E07               	movlw	7
  3681  0009EE  EC38  F00D         	call	_lcd_write_bus
  3682                           
  3683                           ;tft.c: 57: lcd_write_bus(0x42);
  3684  0009F2  0E42               	movlw	66
  3685  0009F4  EC38  F00D         	call	_lcd_write_bus
  3686                           
  3687                           ;tft.c: 58: lcd_write_bus(0x18);
  3688  0009F8  0E18               	movlw	24
  3689  0009FA  EC38  F00D         	call	_lcd_write_bus
  3690                           
  3691                           ;tft.c: 60: lcd_write_command(0xD1);
  3692  0009FE  0ED1               	movlw	209
  3693  000A00  EC1F  F00D         	call	_lcd_write_command
  3694                           
  3695                           ;tft.c: 61: lcd_write_bus(0x00);
  3696  000A04  0E00               	movlw	0
  3697  000A06  EC38  F00D         	call	_lcd_write_bus
  3698                           
  3699                           ;tft.c: 62: lcd_write_bus(0x07);
  3700  000A0A  0E07               	movlw	7
  3701  000A0C  EC38  F00D         	call	_lcd_write_bus
  3702                           
  3703                           ;tft.c: 63: lcd_write_bus(0x10);
  3704  000A10  0E10               	movlw	16
  3705  000A12  EC38  F00D         	call	_lcd_write_bus
  3706                           
  3707                           ;tft.c: 65: lcd_write_command(0xD2);
  3708  000A16  0ED2               	movlw	210
  3709  000A18  EC1F  F00D         	call	_lcd_write_command
  3710                           
  3711                           ;tft.c: 66: lcd_write_bus(0x01);
  3712  000A1C  0E01               	movlw	1
  3713  000A1E  EC38  F00D         	call	_lcd_write_bus
  3714                           
  3715                           ;tft.c: 67: lcd_write_bus(0x00);
  3716  000A22  0E00               	movlw	0
  3717  000A24  EC38  F00D         	call	_lcd_write_bus
  3718                           
  3719                           ;tft.c: 69: lcd_write_command(0xC0);
  3720  000A28  0EC0               	movlw	192
  3721  000A2A  EC1F  F00D         	call	_lcd_write_command
  3722                           
  3723                           ;tft.c: 70: lcd_write_bus(0x10);
  3724  000A2E  0E10               	movlw	16
  3725  000A30  EC38  F00D         	call	_lcd_write_bus
  3726                           
  3727                           ;tft.c: 71: lcd_write_bus(0x3B);
  3728  000A34  0E3B               	movlw	59
  3729  000A36  EC38  F00D         	call	_lcd_write_bus
  3730                           
  3731                           ;tft.c: 72: lcd_write_bus(0x00);
  3732  000A3A  0E00               	movlw	0
  3733  000A3C  EC38  F00D         	call	_lcd_write_bus
  3734                           
  3735                           ;tft.c: 73: lcd_write_bus(0x02);
  3736  000A40  0E02               	movlw	2
  3737  000A42  EC38  F00D         	call	_lcd_write_bus
  3738                           
  3739                           ;tft.c: 74: lcd_write_bus(0x11);
  3740  000A46  0E11               	movlw	17
  3741  000A48  EC38  F00D         	call	_lcd_write_bus
  3742                           
  3743                           ;tft.c: 76: lcd_write_command(0xC5);
  3744  000A4C  0EC5               	movlw	197
  3745  000A4E  EC1F  F00D         	call	_lcd_write_command
  3746                           
  3747                           ;tft.c: 77: lcd_write_bus(0x03);
  3748  000A52  0E03               	movlw	3
  3749  000A54  EC38  F00D         	call	_lcd_write_bus
  3750                           
  3751                           ;tft.c: 79: lcd_write_command(0x36);
  3752  000A58  0E36               	movlw	54
  3753  000A5A  EC1F  F00D         	call	_lcd_write_command
  3754                           
  3755                           ;tft.c: 80: lcd_write_bus(0x0A);
  3756  000A5E  0E0A               	movlw	10
  3757  000A60  EC38  F00D         	call	_lcd_write_bus
  3758                           
  3759                           ;tft.c: 82: lcd_write_command(0x3A);
  3760  000A64  0E3A               	movlw	58
  3761  000A66  EC1F  F00D         	call	_lcd_write_command
  3762                           
  3763                           ;tft.c: 83: lcd_write_bus(0x55);
  3764  000A6A  0E55               	movlw	85
  3765  000A6C  EC38  F00D         	call	_lcd_write_bus
  3766                           
  3767                           ;tft.c: 85: lcd_write_command(0x2A);
  3768  000A70  0E2A               	movlw	42
  3769  000A72  EC1F  F00D         	call	_lcd_write_command
  3770                           
  3771                           ;tft.c: 86: lcd_write_bus(0x00);
  3772  000A76  0E00               	movlw	0
  3773  000A78  EC38  F00D         	call	_lcd_write_bus
  3774                           
  3775                           ;tft.c: 87: lcd_write_bus(0x00);
  3776  000A7C  0E00               	movlw	0
  3777  000A7E  EC38  F00D         	call	_lcd_write_bus
  3778                           
  3779                           ;tft.c: 88: lcd_write_bus(0x01);
  3780  000A82  0E01               	movlw	1
  3781  000A84  EC38  F00D         	call	_lcd_write_bus
  3782                           
  3783                           ;tft.c: 89: lcd_write_bus(0x3F);
  3784  000A88  0E3F               	movlw	63
  3785  000A8A  EC38  F00D         	call	_lcd_write_bus
  3786                           
  3787                           ;tft.c: 91: lcd_write_command(0x2B);
  3788  000A8E  0E2B               	movlw	43
  3789  000A90  EC1F  F00D         	call	_lcd_write_command
  3790                           
  3791                           ;tft.c: 92: lcd_write_bus(0x00);
  3792  000A94  0E00               	movlw	0
  3793  000A96  EC38  F00D         	call	_lcd_write_bus
  3794                           
  3795                           ;tft.c: 93: lcd_write_bus(0x00);
  3796  000A9A  0E00               	movlw	0
  3797  000A9C  EC38  F00D         	call	_lcd_write_bus
  3798                           
  3799                           ;tft.c: 94: lcd_write_bus(0x01);
  3800  000AA0  0E01               	movlw	1
  3801  000AA2  EC38  F00D         	call	_lcd_write_bus
  3802                           
  3803                           ;tft.c: 95: lcd_write_bus(0xE0);
  3804  000AA6  0EE0               	movlw	224
  3805  000AA8  EC38  F00D         	call	_lcd_write_bus
  3806                           
  3807                           ;tft.c: 96: _delay((unsigned long)((120)*(16000000/4000.0)));
  3808  000AAC  0E03               	movlw	3
  3809  000AAE  0100               	movlb	0	; () banked
  3810  000AB0  6FBC               	movwf	(??_lcd_init+1)& (0+255),b
  3811  000AB2  0E70               	movlw	112
  3812  000AB4  6FBB               	movwf	??_lcd_init& (0+255),b
  3813  000AB6  0E5C               	movlw	92
  3814  000AB8                     u3657:
  3815  000AB8  2EE8               	decfsz	wreg,f,c
  3816  000ABA  D7FE               	bra	u3657
  3817  000ABC  2FBB               	decfsz	??_lcd_init& (0+255),f,b
  3818  000ABE  D7FC               	bra	u3657
  3819  000AC0  2FBC               	decfsz	(??_lcd_init+1)& (0+255),f,b
  3820  000AC2  D7FA               	bra	u3657
  3821  000AC4  F000               	nop	
  3822                           
  3823                           ;tft.c: 97: lcd_write_command(0x29);
  3824  000AC6  0E29               	movlw	41
  3825  000AC8  EC1F  F00D         	call	_lcd_write_command
  3826                           
  3827                           ;tft.c: 99: LATA1 = 1;
  3828  000ACC  8289               	bsf	3977,1,c	;volatile
  3829  000ACE  0012               	return		;funcret
  3830  000AD0                     __end_of_lcd_init:
  3831                           	opt stack 0
  3832                           tblptru	equ	0xFF8
  3833                           tblptrh	equ	0xFF7
  3834                           tblptrl	equ	0xFF6
  3835                           tablat	equ	0xFF5
  3836                           prodh	equ	0xFF4
  3837                           prodl	equ	0xFF3
  3838                           intcon	equ	0xFF2
  3839                           postinc0	equ	0xFEE
  3840                           wreg	equ	0xFE8
  3841                           postdec1	equ	0xFE5
  3842                           fsr1l	equ	0xFE1
  3843                           indf2	equ	0xFDF
  3844                           postinc2	equ	0xFDE
  3845                           fsr2h	equ	0xFDA
  3846                           fsr2l	equ	0xFD9
  3847                           status	equ	0xFD8
  3848                           
  3849 ;; *************** function _lcd_write_command *****************
  3850 ;; Defined at:
  3851 ;;		line 19 in file "tft.c"
  3852 ;; Parameters:    Size  Location     Type
  3853 ;;  cmd             1    wreg     unsigned char 
  3854 ;; Auto vars:     Size  Location     Type
  3855 ;;  cmd             1    1[BANK0 ] unsigned char 
  3856 ;; Return value:  Size  Location     Type
  3857 ;;                  1    wreg      void 
  3858 ;; Registers used:
  3859 ;;		wreg, status,2, cstack
  3860 ;; Tracked objects:
  3861 ;;		On entry : 0/0
  3862 ;;		On exit  : 0/0
  3863 ;;		Unchanged: 0/0
  3864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3866 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3868 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3869 ;;Total ram usage:        1 bytes
  3870 ;; Hardware stack levels used:    1
  3871 ;; Hardware stack levels required when called:   11
  3872 ;; This function calls:
  3873 ;;		_lcd_write_bus
  3874 ;; This function is called by:
  3875 ;;		_lcd_set_address
  3876 ;;		_lcd_memory_start
  3877 ;;		_lcd_init
  3878 ;; This function uses a non-reentrant model
  3879 ;;
  3880                           
  3881                           	psect	text12
  3882  001A3E                     __ptext12:
  3883                           	opt stack 0
  3884  001A3E                     _lcd_write_command:
  3885                           	opt stack 16
  3886                           
  3887                           ;incstack = 0
  3888                           ;lcd_write_command@cmd stored from wreg
  3889  001A3E  0100               	movlb	0	; () banked
  3890  001A40  6FBA               	movwf	lcd_write_command@cmd& (0+255),b
  3891                           
  3892                           ;tft.c: 20: LATA2 = 0;
  3893  001A42  9489               	bcf	3977,2,c	;volatile
  3894                           
  3895                           ;tft.c: 21: lcd_write_bus(cmd);
  3896  001A44  0100               	movlb	0	; () banked
  3897  001A46  51BA               	movf	lcd_write_command@cmd& (0+255),w,b
  3898  001A48  EC38  F00D         	call	_lcd_write_bus
  3899                           
  3900                           ;tft.c: 22: LATA2 = 1;
  3901  001A4C  8489               	bsf	3977,2,c	;volatile
  3902  001A4E  0012               	return		;funcret
  3903  001A50                     __end_of_lcd_write_command:
  3904                           	opt stack 0
  3905                           tblptru	equ	0xFF8
  3906                           tblptrh	equ	0xFF7
  3907                           tblptrl	equ	0xFF6
  3908                           tablat	equ	0xFF5
  3909                           prodh	equ	0xFF4
  3910                           prodl	equ	0xFF3
  3911                           intcon	equ	0xFF2
  3912                           postinc0	equ	0xFEE
  3913                           wreg	equ	0xFE8
  3914                           postdec1	equ	0xFE5
  3915                           fsr1l	equ	0xFE1
  3916                           indf2	equ	0xFDF
  3917                           postinc2	equ	0xFDE
  3918                           fsr2h	equ	0xFDA
  3919                           fsr2l	equ	0xFD9
  3920                           status	equ	0xFD8
  3921                           
  3922 ;; *************** function _lcd_write_bus *****************
  3923 ;; Defined at:
  3924 ;;		line 12 in file "tft.c"
  3925 ;; Parameters:    Size  Location     Type
  3926 ;;  data            1    wreg     unsigned char 
  3927 ;; Auto vars:     Size  Location     Type
  3928 ;;  data            1    0[BANK0 ] unsigned char 
  3929 ;; Return value:  Size  Location     Type
  3930 ;;                  1    wreg      void 
  3931 ;; Registers used:
  3932 ;;		wreg
  3933 ;; Tracked objects:
  3934 ;;		On entry : 0/0
  3935 ;;		On exit  : 0/0
  3936 ;;		Unchanged: 0/0
  3937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3939 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3941 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3942 ;;Total ram usage:        1 bytes
  3943 ;; Hardware stack levels used:    1
  3944 ;; Hardware stack levels required when called:   10
  3945 ;; This function calls:
  3946 ;;		Nothing
  3947 ;; This function is called by:
  3948 ;;		_lcd_write_command
  3949 ;;		_lcd_set_address
  3950 ;;		_lcd_init
  3951 ;;		_lcd_set_background
  3952 ;;		_lcd_pix
  3953 ;; This function uses a non-reentrant model
  3954 ;;
  3955                           
  3956                           	psect	text13
  3957  001A70                     __ptext13:
  3958                           	opt stack 0
  3959  001A70                     _lcd_write_bus:
  3960                           	opt stack 18
  3961                           
  3962                           ;incstack = 0
  3963                           ;lcd_write_bus@data stored from wreg
  3964  001A70  0100               	movlb	0	; () banked
  3965  001A72  6FB9               	movwf	lcd_write_bus@data& (0+255),b
  3966                           
  3967                           ;tft.c: 13: LATB = data;
  3968  001A74  C0B9  FF8A         	movff	lcd_write_bus@data,3978	;volatile
  3969                           
  3970                           ;tft.c: 14: LATA3 = 0;
  3971  001A78  9689               	bcf	3977,3,c	;volatile
  3972                           
  3973                           ;tft.c: 16: LATA3 = 1;
  3974  001A7A  8689               	bsf	3977,3,c	;volatile
  3975  001A7C  0012               	return		;funcret
  3976  001A7E                     __end_of_lcd_write_bus:
  3977                           	opt stack 0
  3978                           tblptru	equ	0xFF8
  3979                           tblptrh	equ	0xFF7
  3980                           tblptrl	equ	0xFF6
  3981                           tablat	equ	0xFF5
  3982                           prodh	equ	0xFF4
  3983                           prodl	equ	0xFF3
  3984                           intcon	equ	0xFF2
  3985                           postinc0	equ	0xFEE
  3986                           wreg	equ	0xFE8
  3987                           postdec1	equ	0xFE5
  3988                           fsr1l	equ	0xFE1
  3989                           indf2	equ	0xFDF
  3990                           postinc2	equ	0xFDE
  3991                           fsr2h	equ	0xFDA
  3992                           fsr2l	equ	0xFD9
  3993                           status	equ	0xFD8
  3994                           
  3995 ;; *************** function _SYSTEM_Initialize *****************
  3996 ;; Defined at:
  3997 ;;		line 50 in file "mcc_generated_files/mcc.c"
  3998 ;; Parameters:    Size  Location     Type
  3999 ;;		None
  4000 ;; Auto vars:     Size  Location     Type
  4001 ;;		None
  4002 ;; Return value:  Size  Location     Type
  4003 ;;                  1    wreg      void 
  4004 ;; Registers used:
  4005 ;;		wreg, status,2, status,0, cstack
  4006 ;; Tracked objects:
  4007 ;;		On entry : 0/0
  4008 ;;		On exit  : 0/0
  4009 ;;		Unchanged: 0/0
  4010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4012 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4013 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4014 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4015 ;;Total ram usage:        0 bytes
  4016 ;; Hardware stack levels used:    1
  4017 ;; Hardware stack levels required when called:   12
  4018 ;; This function calls:
  4019 ;;		_EUSART1_Initialize
  4020 ;;		_EUSART2_Initialize
  4021 ;;		_I2C_Initialize
  4022 ;;		_INTERRUPT_Initialize
  4023 ;;		_OSCILLATOR_Initialize
  4024 ;;		_PIN_MANAGER_Initialize
  4025 ;;		_TMR2_Initialize
  4026 ;; This function is called by:
  4027 ;;		_main
  4028 ;; This function uses a non-reentrant model
  4029 ;;
  4030                           
  4031                           	psect	text14
  4032  0019D2                     __ptext14:
  4033                           	opt stack 0
  4034  0019D2                     _SYSTEM_Initialize:
  4035                           	opt stack 18
  4036                           
  4037                           ;mcc.c: 53: INTERRUPT_Initialize();
  4038                           
  4039                           ;incstack = 0
  4040  0019D2  EC8F  F00D         	call	_INTERRUPT_Initialize	;wreg free
  4041                           
  4042                           ;mcc.c: 54: PIN_MANAGER_Initialize();
  4043  0019D6  EC4C  F009         	call	_PIN_MANAGER_Initialize	;wreg free
  4044                           
  4045                           ;mcc.c: 55: OSCILLATOR_Initialize();
  4046  0019DA  EC28  F00D         	call	_OSCILLATOR_Initialize	;wreg free
  4047                           
  4048                           ;mcc.c: 56: I2C_Initialize();
  4049  0019DE  EC27  F00C         	call	_I2C_Initialize	;wreg free
  4050                           
  4051                           ;mcc.c: 57: TMR2_Initialize();
  4052  0019E2  EC79  F00C         	call	_TMR2_Initialize	;wreg free
  4053                           
  4054                           ;mcc.c: 58: EUSART1_Initialize();
  4055  0019E6  EC53  F00A         	call	_EUSART1_Initialize	;wreg free
  4056                           
  4057                           ;mcc.c: 59: EUSART2_Initialize();
  4058  0019EA  ECF8  F009         	call	_EUSART2_Initialize	;wreg free
  4059  0019EE  0012               	return		;funcret
  4060  0019F0                     __end_of_SYSTEM_Initialize:
  4061                           	opt stack 0
  4062                           tblptru	equ	0xFF8
  4063                           tblptrh	equ	0xFF7
  4064                           tblptrl	equ	0xFF6
  4065                           tablat	equ	0xFF5
  4066                           prodh	equ	0xFF4
  4067                           prodl	equ	0xFF3
  4068                           intcon	equ	0xFF2
  4069                           postinc0	equ	0xFEE
  4070                           wreg	equ	0xFE8
  4071                           postdec1	equ	0xFE5
  4072                           fsr1l	equ	0xFE1
  4073                           indf2	equ	0xFDF
  4074                           postinc2	equ	0xFDE
  4075                           fsr2h	equ	0xFDA
  4076                           fsr2l	equ	0xFD9
  4077                           status	equ	0xFD8
  4078                           
  4079 ;; *************** function _TMR2_Initialize *****************
  4080 ;; Defined at:
  4081 ;;		line 65 in file "mcc_generated_files/tmr2.c"
  4082 ;; Parameters:    Size  Location     Type
  4083 ;;		None
  4084 ;; Auto vars:     Size  Location     Type
  4085 ;;		None
  4086 ;; Return value:  Size  Location     Type
  4087 ;;                  1    wreg      void 
  4088 ;; Registers used:
  4089 ;;		wreg, status,2, status,0, cstack
  4090 ;; Tracked objects:
  4091 ;;		On entry : 0/0
  4092 ;;		On exit  : 0/0
  4093 ;;		Unchanged: 0/0
  4094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4095 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4096 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4097 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4098 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4099 ;;Total ram usage:        0 bytes
  4100 ;; Hardware stack levels used:    1
  4101 ;; Hardware stack levels required when called:   11
  4102 ;; This function calls:
  4103 ;;		_TMR2_SetInterruptHandler
  4104 ;; This function is called by:
  4105 ;;		_SYSTEM_Initialize
  4106 ;; This function uses a non-reentrant model
  4107 ;;
  4108                           
  4109                           	psect	text15
  4110  0018F2                     __ptext15:
  4111                           	opt stack 0
  4112  0018F2                     _TMR2_Initialize:
  4113                           	opt stack 18
  4114                           
  4115                           ;tmr2.c: 70: PR2 = 0x0A;
  4116                           
  4117                           ;incstack = 0
  4118  0018F2  0E0A               	movlw	10
  4119  0018F4  6ECB               	movwf	4043,c	;volatile
  4120                           
  4121                           ;tmr2.c: 73: TMR2 = 0x00;
  4122  0018F6  0E00               	movlw	0
  4123  0018F8  6ECC               	movwf	4044,c	;volatile
  4124                           
  4125                           ;tmr2.c: 76: PIR1bits.TMR2IF = 0;
  4126  0018FA  929E               	bcf	3998,1,c	;volatile
  4127                           
  4128                           ;tmr2.c: 79: PIE1bits.TMR2IE = 1;
  4129  0018FC  829D               	bsf	3997,1,c	;volatile
  4130                           
  4131                           ;tmr2.c: 82: TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandler);
  4132  0018FE  0E24               	movlw	low _TMR2_DefaultInterruptHandler
  4133  001900  0100               	movlb	0	; () banked
  4134  001902  6FB9               	movwf	TMR2_SetInterruptHandler@InterruptHandler& (0+255),b
  4135  001904  0E1B               	movlw	high _TMR2_DefaultInterruptHandler
  4136  001906  6FBA               	movwf	(TMR2_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  4137  001908  EC52  F00D         	call	_TMR2_SetInterruptHandler	;wreg free
  4138                           
  4139                           ;tmr2.c: 85: T2CON = 0x4D;
  4140  00190C  0E4D               	movlw	77
  4141  00190E  6ECA               	movwf	4042,c	;volatile
  4142  001910  0012               	return		;funcret
  4143  001912                     __end_of_TMR2_Initialize:
  4144                           	opt stack 0
  4145                           tblptru	equ	0xFF8
  4146                           tblptrh	equ	0xFF7
  4147                           tblptrl	equ	0xFF6
  4148                           tablat	equ	0xFF5
  4149                           prodh	equ	0xFF4
  4150                           prodl	equ	0xFF3
  4151                           intcon	equ	0xFF2
  4152                           postinc0	equ	0xFEE
  4153                           wreg	equ	0xFE8
  4154                           postdec1	equ	0xFE5
  4155                           fsr1l	equ	0xFE1
  4156                           indf2	equ	0xFDF
  4157                           postinc2	equ	0xFDE
  4158                           fsr2h	equ	0xFDA
  4159                           fsr2l	equ	0xFD9
  4160                           status	equ	0xFD8
  4161                           
  4162 ;; *************** function _TMR2_SetInterruptHandler *****************
  4163 ;; Defined at:
  4164 ;;		line 148 in file "mcc_generated_files/tmr2.c"
  4165 ;; Parameters:    Size  Location     Type
  4166 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  4167 ;;		 -> tmr2_custom_isr(1), TMR2_DefaultInterruptHandler(1), 
  4168 ;; Auto vars:     Size  Location     Type
  4169 ;;		None
  4170 ;; Return value:  Size  Location     Type
  4171 ;;                  1    wreg      void 
  4172 ;; Registers used:
  4173 ;;		wreg, status,2, status,0
  4174 ;; Tracked objects:
  4175 ;;		On entry : 0/0
  4176 ;;		On exit  : 0/0
  4177 ;;		Unchanged: 0/0
  4178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4179 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4180 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4182 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4183 ;;Total ram usage:        2 bytes
  4184 ;; Hardware stack levels used:    1
  4185 ;; Hardware stack levels required when called:   10
  4186 ;; This function calls:
  4187 ;;		Nothing
  4188 ;; This function is called by:
  4189 ;;		_TMR2_Initialize
  4190 ;;		_main
  4191 ;; This function uses a non-reentrant model
  4192 ;;
  4193                           
  4194                           	psect	text16
  4195  001AA4                     __ptext16:
  4196                           	opt stack 0
  4197  001AA4                     _TMR2_SetInterruptHandler:
  4198                           	opt stack 20
  4199                           
  4200                           ;tmr2.c: 149: TMR2_InterruptHandler = InterruptHandler;
  4201                           
  4202                           ;incstack = 0
  4203  001AA4  C0B9  F0E7         	movff	TMR2_SetInterruptHandler@InterruptHandler,_TMR2_InterruptHandler
  4204  001AA8  C0BA  F0E8         	movff	TMR2_SetInterruptHandler@InterruptHandler+1,_TMR2_InterruptHandler+1
  4205  001AAC  0012               	return		;funcret
  4206  001AAE                     __end_of_TMR2_SetInterruptHandler:
  4207                           	opt stack 0
  4208                           tblptru	equ	0xFF8
  4209                           tblptrh	equ	0xFF7
  4210                           tblptrl	equ	0xFF6
  4211                           tablat	equ	0xFF5
  4212                           prodh	equ	0xFF4
  4213                           prodl	equ	0xFF3
  4214                           intcon	equ	0xFF2
  4215                           postinc0	equ	0xFEE
  4216                           wreg	equ	0xFE8
  4217                           postdec1	equ	0xFE5
  4218                           fsr1l	equ	0xFE1
  4219                           indf2	equ	0xFDF
  4220                           postinc2	equ	0xFDE
  4221                           fsr2h	equ	0xFDA
  4222                           fsr2l	equ	0xFD9
  4223                           status	equ	0xFD8
  4224                           
  4225 ;; *************** function _PIN_MANAGER_Initialize *****************
  4226 ;; Defined at:
  4227 ;;		line 63 in file "mcc_generated_files/pin_manager.c"
  4228 ;; Parameters:    Size  Location     Type
  4229 ;;		None
  4230 ;; Auto vars:     Size  Location     Type
  4231 ;;		None
  4232 ;; Return value:  Size  Location     Type
  4233 ;;                  1    wreg      void 
  4234 ;; Registers used:
  4235 ;;		wreg, status,2, status,0, cstack
  4236 ;; Tracked objects:
  4237 ;;		On entry : 0/0
  4238 ;;		On exit  : 0/0
  4239 ;;		Unchanged: 0/0
  4240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4241 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4242 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4244 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4245 ;;Total ram usage:        0 bytes
  4246 ;; Hardware stack levels used:    1
  4247 ;; Hardware stack levels required when called:   11
  4248 ;; This function calls:
  4249 ;;		_IOCB4_SetInterruptHandler
  4250 ;;		_IOCB5_SetInterruptHandler
  4251 ;;		_IOCB6_SetInterruptHandler
  4252 ;;		_IOCB7_SetInterruptHandler
  4253 ;; This function is called by:
  4254 ;;		_SYSTEM_Initialize
  4255 ;; This function uses a non-reentrant model
  4256 ;;
  4257                           
  4258                           	psect	text17
  4259  001298                     __ptext17:
  4260                           	opt stack 0
  4261  001298                     _PIN_MANAGER_Initialize:
  4262                           	opt stack 18
  4263                           
  4264                           ;pin_manager.c: 68: LATE = 0x00;
  4265                           
  4266                           ;incstack = 0
  4267  001298  0E00               	movlw	0
  4268  00129A  6E8D               	movwf	3981,c	;volatile
  4269                           
  4270                           ;pin_manager.c: 69: LATD = 0x00;
  4271  00129C  0E00               	movlw	0
  4272  00129E  6E8C               	movwf	3980,c	;volatile
  4273                           
  4274                           ;pin_manager.c: 70: LATA = 0x00;
  4275  0012A0  0E00               	movlw	0
  4276  0012A2  6E89               	movwf	3977,c	;volatile
  4277                           
  4278                           ;pin_manager.c: 71: LATB = 0x00;
  4279  0012A4  0E00               	movlw	0
  4280  0012A6  6E8A               	movwf	3978,c	;volatile
  4281                           
  4282                           ;pin_manager.c: 72: LATC = 0x00;
  4283  0012A8  0E00               	movlw	0
  4284  0012AA  6E8B               	movwf	3979,c	;volatile
  4285                           
  4286                           ;pin_manager.c: 77: TRISE = 0x07;
  4287  0012AC  0E07               	movlw	7
  4288  0012AE  6E96               	movwf	3990,c	;volatile
  4289                           
  4290                           ;pin_manager.c: 78: TRISA = 0x00;
  4291  0012B0  0E00               	movlw	0
  4292  0012B2  6E92               	movwf	3986,c	;volatile
  4293                           
  4294                           ;pin_manager.c: 79: TRISB = 0x00;
  4295  0012B4  0E00               	movlw	0
  4296  0012B6  6E93               	movwf	3987,c	;volatile
  4297                           
  4298                           ;pin_manager.c: 80: TRISC = 0x9F;
  4299  0012B8  0E9F               	movlw	159
  4300  0012BA  6E94               	movwf	3988,c	;volatile
  4301                           
  4302                           ;pin_manager.c: 81: TRISD = 0xB7;
  4303  0012BC  0EB7               	movlw	183
  4304  0012BE  6E95               	movwf	3989,c	;volatile
  4305                           
  4306                           ;pin_manager.c: 86: ANCON0 = 0x00;
  4307  0012C0  0E00               	movlw	0
  4308  0012C2  010F               	movlb	15	; () banked
  4309  0012C4  6F5D               	movwf	93,b	;volatile
  4310                           
  4311                           ;pin_manager.c: 87: ANCON1 = 0x00;
  4312  0012C6  0E00               	movlw	0
  4313  0012C8  6F5C               	movwf	92,b	;volatile
  4314                           
  4315                           ;pin_manager.c: 92: WPUB = 0x00;
  4316  0012CA  0E00               	movlw	0
  4317  0012CC  6F5B               	movwf	91,b	;volatile
  4318                           
  4319                           ; BSR set to: 15
  4320                           ;pin_manager.c: 93: INTCON2bits.nRBPU = 1;
  4321  0012CE  8EF1               	bsf	intcon2,7,c	;volatile
  4322                           
  4323                           ; BSR set to: 15
  4324                           ;pin_manager.c: 104: IOCBbits.IOCB4 = 1;
  4325  0012D0  895A               	bsf	90,4,b	;volatile
  4326                           
  4327                           ; BSR set to: 15
  4328                           ;pin_manager.c: 106: IOCBbits.IOCB5 = 1;
  4329  0012D2  8B5A               	bsf	90,5,b	;volatile
  4330                           
  4331                           ; BSR set to: 15
  4332                           ;pin_manager.c: 108: IOCBbits.IOCB6 = 1;
  4333  0012D4  8D5A               	bsf	90,6,b	;volatile
  4334                           
  4335                           ; BSR set to: 15
  4336                           ;pin_manager.c: 110: IOCBbits.IOCB7 = 1;
  4337  0012D6  8F5A               	bsf	90,7,b	;volatile
  4338                           
  4339                           ; BSR set to: 15
  4340                           ;pin_manager.c: 115: IOCB4_SetInterruptHandler(IOCB4_DefaultInterruptHandler);
  4341  0012D8  0E2C               	movlw	low _IOCB4_DefaultInterruptHandler
  4342  0012DA  0100               	movlb	0	; () banked
  4343  0012DC  6FB9               	movwf	IOCB4_SetInterruptHandler@InterruptHandler& (0+255),b
  4344  0012DE  0E1B               	movlw	high _IOCB4_DefaultInterruptHandler
  4345  0012E0  6FBA               	movwf	(IOCB4_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  4346  0012E2  EC66  F00D         	call	_IOCB4_SetInterruptHandler	;wreg free
  4347                           
  4348                           ;pin_manager.c: 116: IOCB5_SetInterruptHandler(IOCB5_DefaultInterruptHandler);
  4349  0012E6  0E2A               	movlw	low _IOCB5_DefaultInterruptHandler
  4350  0012E8  0100               	movlb	0	; () banked
  4351  0012EA  6FB9               	movwf	IOCB5_SetInterruptHandler@InterruptHandler& (0+255),b
  4352  0012EC  0E1B               	movlw	high _IOCB5_DefaultInterruptHandler
  4353  0012EE  6FBA               	movwf	(IOCB5_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  4354  0012F0  EC61  F00D         	call	_IOCB5_SetInterruptHandler	;wreg free
  4355                           
  4356                           ;pin_manager.c: 117: IOCB6_SetInterruptHandler(IOCB6_DefaultInterruptHandler);
  4357  0012F4  0E28               	movlw	low _IOCB6_DefaultInterruptHandler
  4358  0012F6  0100               	movlb	0	; () banked
  4359  0012F8  6FB9               	movwf	IOCB6_SetInterruptHandler@InterruptHandler& (0+255),b
  4360  0012FA  0E1B               	movlw	high _IOCB6_DefaultInterruptHandler
  4361  0012FC  6FBA               	movwf	(IOCB6_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  4362  0012FE  EC5C  F00D         	call	_IOCB6_SetInterruptHandler	;wreg free
  4363                           
  4364                           ;pin_manager.c: 118: IOCB7_SetInterruptHandler(IOCB7_DefaultInterruptHandler);
  4365  001302  0E26               	movlw	low _IOCB7_DefaultInterruptHandler
  4366  001304  0100               	movlb	0	; () banked
  4367  001306  6FB9               	movwf	IOCB7_SetInterruptHandler@InterruptHandler& (0+255),b
  4368  001308  0E1B               	movlw	high _IOCB7_DefaultInterruptHandler
  4369  00130A  6FBA               	movwf	(IOCB7_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  4370  00130C  EC57  F00D         	call	_IOCB7_SetInterruptHandler	;wreg free
  4371                           
  4372                           ;pin_manager.c: 122: INTCONbits.RBIE = 1;
  4373  001310  86F2               	bsf	intcon,3,c	;volatile
  4374  001312  0012               	return		;funcret
  4375  001314                     __end_of_PIN_MANAGER_Initialize:
  4376                           	opt stack 0
  4377                           tblptru	equ	0xFF8
  4378                           tblptrh	equ	0xFF7
  4379                           tblptrl	equ	0xFF6
  4380                           tablat	equ	0xFF5
  4381                           prodh	equ	0xFF4
  4382                           prodl	equ	0xFF3
  4383                           intcon	equ	0xFF2
  4384                           intcon2	equ	0xFF1
  4385                           postinc0	equ	0xFEE
  4386                           wreg	equ	0xFE8
  4387                           postdec1	equ	0xFE5
  4388                           fsr1l	equ	0xFE1
  4389                           indf2	equ	0xFDF
  4390                           postinc2	equ	0xFDE
  4391                           fsr2h	equ	0xFDA
  4392                           fsr2l	equ	0xFD9
  4393                           status	equ	0xFD8
  4394                           
  4395 ;; *************** function _IOCB7_SetInterruptHandler *****************
  4396 ;; Defined at:
  4397 ;;		line 257 in file "mcc_generated_files/pin_manager.c"
  4398 ;; Parameters:    Size  Location     Type
  4399 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  4400 ;;		 -> IOCB7_DefaultInterruptHandler(1), 
  4401 ;; Auto vars:     Size  Location     Type
  4402 ;;		None
  4403 ;; Return value:  Size  Location     Type
  4404 ;;                  1    wreg      void 
  4405 ;; Registers used:
  4406 ;;		wreg, status,2, status,0
  4407 ;; Tracked objects:
  4408 ;;		On entry : 0/0
  4409 ;;		On exit  : 0/0
  4410 ;;		Unchanged: 0/0
  4411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4412 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4415 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4416 ;;Total ram usage:        2 bytes
  4417 ;; Hardware stack levels used:    1
  4418 ;; Hardware stack levels required when called:   10
  4419 ;; This function calls:
  4420 ;;		Nothing
  4421 ;; This function is called by:
  4422 ;;		_PIN_MANAGER_Initialize
  4423 ;; This function uses a non-reentrant model
  4424 ;;
  4425                           
  4426                           	psect	text18
  4427  001AAE                     __ptext18:
  4428                           	opt stack 0
  4429  001AAE                     _IOCB7_SetInterruptHandler:
  4430                           	opt stack 18
  4431                           
  4432                           ;pin_manager.c: 258: IOCB7_InterruptHandler = InterruptHandler;
  4433                           
  4434                           ;incstack = 0
  4435  001AAE  C0B9  F0E9         	movff	IOCB7_SetInterruptHandler@InterruptHandler,_IOCB7_InterruptHandler
  4436  001AB2  C0BA  F0EA         	movff	IOCB7_SetInterruptHandler@InterruptHandler+1,_IOCB7_InterruptHandler+1
  4437  001AB6  0012               	return		;funcret
  4438  001AB8                     __end_of_IOCB7_SetInterruptHandler:
  4439                           	opt stack 0
  4440                           tblptru	equ	0xFF8
  4441                           tblptrh	equ	0xFF7
  4442                           tblptrl	equ	0xFF6
  4443                           tablat	equ	0xFF5
  4444                           prodh	equ	0xFF4
  4445                           prodl	equ	0xFF3
  4446                           intcon	equ	0xFF2
  4447                           intcon2	equ	0xFF1
  4448                           postinc0	equ	0xFEE
  4449                           wreg	equ	0xFE8
  4450                           postdec1	equ	0xFE5
  4451                           fsr1l	equ	0xFE1
  4452                           indf2	equ	0xFDF
  4453                           postinc2	equ	0xFDE
  4454                           fsr2h	equ	0xFDA
  4455                           fsr2l	equ	0xFD9
  4456                           status	equ	0xFD8
  4457                           
  4458 ;; *************** function _IOCB6_SetInterruptHandler *****************
  4459 ;; Defined at:
  4460 ;;		line 228 in file "mcc_generated_files/pin_manager.c"
  4461 ;; Parameters:    Size  Location     Type
  4462 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  4463 ;;		 -> IOCB6_DefaultInterruptHandler(1), 
  4464 ;; Auto vars:     Size  Location     Type
  4465 ;;		None
  4466 ;; Return value:  Size  Location     Type
  4467 ;;                  1    wreg      void 
  4468 ;; Registers used:
  4469 ;;		wreg, status,2, status,0
  4470 ;; Tracked objects:
  4471 ;;		On entry : 0/0
  4472 ;;		On exit  : 0/0
  4473 ;;		Unchanged: 0/0
  4474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4475 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4476 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4478 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4479 ;;Total ram usage:        2 bytes
  4480 ;; Hardware stack levels used:    1
  4481 ;; Hardware stack levels required when called:   10
  4482 ;; This function calls:
  4483 ;;		Nothing
  4484 ;; This function is called by:
  4485 ;;		_PIN_MANAGER_Initialize
  4486 ;; This function uses a non-reentrant model
  4487 ;;
  4488                           
  4489                           	psect	text19
  4490  001AB8                     __ptext19:
  4491                           	opt stack 0
  4492  001AB8                     _IOCB6_SetInterruptHandler:
  4493                           	opt stack 18
  4494                           
  4495                           ;pin_manager.c: 229: IOCB6_InterruptHandler = InterruptHandler;
  4496                           
  4497                           ;incstack = 0
  4498  001AB8  C0B9  F0EB         	movff	IOCB6_SetInterruptHandler@InterruptHandler,_IOCB6_InterruptHandler
  4499  001ABC  C0BA  F0EC         	movff	IOCB6_SetInterruptHandler@InterruptHandler+1,_IOCB6_InterruptHandler+1
  4500  001AC0  0012               	return		;funcret
  4501  001AC2                     __end_of_IOCB6_SetInterruptHandler:
  4502                           	opt stack 0
  4503                           tblptru	equ	0xFF8
  4504                           tblptrh	equ	0xFF7
  4505                           tblptrl	equ	0xFF6
  4506                           tablat	equ	0xFF5
  4507                           prodh	equ	0xFF4
  4508                           prodl	equ	0xFF3
  4509                           intcon	equ	0xFF2
  4510                           intcon2	equ	0xFF1
  4511                           postinc0	equ	0xFEE
  4512                           wreg	equ	0xFE8
  4513                           postdec1	equ	0xFE5
  4514                           fsr1l	equ	0xFE1
  4515                           indf2	equ	0xFDF
  4516                           postinc2	equ	0xFDE
  4517                           fsr2h	equ	0xFDA
  4518                           fsr2l	equ	0xFD9
  4519                           status	equ	0xFD8
  4520                           
  4521 ;; *************** function _IOCB5_SetInterruptHandler *****************
  4522 ;; Defined at:
  4523 ;;		line 199 in file "mcc_generated_files/pin_manager.c"
  4524 ;; Parameters:    Size  Location     Type
  4525 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  4526 ;;		 -> IOCB5_DefaultInterruptHandler(1), 
  4527 ;; Auto vars:     Size  Location     Type
  4528 ;;		None
  4529 ;; Return value:  Size  Location     Type
  4530 ;;                  1    wreg      void 
  4531 ;; Registers used:
  4532 ;;		wreg, status,2, status,0
  4533 ;; Tracked objects:
  4534 ;;		On entry : 0/0
  4535 ;;		On exit  : 0/0
  4536 ;;		Unchanged: 0/0
  4537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4538 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4539 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4540 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4541 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4542 ;;Total ram usage:        2 bytes
  4543 ;; Hardware stack levels used:    1
  4544 ;; Hardware stack levels required when called:   10
  4545 ;; This function calls:
  4546 ;;		Nothing
  4547 ;; This function is called by:
  4548 ;;		_PIN_MANAGER_Initialize
  4549 ;; This function uses a non-reentrant model
  4550 ;;
  4551                           
  4552                           	psect	text20
  4553  001AC2                     __ptext20:
  4554                           	opt stack 0
  4555  001AC2                     _IOCB5_SetInterruptHandler:
  4556                           	opt stack 18
  4557                           
  4558                           ;pin_manager.c: 200: IOCB5_InterruptHandler = InterruptHandler;
  4559                           
  4560                           ;incstack = 0
  4561  001AC2  C0B9  F0ED         	movff	IOCB5_SetInterruptHandler@InterruptHandler,_IOCB5_InterruptHandler
  4562  001AC6  C0BA  F0EE         	movff	IOCB5_SetInterruptHandler@InterruptHandler+1,_IOCB5_InterruptHandler+1
  4563  001ACA  0012               	return		;funcret
  4564  001ACC                     __end_of_IOCB5_SetInterruptHandler:
  4565                           	opt stack 0
  4566                           tblptru	equ	0xFF8
  4567                           tblptrh	equ	0xFF7
  4568                           tblptrl	equ	0xFF6
  4569                           tablat	equ	0xFF5
  4570                           prodh	equ	0xFF4
  4571                           prodl	equ	0xFF3
  4572                           intcon	equ	0xFF2
  4573                           intcon2	equ	0xFF1
  4574                           postinc0	equ	0xFEE
  4575                           wreg	equ	0xFE8
  4576                           postdec1	equ	0xFE5
  4577                           fsr1l	equ	0xFE1
  4578                           indf2	equ	0xFDF
  4579                           postinc2	equ	0xFDE
  4580                           fsr2h	equ	0xFDA
  4581                           fsr2l	equ	0xFD9
  4582                           status	equ	0xFD8
  4583                           
  4584 ;; *************** function _IOCB4_SetInterruptHandler *****************
  4585 ;; Defined at:
  4586 ;;		line 170 in file "mcc_generated_files/pin_manager.c"
  4587 ;; Parameters:    Size  Location     Type
  4588 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  4589 ;;		 -> IOCB4_DefaultInterruptHandler(1), 
  4590 ;; Auto vars:     Size  Location     Type
  4591 ;;		None
  4592 ;; Return value:  Size  Location     Type
  4593 ;;                  1    wreg      void 
  4594 ;; Registers used:
  4595 ;;		wreg, status,2, status,0
  4596 ;; Tracked objects:
  4597 ;;		On entry : 0/0
  4598 ;;		On exit  : 0/0
  4599 ;;		Unchanged: 0/0
  4600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4601 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4602 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4603 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4604 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4605 ;;Total ram usage:        2 bytes
  4606 ;; Hardware stack levels used:    1
  4607 ;; Hardware stack levels required when called:   10
  4608 ;; This function calls:
  4609 ;;		Nothing
  4610 ;; This function is called by:
  4611 ;;		_PIN_MANAGER_Initialize
  4612 ;; This function uses a non-reentrant model
  4613 ;;
  4614                           
  4615                           	psect	text21
  4616  001ACC                     __ptext21:
  4617                           	opt stack 0
  4618  001ACC                     _IOCB4_SetInterruptHandler:
  4619                           	opt stack 18
  4620                           
  4621                           ;pin_manager.c: 171: IOCB4_InterruptHandler = InterruptHandler;
  4622                           
  4623                           ;incstack = 0
  4624  001ACC  C0B9  F0EF         	movff	IOCB4_SetInterruptHandler@InterruptHandler,_IOCB4_InterruptHandler
  4625  001AD0  C0BA  F0F0         	movff	IOCB4_SetInterruptHandler@InterruptHandler+1,_IOCB4_InterruptHandler+1
  4626  001AD4  0012               	return		;funcret
  4627  001AD6                     __end_of_IOCB4_SetInterruptHandler:
  4628                           	opt stack 0
  4629                           tblptru	equ	0xFF8
  4630                           tblptrh	equ	0xFF7
  4631                           tblptrl	equ	0xFF6
  4632                           tablat	equ	0xFF5
  4633                           prodh	equ	0xFF4
  4634                           prodl	equ	0xFF3
  4635                           intcon	equ	0xFF2
  4636                           intcon2	equ	0xFF1
  4637                           postinc0	equ	0xFEE
  4638                           wreg	equ	0xFE8
  4639                           postdec1	equ	0xFE5
  4640                           fsr1l	equ	0xFE1
  4641                           indf2	equ	0xFDF
  4642                           postinc2	equ	0xFDE
  4643                           fsr2h	equ	0xFDA
  4644                           fsr2l	equ	0xFD9
  4645                           status	equ	0xFD8
  4646                           
  4647 ;; *************** function _OSCILLATOR_Initialize *****************
  4648 ;; Defined at:
  4649 ;;		line 62 in file "mcc_generated_files/mcc.c"
  4650 ;; Parameters:    Size  Location     Type
  4651 ;;		None
  4652 ;; Auto vars:     Size  Location     Type
  4653 ;;		None
  4654 ;; Return value:  Size  Location     Type
  4655 ;;                  1    wreg      void 
  4656 ;; Registers used:
  4657 ;;		wreg, status,2
  4658 ;; Tracked objects:
  4659 ;;		On entry : 0/0
  4660 ;;		On exit  : 0/0
  4661 ;;		Unchanged: 0/0
  4662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4664 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4666 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4667 ;;Total ram usage:        0 bytes
  4668 ;; Hardware stack levels used:    1
  4669 ;; Hardware stack levels required when called:   10
  4670 ;; This function calls:
  4671 ;;		Nothing
  4672 ;; This function is called by:
  4673 ;;		_SYSTEM_Initialize
  4674 ;; This function uses a non-reentrant model
  4675 ;;
  4676                           
  4677                           	psect	text22
  4678  001A50                     __ptext22:
  4679                           	opt stack 0
  4680  001A50                     _OSCILLATOR_Initialize:
  4681                           	opt stack 19
  4682                           
  4683                           ;mcc.c: 65: OSCCON = 0x70;
  4684                           
  4685                           ;incstack = 0
  4686  001A50  0E70               	movlw	112
  4687  001A52  6ED3               	movwf	4051,c	;volatile
  4688                           
  4689                           ;mcc.c: 67: OSCCON2 = 0x00;
  4690  001A54  0E00               	movlw	0
  4691  001A56  6ED2               	movwf	4050,c	;volatile
  4692                           
  4693                           ;mcc.c: 69: OSCTUNE = 0x00;
  4694  001A58  0E00               	movlw	0
  4695  001A5A  6E9B               	movwf	3995,c	;volatile
  4696                           
  4697                           ;mcc.c: 71: REFOCON = 0x00;
  4698  001A5C  0E00               	movlw	0
  4699  001A5E  6E9A               	movwf	3994,c	;volatile
  4700  001A60  0012               	return		;funcret
  4701  001A62                     __end_of_OSCILLATOR_Initialize:
  4702                           	opt stack 0
  4703                           tblptru	equ	0xFF8
  4704                           tblptrh	equ	0xFF7
  4705                           tblptrl	equ	0xFF6
  4706                           tablat	equ	0xFF5
  4707                           prodh	equ	0xFF4
  4708                           prodl	equ	0xFF3
  4709                           intcon	equ	0xFF2
  4710                           intcon2	equ	0xFF1
  4711                           postinc0	equ	0xFEE
  4712                           wreg	equ	0xFE8
  4713                           postdec1	equ	0xFE5
  4714                           fsr1l	equ	0xFE1
  4715                           indf2	equ	0xFDF
  4716                           postinc2	equ	0xFDE
  4717                           fsr2h	equ	0xFDA
  4718                           fsr2l	equ	0xFD9
  4719                           status	equ	0xFD8
  4720                           
  4721 ;; *************** function _INTERRUPT_Initialize *****************
  4722 ;; Defined at:
  4723 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  4724 ;; Parameters:    Size  Location     Type
  4725 ;;		None
  4726 ;; Auto vars:     Size  Location     Type
  4727 ;;		None
  4728 ;; Return value:  Size  Location     Type
  4729 ;;                  1    wreg      void 
  4730 ;; Registers used:
  4731 ;;		None
  4732 ;; Tracked objects:
  4733 ;;		On entry : 0/0
  4734 ;;		On exit  : 0/0
  4735 ;;		Unchanged: 0/0
  4736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4738 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4740 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4741 ;;Total ram usage:        0 bytes
  4742 ;; Hardware stack levels used:    1
  4743 ;; Hardware stack levels required when called:   10
  4744 ;; This function calls:
  4745 ;;		Nothing
  4746 ;; This function is called by:
  4747 ;;		_SYSTEM_Initialize
  4748 ;; This function uses a non-reentrant model
  4749 ;;
  4750                           
  4751                           	psect	text23
  4752  001B1E                     __ptext23:
  4753                           	opt stack 0
  4754  001B1E                     _INTERRUPT_Initialize:
  4755                           	opt stack 19
  4756                           
  4757                           ;interrupt_manager.c: 55: RCONbits.IPEN = 0;
  4758                           
  4759                           ;incstack = 0
  4760  001B1E  9ED0               	bcf	4048,7,c	;volatile
  4761  001B20  0012               	return		;funcret
  4762  001B22                     __end_of_INTERRUPT_Initialize:
  4763                           	opt stack 0
  4764                           tblptru	equ	0xFF8
  4765                           tblptrh	equ	0xFF7
  4766                           tblptrl	equ	0xFF6
  4767                           tablat	equ	0xFF5
  4768                           prodh	equ	0xFF4
  4769                           prodl	equ	0xFF3
  4770                           intcon	equ	0xFF2
  4771                           intcon2	equ	0xFF1
  4772                           postinc0	equ	0xFEE
  4773                           wreg	equ	0xFE8
  4774                           postdec1	equ	0xFE5
  4775                           fsr1l	equ	0xFE1
  4776                           indf2	equ	0xFDF
  4777                           postinc2	equ	0xFDE
  4778                           fsr2h	equ	0xFDA
  4779                           fsr2l	equ	0xFD9
  4780                           status	equ	0xFD8
  4781                           
  4782 ;; *************** function _I2C_Initialize *****************
  4783 ;; Defined at:
  4784 ;;		line 84 in file "mcc_generated_files/i2c.c"
  4785 ;; Parameters:    Size  Location     Type
  4786 ;;		None
  4787 ;; Auto vars:     Size  Location     Type
  4788 ;;		None
  4789 ;; Return value:  Size  Location     Type
  4790 ;;                  1    wreg      void 
  4791 ;; Registers used:
  4792 ;;		wreg, status,2, status,0, cstack
  4793 ;; Tracked objects:
  4794 ;;		On entry : 0/0
  4795 ;;		On exit  : 0/0
  4796 ;;		Unchanged: 0/0
  4797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4799 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4800 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4801 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4802 ;;Total ram usage:        0 bytes
  4803 ;; Hardware stack levels used:    1
  4804 ;; Hardware stack levels required when called:   11
  4805 ;; This function calls:
  4806 ;;		_I2C_SetInterruptHandler
  4807 ;; This function is called by:
  4808 ;;		_SYSTEM_Initialize
  4809 ;; This function uses a non-reentrant model
  4810 ;;
  4811                           
  4812                           	psect	text24
  4813  00184E                     __ptext24:
  4814                           	opt stack 0
  4815  00184E                     _I2C_Initialize:
  4816                           	opt stack 18
  4817                           
  4818                           ;i2c.c: 88: SSPSTAT = 0x00;
  4819                           
  4820                           ;incstack = 0
  4821  00184E  0E00               	movlw	0
  4822  001850  6EC7               	movwf	4039,c	;volatile
  4823                           
  4824                           ;i2c.c: 90: SSPCON1 = 0x09;
  4825  001852  0E09               	movlw	9
  4826  001854  6EC6               	movwf	4038,c	;volatile
  4827                           
  4828                           ;i2c.c: 92: SSPADD = 0x7F;
  4829  001856  0E7F               	movlw	127
  4830  001858  6EC8               	movwf	4040,c	;volatile
  4831                           
  4832                           ;i2c.c: 94: SSPCON1 = 0x26;
  4833  00185A  0E26               	movlw	38
  4834  00185C  6EC6               	movwf	4038,c	;volatile
  4835                           
  4836                           ;i2c.c: 96: SSPCON2 = 0x00;
  4837  00185E  0E00               	movlw	0
  4838  001860  6EC5               	movwf	4037,c	;volatile
  4839                           
  4840                           ;i2c.c: 98: SSPADD = 0x22;
  4841  001862  0E22               	movlw	34
  4842  001864  6EC8               	movwf	4040,c	;volatile
  4843                           
  4844                           ;i2c.c: 101: I2C_SetInterruptHandler(I2C_ISR);
  4845  001866  0EE8               	movlw	low _I2C_ISR
  4846  001868  0100               	movlb	0	; () banked
  4847  00186A  6FB9               	movwf	I2C_SetInterruptHandler@interruptHandler& (0+255),b
  4848  00186C  0E15               	movlw	high _I2C_ISR
  4849  00186E  6FBA               	movwf	(I2C_SetInterruptHandler@interruptHandler+1)& (0+255),b
  4850  001870  EC6B  F00D         	call	_I2C_SetInterruptHandler	;wreg free
  4851                           
  4852                           ;i2c.c: 103: PIR1bits.SSPIF = 0;
  4853  001874  969E               	bcf	3998,3,c	;volatile
  4854                           
  4855                           ;i2c.c: 105: PIE1bits.SSPIE = 1;
  4856  001876  869D               	bsf	3997,3,c	;volatile
  4857  001878  0012               	return		;funcret
  4858  00187A                     __end_of_I2C_Initialize:
  4859                           	opt stack 0
  4860                           tblptru	equ	0xFF8
  4861                           tblptrh	equ	0xFF7
  4862                           tblptrl	equ	0xFF6
  4863                           tablat	equ	0xFF5
  4864                           prodh	equ	0xFF4
  4865                           prodl	equ	0xFF3
  4866                           intcon	equ	0xFF2
  4867                           intcon2	equ	0xFF1
  4868                           postinc0	equ	0xFEE
  4869                           wreg	equ	0xFE8
  4870                           postdec1	equ	0xFE5
  4871                           fsr1l	equ	0xFE1
  4872                           indf2	equ	0xFDF
  4873                           postinc2	equ	0xFDE
  4874                           fsr2h	equ	0xFDA
  4875                           fsr2l	equ	0xFD9
  4876                           status	equ	0xFD8
  4877                           
  4878 ;; *************** function _I2C_SetInterruptHandler *****************
  4879 ;; Defined at:
  4880 ;;		line 165 in file "mcc_generated_files/i2c.c"
  4881 ;; Parameters:    Size  Location     Type
  4882 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  4883 ;;		 -> I2C_custom_isr(1), I2C_ISR(1), 
  4884 ;; Auto vars:     Size  Location     Type
  4885 ;;		None
  4886 ;; Return value:  Size  Location     Type
  4887 ;;                  1    wreg      void 
  4888 ;; Registers used:
  4889 ;;		wreg, status,2, status,0
  4890 ;; Tracked objects:
  4891 ;;		On entry : 0/0
  4892 ;;		On exit  : 0/0
  4893 ;;		Unchanged: 0/0
  4894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4895 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4896 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4897 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4898 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4899 ;;Total ram usage:        2 bytes
  4900 ;; Hardware stack levels used:    1
  4901 ;; Hardware stack levels required when called:   10
  4902 ;; This function calls:
  4903 ;;		Nothing
  4904 ;; This function is called by:
  4905 ;;		_I2C_Initialize
  4906 ;;		_main
  4907 ;; This function uses a non-reentrant model
  4908 ;;
  4909                           
  4910                           	psect	text25
  4911  001AD6                     __ptext25:
  4912                           	opt stack 0
  4913  001AD6                     _I2C_SetInterruptHandler:
  4914                           	opt stack 18
  4915                           
  4916                           ;i2c.c: 166: I2C_InterruptHandler = interruptHandler;
  4917                           
  4918                           ;incstack = 0
  4919  001AD6  C0B9  F0E1         	movff	I2C_SetInterruptHandler@interruptHandler,_I2C_InterruptHandler
  4920  001ADA  C0BA  F0E2         	movff	I2C_SetInterruptHandler@interruptHandler+1,_I2C_InterruptHandler+1
  4921  001ADE  0012               	return		;funcret
  4922  001AE0                     __end_of_I2C_SetInterruptHandler:
  4923                           	opt stack 0
  4924                           tblptru	equ	0xFF8
  4925                           tblptrh	equ	0xFF7
  4926                           tblptrl	equ	0xFF6
  4927                           tablat	equ	0xFF5
  4928                           prodh	equ	0xFF4
  4929                           prodl	equ	0xFF3
  4930                           intcon	equ	0xFF2
  4931                           intcon2	equ	0xFF1
  4932                           postinc0	equ	0xFEE
  4933                           wreg	equ	0xFE8
  4934                           postdec1	equ	0xFE5
  4935                           fsr1l	equ	0xFE1
  4936                           indf2	equ	0xFDF
  4937                           postinc2	equ	0xFDE
  4938                           fsr2h	equ	0xFDA
  4939                           fsr2l	equ	0xFD9
  4940                           status	equ	0xFD8
  4941                           
  4942 ;; *************** function _EUSART2_Initialize *****************
  4943 ;; Defined at:
  4944 ;;		line 75 in file "mcc_generated_files/eusart2.c"
  4945 ;; Parameters:    Size  Location     Type
  4946 ;;		None
  4947 ;; Auto vars:     Size  Location     Type
  4948 ;;  drop            1    2[BANK0 ] unsigned char 
  4949 ;; Return value:  Size  Location     Type
  4950 ;;                  1    wreg      void 
  4951 ;; Registers used:
  4952 ;;		wreg, status,2, status,0, cstack
  4953 ;; Tracked objects:
  4954 ;;		On entry : 0/0
  4955 ;;		On exit  : 0/0
  4956 ;;		Unchanged: 0/0
  4957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4958 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4959 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4960 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4961 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4962 ;;Total ram usage:        1 bytes
  4963 ;; Hardware stack levels used:    1
  4964 ;; Hardware stack levels required when called:   11
  4965 ;; This function calls:
  4966 ;;		_EUSART2_SetRxInterruptHandler
  4967 ;;		_EUSART2_SetTxInterruptHandler
  4968 ;; This function is called by:
  4969 ;;		_SYSTEM_Initialize
  4970 ;; This function uses a non-reentrant model
  4971 ;;
  4972                           
  4973                           	psect	text26
  4974  0013F0                     __ptext26:
  4975                           	opt stack 0
  4976  0013F0                     _EUSART2_Initialize:
  4977                           	opt stack 18
  4978                           
  4979                           ;eusart2.c: 77: char drop;
  4980                           ;eusart2.c: 79: PIE3bits.RC2IE = 0;
  4981                           
  4982                           ;incstack = 0
  4983  0013F0  9AA3               	bcf	4003,5,c	;volatile
  4984                           
  4985                           ;eusart2.c: 80: EUSART2_SetRxInterruptHandler(EUSART2_Receive_ISR);
  4986  0013F2  0EF2               	movlw	low _EUSART2_Receive_ISR
  4987  0013F4  0100               	movlb	0	; () banked
  4988  0013F6  6FB9               	movwf	EUSART2_SetRxInterruptHandler@interruptHandler& (0+255),b
  4989  0013F8  0E17               	movlw	high _EUSART2_Receive_ISR
  4990  0013FA  6FBA               	movwf	(EUSART2_SetRxInterruptHandler@interruptHandler+1)& (0+255),b
  4991  0013FC  EC75  F00D         	call	_EUSART2_SetRxInterruptHandler	;wreg free
  4992                           
  4993                           ;eusart2.c: 81: PIE3bits.TX2IE = 0;
  4994  001400  98A3               	bcf	4003,4,c	;volatile
  4995                           
  4996                           ;eusart2.c: 82: EUSART2_SetTxInterruptHandler(EUSART2_Transmit_ISR);
  4997  001402  0E92               	movlw	low _EUSART2_Transmit_ISR
  4998  001404  0100               	movlb	0	; () banked
  4999  001406  6FB9               	movwf	EUSART2_SetTxInterruptHandler@interruptHandler& (0+255),b
  5000  001408  0E17               	movlw	high _EUSART2_Transmit_ISR
  5001  00140A  6FBA               	movwf	(EUSART2_SetTxInterruptHandler@interruptHandler+1)& (0+255),b
  5002  00140C  EC70  F00D         	call	_EUSART2_SetTxInterruptHandler	;wreg free
  5003                           
  5004                           ;eusart2.c: 86: BAUDCON2 = 0x08;
  5005  001410  0E08               	movlw	8
  5006  001412  6EB9               	movwf	4025,c	;volatile
  5007                           
  5008                           ;eusart2.c: 89: RCSTA2 = 0x90;
  5009  001414  0E90               	movlw	144
  5010  001416  6EA6               	movwf	4006,c	;volatile
  5011                           
  5012                           ;eusart2.c: 92: TXSTA2 = 0x26;
  5013  001418  0E26               	movlw	38
  5014  00141A  6EBA               	movwf	4026,c	;volatile
  5015                           
  5016                           ;eusart2.c: 95: SPBRG2 = 0xA0;
  5017  00141C  0EA0               	movlw	160
  5018  00141E  6E7B               	movwf	3963,c	;volatile
  5019                           
  5020                           ;eusart2.c: 98: SPBRGH2 = 0x01;
  5021  001420  0E01               	movlw	1
  5022  001422  6E7C               	movwf	3964,c	;volatile
  5023                           
  5024                           ;eusart2.c: 102: eusart2TxHead = 0;
  5025  001424  0E00               	movlw	0
  5026  001426  0100               	movlb	0	; () banked
  5027  001428  6FA4               	movwf	_eusart2TxHead& (0+255),b	;volatile
  5028                           
  5029                           ; BSR set to: 0
  5030                           ;eusart2.c: 103: eusart2TxTail = 0;
  5031  00142A  0E00               	movlw	0
  5032  00142C  6FA3               	movwf	_eusart2TxTail& (0+255),b	;volatile
  5033                           
  5034                           ; BSR set to: 0
  5035                           ;eusart2.c: 104: eusart2TxBufferRemaining = sizeof(eusart2TxBuffer);
  5036  00142E  0E08               	movlw	8
  5037  001430  6FF6               	movwf	_eusart2TxBufferRemaining& (0+255),b	;volatile
  5038                           
  5039                           ; BSR set to: 0
  5040                           ;eusart2.c: 106: eusart2RxHead = 0;
  5041  001432  0E00               	movlw	0
  5042  001434  6FA2               	movwf	_eusart2RxHead& (0+255),b	;volatile
  5043                           
  5044                           ; BSR set to: 0
  5045                           ;eusart2.c: 107: eusart2RxTail = 0;
  5046  001436  0E00               	movlw	0
  5047  001438  6E5B               	movwf	_eusart2RxTail,c	;volatile
  5048                           
  5049                           ; BSR set to: 0
  5050                           ;eusart2.c: 108: eusart2RxCount = 0;
  5051  00143A  0E00               	movlw	0
  5052  00143C  6E5A               	movwf	_eusart2RxCount,c	;volatile
  5053                           
  5054                           ; BSR set to: 0
  5055                           ;eusart2.c: 111: PIE3bits.RC2IE = 1;
  5056  00143E  8AA3               	bsf	4003,5,c	;volatile
  5057                           
  5058                           ;eusart2.c: 112: while (PIR3bits.RC2IF) {
  5059  001440  D002               	goto	l319
  5060  001442                     l320:
  5061                           
  5062                           ;eusart2.c: 113: drop = RCREG2;
  5063  001442  CF7A F0BB          	movff	3962,EUSART2_Initialize@drop	;volatile
  5064  001446                     l319:
  5065  001446  BAA4               	btfsc	4004,5,c	;volatile
  5066  001448  D7FC               	goto	l320
  5067                           
  5068                           ;eusart2.c: 114: }
  5069                           ;eusart2.c: 115: RCSTA2bits.CREN = 0;
  5070  00144A  98A6               	bcf	4006,4,c	;volatile
  5071                           
  5072                           ;eusart2.c: 116: RCSTA2bits.CREN = 1;
  5073  00144C  88A6               	bsf	4006,4,c	;volatile
  5074  00144E  0012               	return		;funcret
  5075  001450                     __end_of_EUSART2_Initialize:
  5076                           	opt stack 0
  5077                           tblptru	equ	0xFF8
  5078                           tblptrh	equ	0xFF7
  5079                           tblptrl	equ	0xFF6
  5080                           tablat	equ	0xFF5
  5081                           prodh	equ	0xFF4
  5082                           prodl	equ	0xFF3
  5083                           intcon	equ	0xFF2
  5084                           intcon2	equ	0xFF1
  5085                           postinc0	equ	0xFEE
  5086                           wreg	equ	0xFE8
  5087                           postdec1	equ	0xFE5
  5088                           fsr1l	equ	0xFE1
  5089                           indf2	equ	0xFDF
  5090                           postinc2	equ	0xFDE
  5091                           fsr2h	equ	0xFDA
  5092                           fsr2l	equ	0xFD9
  5093                           status	equ	0xFD8
  5094                           
  5095 ;; *************** function _EUSART2_SetTxInterruptHandler *****************
  5096 ;; Defined at:
  5097 ;;		line 217 in file "mcc_generated_files/eusart2.c"
  5098 ;; Parameters:    Size  Location     Type
  5099 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  5100 ;;		 -> EUSART2_Transmit_ISR(1), 
  5101 ;; Auto vars:     Size  Location     Type
  5102 ;;		None
  5103 ;; Return value:  Size  Location     Type
  5104 ;;                  1    wreg      void 
  5105 ;; Registers used:
  5106 ;;		wreg, status,2, status,0
  5107 ;; Tracked objects:
  5108 ;;		On entry : 0/0
  5109 ;;		On exit  : 0/0
  5110 ;;		Unchanged: 0/0
  5111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5112 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5113 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5114 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5115 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5116 ;;Total ram usage:        2 bytes
  5117 ;; Hardware stack levels used:    1
  5118 ;; Hardware stack levels required when called:   10
  5119 ;; This function calls:
  5120 ;;		Nothing
  5121 ;; This function is called by:
  5122 ;;		_EUSART2_Initialize
  5123 ;; This function uses a non-reentrant model
  5124 ;;
  5125                           
  5126                           	psect	text27
  5127  001AE0                     __ptext27:
  5128                           	opt stack 0
  5129  001AE0                     _EUSART2_SetTxInterruptHandler:
  5130                           	opt stack 18
  5131                           
  5132                           ;eusart2.c: 218: EUSART2_TxDefaultInterruptHandler = interruptHandler;
  5133                           
  5134                           ;incstack = 0
  5135  001AE0  C0B9  F0F3         	movff	EUSART2_SetTxInterruptHandler@interruptHandler,_EUSART2_TxDefaultInterruptHandler
  5136  001AE4  C0BA  F0F4         	movff	EUSART2_SetTxInterruptHandler@interruptHandler+1,_EUSART2_TxDefaultInterruptHandl
      +                          er+1
  5137  001AE8  0012               	return		;funcret
  5138  001AEA                     __end_of_EUSART2_SetTxInterruptHandler:
  5139                           	opt stack 0
  5140                           tblptru	equ	0xFF8
  5141                           tblptrh	equ	0xFF7
  5142                           tblptrl	equ	0xFF6
  5143                           tablat	equ	0xFF5
  5144                           prodh	equ	0xFF4
  5145                           prodl	equ	0xFF3
  5146                           intcon	equ	0xFF2
  5147                           intcon2	equ	0xFF1
  5148                           postinc0	equ	0xFEE
  5149                           wreg	equ	0xFE8
  5150                           postdec1	equ	0xFE5
  5151                           fsr1l	equ	0xFE1
  5152                           indf2	equ	0xFDF
  5153                           postinc2	equ	0xFDE
  5154                           fsr2h	equ	0xFDA
  5155                           fsr2l	equ	0xFD9
  5156                           status	equ	0xFD8
  5157                           
  5158 ;; *************** function _EUSART2_SetRxInterruptHandler *****************
  5159 ;; Defined at:
  5160 ;;		line 221 in file "mcc_generated_files/eusart2.c"
  5161 ;; Parameters:    Size  Location     Type
  5162 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  5163 ;;		 -> uart2_rx_custom_isr(1), EUSART2_Receive_ISR(1), 
  5164 ;; Auto vars:     Size  Location     Type
  5165 ;;		None
  5166 ;; Return value:  Size  Location     Type
  5167 ;;                  1    wreg      void 
  5168 ;; Registers used:
  5169 ;;		wreg, status,2, status,0
  5170 ;; Tracked objects:
  5171 ;;		On entry : 0/0
  5172 ;;		On exit  : 0/0
  5173 ;;		Unchanged: 0/0
  5174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5175 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5176 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5177 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5178 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5179 ;;Total ram usage:        2 bytes
  5180 ;; Hardware stack levels used:    1
  5181 ;; Hardware stack levels required when called:   10
  5182 ;; This function calls:
  5183 ;;		Nothing
  5184 ;; This function is called by:
  5185 ;;		_EUSART2_Initialize
  5186 ;;		_main
  5187 ;; This function uses a non-reentrant model
  5188 ;;
  5189                           
  5190                           	psect	text28
  5191  001AEA                     __ptext28:
  5192                           	opt stack 0
  5193  001AEA                     _EUSART2_SetRxInterruptHandler:
  5194                           	opt stack 18
  5195                           
  5196                           ;eusart2.c: 222: EUSART2_RxDefaultInterruptHandler = interruptHandler;
  5197                           
  5198                           ;incstack = 0
  5199  001AEA  C0B9  F0F1         	movff	EUSART2_SetRxInterruptHandler@interruptHandler,_EUSART2_RxDefaultInterruptHandler
  5200  001AEE  C0BA  F0F2         	movff	EUSART2_SetRxInterruptHandler@interruptHandler+1,_EUSART2_RxDefaultInterruptHandl
      +                          er+1
  5201  001AF2  0012               	return		;funcret
  5202  001AF4                     __end_of_EUSART2_SetRxInterruptHandler:
  5203                           	opt stack 0
  5204                           tblptru	equ	0xFF8
  5205                           tblptrh	equ	0xFF7
  5206                           tblptrl	equ	0xFF6
  5207                           tablat	equ	0xFF5
  5208                           prodh	equ	0xFF4
  5209                           prodl	equ	0xFF3
  5210                           intcon	equ	0xFF2
  5211                           intcon2	equ	0xFF1
  5212                           postinc0	equ	0xFEE
  5213                           wreg	equ	0xFE8
  5214                           postdec1	equ	0xFE5
  5215                           fsr1l	equ	0xFE1
  5216                           indf2	equ	0xFDF
  5217                           postinc2	equ	0xFDE
  5218                           fsr2h	equ	0xFDA
  5219                           fsr2l	equ	0xFD9
  5220                           status	equ	0xFD8
  5221                           
  5222 ;; *************** function _EUSART1_Initialize *****************
  5223 ;; Defined at:
  5224 ;;		line 75 in file "mcc_generated_files/eusart1.c"
  5225 ;; Parameters:    Size  Location     Type
  5226 ;;		None
  5227 ;; Auto vars:     Size  Location     Type
  5228 ;;		None
  5229 ;; Return value:  Size  Location     Type
  5230 ;;                  1    wreg      void 
  5231 ;; Registers used:
  5232 ;;		wreg, status,2, status,0, cstack
  5233 ;; Tracked objects:
  5234 ;;		On entry : 0/0
  5235 ;;		On exit  : 0/0
  5236 ;;		Unchanged: 0/0
  5237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5239 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5241 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5242 ;;Total ram usage:        0 bytes
  5243 ;; Hardware stack levels used:    1
  5244 ;; Hardware stack levels required when called:   11
  5245 ;; This function calls:
  5246 ;;		_EUSART1_SetRxInterruptHandler
  5247 ;;		_EUSART1_SetTxInterruptHandler
  5248 ;; This function is called by:
  5249 ;;		_SYSTEM_Initialize
  5250 ;; This function uses a non-reentrant model
  5251 ;;
  5252                           
  5253                           	psect	text29
  5254  0014A6                     __ptext29:
  5255                           	opt stack 0
  5256  0014A6                     _EUSART1_Initialize:
  5257                           	opt stack 18
  5258                           
  5259                           ;eusart1.c: 78: PIE1bits.RC1IE = 0;
  5260                           
  5261                           ;incstack = 0
  5262  0014A6  9A9D               	bcf	3997,5,c	;volatile
  5263                           
  5264                           ;eusart1.c: 79: EUSART1_SetRxInterruptHandler(EUSART1_Receive_ISR);
  5265  0014A8  0E20               	movlw	low _EUSART1_Receive_ISR
  5266  0014AA  0100               	movlb	0	; () banked
  5267  0014AC  6FB9               	movwf	EUSART1_SetRxInterruptHandler@interruptHandler& (0+255),b
  5268  0014AE  0E18               	movlw	high _EUSART1_Receive_ISR
  5269  0014B0  6FBA               	movwf	(EUSART1_SetRxInterruptHandler@interruptHandler+1)& (0+255),b
  5270  0014B2  EC7F  F00D         	call	_EUSART1_SetRxInterruptHandler	;wreg free
  5271                           
  5272                           ;eusart1.c: 80: PIE1bits.TX1IE = 0;
  5273  0014B6  989D               	bcf	3997,4,c	;volatile
  5274                           
  5275                           ;eusart1.c: 81: EUSART1_SetTxInterruptHandler(EUSART1_Transmit_ISR);
  5276  0014B8  0EC2               	movlw	low _EUSART1_Transmit_ISR
  5277  0014BA  0100               	movlb	0	; () banked
  5278  0014BC  6FB9               	movwf	EUSART1_SetTxInterruptHandler@interruptHandler& (0+255),b
  5279  0014BE  0E17               	movlw	high _EUSART1_Transmit_ISR
  5280  0014C0  6FBA               	movwf	(EUSART1_SetTxInterruptHandler@interruptHandler+1)& (0+255),b
  5281  0014C2  EC7A  F00D         	call	_EUSART1_SetTxInterruptHandler	;wreg free
  5282                           
  5283                           ;eusart1.c: 85: BAUDCON1 = 0x08;
  5284  0014C6  0E08               	movlw	8
  5285  0014C8  6EA7               	movwf	4007,c	;volatile
  5286                           
  5287                           ;eusart1.c: 88: RCSTA1 = 0x90;
  5288  0014CA  0E90               	movlw	144
  5289  0014CC  6EAB               	movwf	4011,c	;volatile
  5290                           
  5291                           ;eusart1.c: 91: TXSTA1 = 0x24;
  5292  0014CE  0E24               	movlw	36
  5293  0014D0  6EAC               	movwf	4012,c	;volatile
  5294                           
  5295                           ;eusart1.c: 94: SPBRG1 = 0xA0;
  5296  0014D2  0EA0               	movlw	160
  5297  0014D4  6EAF               	movwf	4015,c	;volatile
  5298                           
  5299                           ;eusart1.c: 97: SPBRGH1 = 0x01;
  5300  0014D6  0E01               	movlw	1
  5301  0014D8  6E7D               	movwf	3965,c	;volatile
  5302                           
  5303                           ;eusart1.c: 101: eusart1TxHead = 0;
  5304  0014DA  0E00               	movlw	0
  5305  0014DC  0100               	movlb	0	; () banked
  5306  0014DE  6FA1               	movwf	_eusart1TxHead& (0+255),b	;volatile
  5307                           
  5308                           ; BSR set to: 0
  5309                           ;eusart1.c: 102: eusart1TxTail = 0;
  5310  0014E0  0E00               	movlw	0
  5311  0014E2  6FA0               	movwf	_eusart1TxTail& (0+255),b	;volatile
  5312                           
  5313                           ; BSR set to: 0
  5314                           ;eusart1.c: 103: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  5315  0014E4  0E08               	movlw	8
  5316  0014E6  6FF5               	movwf	_eusart1TxBufferRemaining& (0+255),b	;volatile
  5317                           
  5318                           ; BSR set to: 0
  5319                           ;eusart1.c: 105: eusart1RxHead = 0;
  5320  0014E8  0E00               	movlw	0
  5321  0014EA  6F9F               	movwf	_eusart1RxHead& (0+255),b	;volatile
  5322                           
  5323                           ; BSR set to: 0
  5324                           ;eusart1.c: 106: eusart1RxTail = 0;
  5325  0014EC  0E00               	movlw	0
  5326  0014EE  6E59               	movwf	_eusart1RxTail,c	;volatile
  5327                           
  5328                           ; BSR set to: 0
  5329                           ;eusart1.c: 107: eusart1RxCount = 0;
  5330  0014F0  0E00               	movlw	0
  5331  0014F2  6E58               	movwf	_eusart1RxCount,c	;volatile
  5332                           
  5333                           ; BSR set to: 0
  5334                           ;eusart1.c: 110: PIE1bits.RC1IE = 1;
  5335  0014F4  8A9D               	bsf	3997,5,c	;volatile
  5336                           
  5337                           ; BSR set to: 0
  5338  0014F6  0012               	return		;funcret
  5339  0014F8                     __end_of_EUSART1_Initialize:
  5340                           	opt stack 0
  5341                           tblptru	equ	0xFF8
  5342                           tblptrh	equ	0xFF7
  5343                           tblptrl	equ	0xFF6
  5344                           tablat	equ	0xFF5
  5345                           prodh	equ	0xFF4
  5346                           prodl	equ	0xFF3
  5347                           intcon	equ	0xFF2
  5348                           intcon2	equ	0xFF1
  5349                           postinc0	equ	0xFEE
  5350                           wreg	equ	0xFE8
  5351                           postdec1	equ	0xFE5
  5352                           fsr1l	equ	0xFE1
  5353                           indf2	equ	0xFDF
  5354                           postinc2	equ	0xFDE
  5355                           fsr2h	equ	0xFDA
  5356                           fsr2l	equ	0xFD9
  5357                           status	equ	0xFD8
  5358                           
  5359 ;; *************** function _EUSART1_SetTxInterruptHandler *****************
  5360 ;; Defined at:
  5361 ;;		line 211 in file "mcc_generated_files/eusart1.c"
  5362 ;; Parameters:    Size  Location     Type
  5363 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  5364 ;;		 -> EUSART1_Transmit_ISR(1), 
  5365 ;; Auto vars:     Size  Location     Type
  5366 ;;		None
  5367 ;; Return value:  Size  Location     Type
  5368 ;;                  1    wreg      void 
  5369 ;; Registers used:
  5370 ;;		wreg, status,2, status,0
  5371 ;; Tracked objects:
  5372 ;;		On entry : 0/0
  5373 ;;		On exit  : 0/0
  5374 ;;		Unchanged: 0/0
  5375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5376 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5377 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5378 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5379 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5380 ;;Total ram usage:        2 bytes
  5381 ;; Hardware stack levels used:    1
  5382 ;; Hardware stack levels required when called:   10
  5383 ;; This function calls:
  5384 ;;		Nothing
  5385 ;; This function is called by:
  5386 ;;		_EUSART1_Initialize
  5387 ;; This function uses a non-reentrant model
  5388 ;;
  5389                           
  5390                           	psect	text30
  5391  001AF4                     __ptext30:
  5392                           	opt stack 0
  5393  001AF4                     _EUSART1_SetTxInterruptHandler:
  5394                           	opt stack 18
  5395                           
  5396                           ;eusart1.c: 212: EUSART1_TxDefaultInterruptHandler = interruptHandler;
  5397                           
  5398                           ; BSR set to: 0
  5399                           ;incstack = 0
  5400  001AF4  C0B9  F0E5         	movff	EUSART1_SetTxInterruptHandler@interruptHandler,_EUSART1_TxDefaultInterruptHandler
  5401  001AF8  C0BA  F0E6         	movff	EUSART1_SetTxInterruptHandler@interruptHandler+1,_EUSART1_TxDefaultInterruptHandl
      +                          er+1
  5402  001AFC  0012               	return		;funcret
  5403  001AFE                     __end_of_EUSART1_SetTxInterruptHandler:
  5404                           	opt stack 0
  5405                           tblptru	equ	0xFF8
  5406                           tblptrh	equ	0xFF7
  5407                           tblptrl	equ	0xFF6
  5408                           tablat	equ	0xFF5
  5409                           prodh	equ	0xFF4
  5410                           prodl	equ	0xFF3
  5411                           intcon	equ	0xFF2
  5412                           intcon2	equ	0xFF1
  5413                           postinc0	equ	0xFEE
  5414                           wreg	equ	0xFE8
  5415                           postdec1	equ	0xFE5
  5416                           fsr1l	equ	0xFE1
  5417                           indf2	equ	0xFDF
  5418                           postinc2	equ	0xFDE
  5419                           fsr2h	equ	0xFDA
  5420                           fsr2l	equ	0xFD9
  5421                           status	equ	0xFD8
  5422                           
  5423 ;; *************** function _EUSART1_SetRxInterruptHandler *****************
  5424 ;; Defined at:
  5425 ;;		line 215 in file "mcc_generated_files/eusart1.c"
  5426 ;; Parameters:    Size  Location     Type
  5427 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  5428 ;;		 -> EUSART1_Receive_ISR(1), 
  5429 ;; Auto vars:     Size  Location     Type
  5430 ;;		None
  5431 ;; Return value:  Size  Location     Type
  5432 ;;                  1    wreg      void 
  5433 ;; Registers used:
  5434 ;;		wreg, status,2, status,0
  5435 ;; Tracked objects:
  5436 ;;		On entry : 0/0
  5437 ;;		On exit  : 0/0
  5438 ;;		Unchanged: 0/0
  5439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5440 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5441 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5442 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5443 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5444 ;;Total ram usage:        2 bytes
  5445 ;; Hardware stack levels used:    1
  5446 ;; Hardware stack levels required when called:   10
  5447 ;; This function calls:
  5448 ;;		Nothing
  5449 ;; This function is called by:
  5450 ;;		_EUSART1_Initialize
  5451 ;; This function uses a non-reentrant model
  5452 ;;
  5453                           
  5454                           	psect	text31
  5455  001AFE                     __ptext31:
  5456                           	opt stack 0
  5457  001AFE                     _EUSART1_SetRxInterruptHandler:
  5458                           	opt stack 18
  5459                           
  5460                           ;eusart1.c: 216: EUSART1_RxDefaultInterruptHandler = interruptHandler;
  5461                           
  5462                           ;incstack = 0
  5463  001AFE  C0B9  F0E3         	movff	EUSART1_SetRxInterruptHandler@interruptHandler,_EUSART1_RxDefaultInterruptHandler
  5464  001B02  C0BA  F0E4         	movff	EUSART1_SetRxInterruptHandler@interruptHandler+1,_EUSART1_RxDefaultInterruptHandl
      +                          er+1
  5465  001B06  0012               	return		;funcret
  5466  001B08                     __end_of_EUSART1_SetRxInterruptHandler:
  5467                           	opt stack 0
  5468                           tblptru	equ	0xFF8
  5469                           tblptrh	equ	0xFF7
  5470                           tblptrl	equ	0xFF6
  5471                           tablat	equ	0xFF5
  5472                           prodh	equ	0xFF4
  5473                           prodl	equ	0xFF3
  5474                           intcon	equ	0xFF2
  5475                           intcon2	equ	0xFF1
  5476                           postinc0	equ	0xFEE
  5477                           wreg	equ	0xFE8
  5478                           postdec1	equ	0xFE5
  5479                           fsr1l	equ	0xFE1
  5480                           indf2	equ	0xFDF
  5481                           postinc2	equ	0xFDE
  5482                           fsr2h	equ	0xFDA
  5483                           fsr2l	equ	0xFD9
  5484                           status	equ	0xFD8
  5485                           
  5486 ;; *************** function _INTERRUPT_InterruptManager *****************
  5487 ;; Defined at:
  5488 ;;		line 58 in file "mcc_generated_files/interrupt_manager.c"
  5489 ;; Parameters:    Size  Location     Type
  5490 ;;		None
  5491 ;; Auto vars:     Size  Location     Type
  5492 ;;		None
  5493 ;; Return value:  Size  Location     Type
  5494 ;;                  1    wreg      void 
  5495 ;; Registers used:
  5496 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5497 ;; Tracked objects:
  5498 ;;		On entry : 0/0
  5499 ;;		On exit  : 0/0
  5500 ;;		Unchanged: 0/0
  5501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5503 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5504 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5505 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5506 ;;Total ram usage:       18 bytes
  5507 ;; Hardware stack levels used:    1
  5508 ;; Hardware stack levels required when called:    9
  5509 ;; This function calls:
  5510 ;;		Absolute function
  5511 ;;		_EUSART1_Receive_ISR
  5512 ;;		_EUSART1_Transmit_ISR
  5513 ;;		_EUSART2_Receive_ISR
  5514 ;;		_EUSART2_Transmit_ISR
  5515 ;;		_I2C_ISR
  5516 ;;		_I2C_custom_isr
  5517 ;;		_PIN_MANAGER_IOC
  5518 ;;		_TMR2_ISR
  5519 ;;		_uart2_rx_custom_isr
  5520 ;; This function is called by:
  5521 ;;		Interrupt level 2
  5522 ;; This function uses a non-reentrant model
  5523 ;;
  5524                           
  5525                           	psect	intcode
  5526  000008                     __pintcode:
  5527                           	opt stack 0
  5528  000008                     _INTERRUPT_InterruptManager:
  5529                           	opt stack 16
  5530                           
  5531                           ;incstack = 0
  5532  000008  825E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5533  00000A  CFFA F037          	movff	pclath,??_INTERRUPT_InterruptManager
  5534  00000E  CFFB F038          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  5535  000012  CFE9 F039          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  5536  000016  CFEA F03A          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  5537  00001A  CFE1 F03B          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  5538  00001E  CFE2 F03C          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  5539  000022  CFD9 F03D          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  5540  000026  CFDA F03E          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  5541  00002A  CFF3 F03F          	movff	prodl,??_INTERRUPT_InterruptManager+8
  5542  00002E  CFF4 F040          	movff	prodh,??_INTERRUPT_InterruptManager+9
  5543  000032  CFF6 F041          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  5544  000036  CFF7 F042          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  5545  00003A  CFF8 F043          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  5546  00003E  CFF5 F044          	movff	tablat,??_INTERRUPT_InterruptManager+13
  5547  000042  C05E  F045         	movff	btemp,??_INTERRUPT_InterruptManager+14
  5548  000046  C05F  F046         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
  5549  00004A  C060  F047         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
  5550  00004E  C061  F048         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
  5551                           
  5552                           ;interrupt_manager.c: 61: if(INTCONbits.RBIE == 1 && INTCONbits.RBIF == 1)
  5553  000052  B6F2               	btfsc	intcon,3,c	;volatile
  5554  000054  A0F2               	btfss	intcon,0,c	;volatile
  5555  000056  D003               	goto	i2l250
  5556                           
  5557                           ;interrupt_manager.c: 62: {
  5558                           ;interrupt_manager.c: 63: PIN_MANAGER_IOC();
  5559  000058  ECF8  F00C         	call	_PIN_MANAGER_IOC	;wreg free
  5560                           
  5561                           ;interrupt_manager.c: 64: }
  5562  00005C  D047               	goto	i2u349_49
  5563  00005E                     i2l250:
  5564                           
  5565                           ;interrupt_manager.c: 65: else if(INTCONbits.PEIE == 1)
  5566  00005E  ACF2               	btfss	intcon,6,c	;volatile
  5567  000060  D045               	goto	i2u349_49
  5568                           
  5569                           ;interrupt_manager.c: 66: {
  5570                           ;interrupt_manager.c: 67: if(PIE3bits.TX2IE == 1 && PIR3bits.TX2IF == 1)
  5571  000062  B8A3               	btfsc	4003,4,c	;volatile
  5572  000064  A8A4               	btfss	4004,4,c	;volatile
  5573  000066  D009               	goto	i2l253
  5574                           
  5575                           ;interrupt_manager.c: 68: {
  5576                           ;interrupt_manager.c: 69: EUSART2_TxDefaultInterruptHandler();
  5577  000068  D801               	call	i2u335_48
  5578  00006A  D040               	goto	i2u349_49
  5579  00006C                     i2u335_48:
  5580  00006C  0005               	push	
  5581  00006E  6EFA               	movwf	pclath,c
  5582  000070  0100               	movlb	0	; () banked
  5583  000072  51F3               	movf	_EUSART2_TxDefaultInterruptHandler& (0+255),w,b
  5584  000074  6EFD               	movwf	tosl,c
  5585  000076  51F4               	movf	(_EUSART2_TxDefaultInterruptHandler+1)& (0+255),w,b
  5586  000078  D035               	goto	L6
  5587  00007A                     i2l253:
  5588                           
  5589                           ;interrupt_manager.c: 71: else if(PIE3bits.RC2IE == 1 && PIR3bits.RC2IF == 1)
  5590  00007A  BAA3               	btfsc	4003,5,c	;volatile
  5591  00007C  AAA4               	btfss	4004,5,c	;volatile
  5592  00007E  D009               	goto	i2l255
  5593                           
  5594                           ;interrupt_manager.c: 72: {
  5595                           ;interrupt_manager.c: 73: EUSART2_RxDefaultInterruptHandler();
  5596  000080  D801               	call	i2u338_48
  5597  000082  D034               	goto	i2u349_49
  5598  000084                     i2u338_48:
  5599  000084  0005               	push	
  5600  000086  6EFA               	movwf	pclath,c
  5601  000088  0100               	movlb	0	; () banked
  5602  00008A  51F1               	movf	_EUSART2_RxDefaultInterruptHandler& (0+255),w,b
  5603  00008C  6EFD               	movwf	tosl,c
  5604  00008E  51F2               	movf	(_EUSART2_RxDefaultInterruptHandler+1)& (0+255),w,b
  5605  000090  D029               	goto	L6
  5606  000092                     i2l255:
  5607                           
  5608                           ;interrupt_manager.c: 75: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
  5609  000092  B89D               	btfsc	3997,4,c	;volatile
  5610  000094  A89E               	btfss	3998,4,c	;volatile
  5611  000096  D009               	goto	i2l257
  5612                           
  5613                           ;interrupt_manager.c: 76: {
  5614                           ;interrupt_manager.c: 77: EUSART1_TxDefaultInterruptHandler();
  5615  000098  D801               	call	i2u341_48
  5616  00009A  D028               	goto	i2u349_49
  5617  00009C                     i2u341_48:
  5618  00009C  0005               	push	
  5619  00009E  6EFA               	movwf	pclath,c
  5620  0000A0  0100               	movlb	0	; () banked
  5621  0000A2  51E5               	movf	_EUSART1_TxDefaultInterruptHandler& (0+255),w,b
  5622  0000A4  6EFD               	movwf	tosl,c
  5623  0000A6  51E6               	movf	(_EUSART1_TxDefaultInterruptHandler+1)& (0+255),w,b
  5624  0000A8  D01D               	goto	L6
  5625  0000AA                     i2l257:
  5626                           
  5627                           ;interrupt_manager.c: 79: else if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
  5628  0000AA  BA9D               	btfsc	3997,5,c	;volatile
  5629  0000AC  AA9E               	btfss	3998,5,c	;volatile
  5630  0000AE  D009               	goto	i2l259
  5631                           
  5632                           ;interrupt_manager.c: 80: {
  5633                           ;interrupt_manager.c: 81: EUSART1_RxDefaultInterruptHandler();
  5634  0000B0  D801               	call	i2u344_48
  5635  0000B2  D01C               	goto	i2u349_49
  5636  0000B4                     i2u344_48:
  5637  0000B4  0005               	push	
  5638  0000B6  6EFA               	movwf	pclath,c
  5639  0000B8  0100               	movlb	0	; () banked
  5640  0000BA  51E3               	movf	_EUSART1_RxDefaultInterruptHandler& (0+255),w,b
  5641  0000BC  6EFD               	movwf	tosl,c
  5642  0000BE  51E4               	movf	(_EUSART1_RxDefaultInterruptHandler+1)& (0+255),w,b
  5643  0000C0  D011               	goto	L6
  5644  0000C2                     i2l259:
  5645                           
  5646                           ;interrupt_manager.c: 83: else if(PIE1bits.TMR2IE == 1 && PIR1bits.TMR2IF == 1)
  5647  0000C2  B29D               	btfsc	3997,1,c	;volatile
  5648  0000C4  A29E               	btfss	3998,1,c	;volatile
  5649  0000C6  D003               	goto	i2l261
  5650                           
  5651                           ;interrupt_manager.c: 84: {
  5652                           ;interrupt_manager.c: 85: TMR2_ISR();
  5653  0000C8  EC89  F00C         	call	_TMR2_ISR	;wreg free
  5654                           
  5655                           ;interrupt_manager.c: 86: }
  5656  0000CC  D00F               	goto	i2u349_49
  5657  0000CE                     i2l261:
  5658                           
  5659                           ;interrupt_manager.c: 87: else if(PIE1bits.SSPIE == 1 && PIR1bits.SSPIF == 1)
  5660  0000CE  B69D               	btfsc	3997,3,c	;volatile
  5661  0000D0  A69E               	btfss	3998,3,c	;volatile
  5662  0000D2  D00C               	goto	i2u349_49
  5663                           
  5664                           ;interrupt_manager.c: 88: {
  5665                           ;interrupt_manager.c: 89: I2C_InterruptHandler();
  5666  0000D4  D801               	call	i2u349_48
  5667  0000D6  D00A               	goto	i2u349_49
  5668  0000D8                     i2u349_48:
  5669  0000D8  0005               	push	
  5670  0000DA  6EFA               	movwf	pclath,c
  5671  0000DC  0100               	movlb	0	; () banked
  5672  0000DE  51E1               	movf	_I2C_InterruptHandler& (0+255),w,b
  5673  0000E0  6EFD               	movwf	tosl,c
  5674  0000E2  51E2               	movf	(_I2C_InterruptHandler+1)& (0+255),w,b
  5675  0000E4                     L6:
  5676  0000E4  6EFE               	movwf	tosh,c
  5677  0000E6  6AFF               	clrf	tosu,c
  5678  0000E8  50FA               	movf	pclath,w,c
  5679  0000EA  0012               	return		;indir
  5680  0000EC                     i2u349_49:
  5681                           
  5682                           ;interrupt_manager.c: 96: else
  5683                           ;interrupt_manager.c: 97: {
  5684                           
  5685                           ;interrupt_manager.c: 94: }
  5686                           ;interrupt_manager.c: 95: }
  5687                           
  5688                           ;interrupt_manager.c: 91: else
  5689                           ;interrupt_manager.c: 92: {
  5690                           
  5691                           ;interrupt_manager.c: 90: }
  5692  0000EC  C048  F061         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
  5693  0000F0  C047  F060         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
  5694  0000F4  C046  F05F         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
  5695  0000F8  C045  F05E         	movff	??_INTERRUPT_InterruptManager+14,btemp
  5696  0000FC  C044  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  5697  000100  C043  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  5698  000104  C042  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  5699  000108  C041  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  5700  00010C  C040  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  5701  000110  C03F  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  5702  000114  C03E  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  5703  000118  C03D  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  5704  00011C  C03C  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  5705  000120  C03B  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  5706  000124  C03A  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  5707  000128  C039  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  5708  00012C  C038  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  5709  000130  C037  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  5710  000134  925E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5711  000136  0011               	retfie		f
  5712  000138                     __end_of_INTERRUPT_InterruptManager:
  5713                           	opt stack 0
  5714                           tosu	equ	0xFFF
  5715                           tosh	equ	0xFFE
  5716                           tosl	equ	0xFFD
  5717                           pclatu	equ	0xFFB
  5718                           pclath	equ	0xFFA
  5719                           tblptru	equ	0xFF8
  5720                           tblptrh	equ	0xFF7
  5721                           tblptrl	equ	0xFF6
  5722                           tablat	equ	0xFF5
  5723                           prodh	equ	0xFF4
  5724                           prodl	equ	0xFF3
  5725                           intcon	equ	0xFF2
  5726                           intcon2	equ	0xFF1
  5727                           postinc0	equ	0xFEE
  5728                           fsr0h	equ	0xFEA
  5729                           fsr0l	equ	0xFE9
  5730                           wreg	equ	0xFE8
  5731                           postdec1	equ	0xFE5
  5732                           fsr1h	equ	0xFE2
  5733                           fsr1l	equ	0xFE1
  5734                           indf2	equ	0xFDF
  5735                           postinc2	equ	0xFDE
  5736                           fsr2h	equ	0xFDA
  5737                           fsr2l	equ	0xFD9
  5738                           status	equ	0xFD8
  5739                           
  5740 ;; *************** function _EUSART2_Receive_ISR *****************
  5741 ;; Defined at:
  5742 ;;		line 197 in file "mcc_generated_files/eusart2.c"
  5743 ;; Parameters:    Size  Location     Type
  5744 ;;		None
  5745 ;; Auto vars:     Size  Location     Type
  5746 ;;		None
  5747 ;; Return value:  Size  Location     Type
  5748 ;;                  1    wreg      void 
  5749 ;; Registers used:
  5750 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5751 ;; Tracked objects:
  5752 ;;		On entry : 0/0
  5753 ;;		On exit  : 0/0
  5754 ;;		Unchanged: 0/0
  5755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5756 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5757 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5759 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5760 ;;Total ram usage:        0 bytes
  5761 ;; Hardware stack levels used:    1
  5762 ;; This function calls:
  5763 ;;		Nothing
  5764 ;; This function is called by:
  5765 ;;		_EUSART2_Initialize
  5766 ;;		_INTERRUPT_InterruptManager
  5767 ;; This function uses a non-reentrant model
  5768 ;;
  5769                           
  5770                           	psect	text33
  5771  0017F2                     __ptext33:
  5772                           	opt stack 0
  5773  0017F2                     _EUSART2_Receive_ISR:
  5774                           	opt stack 24
  5775                           
  5776                           ;eusart2.c: 200: if(1 == RCSTA2bits.OERR)
  5777                           
  5778                           ;incstack = 0
  5779  0017F2  A2A6               	btfss	4006,1,c	;volatile
  5780  0017F4  D002               	goto	i2l356
  5781                           
  5782                           ;eusart2.c: 201: {
  5783                           ;eusart2.c: 204: RCSTA2bits.CREN = 0;
  5784  0017F6  98A6               	bcf	4006,4,c	;volatile
  5785                           
  5786                           ;eusart2.c: 205: RCSTA2bits.CREN = 1;
  5787  0017F8  88A6               	bsf	4006,4,c	;volatile
  5788  0017FA                     i2l356:
  5789                           
  5790                           ;eusart2.c: 206: }
  5791                           ;eusart2.c: 209: eusart2RxBuffer[eusart2RxHead++] = RCREG2;
  5792  0017FA  0100               	movlb	0	; () banked
  5793  0017FC  51A2               	movf	_eusart2RxHead& (0+255),w,b	;volatile
  5794  0017FE  0D01               	mullw	1
  5795  001800  0E7F               	movlw	low _eusart2RxBuffer
  5796  001802  24F3               	addwf	prodl,w,c
  5797  001804  6ED9               	movwf	fsr2l,c
  5798  001806  0E00               	movlw	high _eusart2RxBuffer
  5799  001808  20F4               	addwfc	prodh,w,c
  5800  00180A  6EDA               	movwf	fsr2h,c
  5801  00180C  CF7A FFDF          	movff	3962,indf2	;volatile
  5802                           
  5803                           ; BSR set to: 0
  5804  001810  2BA2               	incf	_eusart2RxHead& (0+255),f,b	;volatile
  5805                           
  5806                           ; BSR set to: 0
  5807                           ;eusart2.c: 210: if(sizeof(eusart2RxBuffer) <= eusart2RxHead)
  5808  001812  0E07               	movlw	7
  5809  001814  65A2               	cpfsgt	_eusart2RxHead& (0+255),b	;volatile
  5810  001816  D002               	goto	i2l357
  5811                           
  5812                           ; BSR set to: 0
  5813                           ;eusart2.c: 211: {
  5814                           ;eusart2.c: 212: eusart2RxHead = 0;
  5815  001818  0E00               	movlw	0
  5816  00181A  6FA2               	movwf	_eusart2RxHead& (0+255),b	;volatile
  5817  00181C                     i2l357:
  5818                           
  5819                           ; BSR set to: 0
  5820                           ;eusart2.c: 213: }
  5821                           ;eusart2.c: 214: eusart2RxCount++;
  5822                           
  5823                           ; BSR set to: 0
  5824  00181C  2A5A               	incf	_eusart2RxCount,f,c	;volatile
  5825                           
  5826                           ; BSR set to: 0
  5827  00181E  0012               	return		;funcret
  5828  001820                     __end_of_EUSART2_Receive_ISR:
  5829                           	opt stack 0
  5830                           tosu	equ	0xFFF
  5831                           tosh	equ	0xFFE
  5832                           tosl	equ	0xFFD
  5833                           pclatu	equ	0xFFB
  5834                           pclath	equ	0xFFA
  5835                           tblptru	equ	0xFF8
  5836                           tblptrh	equ	0xFF7
  5837                           tblptrl	equ	0xFF6
  5838                           tablat	equ	0xFF5
  5839                           prodh	equ	0xFF4
  5840                           prodl	equ	0xFF3
  5841                           intcon	equ	0xFF2
  5842                           intcon2	equ	0xFF1
  5843                           postinc0	equ	0xFEE
  5844                           fsr0h	equ	0xFEA
  5845                           fsr0l	equ	0xFE9
  5846                           wreg	equ	0xFE8
  5847                           postdec1	equ	0xFE5
  5848                           fsr1h	equ	0xFE2
  5849                           fsr1l	equ	0xFE1
  5850                           indf2	equ	0xFDF
  5851                           postinc2	equ	0xFDE
  5852                           fsr2h	equ	0xFDA
  5853                           fsr2l	equ	0xFD9
  5854                           status	equ	0xFD8
  5855                           
  5856 ;; *************** function _uart2_rx_custom_isr *****************
  5857 ;; Defined at:
  5858 ;;		line 196 in file "main.c"
  5859 ;; Parameters:    Size  Location     Type
  5860 ;;		None
  5861 ;; Auto vars:     Size  Location     Type
  5862 ;;		None
  5863 ;; Return value:  Size  Location     Type
  5864 ;;                  1    wreg      void 
  5865 ;; Registers used:
  5866 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5867 ;; Tracked objects:
  5868 ;;		On entry : 0/0
  5869 ;;		On exit  : 0/0
  5870 ;;		Unchanged: 0/0
  5871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5872 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5873 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5874 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5875 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5876 ;;Total ram usage:        0 bytes
  5877 ;; Hardware stack levels used:    1
  5878 ;; Hardware stack levels required when called:    1
  5879 ;; This function calls:
  5880 ;;		_save_uart_data
  5881 ;; This function is called by:
  5882 ;;		_main
  5883 ;;		_INTERRUPT_InterruptManager
  5884 ;; This function uses a non-reentrant model
  5885 ;;
  5886                           
  5887                           	psect	text34
  5888  00187A                     __ptext34:
  5889                           	opt stack 0
  5890  00187A                     _uart2_rx_custom_isr:
  5891                           	opt stack 23
  5892                           
  5893                           ;main.c: 198: if(1 == RCSTA2bits.OERR) {
  5894                           
  5895                           ; BSR set to: 0
  5896                           ;incstack = 0
  5897  00187A  A2A6               	btfss	4006,1,c	;volatile
  5898  00187C  D002               	goto	i2l707
  5899                           
  5900                           ;main.c: 199: RCSTA2bits.CREN = 0;
  5901  00187E  98A6               	bcf	4006,4,c	;volatile
  5902                           
  5903                           ;main.c: 200: RCSTA2bits.CREN = 1;
  5904  001880  88A6               	bsf	4006,4,c	;volatile
  5905  001882                     i2l707:
  5906                           
  5907                           ;main.c: 201: }
  5908                           ;main.c: 202: if (!RCSTA2bits.FERR) {
  5909  001882  B4A6               	btfsc	4006,2,c	;volatile
  5910  001884  0012               	return	
  5911  001886  D00B               	goto	i2l711
  5912  001888                     i2l710:
  5913                           
  5914                           ;main.c: 205: uartBuff = RCREG2;
  5915  001888  CF7A F053          	movff	3962,_uartBuff	;volatile
  5916                           
  5917                           ;main.c: 206: save_uart_data(uartBuff, k);
  5918  00188C  C052  F001         	movff	_k,save_uart_data@index
  5919  001890  5053               	movf	_uartBuff,w,c	;volatile
  5920  001892  EC13  F00D         	call	_save_uart_data
  5921                           
  5922                           ;main.c: 207: if (uartBuff != '\n') {
  5923  001896  0E0A               	movlw	10
  5924  001898  1853               	xorwf	_uartBuff,w,c	;volatile
  5925  00189A  A4D8               	btfss	status,2,c
  5926                           
  5927                           ;main.c: 208: k++;
  5928  00189C  2A52               	incf	_k,f,c
  5929  00189E                     i2l711:
  5930  00189E  AAA4               	btfss	4004,5,c	;volatile
  5931  0018A0  0012               	return	
  5932  0018A2  D7F2               	goto	i2l710
  5933  0018A4                     __end_of_uart2_rx_custom_isr:
  5934                           	opt stack 0
  5935                           tosu	equ	0xFFF
  5936                           tosh	equ	0xFFE
  5937                           tosl	equ	0xFFD
  5938                           pclatu	equ	0xFFB
  5939                           pclath	equ	0xFFA
  5940                           tblptru	equ	0xFF8
  5941                           tblptrh	equ	0xFF7
  5942                           tblptrl	equ	0xFF6
  5943                           tablat	equ	0xFF5
  5944                           prodh	equ	0xFF4
  5945                           prodl	equ	0xFF3
  5946                           intcon	equ	0xFF2
  5947                           intcon2	equ	0xFF1
  5948                           postinc0	equ	0xFEE
  5949                           fsr0h	equ	0xFEA
  5950                           fsr0l	equ	0xFE9
  5951                           wreg	equ	0xFE8
  5952                           postdec1	equ	0xFE5
  5953                           fsr1h	equ	0xFE2
  5954                           fsr1l	equ	0xFE1
  5955                           indf2	equ	0xFDF
  5956                           postinc2	equ	0xFDE
  5957                           fsr2h	equ	0xFDA
  5958                           fsr2l	equ	0xFD9
  5959                           status	equ	0xFD8
  5960                           
  5961 ;; *************** function _save_uart_data *****************
  5962 ;; Defined at:
  5963 ;;		line 192 in file "main.c"
  5964 ;; Parameters:    Size  Location     Type
  5965 ;;  inData          1    wreg     unsigned char 
  5966 ;;  index           1    0[COMRAM] unsigned char 
  5967 ;; Auto vars:     Size  Location     Type
  5968 ;;  inData          1    1[COMRAM] unsigned char 
  5969 ;; Return value:  Size  Location     Type
  5970 ;;                  1    wreg      void 
  5971 ;; Registers used:
  5972 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5973 ;; Tracked objects:
  5974 ;;		On entry : 0/0
  5975 ;;		On exit  : 0/0
  5976 ;;		Unchanged: 0/0
  5977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5978 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5979 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5981 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5982 ;;Total ram usage:        2 bytes
  5983 ;; Hardware stack levels used:    1
  5984 ;; This function calls:
  5985 ;;		Nothing
  5986 ;; This function is called by:
  5987 ;;		_uart2_rx_custom_isr
  5988 ;; This function uses a non-reentrant model
  5989 ;;
  5990                           
  5991                           	psect	text35
  5992  001A26                     __ptext35:
  5993                           	opt stack 0
  5994  001A26                     _save_uart_data:
  5995                           	opt stack 23
  5996                           
  5997                           ;incstack = 0
  5998                           ;save_uart_data@inData stored from wreg
  5999  001A26  6E02               	movwf	save_uart_data@inData,c
  6000                           
  6001                           ;main.c: 193: *(rxBuffer + index) = inData;
  6002  001A28  5001               	movf	save_uart_data@index,w,c
  6003  001A2A  0D01               	mullw	1
  6004  001A2C  0E60               	movlw	low _rxBuffer
  6005  001A2E  24F3               	addwf	prodl,w,c
  6006  001A30  6ED9               	movwf	fsr2l,c
  6007  001A32  0E00               	movlw	high _rxBuffer
  6008  001A34  20F4               	addwfc	prodh,w,c
  6009  001A36  6EDA               	movwf	fsr2h,c
  6010  001A38  C002  FFDF         	movff	save_uart_data@inData,indf2
  6011  001A3C  0012               	return		;funcret
  6012  001A3E                     __end_of_save_uart_data:
  6013                           	opt stack 0
  6014                           tosu	equ	0xFFF
  6015                           tosh	equ	0xFFE
  6016                           tosl	equ	0xFFD
  6017                           pclatu	equ	0xFFB
  6018                           pclath	equ	0xFFA
  6019                           tblptru	equ	0xFF8
  6020                           tblptrh	equ	0xFF7
  6021                           tblptrl	equ	0xFF6
  6022                           tablat	equ	0xFF5
  6023                           prodh	equ	0xFF4
  6024                           prodl	equ	0xFF3
  6025                           intcon	equ	0xFF2
  6026                           intcon2	equ	0xFF1
  6027                           postinc0	equ	0xFEE
  6028                           fsr0h	equ	0xFEA
  6029                           fsr0l	equ	0xFE9
  6030                           wreg	equ	0xFE8
  6031                           postdec1	equ	0xFE5
  6032                           fsr1h	equ	0xFE2
  6033                           fsr1l	equ	0xFE1
  6034                           indf2	equ	0xFDF
  6035                           postinc2	equ	0xFDE
  6036                           fsr2h	equ	0xFDA
  6037                           fsr2l	equ	0xFD9
  6038                           status	equ	0xFD8
  6039                           
  6040 ;; *************** function _TMR2_ISR *****************
  6041 ;; Defined at:
  6042 ;;		line 120 in file "mcc_generated_files/tmr2.c"
  6043 ;; Parameters:    Size  Location     Type
  6044 ;;		None
  6045 ;; Auto vars:     Size  Location     Type
  6046 ;;		None
  6047 ;; Return value:  Size  Location     Type
  6048 ;;                  1    wreg      void 
  6049 ;; Registers used:
  6050 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6051 ;; Tracked objects:
  6052 ;;		On entry : 0/0
  6053 ;;		On exit  : 0/0
  6054 ;;		Unchanged: 0/0
  6055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6057 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6058 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6059 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6060 ;;Total ram usage:        0 bytes
  6061 ;; Hardware stack levels used:    1
  6062 ;; Hardware stack levels required when called:    8
  6063 ;; This function calls:
  6064 ;;		_TMR2_CallBack
  6065 ;; This function is called by:
  6066 ;;		_INTERRUPT_InterruptManager
  6067 ;; This function uses a non-reentrant model
  6068 ;;
  6069                           
  6070                           	psect	text36
  6071  001912                     __ptext36:
  6072                           	opt stack 0
  6073  001912                     _TMR2_ISR:
  6074                           	opt stack 16
  6075                           
  6076                           ;tmr2.c: 122: static volatile unsigned int CountCallBack = 0;
  6077                           ;tmr2.c: 125: PIR1bits.TMR2IF = 0;
  6078                           
  6079                           ;incstack = 0
  6080  001912  929E               	bcf	3998,1,c	;volatile
  6081                           
  6082                           ;tmr2.c: 128: if (++CountCallBack >= 10)
  6083  001914  4A49               	infsnz	TMR2_ISR@CountCallBack,f,c	;volatile
  6084  001916  2A4A               	incf	TMR2_ISR@CountCallBack+1,f,c	;volatile
  6085  001918  504A               	movf	TMR2_ISR@CountCallBack+1,w,c	;volatile
  6086  00191A  E104               	bnz	i2u288_40
  6087  00191C  0E0A               	movlw	10
  6088  00191E  5C49               	subwf	TMR2_ISR@CountCallBack,w,c	;volatile
  6089  001920  A0D8               	btfss	status,0,c
  6090  001922  0012               	return	
  6091  001924                     i2u288_40:
  6092                           
  6093                           ;tmr2.c: 129: {
  6094                           ;tmr2.c: 131: TMR2_CallBack();
  6095  001924  EC99  F00C         	call	_TMR2_CallBack	;wreg free
  6096                           
  6097                           ;tmr2.c: 134: CountCallBack = 0;
  6098  001928  0E00               	movlw	0
  6099  00192A  6E4A               	movwf	TMR2_ISR@CountCallBack+1,c	;volatile
  6100  00192C  0E00               	movlw	0
  6101  00192E  6E49               	movwf	TMR2_ISR@CountCallBack,c	;volatile
  6102  001930  0012               	return	
  6103  001932                     __end_of_TMR2_ISR:
  6104                           	opt stack 0
  6105                           tosu	equ	0xFFF
  6106                           tosh	equ	0xFFE
  6107                           tosl	equ	0xFFD
  6108                           pclatu	equ	0xFFB
  6109                           pclath	equ	0xFFA
  6110                           tblptru	equ	0xFF8
  6111                           tblptrh	equ	0xFF7
  6112                           tblptrl	equ	0xFF6
  6113                           tablat	equ	0xFF5
  6114                           prodh	equ	0xFF4
  6115                           prodl	equ	0xFF3
  6116                           intcon	equ	0xFF2
  6117                           intcon2	equ	0xFF1
  6118                           postinc0	equ	0xFEE
  6119                           fsr0h	equ	0xFEA
  6120                           fsr0l	equ	0xFE9
  6121                           wreg	equ	0xFE8
  6122                           postdec1	equ	0xFE5
  6123                           fsr1h	equ	0xFE2
  6124                           fsr1l	equ	0xFE1
  6125                           indf2	equ	0xFDF
  6126                           postinc2	equ	0xFDE
  6127                           fsr2h	equ	0xFDA
  6128                           fsr2l	equ	0xFD9
  6129                           status	equ	0xFD8
  6130                           
  6131 ;; *************** function _TMR2_CallBack *****************
  6132 ;; Defined at:
  6133 ;;		line 138 in file "mcc_generated_files/tmr2.c"
  6134 ;; Parameters:    Size  Location     Type
  6135 ;;		None
  6136 ;; Auto vars:     Size  Location     Type
  6137 ;;		None
  6138 ;; Return value:  Size  Location     Type
  6139 ;;                  1    wreg      void 
  6140 ;; Registers used:
  6141 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6142 ;; Tracked objects:
  6143 ;;		On entry : 0/0
  6144 ;;		On exit  : 0/0
  6145 ;;		Unchanged: 0/0
  6146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6147 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6148 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6149 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6150 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6151 ;;Total ram usage:        0 bytes
  6152 ;; Hardware stack levels used:    1
  6153 ;; Hardware stack levels required when called:    7
  6154 ;; This function calls:
  6155 ;;		Absolute function
  6156 ;;		_TMR2_DefaultInterruptHandler
  6157 ;;		_tmr2_custom_isr
  6158 ;; This function is called by:
  6159 ;;		_TMR2_ISR
  6160 ;; This function uses a non-reentrant model
  6161 ;;
  6162                           
  6163                           	psect	text37
  6164  001932                     __ptext37:
  6165                           	opt stack 0
  6166  001932                     _TMR2_CallBack:
  6167                           	opt stack 16
  6168                           
  6169                           ;tmr2.c: 142: if(TMR2_InterruptHandler)
  6170                           
  6171                           ;incstack = 0
  6172  001932  0100               	movlb	0	; () banked
  6173  001934  51E7               	movf	_TMR2_InterruptHandler& (0+255),w,b
  6174  001936  11E8               	iorwf	(_TMR2_InterruptHandler+1)& (0+255),w,b
  6175  001938  B4D8               	btfsc	status,2,c
  6176  00193A  0012               	return	
  6177                           
  6178                           ; BSR set to: 0
  6179                           ;tmr2.c: 143: {
  6180                           ;tmr2.c: 144: TMR2_InterruptHandler();
  6181  00193C  D801               	call	i2u278_48
  6182  00193E  0012               	return	
  6183  001940                     i2u278_48:
  6184  001940  0005               	push	
  6185  001942  6EFA               	movwf	pclath,c
  6186  001944  51E7               	movf	_TMR2_InterruptHandler& (0+255),w,b
  6187  001946  6EFD               	movwf	tosl,c
  6188  001948  51E8               	movf	(_TMR2_InterruptHandler+1)& (0+255),w,b
  6189  00194A  6EFE               	movwf	tosh,c
  6190  00194C  6AFF               	clrf	tosu,c
  6191  00194E  50FA               	movf	pclath,w,c
  6192  001950  0012               	return		;indir
  6193  001952                     __end_of_TMR2_CallBack:
  6194                           	opt stack 0
  6195                           tosu	equ	0xFFF
  6196                           tosh	equ	0xFFE
  6197                           tosl	equ	0xFFD
  6198                           pclatu	equ	0xFFB
  6199                           pclath	equ	0xFFA
  6200                           tblptru	equ	0xFF8
  6201                           tblptrh	equ	0xFF7
  6202                           tblptrl	equ	0xFF6
  6203                           tablat	equ	0xFF5
  6204                           prodh	equ	0xFF4
  6205                           prodl	equ	0xFF3
  6206                           intcon	equ	0xFF2
  6207                           intcon2	equ	0xFF1
  6208                           postinc0	equ	0xFEE
  6209                           fsr0h	equ	0xFEA
  6210                           fsr0l	equ	0xFE9
  6211                           wreg	equ	0xFE8
  6212                           postdec1	equ	0xFE5
  6213                           fsr1h	equ	0xFE2
  6214                           fsr1l	equ	0xFE1
  6215                           indf2	equ	0xFDF
  6216                           postinc2	equ	0xFDE
  6217                           fsr2h	equ	0xFDA
  6218                           fsr2l	equ	0xFD9
  6219                           status	equ	0xFD8
  6220                           
  6221 ;; *************** function _TMR2_DefaultInterruptHandler *****************
  6222 ;; Defined at:
  6223 ;;		line 152 in file "mcc_generated_files/tmr2.c"
  6224 ;; Parameters:    Size  Location     Type
  6225 ;;		None
  6226 ;; Auto vars:     Size  Location     Type
  6227 ;;		None
  6228 ;; Return value:  Size  Location     Type
  6229 ;;                  1    wreg      void 
  6230 ;; Registers used:
  6231 ;;		None
  6232 ;; Tracked objects:
  6233 ;;		On entry : 0/0
  6234 ;;		On exit  : 0/0
  6235 ;;		Unchanged: 0/0
  6236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6238 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6240 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6241 ;;Total ram usage:        0 bytes
  6242 ;; Hardware stack levels used:    1
  6243 ;; This function calls:
  6244 ;;		Nothing
  6245 ;; This function is called by:
  6246 ;;		_TMR2_Initialize
  6247 ;;		_TMR2_CallBack
  6248 ;; This function uses a non-reentrant model
  6249 ;;
  6250                           
  6251                           	psect	text38
  6252  001B24                     __ptext38:
  6253                           	opt stack 0
  6254  001B24                     _TMR2_DefaultInterruptHandler:
  6255                           	opt stack 22
  6256                           
  6257                           ;incstack = 0
  6258  001B24  0012               	return		;funcret
  6259  001B26                     __end_of_TMR2_DefaultInterruptHandler:
  6260                           	opt stack 0
  6261                           tosu	equ	0xFFF
  6262                           tosh	equ	0xFFE
  6263                           tosl	equ	0xFFD
  6264                           pclatu	equ	0xFFB
  6265                           pclath	equ	0xFFA
  6266                           tblptru	equ	0xFF8
  6267                           tblptrh	equ	0xFF7
  6268                           tblptrl	equ	0xFF6
  6269                           tablat	equ	0xFF5
  6270                           prodh	equ	0xFF4
  6271                           prodl	equ	0xFF3
  6272                           intcon	equ	0xFF2
  6273                           intcon2	equ	0xFF1
  6274                           postinc0	equ	0xFEE
  6275                           fsr0h	equ	0xFEA
  6276                           fsr0l	equ	0xFE9
  6277                           wreg	equ	0xFE8
  6278                           postdec1	equ	0xFE5
  6279                           fsr1h	equ	0xFE2
  6280                           fsr1l	equ	0xFE1
  6281                           indf2	equ	0xFDF
  6282                           postinc2	equ	0xFDE
  6283                           fsr2h	equ	0xFDA
  6284                           fsr2l	equ	0xFD9
  6285                           status	equ	0xFD8
  6286                           
  6287 ;; *************** function _tmr2_custom_isr *****************
  6288 ;; Defined at:
  6289 ;;		line 216 in file "main.c"
  6290 ;; Parameters:    Size  Location     Type
  6291 ;;		None
  6292 ;; Auto vars:     Size  Location     Type
  6293 ;;  j               1   45[COMRAM] unsigned char 
  6294 ;;  j               1   44[COMRAM] unsigned char 
  6295 ;;  i               1   51[COMRAM] unsigned char 
  6296 ;;  i               1   50[COMRAM] unsigned char 
  6297 ;;  i               1   47[COMRAM] unsigned char 
  6298 ;;  multiplicado    2   52[COMRAM] int 
  6299 ;;  peso            2   48[COMRAM] int 
  6300 ;;  eoc             1   46[COMRAM] unsigned char 
  6301 ;;  local           1    0        unsigned char 
  6302 ;; Return value:  Size  Location     Type
  6303 ;;                  1    wreg      void 
  6304 ;; Registers used:
  6305 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6306 ;; Tracked objects:
  6307 ;;		On entry : 0/0
  6308 ;;		On exit  : 0/0
  6309 ;;		Unchanged: 0/0
  6310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6312 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6313 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6314 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6315 ;;Total ram usage:       15 bytes
  6316 ;; Hardware stack levels used:    1
  6317 ;; Hardware stack levels required when called:    6
  6318 ;; This function calls:
  6319 ;;		___awdiv
  6320 ;;		_lcd_number
  6321 ;;		_lcd_text_color
  6322 ;;		i2_lcd_point
  6323 ;;		i2_lcd_text
  6324 ;;		i2_putch
  6325 ;;		i2_strcpy
  6326 ;; This function is called by:
  6327 ;;		_main
  6328 ;;		_TMR2_CallBack
  6329 ;; This function uses a non-reentrant model
  6330 ;;
  6331                           
  6332                           	psect	text39
  6333  00013C                     __ptext39:
  6334                           	opt stack 0
  6335  00013C                     _tmr2_custom_isr:
  6336                           	opt stack 16
  6337                           
  6338                           ;main.c: 217: char local, eoc;
  6339                           ;main.c: 218: signed int peso = 0, multiplicador = 10000;
  6340                           
  6341                           ;incstack = 0
  6342  00013C  0E00               	movlw	0
  6343  00013E  6E32               	movwf	tmr2_custom_isr@peso+1,c
  6344  000140  0E00               	movlw	0
  6345  000142  6E31               	movwf	tmr2_custom_isr@peso,c
  6346  000144  0E27               	movlw	39
  6347  000146  6E36               	movwf	tmr2_custom_isr@multiplicador+1,c
  6348  000148  0E10               	movlw	16
  6349  00014A  6E35               	movwf	tmr2_custom_isr@multiplicador,c
  6350                           
  6351                           ;main.c: 221: if (rxBuffer[k] == '\n') {
  6352  00014C  5052               	movf	_k,w,c
  6353  00014E  0D01               	mullw	1
  6354  000150  0E60               	movlw	low _rxBuffer
  6355  000152  24F3               	addwf	prodl,w,c
  6356  000154  6ED9               	movwf	fsr2l,c
  6357  000156  0E00               	movlw	high _rxBuffer
  6358  000158  20F4               	addwfc	prodh,w,c
  6359  00015A  6EDA               	movwf	fsr2h,c
  6360  00015C  0E0A               	movlw	10
  6361  00015E  18DE               	xorwf	postinc2,w,c
  6362  000160  A4D8               	btfss	status,2,c
  6363  000162  0012               	return	
  6364                           
  6365                           ;main.c: 222: for (char i=0;i<k+1;i++) {
  6366  000164  0E00               	movlw	0
  6367  000166  6E30               	movwf	tmr2_custom_isr@i,c
  6368  000168  D00C               	goto	i2l717
  6369  00016A                     
  6370                           ;main.c: 223: putch(rxBuffer[i]);
  6371  00016A  5030               	movf	tmr2_custom_isr@i,w,c
  6372  00016C  0D01               	mullw	1
  6373  00016E  0E60               	movlw	low _rxBuffer
  6374  000170  24F3               	addwf	prodl,w,c
  6375  000172  6ED9               	movwf	fsr2l,c
  6376  000174  0E00               	movlw	high _rxBuffer
  6377  000176  20F4               	addwfc	prodh,w,c
  6378  000178  6EDA               	movwf	fsr2h,c
  6379  00017A  50DF               	movf	indf2,w,c
  6380  00017C  EC4C  F00D         	call	i2_putch
  6381  000180  2A30               	incf	tmr2_custom_isr@i,f,c
  6382  000182                     i2l717:
  6383  000182  5052               	movf	_k,w,c
  6384  000184  6E28               	movwf	??_tmr2_custom_isr& (0+255),c
  6385  000186  6A29               	clrf	(??_tmr2_custom_isr+1)& (0+255),c
  6386  000188  0E01               	movlw	1
  6387  00018A  2628               	addwf	??_tmr2_custom_isr,f,c
  6388  00018C  0E00               	movlw	0
  6389  00018E  2229               	addwfc	??_tmr2_custom_isr+1,f,c
  6390  000190  5030               	movf	tmr2_custom_isr@i,w,c
  6391  000192  6E2A               	movwf	(??_tmr2_custom_isr+2)& (0+255),c
  6392  000194  6A2B               	clrf	(??_tmr2_custom_isr+3)& (0+255),c
  6393  000196  5028               	movf	??_tmr2_custom_isr,w,c
  6394  000198  5C2A               	subwf	??_tmr2_custom_isr+2,w,c
  6395  00019A  502B               	movf	??_tmr2_custom_isr+3,w,c
  6396  00019C  0A80               	xorlw	128
  6397  00019E  6E2C               	movwf	(??_tmr2_custom_isr+4)& (0+255),c
  6398  0001A0  5029               	movf	??_tmr2_custom_isr+1,w,c
  6399  0001A2  0A80               	xorlw	128
  6400  0001A4  582C               	subwfb	(??_tmr2_custom_isr+4)& (0+255),w,c
  6401  0001A6  B0D8               	btfsc	status,0,c
  6402  0001A8  D0A3               	goto	i2l720
  6403  0001AA  D7DF               	goto	i2l718
  6404  0001AC                     
  6405                           ;main.c: 227: if (rxBuffer[3] == '-') {
  6406  0001AC  0E2D               	movlw	45
  6407  0001AE  0100               	movlb	0	; () banked
  6408  0001B0  1963               	xorwf	(_rxBuffer+3)& (0+255),w,b	;volatile
  6409  0001B2  A4D8               	btfss	status,2,c
  6410  0001B4  D037               	goto	i2l722
  6411                           
  6412                           ; BSR set to: 0
  6413                           ;main.c: 228: for (char i=0;i<5;i++) {
  6414  0001B6  0E00               	movlw	0
  6415  0001B8  6E33               	movwf	tmr2_custom_isr@i_1909,c
  6416  0001BA                     i2l3338:
  6417                           
  6418                           ; BSR set to: 0
  6419  0001BA  0E04               	movlw	4
  6420  0001BC  6433               	cpfsgt	tmr2_custom_isr@i_1909,c
  6421  0001BE  D001               	goto	i2l723
  6422  0001C0  D02C               	goto	i2u256_40
  6423  0001C2                     i2l723:
  6424                           
  6425                           ;main.c: 229: eoc = rxBuffer[4+i]-48;
  6426                           
  6427                           ; BSR set to: 0
  6428  0001C2  5033               	movf	tmr2_custom_isr@i_1909,w,c
  6429  0001C4  6E28               	movwf	??_tmr2_custom_isr& (0+255),c
  6430  0001C6  6A29               	clrf	(??_tmr2_custom_isr+1)& (0+255),c
  6431  0001C8  0E04               	movlw	4
  6432  0001CA  2628               	addwf	??_tmr2_custom_isr,f,c
  6433  0001CC  0E00               	movlw	0
  6434  0001CE  2229               	addwfc	??_tmr2_custom_isr+1,f,c
  6435  0001D0  0E60               	movlw	low _rxBuffer
  6436  0001D2  2428               	addwf	??_tmr2_custom_isr,w,c
  6437  0001D4  6ED9               	movwf	fsr2l,c
  6438  0001D6  0E00               	movlw	high _rxBuffer
  6439  0001D8  2029               	addwfc	??_tmr2_custom_isr+1,w,c
  6440  0001DA  6EDA               	movwf	fsr2h,c
  6441  0001DC  50DF               	movf	indf2,w,c
  6442  0001DE  0FD0               	addlw	208
  6443  0001E0  6E2F               	movwf	tmr2_custom_isr@eoc,c
  6444                           
  6445                           ;main.c: 230: for (char j=0;j<eoc;j++) {
  6446  0001E2  0E00               	movlw	0
  6447  0001E4  6E2D               	movwf	tmr2_custom_isr@j,c
  6448  0001E6  D005               	goto	i2l725
  6449  0001E8                     
  6450                           ;main.c: 231: peso += multiplicador;
  6451  0001E8  5035               	movf	tmr2_custom_isr@multiplicador,w,c
  6452  0001EA  2631               	addwf	tmr2_custom_isr@peso,f,c
  6453  0001EC  5036               	movf	tmr2_custom_isr@multiplicador+1,w,c
  6454  0001EE  2232               	addwfc	tmr2_custom_isr@peso+1,f,c
  6455  0001F0  2A2D               	incf	tmr2_custom_isr@j,f,c
  6456  0001F2                     i2l725:
  6457  0001F2  502F               	movf	tmr2_custom_isr@eoc,w,c
  6458  0001F4  5C2D               	subwf	tmr2_custom_isr@j,w,c
  6459  0001F6  A0D8               	btfss	status,0,c
  6460  0001F8  D7F7               	goto	i2l726
  6461                           
  6462                           ;main.c: 232: }
  6463                           ;main.c: 233: multiplicador /= 10;
  6464  0001FA  C035  F001         	movff	tmr2_custom_isr@multiplicador,___awdiv@dividend
  6465  0001FE  C036  F002         	movff	tmr2_custom_isr@multiplicador+1,___awdiv@dividend+1
  6466  000202  0E00               	movlw	0
  6467  000204  6E04               	movwf	___awdiv@divisor+1,c
  6468  000206  0E0A               	movlw	10
  6469  000208  6E03               	movwf	___awdiv@divisor,c
  6470  00020A  EC0A  F009         	call	___awdiv	;wreg free
  6471  00020E  C001  F035         	movff	?___awdiv,tmr2_custom_isr@multiplicador
  6472  000212  C002  F036         	movff	?___awdiv+1,tmr2_custom_isr@multiplicador+1
  6473  000216  2A33               	incf	tmr2_custom_isr@i_1909,f,c
  6474  000218  D7D0               	goto	i2l3338
  6475  00021A                     i2u256_40:
  6476                           
  6477                           ;main.c: 234: }
  6478                           ;main.c: 235: peso = 0 - peso;
  6479  00021A  6C31               	negf	tmr2_custom_isr@peso,c
  6480  00021C  1E32               	comf	tmr2_custom_isr@peso+1,f,c
  6481  00021E  B0D8               	btfsc	status,0,c
  6482  000220  2A32               	incf	tmr2_custom_isr@peso+1,f,c
  6483                           
  6484                           ;main.c: 236: } else {
  6485  000222  D032               	goto	i2u259_40
  6486  000224                     i2l722:
  6487                           
  6488                           ;main.c: 237: for (char i=0;i<5;i++) {
  6489  000224  0E00               	movlw	0
  6490  000226  6E34               	movwf	tmr2_custom_isr@i_1911,c
  6491  000228                     i2l3362:
  6492  000228  0E04               	movlw	4
  6493  00022A  6434               	cpfsgt	tmr2_custom_isr@i_1911,c
  6494  00022C  D001               	goto	i2l729
  6495  00022E  D02C               	goto	i2u259_40
  6496  000230                     i2l729:
  6497                           
  6498                           ;main.c: 238: eoc = rxBuffer[3+i]-48;
  6499  000230  5034               	movf	tmr2_custom_isr@i_1911,w,c
  6500  000232  6E28               	movwf	??_tmr2_custom_isr& (0+255),c
  6501  000234  6A29               	clrf	(??_tmr2_custom_isr+1)& (0+255),c
  6502  000236  0E03               	movlw	3
  6503  000238  2628               	addwf	??_tmr2_custom_isr,f,c
  6504  00023A  0E00               	movlw	0
  6505  00023C  2229               	addwfc	??_tmr2_custom_isr+1,f,c
  6506  00023E  0E60               	movlw	low _rxBuffer
  6507  000240  2428               	addwf	??_tmr2_custom_isr,w,c
  6508  000242  6ED9               	movwf	fsr2l,c
  6509  000244  0E00               	movlw	high _rxBuffer
  6510  000246  2029               	addwfc	??_tmr2_custom_isr+1,w,c
  6511  000248  6EDA               	movwf	fsr2h,c
  6512  00024A  50DF               	movf	indf2,w,c
  6513  00024C  0FD0               	addlw	208
  6514  00024E  6E2F               	movwf	tmr2_custom_isr@eoc,c
  6515                           
  6516                           ;main.c: 239: for (char j=0;j<eoc;j++) {
  6517  000250  0E00               	movlw	0
  6518  000252  6E2E               	movwf	tmr2_custom_isr@j_1912,c
  6519  000254  D005               	goto	i2l731
  6520  000256                     
  6521                           ;main.c: 240: peso += multiplicador;
  6522  000256  5035               	movf	tmr2_custom_isr@multiplicador,w,c
  6523  000258  2631               	addwf	tmr2_custom_isr@peso,f,c
  6524  00025A  5036               	movf	tmr2_custom_isr@multiplicador+1,w,c
  6525  00025C  2232               	addwfc	tmr2_custom_isr@peso+1,f,c
  6526  00025E  2A2E               	incf	tmr2_custom_isr@j_1912,f,c
  6527  000260                     i2l731:
  6528  000260  502F               	movf	tmr2_custom_isr@eoc,w,c
  6529  000262  5C2E               	subwf	tmr2_custom_isr@j_1912,w,c
  6530  000264  A0D8               	btfss	status,0,c
  6531  000266  D7F7               	goto	i2l732
  6532                           
  6533                           ;main.c: 241: }
  6534                           ;main.c: 242: multiplicador /= 10;
  6535  000268  C035  F001         	movff	tmr2_custom_isr@multiplicador,___awdiv@dividend
  6536  00026C  C036  F002         	movff	tmr2_custom_isr@multiplicador+1,___awdiv@dividend+1
  6537  000270  0E00               	movlw	0
  6538  000272  6E04               	movwf	___awdiv@divisor+1,c
  6539  000274  0E0A               	movlw	10
  6540  000276  6E03               	movwf	___awdiv@divisor,c
  6541  000278  EC0A  F009         	call	___awdiv	;wreg free
  6542  00027C  C001  F035         	movff	?___awdiv,tmr2_custom_isr@multiplicador
  6543  000280  C002  F036         	movff	?___awdiv+1,tmr2_custom_isr@multiplicador+1
  6544  000284  2A34               	incf	tmr2_custom_isr@i_1911,f,c
  6545  000286  D7D0               	goto	i2l3362
  6546  000288                     i2u259_40:
  6547                           
  6548                           ;main.c: 243: }
  6549                           ;main.c: 244: }
  6550                           ;main.c: 245: if (printEnable) {
  6551  000288  504B               	movf	_printEnable,w,c
  6552  00028A  B4D8               	btfsc	status,2,c
  6553  00028C  D03A               	goto	i2l735
  6554                           
  6555                           ;main.c: 246: printEnable = 0;
  6556  00028E  0E00               	movlw	0
  6557  000290  6E4B               	movwf	_printEnable,c
  6558                           
  6559                           ;main.c: 247: lcd_number(peso);
  6560  000292  C031  F019         	movff	tmr2_custom_isr@peso,lcd_number@number
  6561  000296  C032  F01A         	movff	tmr2_custom_isr@peso+1,lcd_number@number+1
  6562  00029A  ECFB  F003         	call	_lcd_number	;wreg free
  6563                           
  6564                           ;main.c: 248: printEnable = 1;
  6565  00029E  0E01               	movlw	1
  6566  0002A0  6E4B               	movwf	_printEnable,c
  6567                           
  6568                           ;main.c: 253: break;
  6569                           
  6570                           ;main.c: 251: case 'R':
  6571                           
  6572                           ;main.c: 249: }
  6573                           ;main.c: 250: break;
  6574  0002A2  D02F               	goto	i2l735
  6575  0002A4                     
  6576                           ;main.c: 255: strcpy(mensaje,"CALIBRACION    ");
  6577  0002A4  0EA5               	movlw	low _mensaje
  6578  0002A6  6E01               	movwf	i2strcpy@to,c
  6579  0002A8  0E00               	movlw	high _mensaje
  6580  0002AA  6E02               	movwf	i2strcpy@to+1,c
  6581  0002AC  0EC7               	movlw	low STR_1
  6582  0002AE  6E03               	movwf	i2strcpy@from,c
  6583  0002B0  0EFF               	movlw	high STR_1
  6584  0002B2  6E04               	movwf	i2strcpy@from+1,c
  6585  0002B4  ECB0  F00B         	call	i2_strcpy	;wreg free
  6586                           
  6587                           ;main.c: 256: lcd_text(1,mensaje);
  6588  0002B8  0EA5               	movlw	low _mensaje
  6589  0002BA  6E18               	movwf	i2lcd_text@msjPtr,c
  6590  0002BC  0E00               	movlw	high _mensaje
  6591  0002BE  6E19               	movwf	i2lcd_text@msjPtr+1,c
  6592  0002C0  0E01               	movlw	1
  6593  0002C2  EC5B  F002         	call	i2_lcd_text
  6594                           
  6595                           ;main.c: 257: strcpy(mensaje,"REQUERIDA      ");
  6596  0002C6  0EA5               	movlw	low _mensaje
  6597  0002C8  6E01               	movwf	i2strcpy@to,c
  6598  0002CA  0E00               	movlw	high _mensaje
  6599  0002CC  6E02               	movwf	i2strcpy@to+1,c
  6600  0002CE  0EB7               	movlw	low STR_2
  6601  0002D0  6E03               	movwf	i2strcpy@from,c
  6602  0002D2  0EFF               	movlw	high STR_2
  6603  0002D4  6E04               	movwf	i2strcpy@from+1,c
  6604  0002D6  ECB0  F00B         	call	i2_strcpy	;wreg free
  6605                           
  6606                           ;main.c: 258: lcd_text_color(2,mensaje);
  6607  0002DA  0EA5               	movlw	low _mensaje
  6608  0002DC  6E18               	movwf	lcd_text_color@msjPtr,c
  6609  0002DE  0E00               	movlw	high _mensaje
  6610  0002E0  6E19               	movwf	lcd_text_color@msjPtr+1,c
  6611  0002E2  0E02               	movlw	2
  6612  0002E4  EC2B  F003         	call	_lcd_text_color
  6613                           
  6614                           ;main.c: 259: lcd_point(0);
  6615  0002E8  0E00               	movlw	0
  6616  0002EA  EC64  F008         	call	i2_lcd_point
  6617                           
  6618                           ;main.c: 261: }
  6619                           
  6620                           ;main.c: 260: break;
  6621  0002EE  D009               	goto	i2l735
  6622  0002F0                     i2l720:
  6623  0002F0  0100               	movlb	0	; () banked
  6624  0002F2  5160               	movf	_rxBuffer& (0+255),w,b	;volatile
  6625                           
  6626                           ; Switch size 1, requested type "space"
  6627                           ; Number of cases is 3, Range of values is 67 to 82
  6628                           ; switch strategies available:
  6629                           ; Name         Instructions Cycles
  6630                           ; simple_byte           10     6 (average)
  6631                           ;	Chosen strategy is simple_byte
  6632  0002F4  0A43               	xorlw	67	; case 67
  6633  0002F6  B4D8               	btfsc	status,2,c
  6634  0002F8  D7D5               	goto	i2l737
  6635  0002FA  0A13               	xorlw	19	; case 80
  6636  0002FC  B4D8               	btfsc	status,2,c
  6637  0002FE  D756               	goto	i2l721
  6638  000300  0A02               	xorlw	2	; case 82
  6639  000302                     i2l735:
  6640                           
  6641                           ;main.c: 262: k = 0;
  6642                           
  6643                           ; BSR set to: 0
  6644  000302  0E00               	movlw	0
  6645  000304  6E52               	movwf	_k,c
  6646                           
  6647                           ;main.c: 263: q = 0;
  6648  000306  0E00               	movlw	0
  6649  000308  6E51               	movwf	_q,c
  6650  00030A  0012               	return	
  6651  00030C                     __end_of_tmr2_custom_isr:
  6652                           	opt stack 0
  6653                           tosu	equ	0xFFF
  6654                           tosh	equ	0xFFE
  6655                           tosl	equ	0xFFD
  6656                           pclatu	equ	0xFFB
  6657                           pclath	equ	0xFFA
  6658                           tblptru	equ	0xFF8
  6659                           tblptrh	equ	0xFF7
  6660                           tblptrl	equ	0xFF6
  6661                           tablat	equ	0xFF5
  6662                           prodh	equ	0xFF4
  6663                           prodl	equ	0xFF3
  6664                           intcon	equ	0xFF2
  6665                           intcon2	equ	0xFF1
  6666                           postinc0	equ	0xFEE
  6667                           fsr0h	equ	0xFEA
  6668                           fsr0l	equ	0xFE9
  6669                           wreg	equ	0xFE8
  6670                           postdec1	equ	0xFE5
  6671                           fsr1h	equ	0xFE2
  6672                           fsr1l	equ	0xFE1
  6673                           indf2	equ	0xFDF
  6674                           postinc2	equ	0xFDE
  6675                           fsr2h	equ	0xFDA
  6676                           fsr2l	equ	0xFD9
  6677                           status	equ	0xFD8
  6678                           
  6679 ;; *************** function i2_strcpy *****************
  6680 ;; Defined at:
  6681 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcpy.c"
  6682 ;; Parameters:    Size  Location     Type
  6683 ;;  to              2    0[COMRAM] PTR unsigned char 
  6684 ;;		 -> mensaje(20), 
  6685 ;;  from            2    2[COMRAM] PTR const unsigned char 
  6686 ;;		 -> STR_7(16), STR_2(16), STR_1(16), 
  6687 ;; Auto vars:     Size  Location     Type
  6688 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
  6689 ;;		 -> mensaje(20), 
  6690 ;; Return value:  Size  Location     Type
  6691 ;;                  2    0[COMRAM] PTR unsigned char 
  6692 ;; Registers used:
  6693 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  6694 ;; Tracked objects:
  6695 ;;		On entry : 0/0
  6696 ;;		On exit  : 0/0
  6697 ;;		Unchanged: 0/0
  6698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6699 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6700 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6701 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6702 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6703 ;;Total ram usage:        6 bytes
  6704 ;; Hardware stack levels used:    1
  6705 ;; This function calls:
  6706 ;;		Nothing
  6707 ;; This function is called by:
  6708 ;;		_tmr2_custom_isr
  6709 ;; This function uses a non-reentrant model
  6710 ;;
  6711                           
  6712                           	psect	text40
  6713  001760                     __ptext40:
  6714                           	opt stack 0
  6715  001760                     i2_strcpy:
  6716                           	opt stack 21
  6717                           
  6718                           ;incstack = 0
  6719  001760  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
  6720  001764  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
  6721  001768  D004               	goto	i2l1498
  6722  00176A  4A05               	infsnz	i2strcpy@cp,f,c
  6723  00176C  2A06               	incf	i2strcpy@cp+1,f,c
  6724  00176E  4A03               	infsnz	i2strcpy@from,f,c
  6725  001770  2A04               	incf	i2strcpy@from+1,f,c
  6726  001772                     i2l1498:
  6727  001772  C003  FFF6         	movff	i2strcpy@from,tblptrl
  6728  001776  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
  6729  00177A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6730  00177A  6AF8               	clrf	tblptru,c
  6731  00177C                     	endif
  6732  00177C                     	if	0	;tblptru may be non-zero
  6733  00177C                     	endif
  6734  00177C  C005  FFD9         	movff	i2strcpy@cp,fsr2l
  6735  001780  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
  6736  001784  0008               	tblrd		*
  6737  001786  CFF5 FFDF          	movff	tablat,indf2
  6738  00178A  50DF               	movf	indf2,w,c
  6739  00178C  B4D8               	btfsc	status,2,c
  6740  00178E  0012               	return	
  6741  001790  D7EC               	goto	i2l1499
  6742  001792                     __end_ofi2_strcpy:
  6743                           	opt stack 0
  6744                           tosu	equ	0xFFF
  6745                           tosh	equ	0xFFE
  6746                           tosl	equ	0xFFD
  6747                           pclatu	equ	0xFFB
  6748                           pclath	equ	0xFFA
  6749                           tblptru	equ	0xFF8
  6750                           tblptrh	equ	0xFF7
  6751                           tblptrl	equ	0xFF6
  6752                           tablat	equ	0xFF5
  6753                           prodh	equ	0xFF4
  6754                           prodl	equ	0xFF3
  6755                           intcon	equ	0xFF2
  6756                           intcon2	equ	0xFF1
  6757                           postinc0	equ	0xFEE
  6758                           fsr0h	equ	0xFEA
  6759                           fsr0l	equ	0xFE9
  6760                           wreg	equ	0xFE8
  6761                           postdec1	equ	0xFE5
  6762                           fsr1h	equ	0xFE2
  6763                           fsr1l	equ	0xFE1
  6764                           indf2	equ	0xFDF
  6765                           postinc2	equ	0xFDE
  6766                           fsr2h	equ	0xFDA
  6767                           fsr2l	equ	0xFD9
  6768                           status	equ	0xFD8
  6769                           
  6770 ;; *************** function i2_lcd_text *****************
  6771 ;; Defined at:
  6772 ;;		line 238 in file "tft.c"
  6773 ;; Parameters:    Size  Location     Type
  6774 ;;  renglon         1    wreg     unsigned char 
  6775 ;;  msjPtr          2   23[COMRAM] PTR unsigned char 
  6776 ;;		 -> mensaje(20), 
  6777 ;; Auto vars:     Size  Location     Type
  6778 ;;  renglon         1   32[COMRAM] unsigned char 
  6779 ;;  lcd_text        2   37[COMRAM] unsigned int 
  6780 ;;  lcd_text        2   35[COMRAM] unsigned int 
  6781 ;;  lcd_text        2   33[COMRAM] unsigned int 
  6782 ;; Return value:  Size  Location     Type
  6783 ;;                  1    wreg      void 
  6784 ;; Registers used:
  6785 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6786 ;; Tracked objects:
  6787 ;;		On entry : 0/0
  6788 ;;		On exit  : 0/0
  6789 ;;		Unchanged: 0/0
  6790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6791 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6792 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6793 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6794 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6795 ;;Total ram usage:       16 bytes
  6796 ;; Hardware stack levels used:    1
  6797 ;; Hardware stack levels required when called:    4
  6798 ;; This function calls:
  6799 ;;		i2___wmul
  6800 ;;		i2_bitRead
  6801 ;;		i2_lcd_pix
  6802 ;; This function is called by:
  6803 ;;		_tmr2_custom_isr
  6804 ;; This function uses a non-reentrant model
  6805 ;;
  6806                           
  6807                           	psect	text41
  6808  0004B6                     __ptext41:
  6809                           	opt stack 0
  6810  0004B6                     i2_lcd_text:
  6811                           	opt stack 17
  6812                           
  6813                           ;incstack = 0
  6814                           ;i2lcd_text@renglon stored from wreg
  6815  0004B6  6E21               	movwf	i2lcd_text@renglon,c
  6816                           
  6817                           ;tft.c: 239: unsigned int i,j,k;
  6818                           ;tft.c: 241: for (k=0;k<15;k++) {
  6819  0004B8  0E00               	movlw	0
  6820  0004BA  6E27               	movwf	i2lcd_text@k+1,c
  6821  0004BC  0E00               	movlw	0
  6822  0004BE  6E26               	movwf	i2lcd_text@k,c
  6823  0004C0  5027               	movf	i2lcd_text@k+1,w,c
  6824  0004C2  E105               	bnz	i2u239_40
  6825  0004C4  0E0F               	movlw	15
  6826  0004C6  5C26               	subwf	i2lcd_text@k,w,c
  6827  0004C8  B0D8               	btfsc	status,0,c
  6828  0004CA  0012               	return	
  6829  0004CC  D001               	goto	i2l895
  6830  0004CE                     i2u239_40:
  6831  0004CE  0012               	return	
  6832  0004D0                     i2l895:
  6833                           
  6834                           ;tft.c: 242: if (*(msjPtr+k) == 32 || *(msjPtr+k) == 0) {
  6835  0004D0  5026               	movf	i2lcd_text@k,w,c
  6836  0004D2  2418               	addwf	i2lcd_text@msjPtr,w,c
  6837  0004D4  6ED9               	movwf	fsr2l,c
  6838  0004D6  5027               	movf	i2lcd_text@k+1,w,c
  6839  0004D8  2019               	addwfc	i2lcd_text@msjPtr+1,w,c
  6840  0004DA  6EDA               	movwf	fsr2h,c
  6841  0004DC  0E20               	movlw	32
  6842  0004DE  18DE               	xorwf	postinc2,w,c
  6843  0004E0  B4D8               	btfsc	status,2,c
  6844  0004E2  D009               	goto	i2u241_40
  6845  0004E4  5026               	movf	i2lcd_text@k,w,c
  6846  0004E6  2418               	addwf	i2lcd_text@msjPtr,w,c
  6847  0004E8  6ED9               	movwf	fsr2l,c
  6848  0004EA  5027               	movf	i2lcd_text@k+1,w,c
  6849  0004EC  2019               	addwfc	i2lcd_text@msjPtr+1,w,c
  6850  0004EE  6EDA               	movwf	fsr2h,c
  6851  0004F0  50DF               	movf	indf2,w,c
  6852  0004F2  A4D8               	btfss	status,2,c
  6853  0004F4  D008               	goto	i2l897
  6854  0004F6                     i2u241_40:
  6855                           
  6856                           ;tft.c: 243: *(msjPtr+k) = 38;
  6857  0004F6  5026               	movf	i2lcd_text@k,w,c
  6858  0004F8  2418               	addwf	i2lcd_text@msjPtr,w,c
  6859  0004FA  6ED9               	movwf	fsr2l,c
  6860  0004FC  5027               	movf	i2lcd_text@k+1,w,c
  6861  0004FE  2019               	addwfc	i2lcd_text@msjPtr+1,w,c
  6862  000500  6EDA               	movwf	fsr2h,c
  6863  000502  0E26               	movlw	38
  6864  000504  6EDF               	movwf	indf2,c
  6865  000506                     i2l897:
  6866                           
  6867                           ;tft.c: 244: }
  6868                           ;tft.c: 245: if (*(msjPtr+k) > 47 && *(msjPtr+k) < 58) {
  6869  000506  5026               	movf	i2lcd_text@k,w,c
  6870  000508  2418               	addwf	i2lcd_text@msjPtr,w,c
  6871  00050A  6ED9               	movwf	fsr2l,c
  6872  00050C  5027               	movf	i2lcd_text@k+1,w,c
  6873  00050E  2019               	addwfc	i2lcd_text@msjPtr+1,w,c
  6874  000510  6EDA               	movwf	fsr2h,c
  6875  000512  0E2F               	movlw	47
  6876  000514  64DF               	cpfsgt	indf2,c
  6877  000516  D011               	goto	i2l900
  6878  000518  5026               	movf	i2lcd_text@k,w,c
  6879  00051A  2418               	addwf	i2lcd_text@msjPtr,w,c
  6880  00051C  6ED9               	movwf	fsr2l,c
  6881  00051E  5027               	movf	i2lcd_text@k+1,w,c
  6882  000520  2019               	addwfc	i2lcd_text@msjPtr+1,w,c
  6883  000522  6EDA               	movwf	fsr2h,c
  6884  000524  0E3A               	movlw	58
  6885  000526  60DF               	cpfslt	indf2,c
  6886  000528  D008               	goto	i2l900
  6887                           
  6888                           ;tft.c: 246: *(msjPtr+k) -= 48;
  6889  00052A  5026               	movf	i2lcd_text@k,w,c
  6890  00052C  2418               	addwf	i2lcd_text@msjPtr,w,c
  6891  00052E  6ED9               	movwf	fsr2l,c
  6892  000530  5027               	movf	i2lcd_text@k+1,w,c
  6893  000532  2019               	addwfc	i2lcd_text@msjPtr+1,w,c
  6894  000534  6EDA               	movwf	fsr2h,c
  6895  000536  0E30               	movlw	48
  6896  000538  5EDF               	subwf	indf2,f,c
  6897  00053A                     i2l900:
  6898                           
  6899                           ;tft.c: 247: }
  6900                           ;tft.c: 248: if (*(msjPtr+k) > 64) {
  6901  00053A  5026               	movf	i2lcd_text@k,w,c
  6902  00053C  2418               	addwf	i2lcd_text@msjPtr,w,c
  6903  00053E  6ED9               	movwf	fsr2l,c
  6904  000540  5027               	movf	i2lcd_text@k+1,w,c
  6905  000542  2019               	addwfc	i2lcd_text@msjPtr+1,w,c
  6906  000544  6EDA               	movwf	fsr2h,c
  6907  000546  0E40               	movlw	64
  6908  000548  64DF               	cpfsgt	indf2,c
  6909  00054A  D008               	goto	i2l901
  6910                           
  6911                           ;tft.c: 249: *(msjPtr+k) -= 53;
  6912  00054C  5026               	movf	i2lcd_text@k,w,c
  6913  00054E  2418               	addwf	i2lcd_text@msjPtr,w,c
  6914  000550  6ED9               	movwf	fsr2l,c
  6915  000552  5027               	movf	i2lcd_text@k+1,w,c
  6916  000554  2019               	addwfc	i2lcd_text@msjPtr+1,w,c
  6917  000556  6EDA               	movwf	fsr2h,c
  6918  000558  0E35               	movlw	53
  6919  00055A  5EDF               	subwf	indf2,f,c
  6920  00055C                     i2l901:
  6921                           
  6922                           ;tft.c: 250: }
  6923                           ;tft.c: 252: for (i=0;i<8;i++) {
  6924  00055C  0E00               	movlw	0
  6925  00055E  6E23               	movwf	i2lcd_text@i+1,c
  6926  000560  0E00               	movlw	0
  6927  000562  6E22               	movwf	i2lcd_text@i,c
  6928  000564  5023               	movf	i2lcd_text@i+1,w,c
  6929  000566  E171               	bnz	i2l903
  6930  000568  0E08               	movlw	8
  6931  00056A  5C22               	subwf	i2lcd_text@i,w,c
  6932  00056C  B0D8               	btfsc	status,0,c
  6933  00056E  D06D               	goto	i2u248_40
  6934                           
  6935                           ;tft.c: 253: for (j=0;j<8;j++) {
  6936  000570  0E00               	movlw	0
  6937  000572  6E25               	movwf	i2lcd_text@j+1,c
  6938  000574  0E00               	movlw	0
  6939  000576  6E24               	movwf	i2lcd_text@j,c
  6940  000578                     i2l3276:
  6941  000578  5025               	movf	i2lcd_text@j+1,w,c
  6942  00057A  E162               	bnz	i2l3288
  6943  00057C  0E08               	movlw	8
  6944  00057E  5C24               	subwf	i2lcd_text@j,w,c
  6945  000580  B0D8               	btfsc	status,0,c
  6946  000582  D05E               	goto	i2u247_40
  6947                           
  6948                           ;tft.c: 254: lcd_pix(1+j+(renglon-1)*9,1+i+k*8,bitRead(texto[*(msjPtr+k)][i],j),4);
  6949  000584  0EFF               	movlw	255
  6950  000586  2421               	addwf	i2lcd_text@renglon,w,c
  6951  000588  6E01               	movwf	i2___wmul@multiplier,c
  6952  00058A  6A02               	clrf	i2___wmul@multiplier+1,c
  6953  00058C  0EFF               	movlw	255
  6954  00058E  2202               	addwfc	i2___wmul@multiplier+1,f,c
  6955  000590  0E00               	movlw	0
  6956  000592  6E04               	movwf	i2___wmul@multiplicand+1,c
  6957  000594  0E09               	movlw	9
  6958  000596  6E03               	movwf	i2___wmul@multiplicand,c
  6959  000598  EC66  F00C         	call	i2___wmul	;wreg free
  6960  00059C  5024               	movf	i2lcd_text@j,w,c
  6961  00059E  2601               	addwf	?i2___wmul,f,c
  6962  0005A0  5025               	movf	i2lcd_text@j+1,w,c
  6963  0005A2  2202               	addwfc	?i2___wmul+1,f,c
  6964  0005A4  0E01               	movlw	1
  6965  0005A6  2401               	addwf	?i2___wmul,w,c
  6966  0005A8  6E1F               	movwf	i2_lcd_text$2777,c
  6967  0005AA  0E00               	movlw	0
  6968  0005AC  2002               	addwfc	?i2___wmul+1,w,c
  6969  0005AE  6E20               	movwf	i2_lcd_text$2777+1,c
  6970                           
  6971                           ;tft.c: 254: lcd_pix(1+j+(renglon-1)*9,1+i+k*8,bitRead(texto[*(msjPtr+k)][i],j),4);
  6972  0005B0  C01F  F00B         	movff	i2_lcd_text$2777,i2lcd_pix@x
  6973  0005B4  C020  F00C         	movff	i2_lcd_text$2777+1,i2lcd_pix@x+1
  6974  0005B8  C026  F01A         	movff	i2lcd_text@k,??i2_lcd_text
  6975  0005BC  C027  F01B         	movff	i2lcd_text@k+1,??i2_lcd_text+1
  6976  0005C0  90D8               	bcf	status,0,c
  6977  0005C2  361A               	rlcf	??i2_lcd_text,f,c
  6978  0005C4  361B               	rlcf	??i2_lcd_text+1,f,c
  6979  0005C6  90D8               	bcf	status,0,c
  6980  0005C8  361A               	rlcf	??i2_lcd_text,f,c
  6981  0005CA  361B               	rlcf	??i2_lcd_text+1,f,c
  6982  0005CC  90D8               	bcf	status,0,c
  6983  0005CE  361A               	rlcf	??i2_lcd_text,f,c
  6984  0005D0  361B               	rlcf	??i2_lcd_text+1,f,c
  6985  0005D2  5022               	movf	i2lcd_text@i,w,c
  6986  0005D4  261A               	addwf	??i2_lcd_text,f,c
  6987  0005D6  5023               	movf	i2lcd_text@i+1,w,c
  6988  0005D8  221B               	addwfc	??i2_lcd_text+1,f,c
  6989  0005DA  0E01               	movlw	1
  6990  0005DC  241A               	addwf	??i2_lcd_text,w,c
  6991  0005DE  6E0D               	movwf	i2lcd_pix@y,c
  6992  0005E0  0E00               	movlw	0
  6993  0005E2  201B               	addwfc	??i2_lcd_text+1,w,c
  6994  0005E4  6E0E               	movwf	i2lcd_pix@y+1,c
  6995  0005E6  5026               	movf	i2lcd_text@k,w,c
  6996  0005E8  2418               	addwf	i2lcd_text@msjPtr,w,c
  6997  0005EA  6ED9               	movwf	fsr2l,c
  6998  0005EC  5027               	movf	i2lcd_text@k+1,w,c
  6999  0005EE  2019               	addwfc	i2lcd_text@msjPtr+1,w,c
  7000  0005F0  6EDA               	movwf	fsr2h,c
  7001  0005F2  50DF               	movf	indf2,w,c
  7002  0005F4  6E1C               	movwf	(??i2_lcd_text+2)& (0+255),c
  7003  0005F6  501C               	movf	??i2_lcd_text+2,w,c
  7004  0005F8  0D08               	mullw	8
  7005  0005FA  0E1D               	movlw	low _texto
  7006  0005FC  6E1D               	movwf	(??i2_lcd_text+3)& (0+255),c
  7007  0005FE  0EFD               	movlw	high _texto
  7008  000600  6E1E               	movwf	(??i2_lcd_text+4)& (0+255),c
  7009  000602  50F3               	movf	prodl,w,c
  7010  000604  261D               	addwf	??i2_lcd_text+3,f,c
  7011  000606  50F4               	movf	prodh,w,c
  7012  000608  221E               	addwfc	??i2_lcd_text+4,f,c
  7013  00060A  5022               	movf	i2lcd_text@i,w,c
  7014  00060C  261D               	addwf	??i2_lcd_text+3,f,c
  7015  00060E  5023               	movf	i2lcd_text@i+1,w,c
  7016  000610  221E               	addwfc	??i2_lcd_text+4,f,c
  7017  000612  C01D  FFF6         	movff	??i2_lcd_text+3,tblptrl
  7018  000616  C01E  FFF7         	movff	??i2_lcd_text+4,tblptrh
  7019  00061A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7020  00061A  6AF8               	clrf	tblptru,c
  7021  00061C                     	endif
  7022  00061C                     	if	0	;tblptru may be non-zero
  7023  00061C                     	endif
  7024  00061C  0008               	tblrd		*
  7025  00061E  50F5               	movf	tablat,w,c
  7026  000620  6E01               	movwf	i2bitRead@number,c
  7027  000622  6A02               	clrf	i2bitRead@number+1,c
  7028  000624  C024  F003         	movff	i2lcd_text@j,i2bitRead@position
  7029  000628  C025  F004         	movff	i2lcd_text@j+1,i2bitRead@position+1
  7030  00062C  EC58  F00B         	call	i2_bitRead	;wreg free
  7031  000630  6E0F               	movwf	i2lcd_pix@c,c
  7032  000632  0E04               	movlw	4
  7033  000634  6E10               	movwf	i2lcd_pix@size,c
  7034  000636  EC8A  F007         	call	i2_lcd_pix	;wreg free
  7035  00063A  4A24               	infsnz	i2lcd_text@j,f,c
  7036  00063C  2A25               	incf	i2lcd_text@j+1,f,c
  7037  00063E  D79C               	goto	i2l3276
  7038  000640                     i2u247_40:
  7039  000640                     i2l3288:
  7040  000640  4A22               	infsnz	i2lcd_text@i,f,c
  7041  000642  2A23               	incf	i2lcd_text@i+1,f,c
  7042  000644  5023               	movf	i2lcd_text@i+1,w,c
  7043  000646  E101               	bnz	i2l3292
  7044  000648  D78F               	goto	L7
  7045  00064A                     i2u248_40:
  7046  00064A                     i2l903:
  7047  00064A                     i2l3292:
  7048  00064A  4A26               	infsnz	i2lcd_text@k,f,c
  7049  00064C  2A27               	incf	i2lcd_text@k+1,f,c
  7050  00064E  5027               	movf	i2lcd_text@k+1,w,c
  7051  000650  E101               	bnz	i2l906
  7052  000652  D738               	goto	L8
  7053  000654                     i2l906:
  7054  000654  0012               	return		;funcret
  7055  000656                     __end_ofi2_lcd_text:
  7056                           	opt stack 0
  7057                           tosu	equ	0xFFF
  7058                           tosh	equ	0xFFE
  7059                           tosl	equ	0xFFD
  7060                           pclatu	equ	0xFFB
  7061                           pclath	equ	0xFFA
  7062                           tblptru	equ	0xFF8
  7063                           tblptrh	equ	0xFF7
  7064                           tblptrl	equ	0xFF6
  7065                           tablat	equ	0xFF5
  7066                           prodh	equ	0xFF4
  7067                           prodl	equ	0xFF3
  7068                           intcon	equ	0xFF2
  7069                           intcon2	equ	0xFF1
  7070                           postinc0	equ	0xFEE
  7071                           fsr0h	equ	0xFEA
  7072                           fsr0l	equ	0xFE9
  7073                           wreg	equ	0xFE8
  7074                           postdec1	equ	0xFE5
  7075                           fsr1h	equ	0xFE2
  7076                           fsr1l	equ	0xFE1
  7077                           indf2	equ	0xFDF
  7078                           postinc2	equ	0xFDE
  7079                           fsr2h	equ	0xFDA
  7080                           fsr2l	equ	0xFD9
  7081                           status	equ	0xFD8
  7082                           
  7083 ;; *************** function i2_lcd_point *****************
  7084 ;; Defined at:
  7085 ;;		line 186 in file "tft.c"
  7086 ;; Parameters:    Size  Location     Type
  7087 ;;  place           1    wreg     unsigned char 
  7088 ;; Auto vars:     Size  Location     Type
  7089 ;;  place           1   23[COMRAM] unsigned char 
  7090 ;; Return value:  Size  Location     Type
  7091 ;;                  1    wreg      void 
  7092 ;; Registers used:
  7093 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7094 ;; Tracked objects:
  7095 ;;		On entry : 0/0
  7096 ;;		On exit  : 0/0
  7097 ;;		Unchanged: 0/0
  7098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7099 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7100 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7101 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7102 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7103 ;;Total ram usage:        1 bytes
  7104 ;; Hardware stack levels used:    1
  7105 ;; Hardware stack levels required when called:    4
  7106 ;; This function calls:
  7107 ;;		i2_lcd_pix
  7108 ;; This function is called by:
  7109 ;;		_tmr2_custom_isr
  7110 ;; This function uses a non-reentrant model
  7111 ;;
  7112                           
  7113                           	psect	text42
  7114  0010C8                     __ptext42:
  7115                           	opt stack 0
  7116  0010C8                     i2_lcd_point:
  7117                           	opt stack 17
  7118                           
  7119                           ;incstack = 0
  7120                           ;i2lcd_point@place stored from wreg
  7121  0010C8  6E18               	movwf	i2lcd_point@place,c
  7122                           
  7123                           ;tft.c: 187: lcd_pix(62,96 - 18 * place,1,5);
  7124  0010CA  0E00               	movlw	0
  7125  0010CC  6E0C               	movwf	i2lcd_pix@x+1,c
  7126  0010CE  0E3E               	movlw	62
  7127  0010D0  6E0B               	movwf	i2lcd_pix@x,c
  7128  0010D2  5018               	movf	i2lcd_point@place,w,c
  7129  0010D4  0D12               	mullw	18
  7130  0010D6  1EF3               	comf	prodl,f,c
  7131  0010D8  1EF4               	comf	prodh,f,c
  7132  0010DA  4AF3               	infsnz	prodl,f,c
  7133  0010DC  2AF4               	incf	prodh,f,c
  7134  0010DE  0E60               	movlw	96
  7135  0010E0  24F3               	addwf	prodl,w,c
  7136  0010E2  6E0D               	movwf	i2lcd_pix@y,c
  7137  0010E4  0E00               	movlw	0
  7138  0010E6  20F4               	addwfc	prodh,w,c
  7139  0010E8  6E0E               	movwf	i2lcd_pix@y+1,c
  7140  0010EA  0E01               	movlw	1
  7141  0010EC  6E0F               	movwf	i2lcd_pix@c,c
  7142  0010EE  0E05               	movlw	5
  7143  0010F0  6E10               	movwf	i2lcd_pix@size,c
  7144  0010F2  EC8A  F007         	call	i2_lcd_pix	;wreg free
  7145                           
  7146                           ;tft.c: 188: lcd_pix(61,96 - 18 * place,1,5);
  7147  0010F6  0E00               	movlw	0
  7148  0010F8  6E0C               	movwf	i2lcd_pix@x+1,c
  7149  0010FA  0E3D               	movlw	61
  7150  0010FC  6E0B               	movwf	i2lcd_pix@x,c
  7151  0010FE  5018               	movf	i2lcd_point@place,w,c
  7152  001100  0D12               	mullw	18
  7153  001102  1EF3               	comf	prodl,f,c
  7154  001104  1EF4               	comf	prodh,f,c
  7155  001106  4AF3               	infsnz	prodl,f,c
  7156  001108  2AF4               	incf	prodh,f,c
  7157  00110A  0E60               	movlw	96
  7158  00110C  24F3               	addwf	prodl,w,c
  7159  00110E  6E0D               	movwf	i2lcd_pix@y,c
  7160  001110  0E00               	movlw	0
  7161  001112  20F4               	addwfc	prodh,w,c
  7162  001114  6E0E               	movwf	i2lcd_pix@y+1,c
  7163  001116  0E01               	movlw	1
  7164  001118  6E0F               	movwf	i2lcd_pix@c,c
  7165  00111A  0E05               	movlw	5
  7166  00111C  6E10               	movwf	i2lcd_pix@size,c
  7167  00111E  EC8A  F007         	call	i2_lcd_pix	;wreg free
  7168                           
  7169                           ;tft.c: 189: lcd_pix(62,97 - 18 * place,1,5);
  7170  001122  0E00               	movlw	0
  7171  001124  6E0C               	movwf	i2lcd_pix@x+1,c
  7172  001126  0E3E               	movlw	62
  7173  001128  6E0B               	movwf	i2lcd_pix@x,c
  7174  00112A  5018               	movf	i2lcd_point@place,w,c
  7175  00112C  0D12               	mullw	18
  7176  00112E  1EF3               	comf	prodl,f,c
  7177  001130  1EF4               	comf	prodh,f,c
  7178  001132  4AF3               	infsnz	prodl,f,c
  7179  001134  2AF4               	incf	prodh,f,c
  7180  001136  0E61               	movlw	97
  7181  001138  24F3               	addwf	prodl,w,c
  7182  00113A  6E0D               	movwf	i2lcd_pix@y,c
  7183  00113C  0E00               	movlw	0
  7184  00113E  20F4               	addwfc	prodh,w,c
  7185  001140  6E0E               	movwf	i2lcd_pix@y+1,c
  7186  001142  0E01               	movlw	1
  7187  001144  6E0F               	movwf	i2lcd_pix@c,c
  7188  001146  0E05               	movlw	5
  7189  001148  6E10               	movwf	i2lcd_pix@size,c
  7190  00114A  EC8A  F007         	call	i2_lcd_pix	;wreg free
  7191                           
  7192                           ;tft.c: 190: lcd_pix(61,97 - 18 * place,1,5);
  7193  00114E  0E00               	movlw	0
  7194  001150  6E0C               	movwf	i2lcd_pix@x+1,c
  7195  001152  0E3D               	movlw	61
  7196  001154  6E0B               	movwf	i2lcd_pix@x,c
  7197  001156  5018               	movf	i2lcd_point@place,w,c
  7198  001158  0D12               	mullw	18
  7199  00115A  1EF3               	comf	prodl,f,c
  7200  00115C  1EF4               	comf	prodh,f,c
  7201  00115E  4AF3               	infsnz	prodl,f,c
  7202  001160  2AF4               	incf	prodh,f,c
  7203  001162  0E61               	movlw	97
  7204  001164  24F3               	addwf	prodl,w,c
  7205  001166  6E0D               	movwf	i2lcd_pix@y,c
  7206  001168  0E00               	movlw	0
  7207  00116A  20F4               	addwfc	prodh,w,c
  7208  00116C  6E0E               	movwf	i2lcd_pix@y+1,c
  7209  00116E  0E01               	movlw	1
  7210  001170  6E0F               	movwf	i2lcd_pix@c,c
  7211  001172  0E05               	movlw	5
  7212  001174  6E10               	movwf	i2lcd_pix@size,c
  7213  001176  EC8A  F007         	call	i2_lcd_pix	;wreg free
  7214  00117A  0012               	return		;funcret
  7215  00117C                     __end_ofi2_lcd_point:
  7216                           	opt stack 0
  7217                           tosu	equ	0xFFF
  7218                           tosh	equ	0xFFE
  7219                           tosl	equ	0xFFD
  7220                           pclatu	equ	0xFFB
  7221                           pclath	equ	0xFFA
  7222                           tblptru	equ	0xFF8
  7223                           tblptrh	equ	0xFF7
  7224                           tblptrl	equ	0xFF6
  7225                           tablat	equ	0xFF5
  7226                           prodh	equ	0xFF4
  7227                           prodl	equ	0xFF3
  7228                           intcon	equ	0xFF2
  7229                           intcon2	equ	0xFF1
  7230                           postinc0	equ	0xFEE
  7231                           fsr0h	equ	0xFEA
  7232                           fsr0l	equ	0xFE9
  7233                           wreg	equ	0xFE8
  7234                           postdec1	equ	0xFE5
  7235                           fsr1h	equ	0xFE2
  7236                           fsr1l	equ	0xFE1
  7237                           indf2	equ	0xFDF
  7238                           postinc2	equ	0xFDE
  7239                           fsr2h	equ	0xFDA
  7240                           fsr2l	equ	0xFD9
  7241                           status	equ	0xFD8
  7242                           
  7243 ;; *************** function _lcd_text_color *****************
  7244 ;; Defined at:
  7245 ;;		line 260 in file "tft.c"
  7246 ;; Parameters:    Size  Location     Type
  7247 ;;  renglon         1    wreg     unsigned char 
  7248 ;;  msjPtr          2   23[COMRAM] PTR unsigned char 
  7249 ;;		 -> mensaje(20), 
  7250 ;; Auto vars:     Size  Location     Type
  7251 ;;  renglon         1   32[COMRAM] unsigned char 
  7252 ;;  k               2   37[COMRAM] unsigned int 
  7253 ;;  j               2   35[COMRAM] unsigned int 
  7254 ;;  i               2   33[COMRAM] unsigned int 
  7255 ;; Return value:  Size  Location     Type
  7256 ;;                  1    wreg      void 
  7257 ;; Registers used:
  7258 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7259 ;; Tracked objects:
  7260 ;;		On entry : 0/0
  7261 ;;		On exit  : 0/0
  7262 ;;		Unchanged: 0/0
  7263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7264 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7265 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7266 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7267 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7268 ;;Total ram usage:       16 bytes
  7269 ;; Hardware stack levels used:    1
  7270 ;; Hardware stack levels required when called:    4
  7271 ;; This function calls:
  7272 ;;		_lcd_pix_color
  7273 ;;		i2___wmul
  7274 ;;		i2_bitRead
  7275 ;; This function is called by:
  7276 ;;		_tmr2_custom_isr
  7277 ;; This function uses a non-reentrant model
  7278 ;;
  7279                           
  7280                           	psect	text43
  7281  000656                     __ptext43:
  7282                           	opt stack 0
  7283  000656                     _lcd_text_color:
  7284                           	opt stack 17
  7285                           
  7286                           ;incstack = 0
  7287                           ;lcd_text_color@renglon stored from wreg
  7288  000656  6E21               	movwf	lcd_text_color@renglon,c
  7289                           
  7290                           ;tft.c: 261: unsigned int i,j,k;
  7291                           ;tft.c: 263: for (k=0;k<15;k++) {
  7292  000658  0E00               	movlw	0
  7293  00065A  6E27               	movwf	lcd_text_color@k+1,c
  7294  00065C  0E00               	movlw	0
  7295  00065E  6E26               	movwf	lcd_text_color@k,c
  7296  000660  5027               	movf	lcd_text_color@k+1,w,c
  7297  000662  E105               	bnz	i2u215_40
  7298  000664  0E0F               	movlw	15
  7299  000666  5C26               	subwf	lcd_text_color@k,w,c
  7300  000668  B0D8               	btfsc	status,0,c
  7301  00066A  0012               	return	
  7302  00066C  D001               	goto	i2l909
  7303  00066E                     i2u215_40:
  7304  00066E  0012               	return	
  7305  000670                     i2l909:
  7306                           
  7307                           ;tft.c: 264: if (*(msjPtr+k) == 32 || *(msjPtr+k) == 0) {
  7308  000670  5026               	movf	lcd_text_color@k,w,c
  7309  000672  2418               	addwf	lcd_text_color@msjPtr,w,c
  7310  000674  6ED9               	movwf	fsr2l,c
  7311  000676  5027               	movf	lcd_text_color@k+1,w,c
  7312  000678  2019               	addwfc	lcd_text_color@msjPtr+1,w,c
  7313  00067A  6EDA               	movwf	fsr2h,c
  7314  00067C  0E20               	movlw	32
  7315  00067E  18DE               	xorwf	postinc2,w,c
  7316  000680  B4D8               	btfsc	status,2,c
  7317  000682  D009               	goto	i2u217_40
  7318  000684  5026               	movf	lcd_text_color@k,w,c
  7319  000686  2418               	addwf	lcd_text_color@msjPtr,w,c
  7320  000688  6ED9               	movwf	fsr2l,c
  7321  00068A  5027               	movf	lcd_text_color@k+1,w,c
  7322  00068C  2019               	addwfc	lcd_text_color@msjPtr+1,w,c
  7323  00068E  6EDA               	movwf	fsr2h,c
  7324  000690  50DF               	movf	indf2,w,c
  7325  000692  A4D8               	btfss	status,2,c
  7326  000694  D008               	goto	i2l911
  7327  000696                     i2u217_40:
  7328                           
  7329                           ;tft.c: 265: *(msjPtr+k) = 38;
  7330  000696  5026               	movf	lcd_text_color@k,w,c
  7331  000698  2418               	addwf	lcd_text_color@msjPtr,w,c
  7332  00069A  6ED9               	movwf	fsr2l,c
  7333  00069C  5027               	movf	lcd_text_color@k+1,w,c
  7334  00069E  2019               	addwfc	lcd_text_color@msjPtr+1,w,c
  7335  0006A0  6EDA               	movwf	fsr2h,c
  7336  0006A2  0E26               	movlw	38
  7337  0006A4  6EDF               	movwf	indf2,c
  7338  0006A6                     i2l911:
  7339                           
  7340                           ;tft.c: 266: }
  7341                           ;tft.c: 267: if (*(msjPtr+k) > 47 && *(msjPtr+k) < 58) {
  7342  0006A6  5026               	movf	lcd_text_color@k,w,c
  7343  0006A8  2418               	addwf	lcd_text_color@msjPtr,w,c
  7344  0006AA  6ED9               	movwf	fsr2l,c
  7345  0006AC  5027               	movf	lcd_text_color@k+1,w,c
  7346  0006AE  2019               	addwfc	lcd_text_color@msjPtr+1,w,c
  7347  0006B0  6EDA               	movwf	fsr2h,c
  7348  0006B2  0E2F               	movlw	47
  7349  0006B4  64DF               	cpfsgt	indf2,c
  7350  0006B6  D011               	goto	i2l914
  7351  0006B8  5026               	movf	lcd_text_color@k,w,c
  7352  0006BA  2418               	addwf	lcd_text_color@msjPtr,w,c
  7353  0006BC  6ED9               	movwf	fsr2l,c
  7354  0006BE  5027               	movf	lcd_text_color@k+1,w,c
  7355  0006C0  2019               	addwfc	lcd_text_color@msjPtr+1,w,c
  7356  0006C2  6EDA               	movwf	fsr2h,c
  7357  0006C4  0E3A               	movlw	58
  7358  0006C6  60DF               	cpfslt	indf2,c
  7359  0006C8  D008               	goto	i2l914
  7360                           
  7361                           ;tft.c: 268: *(msjPtr+k) -= 48;
  7362  0006CA  5026               	movf	lcd_text_color@k,w,c
  7363  0006CC  2418               	addwf	lcd_text_color@msjPtr,w,c
  7364  0006CE  6ED9               	movwf	fsr2l,c
  7365  0006D0  5027               	movf	lcd_text_color@k+1,w,c
  7366  0006D2  2019               	addwfc	lcd_text_color@msjPtr+1,w,c
  7367  0006D4  6EDA               	movwf	fsr2h,c
  7368  0006D6  0E30               	movlw	48
  7369  0006D8  5EDF               	subwf	indf2,f,c
  7370  0006DA                     i2l914:
  7371                           
  7372                           ;tft.c: 269: }
  7373                           ;tft.c: 270: if (*(msjPtr+k) > 64) {
  7374  0006DA  5026               	movf	lcd_text_color@k,w,c
  7375  0006DC  2418               	addwf	lcd_text_color@msjPtr,w,c
  7376  0006DE  6ED9               	movwf	fsr2l,c
  7377  0006E0  5027               	movf	lcd_text_color@k+1,w,c
  7378  0006E2  2019               	addwfc	lcd_text_color@msjPtr+1,w,c
  7379  0006E4  6EDA               	movwf	fsr2h,c
  7380  0006E6  0E40               	movlw	64
  7381  0006E8  64DF               	cpfsgt	indf2,c
  7382  0006EA  D008               	goto	i2l915
  7383                           
  7384                           ;tft.c: 271: *(msjPtr+k) -= 53;
  7385  0006EC  5026               	movf	lcd_text_color@k,w,c
  7386  0006EE  2418               	addwf	lcd_text_color@msjPtr,w,c
  7387  0006F0  6ED9               	movwf	fsr2l,c
  7388  0006F2  5027               	movf	lcd_text_color@k+1,w,c
  7389  0006F4  2019               	addwfc	lcd_text_color@msjPtr+1,w,c
  7390  0006F6  6EDA               	movwf	fsr2h,c
  7391  0006F8  0E35               	movlw	53
  7392  0006FA  5EDF               	subwf	indf2,f,c
  7393  0006FC                     i2l915:
  7394                           
  7395                           ;tft.c: 272: }
  7396                           ;tft.c: 274: for (i=0;i<8;i++) {
  7397  0006FC  0E00               	movlw	0
  7398  0006FE  6E23               	movwf	lcd_text_color@i+1,c
  7399  000700  0E00               	movlw	0
  7400  000702  6E22               	movwf	lcd_text_color@i,c
  7401  000704  5023               	movf	lcd_text_color@i+1,w,c
  7402  000706  E171               	bnz	i2l917
  7403  000708  0E08               	movlw	8
  7404  00070A  5C22               	subwf	lcd_text_color@i,w,c
  7405  00070C  B0D8               	btfsc	status,0,c
  7406  00070E  D06D               	goto	i2u224_40
  7407                           
  7408                           ;tft.c: 275: for (j=0;j<8;j++) {
  7409  000710  0E00               	movlw	0
  7410  000712  6E25               	movwf	lcd_text_color@j+1,c
  7411  000714  0E00               	movlw	0
  7412  000716  6E24               	movwf	lcd_text_color@j,c
  7413  000718                     i2l3136:
  7414  000718  5025               	movf	lcd_text_color@j+1,w,c
  7415  00071A  E162               	bnz	i2l3148
  7416  00071C  0E08               	movlw	8
  7417  00071E  5C24               	subwf	lcd_text_color@j,w,c
  7418  000720  B0D8               	btfsc	status,0,c
  7419  000722  D05E               	goto	i2u223_40
  7420                           
  7421                           ;tft.c: 276: lcd_pix_color(1+j+(renglon-1)*9,1+i+k*8,bitRead(texto[*(msjPtr+k)][i],j),4)
      +                          ;
  7422  000724  0EFF               	movlw	255
  7423  000726  2421               	addwf	lcd_text_color@renglon,w,c
  7424  000728  6E01               	movwf	i2___wmul@multiplier,c
  7425  00072A  6A02               	clrf	i2___wmul@multiplier+1,c
  7426  00072C  0EFF               	movlw	255
  7427  00072E  2202               	addwfc	i2___wmul@multiplier+1,f,c
  7428  000730  0E00               	movlw	0
  7429  000732  6E04               	movwf	i2___wmul@multiplicand+1,c
  7430  000734  0E09               	movlw	9
  7431  000736  6E03               	movwf	i2___wmul@multiplicand,c
  7432  000738  EC66  F00C         	call	i2___wmul	;wreg free
  7433  00073C  5024               	movf	lcd_text_color@j,w,c
  7434  00073E  2601               	addwf	?i2___wmul,f,c
  7435  000740  5025               	movf	lcd_text_color@j+1,w,c
  7436  000742  2202               	addwfc	?i2___wmul+1,f,c
  7437  000744  0E01               	movlw	1
  7438  000746  2401               	addwf	?i2___wmul,w,c
  7439  000748  6E1F               	movwf	_lcd_text_color$2776,c
  7440  00074A  0E00               	movlw	0
  7441  00074C  2002               	addwfc	?i2___wmul+1,w,c
  7442  00074E  6E20               	movwf	_lcd_text_color$2776+1,c
  7443                           
  7444                           ;tft.c: 276: lcd_pix_color(1+j+(renglon-1)*9,1+i+k*8,bitRead(texto[*(msjPtr+k)][i],j),4)
      +                          ;
  7445  000750  C01F  F00B         	movff	_lcd_text_color$2776,lcd_pix_color@x
  7446  000754  C020  F00C         	movff	_lcd_text_color$2776+1,lcd_pix_color@x+1
  7447  000758  C026  F01A         	movff	lcd_text_color@k,??_lcd_text_color
  7448  00075C  C027  F01B         	movff	lcd_text_color@k+1,??_lcd_text_color+1
  7449  000760  90D8               	bcf	status,0,c
  7450  000762  361A               	rlcf	??_lcd_text_color,f,c
  7451  000764  361B               	rlcf	??_lcd_text_color+1,f,c
  7452  000766  90D8               	bcf	status,0,c
  7453  000768  361A               	rlcf	??_lcd_text_color,f,c
  7454  00076A  361B               	rlcf	??_lcd_text_color+1,f,c
  7455  00076C  90D8               	bcf	status,0,c
  7456  00076E  361A               	rlcf	??_lcd_text_color,f,c
  7457  000770  361B               	rlcf	??_lcd_text_color+1,f,c
  7458  000772  5022               	movf	lcd_text_color@i,w,c
  7459  000774  261A               	addwf	??_lcd_text_color,f,c
  7460  000776  5023               	movf	lcd_text_color@i+1,w,c
  7461  000778  221B               	addwfc	??_lcd_text_color+1,f,c
  7462  00077A  0E01               	movlw	1
  7463  00077C  241A               	addwf	??_lcd_text_color,w,c
  7464  00077E  6E0D               	movwf	lcd_pix_color@y,c
  7465  000780  0E00               	movlw	0
  7466  000782  201B               	addwfc	??_lcd_text_color+1,w,c
  7467  000784  6E0E               	movwf	lcd_pix_color@y+1,c
  7468  000786  5026               	movf	lcd_text_color@k,w,c
  7469  000788  2418               	addwf	lcd_text_color@msjPtr,w,c
  7470  00078A  6ED9               	movwf	fsr2l,c
  7471  00078C  5027               	movf	lcd_text_color@k+1,w,c
  7472  00078E  2019               	addwfc	lcd_text_color@msjPtr+1,w,c
  7473  000790  6EDA               	movwf	fsr2h,c
  7474  000792  50DF               	movf	indf2,w,c
  7475  000794  6E1C               	movwf	(??_lcd_text_color+2)& (0+255),c
  7476  000796  501C               	movf	??_lcd_text_color+2,w,c
  7477  000798  0D08               	mullw	8
  7478  00079A  0E1D               	movlw	low _texto
  7479  00079C  6E1D               	movwf	(??_lcd_text_color+3)& (0+255),c
  7480  00079E  0EFD               	movlw	high _texto
  7481  0007A0  6E1E               	movwf	(??_lcd_text_color+4)& (0+255),c
  7482  0007A2  50F3               	movf	prodl,w,c
  7483  0007A4  261D               	addwf	??_lcd_text_color+3,f,c
  7484  0007A6  50F4               	movf	prodh,w,c
  7485  0007A8  221E               	addwfc	??_lcd_text_color+4,f,c
  7486  0007AA  5022               	movf	lcd_text_color@i,w,c
  7487  0007AC  261D               	addwf	??_lcd_text_color+3,f,c
  7488  0007AE  5023               	movf	lcd_text_color@i+1,w,c
  7489  0007B0  221E               	addwfc	??_lcd_text_color+4,f,c
  7490  0007B2  C01D  FFF6         	movff	??_lcd_text_color+3,tblptrl
  7491  0007B6  C01E  FFF7         	movff	??_lcd_text_color+4,tblptrh
  7492  0007BA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7493  0007BA  6AF8               	clrf	tblptru,c
  7494  0007BC                     	endif
  7495  0007BC                     	if	0	;tblptru may be non-zero
  7496  0007BC                     	endif
  7497  0007BC  0008               	tblrd		*
  7498  0007BE  50F5               	movf	tablat,w,c
  7499  0007C0  6E01               	movwf	i2bitRead@number,c
  7500  0007C2  6A02               	clrf	i2bitRead@number+1,c
  7501  0007C4  C024  F003         	movff	lcd_text_color@j,i2bitRead@position
  7502  0007C8  C025  F004         	movff	lcd_text_color@j+1,i2bitRead@position+1
  7503  0007CC  EC58  F00B         	call	i2_bitRead	;wreg free
  7504  0007D0  6E0F               	movwf	lcd_pix_color@c,c
  7505  0007D2  0E04               	movlw	4
  7506  0007D4  6E10               	movwf	lcd_pix_color@size,c
  7507  0007D6  EC0F  F007         	call	_lcd_pix_color	;wreg free
  7508  0007DA  4A24               	infsnz	lcd_text_color@j,f,c
  7509  0007DC  2A25               	incf	lcd_text_color@j+1,f,c
  7510  0007DE  D79C               	goto	i2l3136
  7511  0007E0                     i2u223_40:
  7512  0007E0                     i2l3148:
  7513  0007E0  4A22               	infsnz	lcd_text_color@i,f,c
  7514  0007E2  2A23               	incf	lcd_text_color@i+1,f,c
  7515  0007E4  5023               	movf	lcd_text_color@i+1,w,c
  7516  0007E6  E101               	bnz	i2l3152
  7517  0007E8  D78F               	goto	L9
  7518  0007EA                     i2u224_40:
  7519  0007EA                     i2l917:
  7520  0007EA                     i2l3152:
  7521  0007EA  4A26               	infsnz	lcd_text_color@k,f,c
  7522  0007EC  2A27               	incf	lcd_text_color@k+1,f,c
  7523  0007EE  5027               	movf	lcd_text_color@k+1,w,c
  7524  0007F0  E101               	bnz	i2l920
  7525  0007F2  D738               	goto	L10
  7526  0007F4                     i2l920:
  7527  0007F4  0012               	return		;funcret
  7528  0007F6                     __end_of_lcd_text_color:
  7529                           	opt stack 0
  7530                           tosu	equ	0xFFF
  7531                           tosh	equ	0xFFE
  7532                           tosl	equ	0xFFD
  7533                           pclatu	equ	0xFFB
  7534                           pclath	equ	0xFFA
  7535                           tblptru	equ	0xFF8
  7536                           tblptrh	equ	0xFF7
  7537                           tblptrl	equ	0xFF6
  7538                           tablat	equ	0xFF5
  7539                           prodh	equ	0xFF4
  7540                           prodl	equ	0xFF3
  7541                           intcon	equ	0xFF2
  7542                           intcon2	equ	0xFF1
  7543                           postinc0	equ	0xFEE
  7544                           fsr0h	equ	0xFEA
  7545                           fsr0l	equ	0xFE9
  7546                           wreg	equ	0xFE8
  7547                           postdec1	equ	0xFE5
  7548                           fsr1h	equ	0xFE2
  7549                           fsr1l	equ	0xFE1
  7550                           indf2	equ	0xFDF
  7551                           postinc2	equ	0xFDE
  7552                           fsr2h	equ	0xFDA
  7553                           fsr2l	equ	0xFD9
  7554                           status	equ	0xFD8
  7555                           
  7556 ;; *************** function _lcd_pix_color *****************
  7557 ;; Defined at:
  7558 ;;		line 144 in file "tft.c"
  7559 ;; Parameters:    Size  Location     Type
  7560 ;;  x               2   10[COMRAM] unsigned int 
  7561 ;;  y               2   12[COMRAM] unsigned int 
  7562 ;;  c               1   14[COMRAM] unsigned char 
  7563 ;;  size            1   15[COMRAM] unsigned char 
  7564 ;; Auto vars:     Size  Location     Type
  7565 ;;  i               2   21[COMRAM] unsigned int 
  7566 ;;  n1              1   20[COMRAM] unsigned char 
  7567 ;; Return value:  Size  Location     Type
  7568 ;;                  1    wreg      void 
  7569 ;; Registers used:
  7570 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7571 ;; Tracked objects:
  7572 ;;		On entry : 0/0
  7573 ;;		On exit  : 0/0
  7574 ;;		Unchanged: 0/0
  7575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7576 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7577 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7578 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7579 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7580 ;;Total ram usage:       13 bytes
  7581 ;; Hardware stack levels used:    1
  7582 ;; Hardware stack levels required when called:    3
  7583 ;; This function calls:
  7584 ;;		i2___wmul
  7585 ;;		i2_lcd_memory_start
  7586 ;;		i2_lcd_set_address
  7587 ;;		i2_lcd_write_bus
  7588 ;; This function is called by:
  7589 ;;		_lcd_text_color
  7590 ;; This function uses a non-reentrant model
  7591 ;;
  7592                           
  7593                           	psect	text44
  7594  000E1E                     __ptext44:
  7595                           	opt stack 0
  7596  000E1E                     _lcd_pix_color:
  7597                           	opt stack 17
  7598                           
  7599                           ;tft.c: 145: unsigned int i;
  7600                           ;tft.c: 146: char n1;
  7601                           ;tft.c: 148: x *= size;
  7602                           
  7603                           ;incstack = 0
  7604  000E1E  C00B  F001         	movff	lcd_pix_color@x,i2___wmul@multiplier
  7605  000E22  C00C  F002         	movff	lcd_pix_color@x+1,i2___wmul@multiplier+1
  7606  000E26  C010  F003         	movff	lcd_pix_color@size,i2___wmul@multiplicand
  7607  000E2A  6A04               	clrf	i2___wmul@multiplicand+1,c
  7608  000E2C  EC66  F00C         	call	i2___wmul	;wreg free
  7609  000E30  C001  F00B         	movff	?i2___wmul,lcd_pix_color@x
  7610  000E34  C002  F00C         	movff	?i2___wmul+1,lcd_pix_color@x+1
  7611                           
  7612                           ;tft.c: 149: y *= size;
  7613  000E38  C00D  F001         	movff	lcd_pix_color@y,i2___wmul@multiplier
  7614  000E3C  C00E  F002         	movff	lcd_pix_color@y+1,i2___wmul@multiplier+1
  7615  000E40  C010  F003         	movff	lcd_pix_color@size,i2___wmul@multiplicand
  7616  000E44  6A04               	clrf	i2___wmul@multiplicand+1,c
  7617  000E46  EC66  F00C         	call	i2___wmul	;wreg free
  7618  000E4A  C001  F00D         	movff	?i2___wmul,lcd_pix_color@y
  7619  000E4E  C002  F00E         	movff	?i2___wmul+1,lcd_pix_color@y+1
  7620                           
  7621                           ;tft.c: 150: n1 = size * size;
  7622  000E52  5010               	movf	lcd_pix_color@size,w,c
  7623  000E54  0210               	mulwf	lcd_pix_color@size,c
  7624  000E56  CFF3 F015          	movff	prodl,lcd_pix_color@n1
  7625                           
  7626                           ;tft.c: 151: LATA1 = 0;
  7627  000E5A  9289               	bcf	3977,1,c	;volatile
  7628                           
  7629                           ;tft.c: 152: lcd_set_address(x,y,x+size-1,y+size-1);
  7630  000E5C  C00B  F003         	movff	lcd_pix_color@x,i2lcd_set_address@x1
  7631  000E60  C00C  F004         	movff	lcd_pix_color@x+1,i2lcd_set_address@x1+1
  7632  000E64  C00D  F005         	movff	lcd_pix_color@y,i2lcd_set_address@y1
  7633  000E68  C00E  F006         	movff	lcd_pix_color@y+1,i2lcd_set_address@y1+1
  7634  000E6C  5010               	movf	lcd_pix_color@size,w,c
  7635  000E6E  240B               	addwf	lcd_pix_color@x,w,c
  7636  000E70  6E11               	movwf	??_lcd_pix_color& (0+255),c
  7637  000E72  0E00               	movlw	0
  7638  000E74  200C               	addwfc	lcd_pix_color@x+1,w,c
  7639  000E76  6E12               	movwf	(??_lcd_pix_color+1)& (0+255),c
  7640  000E78  0EFF               	movlw	255
  7641  000E7A  2411               	addwf	??_lcd_pix_color,w,c
  7642  000E7C  6E07               	movwf	i2lcd_set_address@x2,c
  7643  000E7E  0EFF               	movlw	255
  7644  000E80  2012               	addwfc	??_lcd_pix_color+1,w,c
  7645  000E82  6E08               	movwf	i2lcd_set_address@x2+1,c
  7646  000E84  5010               	movf	lcd_pix_color@size,w,c
  7647  000E86  240D               	addwf	lcd_pix_color@y,w,c
  7648  000E88  6E13               	movwf	(??_lcd_pix_color+2)& (0+255),c
  7649  000E8A  0E00               	movlw	0
  7650  000E8C  200E               	addwfc	lcd_pix_color@y+1,w,c
  7651  000E8E  6E14               	movwf	(??_lcd_pix_color+3)& (0+255),c
  7652  000E90  0EFF               	movlw	255
  7653  000E92  2413               	addwf	??_lcd_pix_color+2,w,c
  7654  000E94  6E09               	movwf	i2lcd_set_address@y2,c
  7655  000E96  0EFF               	movlw	255
  7656  000E98  2014               	addwfc	??_lcd_pix_color+3,w,c
  7657  000E9A  6E0A               	movwf	i2lcd_set_address@y2+1,c
  7658  000E9C  EC77  F00B         	call	i2_lcd_set_address	;wreg free
  7659                           
  7660                           ;tft.c: 153: lcd_memory_start();
  7661  000EA0  EC88  F00D         	call	i2_lcd_memory_start	;wreg free
  7662                           
  7663                           ;tft.c: 155: switch (c) {
  7664  000EA4  D02E               	goto	i2l848
  7665  000EA6                     
  7666                           ;tft.c: 157: for(i=0;i<n1;i++) {
  7667  000EA6  0E00               	movlw	0
  7668  000EA8  6E17               	movwf	lcd_pix_color@i+1,c
  7669  000EAA  0E00               	movlw	0
  7670  000EAC  6E16               	movwf	lcd_pix_color@i,c
  7671  000EAE  D008               	goto	i2l850
  7672  000EB0                     
  7673                           ;tft.c: 158: lcd_write_bus(0xF8);
  7674  000EB0  0EF8               	movlw	248
  7675  000EB2  EC46  F00D         	call	i2_lcd_write_bus
  7676                           
  7677                           ;tft.c: 159: lcd_write_bus(0x00);
  7678  000EB6  0E00               	movlw	0
  7679  000EB8  EC46  F00D         	call	i2_lcd_write_bus
  7680  000EBC  4A16               	infsnz	lcd_pix_color@i,f,c
  7681  000EBE  2A17               	incf	lcd_pix_color@i+1,f,c
  7682  000EC0                     i2l850:
  7683  000EC0  5015               	movf	lcd_pix_color@n1,w,c
  7684  000EC2  6E11               	movwf	??_lcd_pix_color& (0+255),c
  7685  000EC4  6A12               	clrf	(??_lcd_pix_color+1)& (0+255),c
  7686  000EC6  5011               	movf	??_lcd_pix_color,w,c
  7687  000EC8  5C16               	subwf	lcd_pix_color@i,w,c
  7688  000ECA  5012               	movf	??_lcd_pix_color+1,w,c
  7689  000ECC  5817               	subwfb	lcd_pix_color@i+1,w,c
  7690  000ECE  B0D8               	btfsc	status,0,c
  7691  000ED0  D01F               	goto	i2l853
  7692  000ED2  D7EE               	goto	i2l851
  7693  000ED4                     
  7694                           ;tft.c: 163: for(i=0;i<n1;i++) {
  7695  000ED4  0E00               	movlw	0
  7696  000ED6  6E17               	movwf	lcd_pix_color@i+1,c
  7697  000ED8  0E00               	movlw	0
  7698  000EDA  6E16               	movwf	lcd_pix_color@i,c
  7699  000EDC  D008               	goto	i2l855
  7700  000EDE                     
  7701                           ;tft.c: 164: lcd_write_bus(0xFF);
  7702  000EDE  0EFF               	movlw	255
  7703  000EE0  EC46  F00D         	call	i2_lcd_write_bus
  7704                           
  7705                           ;tft.c: 165: lcd_write_bus(0xFF);
  7706  000EE4  0EFF               	movlw	255
  7707  000EE6  EC46  F00D         	call	i2_lcd_write_bus
  7708  000EEA  4A16               	infsnz	lcd_pix_color@i,f,c
  7709  000EEC  2A17               	incf	lcd_pix_color@i+1,f,c
  7710  000EEE                     i2l855:
  7711  000EEE  5015               	movf	lcd_pix_color@n1,w,c
  7712  000EF0  6E11               	movwf	??_lcd_pix_color& (0+255),c
  7713  000EF2  6A12               	clrf	(??_lcd_pix_color+1)& (0+255),c
  7714  000EF4  5011               	movf	??_lcd_pix_color,w,c
  7715  000EF6  5C16               	subwf	lcd_pix_color@i,w,c
  7716  000EF8  5012               	movf	??_lcd_pix_color+1,w,c
  7717  000EFA  5817               	subwfb	lcd_pix_color@i+1,w,c
  7718  000EFC  B0D8               	btfsc	status,0,c
  7719  000EFE  D008               	goto	i2l853
  7720  000F00  D7EE               	goto	i2l856
  7721  000F02                     i2l848:
  7722  000F02  500F               	movf	lcd_pix_color@c,w,c
  7723                           
  7724                           ; Switch size 1, requested type "space"
  7725                           ; Number of cases is 2, Range of values is 0 to 1
  7726                           ; switch strategies available:
  7727                           ; Name         Instructions Cycles
  7728                           ; simple_byte            7     4 (average)
  7729                           ;	Chosen strategy is simple_byte
  7730  000F04  0A00               	xorlw	0	; case 0
  7731  000F06  B4D8               	btfsc	status,2,c
  7732  000F08  D7E5               	goto	i2l854
  7733  000F0A  0A01               	xorlw	1	; case 1
  7734  000F0C  B4D8               	btfsc	status,2,c
  7735  000F0E  D7CB               	goto	i2l849
  7736  000F10                     i2l853:
  7737                           
  7738                           ;tft.c: 170: LATA1 = 1;
  7739  000F10  8289               	bsf	3977,1,c	;volatile
  7740  000F12  0012               	return		;funcret
  7741  000F14                     __end_of_lcd_pix_color:
  7742                           	opt stack 0
  7743                           tosu	equ	0xFFF
  7744                           tosh	equ	0xFFE
  7745                           tosl	equ	0xFFD
  7746                           pclatu	equ	0xFFB
  7747                           pclath	equ	0xFFA
  7748                           tblptru	equ	0xFF8
  7749                           tblptrh	equ	0xFF7
  7750                           tblptrl	equ	0xFF6
  7751                           tablat	equ	0xFF5
  7752                           prodh	equ	0xFF4
  7753                           prodl	equ	0xFF3
  7754                           intcon	equ	0xFF2
  7755                           intcon2	equ	0xFF1
  7756                           postinc0	equ	0xFEE
  7757                           fsr0h	equ	0xFEA
  7758                           fsr0l	equ	0xFE9
  7759                           wreg	equ	0xFE8
  7760                           postdec1	equ	0xFE5
  7761                           fsr1h	equ	0xFE2
  7762                           fsr1l	equ	0xFE1
  7763                           indf2	equ	0xFDF
  7764                           postinc2	equ	0xFDE
  7765                           fsr2h	equ	0xFDA
  7766                           fsr2l	equ	0xFD9
  7767                           status	equ	0xFD8
  7768                           
  7769 ;; *************** function _lcd_number *****************
  7770 ;; Defined at:
  7771 ;;		line 193 in file "tft.c"
  7772 ;; Parameters:    Size  Location     Type
  7773 ;;  number          2   24[COMRAM] int 
  7774 ;; Auto vars:     Size  Location     Type
  7775 ;;  index           5   31[COMRAM] unsigned char [5]
  7776 ;;  k               1   38[COMRAM] unsigned char 
  7777 ;;  j               1   37[COMRAM] unsigned char 
  7778 ;;  i               1   36[COMRAM] unsigned char 
  7779 ;; Return value:  Size  Location     Type
  7780 ;;                  1    wreg      void 
  7781 ;; Registers used:
  7782 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7783 ;; Tracked objects:
  7784 ;;		On entry : 0/0
  7785 ;;		On exit  : 0/0
  7786 ;;		Unchanged: 0/0
  7787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7788 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7789 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7790 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7791 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7792 ;;Total ram usage:       15 bytes
  7793 ;; Hardware stack levels used:    1
  7794 ;; Hardware stack levels required when called:    5
  7795 ;; This function calls:
  7796 ;;		_lcd_sign
  7797 ;;		i2_bitRead
  7798 ;;		i2_lcd_pix
  7799 ;; This function is called by:
  7800 ;;		_tmr2_custom_isr
  7801 ;; This function uses a non-reentrant model
  7802 ;;
  7803                           
  7804                           	psect	text45
  7805  0007F6                     __ptext45:
  7806                           	opt stack 0
  7807  0007F6                     _lcd_number:
  7808                           	opt stack 16
  7809                           
  7810                           ;tft.c: 194: char i,j,k,index[5] = {10,0,0,0,0};
  7811                           
  7812                           ;incstack = 0
  7813  0007F6  EE20  F0F7         	lfsr	2,lcd_number@F15340
  7814  0007FA  EE10  F020         	lfsr	1,lcd_number@index
  7815  0007FE  0E04               	movlw	4
  7816  000800                     i2u198_41:
  7817  000800  CFDB FFE3          	movff	plusw2,plusw1
  7818  000804  06E8               	decf	wreg,f,c
  7819  000806  E2FC               	bc	i2u198_41
  7820                           
  7821                           ;tft.c: 196: if (number<0) {
  7822  000808  AE1A               	btfss	lcd_number@number+1,7,c
  7823  00080A  D008               	goto	i2l869
  7824                           
  7825                           ;tft.c: 197: lcd_sign(1);
  7826  00080C  0E01               	movlw	1
  7827  00080E  ECFF  F005         	call	_lcd_sign
  7828                           
  7829                           ;tft.c: 198: number = 0 - number;
  7830  000812  6C19               	negf	lcd_number@number,c
  7831  000814  1E1A               	comf	lcd_number@number+1,f,c
  7832  000816  B0D8               	btfsc	status,0,c
  7833  000818  2A1A               	incf	lcd_number@number+1,f,c
  7834                           
  7835                           ;tft.c: 199: } else {
  7836  00081A  D003               	goto	i2l870
  7837  00081C                     i2l869:
  7838                           
  7839                           ;tft.c: 200: lcd_sign(0);
  7840  00081C  0E00               	movlw	0
  7841  00081E  ECFF  F005         	call	_lcd_sign
  7842  000822                     i2l870:
  7843                           
  7844                           ;tft.c: 201: }
  7845                           ;tft.c: 202: if (number > 9999) {
  7846  000822  BE1A               	btfsc	lcd_number@number+1,7,c
  7847  000824  D00E               	goto	i2l872
  7848  000826  0E10               	movlw	16
  7849  000828  5C19               	subwf	lcd_number@number,w,c
  7850  00082A  0E27               	movlw	39
  7851  00082C  581A               	subwfb	lcd_number@number+1,w,c
  7852  00082E  A0D8               	btfss	status,0,c
  7853  000830  D008               	goto	i2l872
  7854                           
  7855                           ;tft.c: 203: index[0] = 0;
  7856  000832  0E00               	movlw	0
  7857  000834  6E20               	movwf	lcd_number@index,c
  7858                           
  7859                           ;tft.c: 204: }
  7860                           ;tft.c: 205: while (number > 9999) {
  7861  000836  D005               	goto	i2l872
  7862  000838                     
  7863                           ;tft.c: 206: index[0] += 1;
  7864  000838  2A20               	incf	lcd_number@index,f,c
  7865                           
  7866                           ;tft.c: 207: number -= 10000;
  7867  00083A  0EF0               	movlw	240
  7868  00083C  2619               	addwf	lcd_number@number,f,c
  7869  00083E  0ED8               	movlw	216
  7870  000840  221A               	addwfc	lcd_number@number+1,f,c
  7871  000842                     i2l872:
  7872  000842  BE1A               	btfsc	lcd_number@number+1,7,c
  7873  000844  D00C               	goto	i2l875
  7874  000846  0E10               	movlw	16
  7875  000848  5C19               	subwf	lcd_number@number,w,c
  7876  00084A  0E27               	movlw	39
  7877  00084C  581A               	subwfb	lcd_number@number+1,w,c
  7878  00084E  A0D8               	btfss	status,0,c
  7879  000850  D006               	goto	i2l875
  7880  000852  D7F2               	goto	i2l873
  7881  000854                     
  7882                           ;tft.c: 210: index[1] += 1;
  7883  000854  2A21               	incf	lcd_number@index+1,f,c
  7884                           
  7885                           ;tft.c: 211: number -= 1000;
  7886  000856  0E18               	movlw	24
  7887  000858  2619               	addwf	lcd_number@number,f,c
  7888  00085A  0EFC               	movlw	252
  7889  00085C  221A               	addwfc	lcd_number@number+1,f,c
  7890  00085E                     i2l875:
  7891  00085E  BE1A               	btfsc	lcd_number@number+1,7,c
  7892  000860  D006               	goto	i2u202_40
  7893  000862  0EE8               	movlw	232
  7894  000864  5C19               	subwf	lcd_number@number,w,c
  7895  000866  0E03               	movlw	3
  7896  000868  581A               	subwfb	lcd_number@number+1,w,c
  7897  00086A  B0D8               	btfsc	status,0,c
  7898  00086C  D7F3               	goto	i2l876
  7899  00086E                     i2u202_40:
  7900                           
  7901                           ;tft.c: 212: }
  7902                           ;tft.c: 213: if (index[0] == 10 && index[1] == 0) {
  7903  00086E  0E0A               	movlw	10
  7904  000870  1820               	xorwf	lcd_number@index,w,c
  7905  000872  A4D8               	btfss	status,2,c
  7906  000874  D00B               	goto	i2l879
  7907  000876  5021               	movf	lcd_number@index+1,w,c
  7908  000878  A4D8               	btfss	status,2,c
  7909  00087A  D008               	goto	i2l879
  7910                           
  7911                           ;tft.c: 214: index[1] = 10;
  7912  00087C  0E0A               	movlw	10
  7913  00087E  6E21               	movwf	lcd_number@index+1,c
  7914                           
  7915                           ;tft.c: 215: }
  7916                           ;tft.c: 216: while (number > 99) {
  7917  000880  D005               	goto	i2l879
  7918  000882                     i2l3060:
  7919                           
  7920                           ;tft.c: 217: index[2] += 1;
  7921  000882  2A22               	incf	lcd_number@index+2,f,c
  7922                           
  7923                           ;tft.c: 218: number -= 100;
  7924  000884  0E9C               	movlw	156
  7925  000886  2619               	addwf	lcd_number@number,f,c
  7926  000888  0EFF               	movlw	255
  7927  00088A  221A               	addwfc	lcd_number@number+1,f,c
  7928  00088C                     i2l879:
  7929  00088C  BE1A               	btfsc	lcd_number@number+1,7,c
  7930  00088E  D006               	goto	i2u205_40
  7931  000890  501A               	movf	lcd_number@number+1,w,c
  7932  000892  E1F7               	bnz	i2l3060
  7933  000894  0E64               	movlw	100
  7934  000896  5C19               	subwf	lcd_number@number,w,c
  7935  000898  B0D8               	btfsc	status,0,c
  7936  00089A  D7F3               	goto	i2l880
  7937  00089C                     i2u205_40:
  7938                           
  7939                           ;tft.c: 219: }
  7940                           ;tft.c: 220: if (index[1] == 10 && index[2] == 0) {
  7941  00089C  0E0A               	movlw	10
  7942  00089E  1821               	xorwf	lcd_number@index+1,w,c
  7943  0008A0  A4D8               	btfss	status,2,c
  7944  0008A2  D00B               	goto	i2l883
  7945  0008A4  5022               	movf	lcd_number@index+2,w,c
  7946  0008A6  A4D8               	btfss	status,2,c
  7947  0008A8  D008               	goto	i2l883
  7948                           
  7949                           ;tft.c: 221: index[2] = 10;
  7950  0008AA  0E0A               	movlw	10
  7951  0008AC  6E22               	movwf	lcd_number@index+2,c
  7952                           
  7953                           ;tft.c: 222: }
  7954                           ;tft.c: 223: while (number > 9) {
  7955  0008AE  D005               	goto	i2l883
  7956  0008B0                     i2l3072:
  7957                           
  7958                           ;tft.c: 224: index[3] += 1;
  7959  0008B0  2A23               	incf	lcd_number@index+3,f,c
  7960                           
  7961                           ;tft.c: 225: number -= 10;
  7962  0008B2  0EF6               	movlw	246
  7963  0008B4  2619               	addwf	lcd_number@number,f,c
  7964  0008B6  0EFF               	movlw	255
  7965  0008B8  221A               	addwfc	lcd_number@number+1,f,c
  7966  0008BA                     i2l883:
  7967  0008BA  BE1A               	btfsc	lcd_number@number+1,7,c
  7968  0008BC  D006               	goto	i2u208_40
  7969  0008BE  501A               	movf	lcd_number@number+1,w,c
  7970  0008C0  E1F7               	bnz	i2l3072
  7971  0008C2  0E0A               	movlw	10
  7972  0008C4  5C19               	subwf	lcd_number@number,w,c
  7973  0008C6  B0D8               	btfsc	status,0,c
  7974  0008C8  D7F3               	goto	i2l884
  7975  0008CA                     i2u208_40:
  7976                           
  7977                           ;tft.c: 226: }
  7978                           ;tft.c: 227: index[4] = number;
  7979  0008CA  C019  F024         	movff	lcd_number@number,lcd_number@index+4
  7980                           
  7981                           ;tft.c: 229: for (k=0;k<5;k++) {
  7982  0008CE  0E00               	movlw	0
  7983  0008D0  6E27               	movwf	lcd_number@k,c
  7984  0008D2                     i2l3080:
  7985  0008D2  0E04               	movlw	4
  7986  0008D4  6427               	cpfsgt	lcd_number@k,c
  7987  0008D6  D001               	goto	i2l886
  7988  0008D8  0012               	return	
  7989  0008DA                     i2l886:
  7990                           
  7991                           ;tft.c: 230: for (i=0;i<22;i++) {
  7992  0008DA  0E00               	movlw	0
  7993  0008DC  6E25               	movwf	lcd_number@i,c
  7994  0008DE                     i2l3086:
  7995  0008DE  0E15               	movlw	21
  7996  0008E0  6425               	cpfsgt	lcd_number@i,c
  7997  0008E2  D001               	goto	i2l888
  7998  0008E4  D055               	goto	i2u213_40
  7999  0008E6                     i2l888:
  8000                           
  8001                           ;tft.c: 231: for (j=0;j<16;j++) {
  8002  0008E6  0E00               	movlw	0
  8003  0008E8  6E26               	movwf	lcd_number@j,c
  8004  0008EA                     i2l3092:
  8005  0008EA  0E0F               	movlw	15
  8006  0008EC  6426               	cpfsgt	lcd_number@j,c
  8007  0008EE  D001               	goto	i2l890
  8008  0008F0  D04D               	goto	i2u212_40
  8009  0008F2                     i2l890:
  8010                           
  8011                           ;tft.c: 232: lcd_pix(40+i,(18*k+8)+j,bitRead(digitos[index[k]][i],15-j),5);
  8012  0008F2  0E28               	movlw	40
  8013  0008F4  2425               	addwf	lcd_number@i,w,c
  8014  0008F6  6E0B               	movwf	i2lcd_pix@x,c
  8015  0008F8  6A0C               	clrf	i2lcd_pix@x+1,c
  8016  0008FA  0E00               	movlw	0
  8017  0008FC  220C               	addwfc	i2lcd_pix@x+1,f,c
  8018  0008FE  5027               	movf	lcd_number@k,w,c
  8019  000900  0D12               	mullw	18
  8020  000902  5026               	movf	lcd_number@j,w,c
  8021  000904  26F3               	addwf	prodl,f,c
  8022  000906  0E00               	movlw	0
  8023  000908  22F4               	addwfc	prodh,f,c
  8024  00090A  0E08               	movlw	8
  8025  00090C  24F3               	addwf	prodl,w,c
  8026  00090E  6E0D               	movwf	i2lcd_pix@y,c
  8027  000910  0E00               	movlw	0
  8028  000912  20F4               	addwfc	prodh,w,c
  8029  000914  6E0E               	movwf	i2lcd_pix@y+1,c
  8030  000916  5027               	movf	lcd_number@k,w,c
  8031  000918  0D01               	mullw	1
  8032  00091A  0E20               	movlw	low lcd_number@index
  8033  00091C  24F3               	addwf	prodl,w,c
  8034  00091E  6ED9               	movwf	fsr2l,c
  8035  000920  0E00               	movlw	high lcd_number@index
  8036  000922  20F4               	addwfc	prodh,w,c
  8037  000924  6EDA               	movwf	fsr2h,c
  8038  000926  50DF               	movf	indf2,w,c
  8039  000928  6E1B               	movwf	??_lcd_number& (0+255),c
  8040  00092A  501B               	movf	??_lcd_number,w,c
  8041  00092C  0D2C               	mullw	44
  8042  00092E  0E39               	movlw	low _digitos
  8043  000930  6E1C               	movwf	(??_lcd_number+1)& (0+255),c
  8044  000932  0EFB               	movlw	high _digitos
  8045  000934  6E1D               	movwf	(??_lcd_number+2)& (0+255),c
  8046  000936  50F3               	movf	prodl,w,c
  8047  000938  261C               	addwf	??_lcd_number+1,f,c
  8048  00093A  50F4               	movf	prodh,w,c
  8049  00093C  221D               	addwfc	??_lcd_number+2,f,c
  8050  00093E  5025               	movf	lcd_number@i,w,c
  8051  000940  0D02               	mullw	2
  8052  000942  50F3               	movf	prodl,w,c
  8053  000944  261C               	addwf	??_lcd_number+1,f,c
  8054  000946  50F4               	movf	prodh,w,c
  8055  000948  221D               	addwfc	??_lcd_number+2,f,c
  8056  00094A  C01C  FFF6         	movff	??_lcd_number+1,tblptrl
  8057  00094E  C01D  FFF7         	movff	??_lcd_number+2,tblptrh
  8058  000952                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8059  000952  6AF8               	clrf	tblptru,c
  8060  000954                     	endif
  8061  000954                     	if	0	;tblptru may be non-zero
  8062  000954                     	endif
  8063  000954  0009               	tblrd		*+
  8064  000956  CFF5 F001          	movff	tablat,i2bitRead@number
  8065  00095A  000A               	tblrd		*-
  8066  00095C  CFF5 F002          	movff	tablat,i2bitRead@number+1
  8067  000960  5026               	movf	lcd_number@j,w,c
  8068  000962  6E1E               	movwf	(??_lcd_number+3)& (0+255),c
  8069  000964  6A1F               	clrf	(??_lcd_number+4)& (0+255),c
  8070  000966  1E1E               	comf	??_lcd_number+3,f,c
  8071  000968  1E1F               	comf	??_lcd_number+4,f,c
  8072  00096A  4A1E               	infsnz	??_lcd_number+3,f,c
  8073  00096C  2A1F               	incf	??_lcd_number+4,f,c
  8074  00096E  0E0F               	movlw	15
  8075  000970  241E               	addwf	??_lcd_number+3,w,c
  8076  000972  6E03               	movwf	i2bitRead@position,c
  8077  000974  0E00               	movlw	0
  8078  000976  201F               	addwfc	??_lcd_number+4,w,c
  8079  000978  6E04               	movwf	i2bitRead@position+1,c
  8080  00097A  EC58  F00B         	call	i2_bitRead	;wreg free
  8081  00097E  6E0F               	movwf	i2lcd_pix@c,c
  8082  000980  0E05               	movlw	5
  8083  000982  6E10               	movwf	i2lcd_pix@size,c
  8084  000984  EC8A  F007         	call	i2_lcd_pix	;wreg free
  8085  000988  2A26               	incf	lcd_number@j,f,c
  8086  00098A  D7AF               	goto	i2l3092
  8087  00098C                     i2u212_40:
  8088  00098C  2A25               	incf	lcd_number@i,f,c
  8089  00098E  D7A7               	goto	i2l3086
  8090  000990                     i2u213_40:
  8091  000990  2A27               	incf	lcd_number@k,f,c
  8092  000992  D79F               	goto	i2l3080
  8093  000994                     __end_of_lcd_number:
  8094                           	opt stack 0
  8095                           tosu	equ	0xFFF
  8096                           tosh	equ	0xFFE
  8097                           tosl	equ	0xFFD
  8098                           pclatu	equ	0xFFB
  8099                           pclath	equ	0xFFA
  8100                           tblptru	equ	0xFF8
  8101                           tblptrh	equ	0xFF7
  8102                           tblptrl	equ	0xFF6
  8103                           tablat	equ	0xFF5
  8104                           prodh	equ	0xFF4
  8105                           prodl	equ	0xFF3
  8106                           intcon	equ	0xFF2
  8107                           intcon2	equ	0xFF1
  8108                           postinc0	equ	0xFEE
  8109                           fsr0h	equ	0xFEA
  8110                           fsr0l	equ	0xFE9
  8111                           wreg	equ	0xFE8
  8112                           postdec1	equ	0xFE5
  8113                           plusw1	equ	0xFE3
  8114                           fsr1h	equ	0xFE2
  8115                           fsr1l	equ	0xFE1
  8116                           indf2	equ	0xFDF
  8117                           postinc2	equ	0xFDE
  8118                           plusw2	equ	0xFDB
  8119                           fsr2h	equ	0xFDA
  8120                           fsr2l	equ	0xFD9
  8121                           status	equ	0xFD8
  8122                           
  8123 ;; *************** function i2_bitRead *****************
  8124 ;; Defined at:
  8125 ;;		line 3 in file "tft.c"
  8126 ;; Parameters:    Size  Location     Type
  8127 ;;  number          2    0[COMRAM] unsigned int 
  8128 ;;  position        2    2[COMRAM] unsigned int 
  8129 ;; Auto vars:     Size  Location     Type
  8130 ;;		None
  8131 ;; Return value:  Size  Location     Type
  8132 ;;                  1    wreg      unsigned char 
  8133 ;; Registers used:
  8134 ;;		wreg, status,2, status,0
  8135 ;; Tracked objects:
  8136 ;;		On entry : 0/0
  8137 ;;		On exit  : 0/0
  8138 ;;		Unchanged: 0/0
  8139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8140 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8141 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8142 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8143 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8144 ;;Total ram usage:        7 bytes
  8145 ;; Hardware stack levels used:    1
  8146 ;; This function calls:
  8147 ;;		Nothing
  8148 ;; This function is called by:
  8149 ;;		_lcd_number
  8150 ;;		_lcd_text_color
  8151 ;;		i2_lcd_text
  8152 ;; This function uses a non-reentrant model
  8153 ;;
  8154                           
  8155                           	psect	text46
  8156  0016B0                     __ptext46:
  8157                           	opt stack 0
  8158  0016B0                     i2_bitRead:
  8159                           	opt stack 20
  8160                           
  8161                           ;tft.c: 4: position = 1 << position;
  8162                           
  8163                           ;incstack = 0
  8164  0016B0  C003  F005         	movff	i2bitRead@position,??i2_bitRead
  8165  0016B4  0E01               	movlw	1
  8166  0016B6  6E06               	movwf	(??i2_bitRead+1)& (0+255),c
  8167  0016B8  0E00               	movlw	0
  8168  0016BA  6E07               	movwf	(??i2_bitRead+2)& (0+255),c
  8169  0016BC  2A05               	incf	??i2_bitRead,f,c
  8170  0016BE  D003               	goto	i2u196_44
  8171  0016C0                     i2u196_45:
  8172  0016C0  90D8               	bcf	status,0,c
  8173  0016C2  3606               	rlcf	??i2_bitRead+1,f,c
  8174  0016C4  3607               	rlcf	??i2_bitRead+2,f,c
  8175  0016C6                     i2u196_44:
  8176  0016C6  2E05               	decfsz	??i2_bitRead,f,c
  8177  0016C8  D7FB               	goto	i2u196_45
  8178  0016CA  C006  F003         	movff	??i2_bitRead+1,i2bitRead@position
  8179  0016CE  C007  F004         	movff	??i2_bitRead+2,i2bitRead@position+1
  8180                           
  8181                           ;tft.c: 5: if (number & position) {
  8182  0016D2  5003               	movf	i2bitRead@position,w,c
  8183  0016D4  1401               	andwf	i2bitRead@number,w,c
  8184  0016D6  6E05               	movwf	??i2_bitRead& (0+255),c
  8185  0016D8  5004               	movf	i2bitRead@position+1,w,c
  8186  0016DA  1402               	andwf	i2bitRead@number+1,w,c
  8187  0016DC  6E06               	movwf	(??i2_bitRead+1)& (0+255),c
  8188  0016DE  5005               	movf	??i2_bitRead,w,c
  8189  0016E0  1006               	iorwf	??i2_bitRead+1,w,c
  8190  0016E2  B4D8               	btfsc	status,2,c
  8191  0016E4  D002               	goto	i2l808
  8192                           
  8193                           ;tft.c: 6: return 1;
  8194  0016E6  0E01               	movlw	1
  8195                           
  8196                           ;tft.c: 7: } else {
  8197  0016E8  0012               	return	
  8198  0016EA                     i2l808:
  8199                           
  8200                           ;tft.c: 8: return 0;
  8201  0016EA  0E00               	movlw	0
  8202  0016EC  0012               	return	
  8203  0016EE                     __end_ofi2_bitRead:
  8204                           	opt stack 0
  8205                           tosu	equ	0xFFF
  8206                           tosh	equ	0xFFE
  8207                           tosl	equ	0xFFD
  8208                           pclatu	equ	0xFFB
  8209                           pclath	equ	0xFFA
  8210                           tblptru	equ	0xFF8
  8211                           tblptrh	equ	0xFF7
  8212                           tblptrl	equ	0xFF6
  8213                           tablat	equ	0xFF5
  8214                           prodh	equ	0xFF4
  8215                           prodl	equ	0xFF3
  8216                           intcon	equ	0xFF2
  8217                           intcon2	equ	0xFF1
  8218                           postinc0	equ	0xFEE
  8219                           fsr0h	equ	0xFEA
  8220                           fsr0l	equ	0xFE9
  8221                           wreg	equ	0xFE8
  8222                           postdec1	equ	0xFE5
  8223                           plusw1	equ	0xFE3
  8224                           fsr1h	equ	0xFE2
  8225                           fsr1l	equ	0xFE1
  8226                           indf2	equ	0xFDF
  8227                           postinc2	equ	0xFDE
  8228                           plusw2	equ	0xFDB
  8229                           fsr2h	equ	0xFDA
  8230                           fsr2l	equ	0xFD9
  8231                           status	equ	0xFD8
  8232                           
  8233 ;; *************** function _lcd_sign *****************
  8234 ;; Defined at:
  8235 ;;		line 173 in file "tft.c"
  8236 ;; Parameters:    Size  Location     Type
  8237 ;;  enable          1    wreg     unsigned char 
  8238 ;; Auto vars:     Size  Location     Type
  8239 ;;  enable          1   23[COMRAM] unsigned char 
  8240 ;; Return value:  Size  Location     Type
  8241 ;;                  1    wreg      void 
  8242 ;; Registers used:
  8243 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8244 ;; Tracked objects:
  8245 ;;		On entry : 0/0
  8246 ;;		On exit  : 0/0
  8247 ;;		Unchanged: 0/0
  8248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8250 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8252 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8253 ;;Total ram usage:        1 bytes
  8254 ;; Hardware stack levels used:    1
  8255 ;; Hardware stack levels required when called:    4
  8256 ;; This function calls:
  8257 ;;		i2_lcd_pix
  8258 ;; This function is called by:
  8259 ;;		_lcd_number
  8260 ;; This function uses a non-reentrant model
  8261 ;;
  8262                           
  8263                           	psect	text47
  8264  000BFE                     __ptext47:
  8265                           	opt stack 0
  8266  000BFE                     _lcd_sign:
  8267                           	opt stack 16
  8268                           
  8269                           ;incstack = 0
  8270                           ;lcd_sign@enable stored from wreg
  8271  000BFE  6E18               	movwf	lcd_sign@enable,c
  8272                           
  8273                           ;tft.c: 174: lcd_pix(50,1,enable,5);
  8274  000C00  0E00               	movlw	0
  8275  000C02  6E0C               	movwf	i2lcd_pix@x+1,c
  8276  000C04  0E32               	movlw	50
  8277  000C06  6E0B               	movwf	i2lcd_pix@x,c
  8278  000C08  0E00               	movlw	0
  8279  000C0A  6E0E               	movwf	i2lcd_pix@y+1,c
  8280  000C0C  0E01               	movlw	1
  8281  000C0E  6E0D               	movwf	i2lcd_pix@y,c
  8282  000C10  C018  F00F         	movff	lcd_sign@enable,i2lcd_pix@c
  8283  000C14  0E05               	movlw	5
  8284  000C16  6E10               	movwf	i2lcd_pix@size,c
  8285  000C18  EC8A  F007         	call	i2_lcd_pix	;wreg free
  8286                           
  8287                           ;tft.c: 175: lcd_pix(50,2,enable,5);
  8288  000C1C  0E00               	movlw	0
  8289  000C1E  6E0C               	movwf	i2lcd_pix@x+1,c
  8290  000C20  0E32               	movlw	50
  8291  000C22  6E0B               	movwf	i2lcd_pix@x,c
  8292  000C24  0E00               	movlw	0
  8293  000C26  6E0E               	movwf	i2lcd_pix@y+1,c
  8294  000C28  0E02               	movlw	2
  8295  000C2A  6E0D               	movwf	i2lcd_pix@y,c
  8296  000C2C  C018  F00F         	movff	lcd_sign@enable,i2lcd_pix@c
  8297  000C30  0E05               	movlw	5
  8298  000C32  6E10               	movwf	i2lcd_pix@size,c
  8299  000C34  EC8A  F007         	call	i2_lcd_pix	;wreg free
  8300                           
  8301                           ;tft.c: 176: lcd_pix(50,3,enable,5);
  8302  000C38  0E00               	movlw	0
  8303  000C3A  6E0C               	movwf	i2lcd_pix@x+1,c
  8304  000C3C  0E32               	movlw	50
  8305  000C3E  6E0B               	movwf	i2lcd_pix@x,c
  8306  000C40  0E00               	movlw	0
  8307  000C42  6E0E               	movwf	i2lcd_pix@y+1,c
  8308  000C44  0E03               	movlw	3
  8309  000C46  6E0D               	movwf	i2lcd_pix@y,c
  8310  000C48  C018  F00F         	movff	lcd_sign@enable,i2lcd_pix@c
  8311  000C4C  0E05               	movlw	5
  8312  000C4E  6E10               	movwf	i2lcd_pix@size,c
  8313  000C50  EC8A  F007         	call	i2_lcd_pix	;wreg free
  8314                           
  8315                           ;tft.c: 177: lcd_pix(50,4,enable,5);
  8316  000C54  0E00               	movlw	0
  8317  000C56  6E0C               	movwf	i2lcd_pix@x+1,c
  8318  000C58  0E32               	movlw	50
  8319  000C5A  6E0B               	movwf	i2lcd_pix@x,c
  8320  000C5C  0E00               	movlw	0
  8321  000C5E  6E0E               	movwf	i2lcd_pix@y+1,c
  8322  000C60  0E04               	movlw	4
  8323  000C62  6E0D               	movwf	i2lcd_pix@y,c
  8324  000C64  C018  F00F         	movff	lcd_sign@enable,i2lcd_pix@c
  8325  000C68  0E05               	movlw	5
  8326  000C6A  6E10               	movwf	i2lcd_pix@size,c
  8327  000C6C  EC8A  F007         	call	i2_lcd_pix	;wreg free
  8328                           
  8329                           ;tft.c: 178: lcd_pix(50,5,enable,5);
  8330  000C70  0E00               	movlw	0
  8331  000C72  6E0C               	movwf	i2lcd_pix@x+1,c
  8332  000C74  0E32               	movlw	50
  8333  000C76  6E0B               	movwf	i2lcd_pix@x,c
  8334  000C78  0E00               	movlw	0
  8335  000C7A  6E0E               	movwf	i2lcd_pix@y+1,c
  8336  000C7C  0E05               	movlw	5
  8337  000C7E  6E0D               	movwf	i2lcd_pix@y,c
  8338  000C80  C018  F00F         	movff	lcd_sign@enable,i2lcd_pix@c
  8339  000C84  0E05               	movlw	5
  8340  000C86  6E10               	movwf	i2lcd_pix@size,c
  8341  000C88  EC8A  F007         	call	i2_lcd_pix	;wreg free
  8342                           
  8343                           ;tft.c: 179: lcd_pix(49,1,enable,5);
  8344  000C8C  0E00               	movlw	0
  8345  000C8E  6E0C               	movwf	i2lcd_pix@x+1,c
  8346  000C90  0E31               	movlw	49
  8347  000C92  6E0B               	movwf	i2lcd_pix@x,c
  8348  000C94  0E00               	movlw	0
  8349  000C96  6E0E               	movwf	i2lcd_pix@y+1,c
  8350  000C98  0E01               	movlw	1
  8351  000C9A  6E0D               	movwf	i2lcd_pix@y,c
  8352  000C9C  C018  F00F         	movff	lcd_sign@enable,i2lcd_pix@c
  8353  000CA0  0E05               	movlw	5
  8354  000CA2  6E10               	movwf	i2lcd_pix@size,c
  8355  000CA4  EC8A  F007         	call	i2_lcd_pix	;wreg free
  8356                           
  8357                           ;tft.c: 180: lcd_pix(49,2,enable,5);
  8358  000CA8  0E00               	movlw	0
  8359  000CAA  6E0C               	movwf	i2lcd_pix@x+1,c
  8360  000CAC  0E31               	movlw	49
  8361  000CAE  6E0B               	movwf	i2lcd_pix@x,c
  8362  000CB0  0E00               	movlw	0
  8363  000CB2  6E0E               	movwf	i2lcd_pix@y+1,c
  8364  000CB4  0E02               	movlw	2
  8365  000CB6  6E0D               	movwf	i2lcd_pix@y,c
  8366  000CB8  C018  F00F         	movff	lcd_sign@enable,i2lcd_pix@c
  8367  000CBC  0E05               	movlw	5
  8368  000CBE  6E10               	movwf	i2lcd_pix@size,c
  8369  000CC0  EC8A  F007         	call	i2_lcd_pix	;wreg free
  8370                           
  8371                           ;tft.c: 181: lcd_pix(49,3,enable,5);
  8372  000CC4  0E00               	movlw	0
  8373  000CC6  6E0C               	movwf	i2lcd_pix@x+1,c
  8374  000CC8  0E31               	movlw	49
  8375  000CCA  6E0B               	movwf	i2lcd_pix@x,c
  8376  000CCC  0E00               	movlw	0
  8377  000CCE  6E0E               	movwf	i2lcd_pix@y+1,c
  8378  000CD0  0E03               	movlw	3
  8379  000CD2  6E0D               	movwf	i2lcd_pix@y,c
  8380  000CD4  C018  F00F         	movff	lcd_sign@enable,i2lcd_pix@c
  8381  000CD8  0E05               	movlw	5
  8382  000CDA  6E10               	movwf	i2lcd_pix@size,c
  8383  000CDC  EC8A  F007         	call	i2_lcd_pix	;wreg free
  8384                           
  8385                           ;tft.c: 182: lcd_pix(49,4,enable,5);
  8386  000CE0  0E00               	movlw	0
  8387  000CE2  6E0C               	movwf	i2lcd_pix@x+1,c
  8388  000CE4  0E31               	movlw	49
  8389  000CE6  6E0B               	movwf	i2lcd_pix@x,c
  8390  000CE8  0E00               	movlw	0
  8391  000CEA  6E0E               	movwf	i2lcd_pix@y+1,c
  8392  000CEC  0E04               	movlw	4
  8393  000CEE  6E0D               	movwf	i2lcd_pix@y,c
  8394  000CF0  C018  F00F         	movff	lcd_sign@enable,i2lcd_pix@c
  8395  000CF4  0E05               	movlw	5
  8396  000CF6  6E10               	movwf	i2lcd_pix@size,c
  8397  000CF8  EC8A  F007         	call	i2_lcd_pix	;wreg free
  8398                           
  8399                           ;tft.c: 183: lcd_pix(49,5,enable,5);
  8400  000CFC  0E00               	movlw	0
  8401  000CFE  6E0C               	movwf	i2lcd_pix@x+1,c
  8402  000D00  0E31               	movlw	49
  8403  000D02  6E0B               	movwf	i2lcd_pix@x,c
  8404  000D04  0E00               	movlw	0
  8405  000D06  6E0E               	movwf	i2lcd_pix@y+1,c
  8406  000D08  0E05               	movlw	5
  8407  000D0A  6E0D               	movwf	i2lcd_pix@y,c
  8408  000D0C  C018  F00F         	movff	lcd_sign@enable,i2lcd_pix@c
  8409  000D10  0E05               	movlw	5
  8410  000D12  6E10               	movwf	i2lcd_pix@size,c
  8411  000D14  EC8A  F007         	call	i2_lcd_pix	;wreg free
  8412  000D18  0012               	return		;funcret
  8413  000D1A                     __end_of_lcd_sign:
  8414                           	opt stack 0
  8415                           tosu	equ	0xFFF
  8416                           tosh	equ	0xFFE
  8417                           tosl	equ	0xFFD
  8418                           pclatu	equ	0xFFB
  8419                           pclath	equ	0xFFA
  8420                           tblptru	equ	0xFF8
  8421                           tblptrh	equ	0xFF7
  8422                           tblptrl	equ	0xFF6
  8423                           tablat	equ	0xFF5
  8424                           prodh	equ	0xFF4
  8425                           prodl	equ	0xFF3
  8426                           intcon	equ	0xFF2
  8427                           intcon2	equ	0xFF1
  8428                           postinc0	equ	0xFEE
  8429                           fsr0h	equ	0xFEA
  8430                           fsr0l	equ	0xFE9
  8431                           wreg	equ	0xFE8
  8432                           postdec1	equ	0xFE5
  8433                           plusw1	equ	0xFE3
  8434                           fsr1h	equ	0xFE2
  8435                           fsr1l	equ	0xFE1
  8436                           indf2	equ	0xFDF
  8437                           postinc2	equ	0xFDE
  8438                           plusw2	equ	0xFDB
  8439                           fsr2h	equ	0xFDA
  8440                           fsr2l	equ	0xFD9
  8441                           status	equ	0xFD8
  8442                           
  8443 ;; *************** function i2_lcd_pix *****************
  8444 ;; Defined at:
  8445 ;;		line 115 in file "tft.c"
  8446 ;; Parameters:    Size  Location     Type
  8447 ;;  x               2   10[COMRAM] unsigned int 
  8448 ;;  y               2   12[COMRAM] unsigned int 
  8449 ;;  c               1   14[COMRAM] unsigned char 
  8450 ;;  size            1   15[COMRAM] unsigned char 
  8451 ;; Auto vars:     Size  Location     Type
  8452 ;;  lcd_pix         2   21[COMRAM] unsigned int 
  8453 ;;  lcd_pix         1   20[COMRAM] unsigned char 
  8454 ;; Return value:  Size  Location     Type
  8455 ;;                  1    wreg      void 
  8456 ;; Registers used:
  8457 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8458 ;; Tracked objects:
  8459 ;;		On entry : 0/0
  8460 ;;		On exit  : 0/0
  8461 ;;		Unchanged: 0/0
  8462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8463 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8464 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8465 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8466 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8467 ;;Total ram usage:       13 bytes
  8468 ;; Hardware stack levels used:    1
  8469 ;; Hardware stack levels required when called:    3
  8470 ;; This function calls:
  8471 ;;		i2___wmul
  8472 ;;		i2_lcd_memory_start
  8473 ;;		i2_lcd_set_address
  8474 ;;		i2_lcd_write_bus
  8475 ;; This function is called by:
  8476 ;;		_lcd_sign
  8477 ;;		_lcd_number
  8478 ;;		i2_lcd_point
  8479 ;;		i2_lcd_text
  8480 ;; This function uses a non-reentrant model
  8481 ;;
  8482                           
  8483                           	psect	text48
  8484  000F14                     __ptext48:
  8485                           	opt stack 0
  8486  000F14                     i2_lcd_pix:
  8487                           	opt stack 17
  8488                           
  8489                           ;tft.c: 116: unsigned int i;
  8490                           ;tft.c: 117: char n1;
  8491                           ;tft.c: 119: x *= size;
  8492                           
  8493                           ;incstack = 0
  8494  000F14  C00B  F001         	movff	i2lcd_pix@x,i2___wmul@multiplier
  8495  000F18  C00C  F002         	movff	i2lcd_pix@x+1,i2___wmul@multiplier+1
  8496  000F1C  C010  F003         	movff	i2lcd_pix@size,i2___wmul@multiplicand
  8497  000F20  6A04               	clrf	i2___wmul@multiplicand+1,c
  8498  000F22  EC66  F00C         	call	i2___wmul	;wreg free
  8499  000F26  C001  F00B         	movff	?i2___wmul,i2lcd_pix@x
  8500  000F2A  C002  F00C         	movff	?i2___wmul+1,i2lcd_pix@x+1
  8501                           
  8502                           ;tft.c: 120: y *= size;
  8503  000F2E  C00D  F001         	movff	i2lcd_pix@y,i2___wmul@multiplier
  8504  000F32  C00E  F002         	movff	i2lcd_pix@y+1,i2___wmul@multiplier+1
  8505  000F36  C010  F003         	movff	i2lcd_pix@size,i2___wmul@multiplicand
  8506  000F3A  6A04               	clrf	i2___wmul@multiplicand+1,c
  8507  000F3C  EC66  F00C         	call	i2___wmul	;wreg free
  8508  000F40  C001  F00D         	movff	?i2___wmul,i2lcd_pix@y
  8509  000F44  C002  F00E         	movff	?i2___wmul+1,i2lcd_pix@y+1
  8510                           
  8511                           ;tft.c: 121: n1 = size * size;
  8512  000F48  5010               	movf	i2lcd_pix@size,w,c
  8513  000F4A  0210               	mulwf	i2lcd_pix@size,c
  8514  000F4C  CFF3 F015          	movff	prodl,i2lcd_pix@n1
  8515                           
  8516                           ;tft.c: 122: LATA1 = 0;
  8517  000F50  9289               	bcf	3977,1,c	;volatile
  8518                           
  8519                           ;tft.c: 123: lcd_set_address(x,y,x+size-1,y+size-1);
  8520  000F52  C00B  F003         	movff	i2lcd_pix@x,i2lcd_set_address@x1
  8521  000F56  C00C  F004         	movff	i2lcd_pix@x+1,i2lcd_set_address@x1+1
  8522  000F5A  C00D  F005         	movff	i2lcd_pix@y,i2lcd_set_address@y1
  8523  000F5E  C00E  F006         	movff	i2lcd_pix@y+1,i2lcd_set_address@y1+1
  8524  000F62  5010               	movf	i2lcd_pix@size,w,c
  8525  000F64  240B               	addwf	i2lcd_pix@x,w,c
  8526  000F66  6E11               	movwf	??i2_lcd_pix& (0+255),c
  8527  000F68  0E00               	movlw	0
  8528  000F6A  200C               	addwfc	i2lcd_pix@x+1,w,c
  8529  000F6C  6E12               	movwf	(??i2_lcd_pix+1)& (0+255),c
  8530  000F6E  0EFF               	movlw	255
  8531  000F70  2411               	addwf	??i2_lcd_pix,w,c
  8532  000F72  6E07               	movwf	i2lcd_set_address@x2,c
  8533  000F74  0EFF               	movlw	255
  8534  000F76  2012               	addwfc	??i2_lcd_pix+1,w,c
  8535  000F78  6E08               	movwf	i2lcd_set_address@x2+1,c
  8536  000F7A  5010               	movf	i2lcd_pix@size,w,c
  8537  000F7C  240D               	addwf	i2lcd_pix@y,w,c
  8538  000F7E  6E13               	movwf	(??i2_lcd_pix+2)& (0+255),c
  8539  000F80  0E00               	movlw	0
  8540  000F82  200E               	addwfc	i2lcd_pix@y+1,w,c
  8541  000F84  6E14               	movwf	(??i2_lcd_pix+3)& (0+255),c
  8542  000F86  0EFF               	movlw	255
  8543  000F88  2413               	addwf	??i2_lcd_pix+2,w,c
  8544  000F8A  6E09               	movwf	i2lcd_set_address@y2,c
  8545  000F8C  0EFF               	movlw	255
  8546  000F8E  2014               	addwfc	??i2_lcd_pix+3,w,c
  8547  000F90  6E0A               	movwf	i2lcd_set_address@y2+1,c
  8548  000F92  EC77  F00B         	call	i2_lcd_set_address	;wreg free
  8549                           
  8550                           ;tft.c: 124: lcd_memory_start();
  8551  000F96  EC88  F00D         	call	i2_lcd_memory_start	;wreg free
  8552                           
  8553                           ;tft.c: 126: switch (c) {
  8554  000F9A  D02E               	goto	i2l835
  8555  000F9C                     
  8556                           ;tft.c: 128: for(i=0;i<n1;i++) {
  8557  000F9C  0E00               	movlw	0
  8558  000F9E  6E17               	movwf	i2lcd_pix@i+1,c
  8559  000FA0  0E00               	movlw	0
  8560  000FA2  6E16               	movwf	i2lcd_pix@i,c
  8561  000FA4  D008               	goto	i2l837
  8562  000FA6                     
  8563                           ;tft.c: 129: lcd_write_bus(0x00);
  8564  000FA6  0E00               	movlw	0
  8565  000FA8  EC46  F00D         	call	i2_lcd_write_bus
  8566                           
  8567                           ;tft.c: 130: lcd_write_bus(0x00);
  8568  000FAC  0E00               	movlw	0
  8569  000FAE  EC46  F00D         	call	i2_lcd_write_bus
  8570  000FB2  4A16               	infsnz	i2lcd_pix@i,f,c
  8571  000FB4  2A17               	incf	i2lcd_pix@i+1,f,c
  8572  000FB6                     i2l837:
  8573  000FB6  5015               	movf	i2lcd_pix@n1,w,c
  8574  000FB8  6E11               	movwf	??i2_lcd_pix& (0+255),c
  8575  000FBA  6A12               	clrf	(??i2_lcd_pix+1)& (0+255),c
  8576  000FBC  5011               	movf	??i2_lcd_pix,w,c
  8577  000FBE  5C16               	subwf	i2lcd_pix@i,w,c
  8578  000FC0  5012               	movf	??i2_lcd_pix+1,w,c
  8579  000FC2  5817               	subwfb	i2lcd_pix@i+1,w,c
  8580  000FC4  B0D8               	btfsc	status,0,c
  8581  000FC6  D01F               	goto	i2l840
  8582  000FC8  D7EE               	goto	i2l838
  8583  000FCA                     
  8584                           ;tft.c: 134: for(i=0;i<n1;i++) {
  8585  000FCA  0E00               	movlw	0
  8586  000FCC  6E17               	movwf	i2lcd_pix@i+1,c
  8587  000FCE  0E00               	movlw	0
  8588  000FD0  6E16               	movwf	i2lcd_pix@i,c
  8589  000FD2  D008               	goto	i2l842
  8590  000FD4                     
  8591                           ;tft.c: 135: lcd_write_bus(0xFF);
  8592  000FD4  0EFF               	movlw	255
  8593  000FD6  EC46  F00D         	call	i2_lcd_write_bus
  8594                           
  8595                           ;tft.c: 136: lcd_write_bus(0xFF);
  8596  000FDA  0EFF               	movlw	255
  8597  000FDC  EC46  F00D         	call	i2_lcd_write_bus
  8598  000FE0  4A16               	infsnz	i2lcd_pix@i,f,c
  8599  000FE2  2A17               	incf	i2lcd_pix@i+1,f,c
  8600  000FE4                     i2l842:
  8601  000FE4  5015               	movf	i2lcd_pix@n1,w,c
  8602  000FE6  6E11               	movwf	??i2_lcd_pix& (0+255),c
  8603  000FE8  6A12               	clrf	(??i2_lcd_pix+1)& (0+255),c
  8604  000FEA  5011               	movf	??i2_lcd_pix,w,c
  8605  000FEC  5C16               	subwf	i2lcd_pix@i,w,c
  8606  000FEE  5012               	movf	??i2_lcd_pix+1,w,c
  8607  000FF0  5817               	subwfb	i2lcd_pix@i+1,w,c
  8608  000FF2  B0D8               	btfsc	status,0,c
  8609  000FF4  D008               	goto	i2l840
  8610  000FF6  D7EE               	goto	i2l843
  8611  000FF8                     i2l835:
  8612  000FF8  500F               	movf	i2lcd_pix@c,w,c
  8613                           
  8614                           ; Switch size 1, requested type "space"
  8615                           ; Number of cases is 2, Range of values is 0 to 1
  8616                           ; switch strategies available:
  8617                           ; Name         Instructions Cycles
  8618                           ; simple_byte            7     4 (average)
  8619                           ;	Chosen strategy is simple_byte
  8620  000FFA  0A00               	xorlw	0	; case 0
  8621  000FFC  B4D8               	btfsc	status,2,c
  8622  000FFE  D7E5               	goto	i2l841
  8623  001000  0A01               	xorlw	1	; case 1
  8624  001002  B4D8               	btfsc	status,2,c
  8625  001004  D7CB               	goto	i2l836
  8626  001006                     i2l840:
  8627                           
  8628                           ;tft.c: 141: LATA1 = 1;
  8629  001006  8289               	bsf	3977,1,c	;volatile
  8630  001008  0012               	return		;funcret
  8631  00100A                     __end_ofi2_lcd_pix:
  8632                           	opt stack 0
  8633                           tosu	equ	0xFFF
  8634                           tosh	equ	0xFFE
  8635                           tosl	equ	0xFFD
  8636                           pclatu	equ	0xFFB
  8637                           pclath	equ	0xFFA
  8638                           tblptru	equ	0xFF8
  8639                           tblptrh	equ	0xFF7
  8640                           tblptrl	equ	0xFF6
  8641                           tablat	equ	0xFF5
  8642                           prodh	equ	0xFF4
  8643                           prodl	equ	0xFF3
  8644                           intcon	equ	0xFF2
  8645                           intcon2	equ	0xFF1
  8646                           postinc0	equ	0xFEE
  8647                           fsr0h	equ	0xFEA
  8648                           fsr0l	equ	0xFE9
  8649                           wreg	equ	0xFE8
  8650                           postdec1	equ	0xFE5
  8651                           plusw1	equ	0xFE3
  8652                           fsr1h	equ	0xFE2
  8653                           fsr1l	equ	0xFE1
  8654                           indf2	equ	0xFDF
  8655                           postinc2	equ	0xFDE
  8656                           plusw2	equ	0xFDB
  8657                           fsr2h	equ	0xFDA
  8658                           fsr2l	equ	0xFD9
  8659                           status	equ	0xFD8
  8660                           
  8661 ;; *************** function i2_lcd_set_address *****************
  8662 ;; Defined at:
  8663 ;;		line 25 in file "tft.c"
  8664 ;; Parameters:    Size  Location     Type
  8665 ;;  x1              2    2[COMRAM] unsigned int 
  8666 ;;  y1              2    4[COMRAM] unsigned int 
  8667 ;;  x2              2    6[COMRAM] unsigned int 
  8668 ;;  y2              2    8[COMRAM] unsigned int 
  8669 ;; Auto vars:     Size  Location     Type
  8670 ;;		None
  8671 ;; Return value:  Size  Location     Type
  8672 ;;                  1    wreg      void 
  8673 ;; Registers used:
  8674 ;;		wreg, status,2, cstack
  8675 ;; Tracked objects:
  8676 ;;		On entry : 0/0
  8677 ;;		On exit  : 0/0
  8678 ;;		Unchanged: 0/0
  8679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8680 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8681 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8682 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8683 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8684 ;;Total ram usage:        8 bytes
  8685 ;; Hardware stack levels used:    1
  8686 ;; Hardware stack levels required when called:    2
  8687 ;; This function calls:
  8688 ;;		i2_lcd_write_bus
  8689 ;;		i2_lcd_write_command
  8690 ;; This function is called by:
  8691 ;;		_lcd_pix_color
  8692 ;;		i2_lcd_pix
  8693 ;; This function uses a non-reentrant model
  8694 ;;
  8695                           
  8696                           	psect	text49
  8697  0016EE                     __ptext49:
  8698                           	opt stack 0
  8699  0016EE                     i2_lcd_set_address:
  8700                           	opt stack 17
  8701                           
  8702                           ;tft.c: 26: lcd_write_command(0x2A);
  8703                           
  8704                           ;incstack = 0
  8705  0016EE  0E2A               	movlw	42
  8706  0016F0  EC3F  F00D         	call	i2_lcd_write_command
  8707                           
  8708                           ;tft.c: 27: lcd_write_bus(x1>>8);
  8709  0016F4  5004               	movf	i2lcd_set_address@x1+1,w,c
  8710  0016F6  EC46  F00D         	call	i2_lcd_write_bus
  8711                           
  8712                           ;tft.c: 28: lcd_write_bus(x1);
  8713  0016FA  5003               	movf	i2lcd_set_address@x1,w,c
  8714  0016FC  EC46  F00D         	call	i2_lcd_write_bus
  8715                           
  8716                           ;tft.c: 29: lcd_write_bus(x2>>8);
  8717  001700  5008               	movf	i2lcd_set_address@x2+1,w,c
  8718  001702  EC46  F00D         	call	i2_lcd_write_bus
  8719                           
  8720                           ;tft.c: 30: lcd_write_bus(x2);
  8721  001706  5007               	movf	i2lcd_set_address@x2,w,c
  8722  001708  EC46  F00D         	call	i2_lcd_write_bus
  8723                           
  8724                           ;tft.c: 32: lcd_write_command(0x2B);
  8725  00170C  0E2B               	movlw	43
  8726  00170E  EC3F  F00D         	call	i2_lcd_write_command
  8727                           
  8728                           ;tft.c: 33: lcd_write_bus(y1>>8);
  8729  001712  5006               	movf	i2lcd_set_address@y1+1,w,c
  8730  001714  EC46  F00D         	call	i2_lcd_write_bus
  8731                           
  8732                           ;tft.c: 34: lcd_write_bus(y1);
  8733  001718  5005               	movf	i2lcd_set_address@y1,w,c
  8734  00171A  EC46  F00D         	call	i2_lcd_write_bus
  8735                           
  8736                           ;tft.c: 35: lcd_write_bus(y2>>8);
  8737  00171E  500A               	movf	i2lcd_set_address@y2+1,w,c
  8738  001720  EC46  F00D         	call	i2_lcd_write_bus
  8739                           
  8740                           ;tft.c: 36: lcd_write_bus(y2);
  8741  001724  5009               	movf	i2lcd_set_address@y2,w,c
  8742  001726  EC46  F00D         	call	i2_lcd_write_bus
  8743  00172A  0012               	return		;funcret
  8744  00172C                     __end_ofi2_lcd_set_address:
  8745                           	opt stack 0
  8746                           tosu	equ	0xFFF
  8747                           tosh	equ	0xFFE
  8748                           tosl	equ	0xFFD
  8749                           pclatu	equ	0xFFB
  8750                           pclath	equ	0xFFA
  8751                           tblptru	equ	0xFF8
  8752                           tblptrh	equ	0xFF7
  8753                           tblptrl	equ	0xFF6
  8754                           tablat	equ	0xFF5
  8755                           prodh	equ	0xFF4
  8756                           prodl	equ	0xFF3
  8757                           intcon	equ	0xFF2
  8758                           intcon2	equ	0xFF1
  8759                           postinc0	equ	0xFEE
  8760                           fsr0h	equ	0xFEA
  8761                           fsr0l	equ	0xFE9
  8762                           wreg	equ	0xFE8
  8763                           postdec1	equ	0xFE5
  8764                           plusw1	equ	0xFE3
  8765                           fsr1h	equ	0xFE2
  8766                           fsr1l	equ	0xFE1
  8767                           indf2	equ	0xFDF
  8768                           postinc2	equ	0xFDE
  8769                           plusw2	equ	0xFDB
  8770                           fsr2h	equ	0xFDA
  8771                           fsr2l	equ	0xFD9
  8772                           status	equ	0xFD8
  8773                           
  8774 ;; *************** function i2_lcd_memory_start *****************
  8775 ;; Defined at:
  8776 ;;		line 39 in file "tft.c"
  8777 ;; Parameters:    Size  Location     Type
  8778 ;;		None
  8779 ;; Auto vars:     Size  Location     Type
  8780 ;;		None
  8781 ;; Return value:  Size  Location     Type
  8782 ;;                  1    wreg      void 
  8783 ;; Registers used:
  8784 ;;		wreg, status,2, cstack
  8785 ;; Tracked objects:
  8786 ;;		On entry : 0/0
  8787 ;;		On exit  : 0/0
  8788 ;;		Unchanged: 0/0
  8789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8791 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8793 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8794 ;;Total ram usage:        0 bytes
  8795 ;; Hardware stack levels used:    1
  8796 ;; Hardware stack levels required when called:    2
  8797 ;; This function calls:
  8798 ;;		i2_lcd_write_command
  8799 ;; This function is called by:
  8800 ;;		_lcd_pix_color
  8801 ;;		i2_lcd_pix
  8802 ;; This function uses a non-reentrant model
  8803 ;;
  8804                           
  8805                           	psect	text50
  8806  001B10                     __ptext50:
  8807                           	opt stack 0
  8808  001B10                     i2_lcd_memory_start:
  8809                           	opt stack 17
  8810                           
  8811                           ;tft.c: 40: lcd_write_command(0x2C);
  8812                           
  8813                           ;incstack = 0
  8814  001B10  0E2C               	movlw	44
  8815  001B12  EC3F  F00D         	call	i2_lcd_write_command
  8816  001B16  0012               	return		;funcret
  8817  001B18                     __end_ofi2_lcd_memory_start:
  8818                           	opt stack 0
  8819                           tosu	equ	0xFFF
  8820                           tosh	equ	0xFFE
  8821                           tosl	equ	0xFFD
  8822                           pclatu	equ	0xFFB
  8823                           pclath	equ	0xFFA
  8824                           tblptru	equ	0xFF8
  8825                           tblptrh	equ	0xFF7
  8826                           tblptrl	equ	0xFF6
  8827                           tablat	equ	0xFF5
  8828                           prodh	equ	0xFF4
  8829                           prodl	equ	0xFF3
  8830                           intcon	equ	0xFF2
  8831                           intcon2	equ	0xFF1
  8832                           postinc0	equ	0xFEE
  8833                           fsr0h	equ	0xFEA
  8834                           fsr0l	equ	0xFE9
  8835                           wreg	equ	0xFE8
  8836                           postdec1	equ	0xFE5
  8837                           plusw1	equ	0xFE3
  8838                           fsr1h	equ	0xFE2
  8839                           fsr1l	equ	0xFE1
  8840                           indf2	equ	0xFDF
  8841                           postinc2	equ	0xFDE
  8842                           plusw2	equ	0xFDB
  8843                           fsr2h	equ	0xFDA
  8844                           fsr2l	equ	0xFD9
  8845                           status	equ	0xFD8
  8846                           
  8847 ;; *************** function i2_lcd_write_command *****************
  8848 ;; Defined at:
  8849 ;;		line 19 in file "tft.c"
  8850 ;; Parameters:    Size  Location     Type
  8851 ;;  cmd             1    wreg     unsigned char 
  8852 ;; Auto vars:     Size  Location     Type
  8853 ;;  cmd             1    1[COMRAM] unsigned char 
  8854 ;; Return value:  Size  Location     Type
  8855 ;;                  1    wreg      void 
  8856 ;; Registers used:
  8857 ;;		wreg, status,2, cstack
  8858 ;; Tracked objects:
  8859 ;;		On entry : 0/0
  8860 ;;		On exit  : 0/0
  8861 ;;		Unchanged: 0/0
  8862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8863 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8864 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8865 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8866 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8867 ;;Total ram usage:        1 bytes
  8868 ;; Hardware stack levels used:    1
  8869 ;; Hardware stack levels required when called:    1
  8870 ;; This function calls:
  8871 ;;		i2_lcd_write_bus
  8872 ;; This function is called by:
  8873 ;;		i2_lcd_set_address
  8874 ;;		i2_lcd_memory_start
  8875 ;; This function uses a non-reentrant model
  8876 ;;
  8877                           
  8878                           	psect	text51
  8879  001A7E                     __ptext51:
  8880                           	opt stack 0
  8881  001A7E                     i2_lcd_write_command:
  8882                           	opt stack 17
  8883                           
  8884                           ;incstack = 0
  8885                           ;i2lcd_write_command@cmd stored from wreg
  8886  001A7E  6E02               	movwf	i2lcd_write_command@cmd,c
  8887                           
  8888                           ;tft.c: 20: LATA2 = 0;
  8889  001A80  9489               	bcf	3977,2,c	;volatile
  8890                           
  8891                           ;tft.c: 21: lcd_write_bus(cmd);
  8892  001A82  5002               	movf	i2lcd_write_command@cmd,w,c
  8893  001A84  EC46  F00D         	call	i2_lcd_write_bus
  8894                           
  8895                           ;tft.c: 22: LATA2 = 1;
  8896  001A88  8489               	bsf	3977,2,c	;volatile
  8897  001A8A  0012               	return		;funcret
  8898  001A8C                     __end_ofi2_lcd_write_command:
  8899                           	opt stack 0
  8900                           tosu	equ	0xFFF
  8901                           tosh	equ	0xFFE
  8902                           tosl	equ	0xFFD
  8903                           pclatu	equ	0xFFB
  8904                           pclath	equ	0xFFA
  8905                           tblptru	equ	0xFF8
  8906                           tblptrh	equ	0xFF7
  8907                           tblptrl	equ	0xFF6
  8908                           tablat	equ	0xFF5
  8909                           prodh	equ	0xFF4
  8910                           prodl	equ	0xFF3
  8911                           intcon	equ	0xFF2
  8912                           intcon2	equ	0xFF1
  8913                           postinc0	equ	0xFEE
  8914                           fsr0h	equ	0xFEA
  8915                           fsr0l	equ	0xFE9
  8916                           wreg	equ	0xFE8
  8917                           postdec1	equ	0xFE5
  8918                           plusw1	equ	0xFE3
  8919                           fsr1h	equ	0xFE2
  8920                           fsr1l	equ	0xFE1
  8921                           indf2	equ	0xFDF
  8922                           postinc2	equ	0xFDE
  8923                           plusw2	equ	0xFDB
  8924                           fsr2h	equ	0xFDA
  8925                           fsr2l	equ	0xFD9
  8926                           status	equ	0xFD8
  8927                           
  8928 ;; *************** function i2_lcd_write_bus *****************
  8929 ;; Defined at:
  8930 ;;		line 12 in file "tft.c"
  8931 ;; Parameters:    Size  Location     Type
  8932 ;;  data            1    wreg     unsigned char 
  8933 ;; Auto vars:     Size  Location     Type
  8934 ;;  data            1    0[COMRAM] unsigned char 
  8935 ;; Return value:  Size  Location     Type
  8936 ;;                  1    wreg      void 
  8937 ;; Registers used:
  8938 ;;		wreg
  8939 ;; Tracked objects:
  8940 ;;		On entry : 0/0
  8941 ;;		On exit  : 0/0
  8942 ;;		Unchanged: 0/0
  8943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8944 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8945 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8946 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8947 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8948 ;;Total ram usage:        1 bytes
  8949 ;; Hardware stack levels used:    1
  8950 ;; This function calls:
  8951 ;;		Nothing
  8952 ;; This function is called by:
  8953 ;;		_lcd_pix_color
  8954 ;;		i2_lcd_write_command
  8955 ;;		i2_lcd_set_address
  8956 ;;		i2_lcd_pix
  8957 ;; This function uses a non-reentrant model
  8958 ;;
  8959                           
  8960                           	psect	text52
  8961  001A8C                     __ptext52:
  8962                           	opt stack 0
  8963  001A8C                     i2_lcd_write_bus:
  8964                           	opt stack 19
  8965                           
  8966                           ;incstack = 0
  8967                           ;i2lcd_write_bus@data stored from wreg
  8968  001A8C  6E01               	movwf	i2lcd_write_bus@data,c
  8969                           
  8970                           ;tft.c: 13: LATB = data;
  8971  001A8E  C001  FF8A         	movff	i2lcd_write_bus@data,3978	;volatile
  8972                           
  8973                           ;tft.c: 14: LATA3 = 0;
  8974  001A92  9689               	bcf	3977,3,c	;volatile
  8975                           
  8976                           ;tft.c: 16: LATA3 = 1;
  8977  001A94  8689               	bsf	3977,3,c	;volatile
  8978  001A96  0012               	return		;funcret
  8979  001A98                     __end_ofi2_lcd_write_bus:
  8980                           	opt stack 0
  8981                           tosu	equ	0xFFF
  8982                           tosh	equ	0xFFE
  8983                           tosl	equ	0xFFD
  8984                           pclatu	equ	0xFFB
  8985                           pclath	equ	0xFFA
  8986                           tblptru	equ	0xFF8
  8987                           tblptrh	equ	0xFF7
  8988                           tblptrl	equ	0xFF6
  8989                           tablat	equ	0xFF5
  8990                           prodh	equ	0xFF4
  8991                           prodl	equ	0xFF3
  8992                           intcon	equ	0xFF2
  8993                           intcon2	equ	0xFF1
  8994                           postinc0	equ	0xFEE
  8995                           fsr0h	equ	0xFEA
  8996                           fsr0l	equ	0xFE9
  8997                           wreg	equ	0xFE8
  8998                           postdec1	equ	0xFE5
  8999                           plusw1	equ	0xFE3
  9000                           fsr1h	equ	0xFE2
  9001                           fsr1l	equ	0xFE1
  9002                           indf2	equ	0xFDF
  9003                           postinc2	equ	0xFDE
  9004                           plusw2	equ	0xFDB
  9005                           fsr2h	equ	0xFDA
  9006                           fsr2l	equ	0xFD9
  9007                           status	equ	0xFD8
  9008                           
  9009 ;; *************** function i2___wmul *****************
  9010 ;; Defined at:
  9011 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  9012 ;; Parameters:    Size  Location     Type
  9013 ;;  multiplier      2    0[COMRAM] unsigned int 
  9014 ;;  multiplicand    2    2[COMRAM] unsigned int 
  9015 ;; Auto vars:     Size  Location     Type
  9016 ;;  __wmul          2    4[COMRAM] unsigned int 
  9017 ;; Return value:  Size  Location     Type
  9018 ;;                  2    0[COMRAM] unsigned int 
  9019 ;; Registers used:
  9020 ;;		wreg, status,2, status,0, prodl, prodh
  9021 ;; Tracked objects:
  9022 ;;		On entry : 0/0
  9023 ;;		On exit  : 0/0
  9024 ;;		Unchanged: 0/0
  9025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9026 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9027 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9029 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9030 ;;Total ram usage:        6 bytes
  9031 ;; Hardware stack levels used:    1
  9032 ;; This function calls:
  9033 ;;		Nothing
  9034 ;; This function is called by:
  9035 ;;		_lcd_pix_color
  9036 ;;		_lcd_text_color
  9037 ;;		i2_lcd_pix
  9038 ;;		i2_lcd_text
  9039 ;; This function uses a non-reentrant model
  9040 ;;
  9041                           
  9042                           	psect	text53
  9043  0018CC                     __ptext53:
  9044                           	opt stack 0
  9045  0018CC                     i2___wmul:
  9046                           	opt stack 19
  9047                           
  9048                           ;incstack = 0
  9049  0018CC  5001               	movf	i2___wmul@multiplier,w,c
  9050  0018CE  0203               	mulwf	i2___wmul@multiplicand,c
  9051  0018D0  CFF3 F005          	movff	prodl,i2___wmul@product
  9052  0018D4  CFF4 F006          	movff	prodh,i2___wmul@product+1
  9053  0018D8  5001               	movf	i2___wmul@multiplier,w,c
  9054  0018DA  0204               	mulwf	i2___wmul@multiplicand+1,c
  9055  0018DC  50F3               	movf	prodl,w,c
  9056  0018DE  2606               	addwf	i2___wmul@product+1,f,c
  9057  0018E0  5002               	movf	i2___wmul@multiplier+1,w,c
  9058  0018E2  0203               	mulwf	i2___wmul@multiplicand,c
  9059  0018E4  50F3               	movf	prodl,w,c
  9060  0018E6  2606               	addwf	i2___wmul@product+1,f,c
  9061  0018E8  C005  F001         	movff	i2___wmul@product,?i2___wmul
  9062  0018EC  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
  9063  0018F0  0012               	return	
  9064  0018F2                     __end_ofi2___wmul:
  9065                           	opt stack 0
  9066                           tosu	equ	0xFFF
  9067                           tosh	equ	0xFFE
  9068                           tosl	equ	0xFFD
  9069                           pclatu	equ	0xFFB
  9070                           pclath	equ	0xFFA
  9071                           tblptru	equ	0xFF8
  9072                           tblptrh	equ	0xFF7
  9073                           tblptrl	equ	0xFF6
  9074                           tablat	equ	0xFF5
  9075                           prodh	equ	0xFF4
  9076                           prodl	equ	0xFF3
  9077                           intcon	equ	0xFF2
  9078                           intcon2	equ	0xFF1
  9079                           postinc0	equ	0xFEE
  9080                           fsr0h	equ	0xFEA
  9081                           fsr0l	equ	0xFE9
  9082                           wreg	equ	0xFE8
  9083                           postdec1	equ	0xFE5
  9084                           plusw1	equ	0xFE3
  9085                           fsr1h	equ	0xFE2
  9086                           fsr1l	equ	0xFE1
  9087                           indf2	equ	0xFDF
  9088                           postinc2	equ	0xFDE
  9089                           plusw2	equ	0xFDB
  9090                           fsr2h	equ	0xFDA
  9091                           fsr2l	equ	0xFD9
  9092                           status	equ	0xFD8
  9093                           
  9094 ;; *************** function ___awdiv *****************
  9095 ;; Defined at:
  9096 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  9097 ;; Parameters:    Size  Location     Type
  9098 ;;  dividend        2    0[COMRAM] int 
  9099 ;;  divisor         2    2[COMRAM] int 
  9100 ;; Auto vars:     Size  Location     Type
  9101 ;;  quotient        2    6[COMRAM] int 
  9102 ;;  sign            1    5[COMRAM] unsigned char 
  9103 ;;  counter         1    4[COMRAM] unsigned char 
  9104 ;; Return value:  Size  Location     Type
  9105 ;;                  2    0[COMRAM] int 
  9106 ;; Registers used:
  9107 ;;		wreg, status,2, status,0
  9108 ;; Tracked objects:
  9109 ;;		On entry : 0/0
  9110 ;;		On exit  : 0/0
  9111 ;;		Unchanged: 0/0
  9112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9113 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9114 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9115 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9116 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9117 ;;Total ram usage:        8 bytes
  9118 ;; Hardware stack levels used:    1
  9119 ;; This function calls:
  9120 ;;		Nothing
  9121 ;; This function is called by:
  9122 ;;		_tmr2_custom_isr
  9123 ;; This function uses a non-reentrant model
  9124 ;;
  9125                           
  9126                           	psect	text54
  9127  001214                     __ptext54:
  9128                           	opt stack 0
  9129  001214                     ___awdiv:
  9130                           	opt stack 21
  9131                           
  9132                           ;incstack = 0
  9133  001214  0E00               	movlw	0
  9134  001216  6E06               	movwf	___awdiv@sign,c
  9135  001218  AE04               	btfss	___awdiv@divisor+1,7,c
  9136  00121A  D006               	goto	i2l1118
  9137  00121C  6C03               	negf	___awdiv@divisor,c
  9138  00121E  1E04               	comf	___awdiv@divisor+1,f,c
  9139  001220  B0D8               	btfsc	status,0,c
  9140  001222  2A04               	incf	___awdiv@divisor+1,f,c
  9141  001224  0E01               	movlw	1
  9142  001226  6E06               	movwf	___awdiv@sign,c
  9143  001228                     i2l1118:
  9144  001228  AE02               	btfss	___awdiv@dividend+1,7,c
  9145  00122A  D006               	goto	i2l1119
  9146  00122C  6C01               	negf	___awdiv@dividend,c
  9147  00122E  1E02               	comf	___awdiv@dividend+1,f,c
  9148  001230  B0D8               	btfsc	status,0,c
  9149  001232  2A02               	incf	___awdiv@dividend+1,f,c
  9150  001234  0E01               	movlw	1
  9151  001236  1A06               	xorwf	___awdiv@sign,f,c
  9152  001238                     i2l1119:
  9153  001238  0E00               	movlw	0
  9154  00123A  6E08               	movwf	___awdiv@quotient+1,c
  9155  00123C  0E00               	movlw	0
  9156  00123E  6E07               	movwf	___awdiv@quotient,c
  9157  001240  5003               	movf	___awdiv@divisor,w,c
  9158  001242  1004               	iorwf	___awdiv@divisor+1,w,c
  9159  001244  B4D8               	btfsc	status,2,c
  9160  001246  D01C               	goto	i2l1126
  9161  001248  0E01               	movlw	1
  9162  00124A  6E05               	movwf	___awdiv@counter,c
  9163  00124C  D004               	goto	i2l1121
  9164  00124E  90D8               	bcf	status,0,c
  9165  001250  3603               	rlcf	___awdiv@divisor,f,c
  9166  001252  3604               	rlcf	___awdiv@divisor+1,f,c
  9167  001254  2A05               	incf	___awdiv@counter,f,c
  9168  001256                     i2l1121:
  9169  001256  AE04               	btfss	___awdiv@divisor+1,7,c
  9170  001258  D7FA               	goto	i2l1122
  9171  00125A                     i2u229_40:
  9172  00125A  90D8               	bcf	status,0,c
  9173  00125C  3607               	rlcf	___awdiv@quotient,f,c
  9174  00125E  3608               	rlcf	___awdiv@quotient+1,f,c
  9175  001260  5003               	movf	___awdiv@divisor,w,c
  9176  001262  5C01               	subwf	___awdiv@dividend,w,c
  9177  001264  5004               	movf	___awdiv@divisor+1,w,c
  9178  001266  5802               	subwfb	___awdiv@dividend+1,w,c
  9179  001268  A0D8               	btfss	status,0,c
  9180  00126A  D005               	goto	i2l1125
  9181  00126C  5003               	movf	___awdiv@divisor,w,c
  9182  00126E  5E01               	subwf	___awdiv@dividend,f,c
  9183  001270  5004               	movf	___awdiv@divisor+1,w,c
  9184  001272  5A02               	subwfb	___awdiv@dividend+1,f,c
  9185  001274  8007               	bsf	___awdiv@quotient,0,c
  9186  001276                     i2l1125:
  9187  001276  90D8               	bcf	status,0,c
  9188  001278  3204               	rrcf	___awdiv@divisor+1,f,c
  9189  00127A  3203               	rrcf	___awdiv@divisor,f,c
  9190  00127C  2E05               	decfsz	___awdiv@counter,f,c
  9191  00127E  D7ED               	goto	i2u229_40
  9192  001280                     i2l1126:
  9193  001280  5006               	movf	___awdiv@sign,w,c
  9194  001282  B4D8               	btfsc	status,2,c
  9195  001284  D004               	goto	i2l1127
  9196  001286  6C07               	negf	___awdiv@quotient,c
  9197  001288  1E08               	comf	___awdiv@quotient+1,f,c
  9198  00128A  B0D8               	btfsc	status,0,c
  9199  00128C  2A08               	incf	___awdiv@quotient+1,f,c
  9200  00128E                     i2l1127:
  9201  00128E  C007  F001         	movff	___awdiv@quotient,?___awdiv
  9202  001292  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  9203  001296  0012               	return	
  9204  001298                     __end_of___awdiv:
  9205                           	opt stack 0
  9206                           tosu	equ	0xFFF
  9207                           tosh	equ	0xFFE
  9208                           tosl	equ	0xFFD
  9209                           pclatu	equ	0xFFB
  9210                           pclath	equ	0xFFA
  9211                           tblptru	equ	0xFF8
  9212                           tblptrh	equ	0xFF7
  9213                           tblptrl	equ	0xFF6
  9214                           tablat	equ	0xFF5
  9215                           prodh	equ	0xFF4
  9216                           prodl	equ	0xFF3
  9217                           intcon	equ	0xFF2
  9218                           intcon2	equ	0xFF1
  9219                           postinc0	equ	0xFEE
  9220                           fsr0h	equ	0xFEA
  9221                           fsr0l	equ	0xFE9
  9222                           wreg	equ	0xFE8
  9223                           postdec1	equ	0xFE5
  9224                           plusw1	equ	0xFE3
  9225                           fsr1h	equ	0xFE2
  9226                           fsr1l	equ	0xFE1
  9227                           indf2	equ	0xFDF
  9228                           postinc2	equ	0xFDE
  9229                           plusw2	equ	0xFDB
  9230                           fsr2h	equ	0xFDA
  9231                           fsr2l	equ	0xFD9
  9232                           status	equ	0xFD8
  9233                           
  9234 ;; *************** function _PIN_MANAGER_IOC *****************
  9235 ;; Defined at:
  9236 ;;		line 126 in file "mcc_generated_files/pin_manager.c"
  9237 ;; Parameters:    Size  Location     Type
  9238 ;;		None
  9239 ;; Auto vars:     Size  Location     Type
  9240 ;;		None
  9241 ;; Return value:  Size  Location     Type
  9242 ;;                  1    wreg      void 
  9243 ;; Registers used:
  9244 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  9245 ;; Tracked objects:
  9246 ;;		On entry : 0/0
  9247 ;;		On exit  : 0/0
  9248 ;;		Unchanged: 0/0
  9249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9250 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9251 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9252 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9253 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9254 ;;Total ram usage:        0 bytes
  9255 ;; Hardware stack levels used:    1
  9256 ;; Hardware stack levels required when called:    2
  9257 ;; This function calls:
  9258 ;;		_IOCB4_ISR
  9259 ;;		_IOCB5_ISR
  9260 ;;		_IOCB6_ISR
  9261 ;;		_IOCB7_ISR
  9262 ;; This function is called by:
  9263 ;;		_INTERRUPT_InterruptManager
  9264 ;; This function uses a non-reentrant model
  9265 ;;
  9266                           
  9267                           	psect	text55
  9268  0019F0                     __ptext55:
  9269                           	opt stack 0
  9270  0019F0                     _PIN_MANAGER_IOC:
  9271                           	opt stack 22
  9272                           
  9273                           ;pin_manager.c: 129: if(PORTBbits.RB4 == 1)
  9274                           
  9275                           ;incstack = 0
  9276  0019F0  B881               	btfsc	3969,4,c	;volatile
  9277                           
  9278                           ;pin_manager.c: 130: {
  9279                           ;pin_manager.c: 131: IOCB4_ISR();
  9280  0019F2  ECD9  F00C         	call	_IOCB4_ISR	;wreg free
  9281                           
  9282                           ;pin_manager.c: 132: }
  9283                           ;pin_manager.c: 134: if(PORTBbits.RB5 == 1)
  9284  0019F6  BA81               	btfsc	3969,5,c	;volatile
  9285                           
  9286                           ;pin_manager.c: 135: {
  9287                           ;pin_manager.c: 136: IOCB5_ISR();
  9288  0019F8  ECC9  F00C         	call	_IOCB5_ISR	;wreg free
  9289                           
  9290                           ;pin_manager.c: 137: }
  9291                           ;pin_manager.c: 139: if(PORTBbits.RB6 == 1)
  9292  0019FC  BC81               	btfsc	3969,6,c	;volatile
  9293                           
  9294                           ;pin_manager.c: 140: {
  9295                           ;pin_manager.c: 141: IOCB6_ISR();
  9296  0019FE  ECB9  F00C         	call	_IOCB6_ISR	;wreg free
  9297                           
  9298                           ;pin_manager.c: 142: }
  9299                           ;pin_manager.c: 144: if(PORTBbits.RB7 == 1)
  9300  001A02  BE81               	btfsc	3969,7,c	;volatile
  9301                           
  9302                           ;pin_manager.c: 145: {
  9303                           ;pin_manager.c: 146: IOCB7_ISR();
  9304  001A04  ECA9  F00C         	call	_IOCB7_ISR	;wreg free
  9305                           
  9306                           ;pin_manager.c: 147: }
  9307                           ;pin_manager.c: 150: INTCONbits.RBIF = 0;
  9308  001A08  90F2               	bcf	intcon,0,c	;volatile
  9309  001A0A  0012               	return		;funcret
  9310  001A0C                     __end_of_PIN_MANAGER_IOC:
  9311                           	opt stack 0
  9312                           tosu	equ	0xFFF
  9313                           tosh	equ	0xFFE
  9314                           tosl	equ	0xFFD
  9315                           pclatu	equ	0xFFB
  9316                           pclath	equ	0xFFA
  9317                           tblptru	equ	0xFF8
  9318                           tblptrh	equ	0xFF7
  9319                           tblptrl	equ	0xFF6
  9320                           tablat	equ	0xFF5
  9321                           prodh	equ	0xFF4
  9322                           prodl	equ	0xFF3
  9323                           intcon	equ	0xFF2
  9324                           intcon2	equ	0xFF1
  9325                           postinc0	equ	0xFEE
  9326                           fsr0h	equ	0xFEA
  9327                           fsr0l	equ	0xFE9
  9328                           wreg	equ	0xFE8
  9329                           postdec1	equ	0xFE5
  9330                           plusw1	equ	0xFE3
  9331                           fsr1h	equ	0xFE2
  9332                           fsr1l	equ	0xFE1
  9333                           indf2	equ	0xFDF
  9334                           postinc2	equ	0xFDE
  9335                           plusw2	equ	0xFDB
  9336                           fsr2h	equ	0xFDA
  9337                           fsr2l	equ	0xFD9
  9338                           status	equ	0xFD8
  9339                           
  9340 ;; *************** function _IOCB7_ISR *****************
  9341 ;; Defined at:
  9342 ;;		line 243 in file "mcc_generated_files/pin_manager.c"
  9343 ;; Parameters:    Size  Location     Type
  9344 ;;		None
  9345 ;; Auto vars:     Size  Location     Type
  9346 ;;		None
  9347 ;; Return value:  Size  Location     Type
  9348 ;;                  1    wreg      void 
  9349 ;; Registers used:
  9350 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  9351 ;; Tracked objects:
  9352 ;;		On entry : 0/0
  9353 ;;		On exit  : 0/0
  9354 ;;		Unchanged: 0/0
  9355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9357 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9359 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9360 ;;Total ram usage:        0 bytes
  9361 ;; Hardware stack levels used:    1
  9362 ;; Hardware stack levels required when called:    1
  9363 ;; This function calls:
  9364 ;;		Absolute function
  9365 ;;		_IOCB7_DefaultInterruptHandler
  9366 ;; This function is called by:
  9367 ;;		_PIN_MANAGER_IOC
  9368 ;; This function uses a non-reentrant model
  9369 ;;
  9370                           
  9371                           	psect	text56
  9372  001952                     __ptext56:
  9373                           	opt stack 0
  9374  001952                     _IOCB7_ISR:
  9375                           	opt stack 22
  9376                           
  9377                           ;pin_manager.c: 248: if(IOCB7_InterruptHandler)
  9378                           
  9379                           ;incstack = 0
  9380  001952  0100               	movlb	0	; () banked
  9381  001954  51E9               	movf	_IOCB7_InterruptHandler& (0+255),w,b
  9382  001956  11EA               	iorwf	(_IOCB7_InterruptHandler+1)& (0+255),w,b
  9383  001958  B4D8               	btfsc	status,2,c
  9384  00195A  0012               	return	
  9385                           
  9386                           ; BSR set to: 0
  9387                           ;pin_manager.c: 249: {
  9388                           ;pin_manager.c: 250: IOCB7_InterruptHandler();
  9389  00195C  D801               	call	i2u276_48
  9390  00195E  0012               	return	
  9391  001960                     i2u276_48:
  9392  001960  0005               	push	
  9393  001962  6EFA               	movwf	pclath,c
  9394  001964  51E9               	movf	_IOCB7_InterruptHandler& (0+255),w,b
  9395  001966  6EFD               	movwf	tosl,c
  9396  001968  51EA               	movf	(_IOCB7_InterruptHandler+1)& (0+255),w,b
  9397  00196A  6EFE               	movwf	tosh,c
  9398  00196C  6AFF               	clrf	tosu,c
  9399  00196E  50FA               	movf	pclath,w,c
  9400  001970  0012               	return		;indir
  9401  001972                     __end_of_IOCB7_ISR:
  9402                           	opt stack 0
  9403                           tosu	equ	0xFFF
  9404                           tosh	equ	0xFFE
  9405                           tosl	equ	0xFFD
  9406                           pclatu	equ	0xFFB
  9407                           pclath	equ	0xFFA
  9408                           tblptru	equ	0xFF8
  9409                           tblptrh	equ	0xFF7
  9410                           tblptrl	equ	0xFF6
  9411                           tablat	equ	0xFF5
  9412                           prodh	equ	0xFF4
  9413                           prodl	equ	0xFF3
  9414                           intcon	equ	0xFF2
  9415                           intcon2	equ	0xFF1
  9416                           postinc0	equ	0xFEE
  9417                           fsr0h	equ	0xFEA
  9418                           fsr0l	equ	0xFE9
  9419                           wreg	equ	0xFE8
  9420                           postdec1	equ	0xFE5
  9421                           plusw1	equ	0xFE3
  9422                           fsr1h	equ	0xFE2
  9423                           fsr1l	equ	0xFE1
  9424                           indf2	equ	0xFDF
  9425                           postinc2	equ	0xFDE
  9426                           plusw2	equ	0xFDB
  9427                           fsr2h	equ	0xFDA
  9428                           fsr2l	equ	0xFD9
  9429                           status	equ	0xFD8
  9430                           
  9431 ;; *************** function _IOCB7_DefaultInterruptHandler *****************
  9432 ;; Defined at:
  9433 ;;		line 264 in file "mcc_generated_files/pin_manager.c"
  9434 ;; Parameters:    Size  Location     Type
  9435 ;;		None
  9436 ;; Auto vars:     Size  Location     Type
  9437 ;;		None
  9438 ;; Return value:  Size  Location     Type
  9439 ;;                  1    wreg      void 
  9440 ;; Registers used:
  9441 ;;		None
  9442 ;; Tracked objects:
  9443 ;;		On entry : 0/0
  9444 ;;		On exit  : 0/0
  9445 ;;		Unchanged: 0/0
  9446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9447 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9448 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9449 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9450 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9451 ;;Total ram usage:        0 bytes
  9452 ;; Hardware stack levels used:    1
  9453 ;; This function calls:
  9454 ;;		Nothing
  9455 ;; This function is called by:
  9456 ;;		_PIN_MANAGER_Initialize
  9457 ;;		_IOCB7_ISR
  9458 ;; This function uses a non-reentrant model
  9459 ;;
  9460                           
  9461                           	psect	text57
  9462  001B26                     __ptext57:
  9463                           	opt stack 0
  9464  001B26                     _IOCB7_DefaultInterruptHandler:
  9465                           	opt stack 22
  9466                           
  9467                           ;incstack = 0
  9468  001B26  0012               	return		;funcret
  9469  001B28                     __end_of_IOCB7_DefaultInterruptHandler:
  9470                           	opt stack 0
  9471                           tosu	equ	0xFFF
  9472                           tosh	equ	0xFFE
  9473                           tosl	equ	0xFFD
  9474                           pclatu	equ	0xFFB
  9475                           pclath	equ	0xFFA
  9476                           tblptru	equ	0xFF8
  9477                           tblptrh	equ	0xFF7
  9478                           tblptrl	equ	0xFF6
  9479                           tablat	equ	0xFF5
  9480                           prodh	equ	0xFF4
  9481                           prodl	equ	0xFF3
  9482                           intcon	equ	0xFF2
  9483                           intcon2	equ	0xFF1
  9484                           postinc0	equ	0xFEE
  9485                           fsr0h	equ	0xFEA
  9486                           fsr0l	equ	0xFE9
  9487                           wreg	equ	0xFE8
  9488                           postdec1	equ	0xFE5
  9489                           plusw1	equ	0xFE3
  9490                           fsr1h	equ	0xFE2
  9491                           fsr1l	equ	0xFE1
  9492                           indf2	equ	0xFDF
  9493                           postinc2	equ	0xFDE
  9494                           plusw2	equ	0xFDB
  9495                           fsr2h	equ	0xFDA
  9496                           fsr2l	equ	0xFD9
  9497                           status	equ	0xFD8
  9498                           
  9499 ;; *************** function _IOCB6_ISR *****************
  9500 ;; Defined at:
  9501 ;;		line 214 in file "mcc_generated_files/pin_manager.c"
  9502 ;; Parameters:    Size  Location     Type
  9503 ;;		None
  9504 ;; Auto vars:     Size  Location     Type
  9505 ;;		None
  9506 ;; Return value:  Size  Location     Type
  9507 ;;                  1    wreg      void 
  9508 ;; Registers used:
  9509 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  9510 ;; Tracked objects:
  9511 ;;		On entry : 0/0
  9512 ;;		On exit  : 0/0
  9513 ;;		Unchanged: 0/0
  9514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9516 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9518 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9519 ;;Total ram usage:        0 bytes
  9520 ;; Hardware stack levels used:    1
  9521 ;; Hardware stack levels required when called:    1
  9522 ;; This function calls:
  9523 ;;		Absolute function
  9524 ;;		_IOCB6_DefaultInterruptHandler
  9525 ;; This function is called by:
  9526 ;;		_PIN_MANAGER_IOC
  9527 ;; This function uses a non-reentrant model
  9528 ;;
  9529                           
  9530                           	psect	text58
  9531  001972                     __ptext58:
  9532                           	opt stack 0
  9533  001972                     _IOCB6_ISR:
  9534                           	opt stack 22
  9535                           
  9536                           ;pin_manager.c: 219: if(IOCB6_InterruptHandler)
  9537                           
  9538                           ;incstack = 0
  9539  001972  0100               	movlb	0	; () banked
  9540  001974  51EB               	movf	_IOCB6_InterruptHandler& (0+255),w,b
  9541  001976  11EC               	iorwf	(_IOCB6_InterruptHandler+1)& (0+255),w,b
  9542  001978  B4D8               	btfsc	status,2,c
  9543  00197A  0012               	return	
  9544                           
  9545                           ; BSR set to: 0
  9546                           ;pin_manager.c: 220: {
  9547                           ;pin_manager.c: 221: IOCB6_InterruptHandler();
  9548  00197C  D801               	call	i2u274_48
  9549  00197E  0012               	return	
  9550  001980                     i2u274_48:
  9551  001980  0005               	push	
  9552  001982  6EFA               	movwf	pclath,c
  9553  001984  51EB               	movf	_IOCB6_InterruptHandler& (0+255),w,b
  9554  001986  6EFD               	movwf	tosl,c
  9555  001988  51EC               	movf	(_IOCB6_InterruptHandler+1)& (0+255),w,b
  9556  00198A  6EFE               	movwf	tosh,c
  9557  00198C  6AFF               	clrf	tosu,c
  9558  00198E  50FA               	movf	pclath,w,c
  9559  001990  0012               	return		;indir
  9560  001992                     __end_of_IOCB6_ISR:
  9561                           	opt stack 0
  9562                           tosu	equ	0xFFF
  9563                           tosh	equ	0xFFE
  9564                           tosl	equ	0xFFD
  9565                           pclatu	equ	0xFFB
  9566                           pclath	equ	0xFFA
  9567                           tblptru	equ	0xFF8
  9568                           tblptrh	equ	0xFF7
  9569                           tblptrl	equ	0xFF6
  9570                           tablat	equ	0xFF5
  9571                           prodh	equ	0xFF4
  9572                           prodl	equ	0xFF3
  9573                           intcon	equ	0xFF2
  9574                           intcon2	equ	0xFF1
  9575                           postinc0	equ	0xFEE
  9576                           fsr0h	equ	0xFEA
  9577                           fsr0l	equ	0xFE9
  9578                           wreg	equ	0xFE8
  9579                           postdec1	equ	0xFE5
  9580                           plusw1	equ	0xFE3
  9581                           fsr1h	equ	0xFE2
  9582                           fsr1l	equ	0xFE1
  9583                           indf2	equ	0xFDF
  9584                           postinc2	equ	0xFDE
  9585                           plusw2	equ	0xFDB
  9586                           fsr2h	equ	0xFDA
  9587                           fsr2l	equ	0xFD9
  9588                           status	equ	0xFD8
  9589                           
  9590 ;; *************** function _IOCB6_DefaultInterruptHandler *****************
  9591 ;; Defined at:
  9592 ;;		line 235 in file "mcc_generated_files/pin_manager.c"
  9593 ;; Parameters:    Size  Location     Type
  9594 ;;		None
  9595 ;; Auto vars:     Size  Location     Type
  9596 ;;		None
  9597 ;; Return value:  Size  Location     Type
  9598 ;;                  1    wreg      void 
  9599 ;; Registers used:
  9600 ;;		None
  9601 ;; Tracked objects:
  9602 ;;		On entry : 0/0
  9603 ;;		On exit  : 0/0
  9604 ;;		Unchanged: 0/0
  9605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9607 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9609 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9610 ;;Total ram usage:        0 bytes
  9611 ;; Hardware stack levels used:    1
  9612 ;; This function calls:
  9613 ;;		Nothing
  9614 ;; This function is called by:
  9615 ;;		_PIN_MANAGER_Initialize
  9616 ;;		_IOCB6_ISR
  9617 ;; This function uses a non-reentrant model
  9618 ;;
  9619                           
  9620                           	psect	text59
  9621  001B28                     __ptext59:
  9622                           	opt stack 0
  9623  001B28                     _IOCB6_DefaultInterruptHandler:
  9624                           	opt stack 22
  9625                           
  9626                           ;incstack = 0
  9627  001B28  0012               	return		;funcret
  9628  001B2A                     __end_of_IOCB6_DefaultInterruptHandler:
  9629                           	opt stack 0
  9630                           tosu	equ	0xFFF
  9631                           tosh	equ	0xFFE
  9632                           tosl	equ	0xFFD
  9633                           pclatu	equ	0xFFB
  9634                           pclath	equ	0xFFA
  9635                           tblptru	equ	0xFF8
  9636                           tblptrh	equ	0xFF7
  9637                           tblptrl	equ	0xFF6
  9638                           tablat	equ	0xFF5
  9639                           prodh	equ	0xFF4
  9640                           prodl	equ	0xFF3
  9641                           intcon	equ	0xFF2
  9642                           intcon2	equ	0xFF1
  9643                           postinc0	equ	0xFEE
  9644                           fsr0h	equ	0xFEA
  9645                           fsr0l	equ	0xFE9
  9646                           wreg	equ	0xFE8
  9647                           postdec1	equ	0xFE5
  9648                           plusw1	equ	0xFE3
  9649                           fsr1h	equ	0xFE2
  9650                           fsr1l	equ	0xFE1
  9651                           indf2	equ	0xFDF
  9652                           postinc2	equ	0xFDE
  9653                           plusw2	equ	0xFDB
  9654                           fsr2h	equ	0xFDA
  9655                           fsr2l	equ	0xFD9
  9656                           status	equ	0xFD8
  9657                           
  9658 ;; *************** function _IOCB5_ISR *****************
  9659 ;; Defined at:
  9660 ;;		line 185 in file "mcc_generated_files/pin_manager.c"
  9661 ;; Parameters:    Size  Location     Type
  9662 ;;		None
  9663 ;; Auto vars:     Size  Location     Type
  9664 ;;		None
  9665 ;; Return value:  Size  Location     Type
  9666 ;;                  1    wreg      void 
  9667 ;; Registers used:
  9668 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  9669 ;; Tracked objects:
  9670 ;;		On entry : 0/0
  9671 ;;		On exit  : 0/0
  9672 ;;		Unchanged: 0/0
  9673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9675 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9677 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9678 ;;Total ram usage:        0 bytes
  9679 ;; Hardware stack levels used:    1
  9680 ;; Hardware stack levels required when called:    1
  9681 ;; This function calls:
  9682 ;;		Absolute function
  9683 ;;		_IOCB5_DefaultInterruptHandler
  9684 ;; This function is called by:
  9685 ;;		_PIN_MANAGER_IOC
  9686 ;; This function uses a non-reentrant model
  9687 ;;
  9688                           
  9689                           	psect	text60
  9690  001992                     __ptext60:
  9691                           	opt stack 0
  9692  001992                     _IOCB5_ISR:
  9693                           	opt stack 22
  9694                           
  9695                           ;pin_manager.c: 190: if(IOCB5_InterruptHandler)
  9696                           
  9697                           ;incstack = 0
  9698  001992  0100               	movlb	0	; () banked
  9699  001994  51ED               	movf	_IOCB5_InterruptHandler& (0+255),w,b
  9700  001996  11EE               	iorwf	(_IOCB5_InterruptHandler+1)& (0+255),w,b
  9701  001998  B4D8               	btfsc	status,2,c
  9702  00199A  0012               	return	
  9703                           
  9704                           ; BSR set to: 0
  9705                           ;pin_manager.c: 191: {
  9706                           ;pin_manager.c: 192: IOCB5_InterruptHandler();
  9707  00199C  D801               	call	i2u272_48
  9708  00199E  0012               	return	
  9709  0019A0                     i2u272_48:
  9710  0019A0  0005               	push	
  9711  0019A2  6EFA               	movwf	pclath,c
  9712  0019A4  51ED               	movf	_IOCB5_InterruptHandler& (0+255),w,b
  9713  0019A6  6EFD               	movwf	tosl,c
  9714  0019A8  51EE               	movf	(_IOCB5_InterruptHandler+1)& (0+255),w,b
  9715  0019AA  6EFE               	movwf	tosh,c
  9716  0019AC  6AFF               	clrf	tosu,c
  9717  0019AE  50FA               	movf	pclath,w,c
  9718  0019B0  0012               	return		;indir
  9719  0019B2                     __end_of_IOCB5_ISR:
  9720                           	opt stack 0
  9721                           tosu	equ	0xFFF
  9722                           tosh	equ	0xFFE
  9723                           tosl	equ	0xFFD
  9724                           pclatu	equ	0xFFB
  9725                           pclath	equ	0xFFA
  9726                           tblptru	equ	0xFF8
  9727                           tblptrh	equ	0xFF7
  9728                           tblptrl	equ	0xFF6
  9729                           tablat	equ	0xFF5
  9730                           prodh	equ	0xFF4
  9731                           prodl	equ	0xFF3
  9732                           intcon	equ	0xFF2
  9733                           intcon2	equ	0xFF1
  9734                           postinc0	equ	0xFEE
  9735                           fsr0h	equ	0xFEA
  9736                           fsr0l	equ	0xFE9
  9737                           wreg	equ	0xFE8
  9738                           postdec1	equ	0xFE5
  9739                           plusw1	equ	0xFE3
  9740                           fsr1h	equ	0xFE2
  9741                           fsr1l	equ	0xFE1
  9742                           indf2	equ	0xFDF
  9743                           postinc2	equ	0xFDE
  9744                           plusw2	equ	0xFDB
  9745                           fsr2h	equ	0xFDA
  9746                           fsr2l	equ	0xFD9
  9747                           status	equ	0xFD8
  9748                           
  9749 ;; *************** function _IOCB5_DefaultInterruptHandler *****************
  9750 ;; Defined at:
  9751 ;;		line 206 in file "mcc_generated_files/pin_manager.c"
  9752 ;; Parameters:    Size  Location     Type
  9753 ;;		None
  9754 ;; Auto vars:     Size  Location     Type
  9755 ;;		None
  9756 ;; Return value:  Size  Location     Type
  9757 ;;                  1    wreg      void 
  9758 ;; Registers used:
  9759 ;;		None
  9760 ;; Tracked objects:
  9761 ;;		On entry : 0/0
  9762 ;;		On exit  : 0/0
  9763 ;;		Unchanged: 0/0
  9764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9766 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9768 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9769 ;;Total ram usage:        0 bytes
  9770 ;; Hardware stack levels used:    1
  9771 ;; This function calls:
  9772 ;;		Nothing
  9773 ;; This function is called by:
  9774 ;;		_PIN_MANAGER_Initialize
  9775 ;;		_IOCB5_ISR
  9776 ;; This function uses a non-reentrant model
  9777 ;;
  9778                           
  9779                           	psect	text61
  9780  001B2A                     __ptext61:
  9781                           	opt stack 0
  9782  001B2A                     _IOCB5_DefaultInterruptHandler:
  9783                           	opt stack 22
  9784                           
  9785                           ;incstack = 0
  9786  001B2A  0012               	return		;funcret
  9787  001B2C                     __end_of_IOCB5_DefaultInterruptHandler:
  9788                           	opt stack 0
  9789                           tosu	equ	0xFFF
  9790                           tosh	equ	0xFFE
  9791                           tosl	equ	0xFFD
  9792                           pclatu	equ	0xFFB
  9793                           pclath	equ	0xFFA
  9794                           tblptru	equ	0xFF8
  9795                           tblptrh	equ	0xFF7
  9796                           tblptrl	equ	0xFF6
  9797                           tablat	equ	0xFF5
  9798                           prodh	equ	0xFF4
  9799                           prodl	equ	0xFF3
  9800                           intcon	equ	0xFF2
  9801                           intcon2	equ	0xFF1
  9802                           postinc0	equ	0xFEE
  9803                           fsr0h	equ	0xFEA
  9804                           fsr0l	equ	0xFE9
  9805                           wreg	equ	0xFE8
  9806                           postdec1	equ	0xFE5
  9807                           plusw1	equ	0xFE3
  9808                           fsr1h	equ	0xFE2
  9809                           fsr1l	equ	0xFE1
  9810                           indf2	equ	0xFDF
  9811                           postinc2	equ	0xFDE
  9812                           plusw2	equ	0xFDB
  9813                           fsr2h	equ	0xFDA
  9814                           fsr2l	equ	0xFD9
  9815                           status	equ	0xFD8
  9816                           
  9817 ;; *************** function _IOCB4_ISR *****************
  9818 ;; Defined at:
  9819 ;;		line 156 in file "mcc_generated_files/pin_manager.c"
  9820 ;; Parameters:    Size  Location     Type
  9821 ;;		None
  9822 ;; Auto vars:     Size  Location     Type
  9823 ;;		None
  9824 ;; Return value:  Size  Location     Type
  9825 ;;                  1    wreg      void 
  9826 ;; Registers used:
  9827 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  9828 ;; Tracked objects:
  9829 ;;		On entry : 0/0
  9830 ;;		On exit  : 0/0
  9831 ;;		Unchanged: 0/0
  9832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9834 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9836 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9837 ;;Total ram usage:        0 bytes
  9838 ;; Hardware stack levels used:    1
  9839 ;; Hardware stack levels required when called:    1
  9840 ;; This function calls:
  9841 ;;		Absolute function
  9842 ;;		_IOCB4_DefaultInterruptHandler
  9843 ;; This function is called by:
  9844 ;;		_PIN_MANAGER_IOC
  9845 ;; This function uses a non-reentrant model
  9846 ;;
  9847                           
  9848                           	psect	text62
  9849  0019B2                     __ptext62:
  9850                           	opt stack 0
  9851  0019B2                     _IOCB4_ISR:
  9852                           	opt stack 22
  9853                           
  9854                           ;pin_manager.c: 161: if(IOCB4_InterruptHandler)
  9855                           
  9856                           ;incstack = 0
  9857  0019B2  0100               	movlb	0	; () banked
  9858  0019B4  51EF               	movf	_IOCB4_InterruptHandler& (0+255),w,b
  9859  0019B6  11F0               	iorwf	(_IOCB4_InterruptHandler+1)& (0+255),w,b
  9860  0019B8  B4D8               	btfsc	status,2,c
  9861  0019BA  0012               	return	
  9862                           
  9863                           ; BSR set to: 0
  9864                           ;pin_manager.c: 162: {
  9865                           ;pin_manager.c: 163: IOCB4_InterruptHandler();
  9866  0019BC  D801               	call	i2u270_48
  9867  0019BE  0012               	return	
  9868  0019C0                     i2u270_48:
  9869  0019C0  0005               	push	
  9870  0019C2  6EFA               	movwf	pclath,c
  9871  0019C4  51EF               	movf	_IOCB4_InterruptHandler& (0+255),w,b
  9872  0019C6  6EFD               	movwf	tosl,c
  9873  0019C8  51F0               	movf	(_IOCB4_InterruptHandler+1)& (0+255),w,b
  9874  0019CA  6EFE               	movwf	tosh,c
  9875  0019CC  6AFF               	clrf	tosu,c
  9876  0019CE  50FA               	movf	pclath,w,c
  9877  0019D0  0012               	return		;indir
  9878  0019D2                     __end_of_IOCB4_ISR:
  9879                           	opt stack 0
  9880                           tosu	equ	0xFFF
  9881                           tosh	equ	0xFFE
  9882                           tosl	equ	0xFFD
  9883                           pclatu	equ	0xFFB
  9884                           pclath	equ	0xFFA
  9885                           tblptru	equ	0xFF8
  9886                           tblptrh	equ	0xFF7
  9887                           tblptrl	equ	0xFF6
  9888                           tablat	equ	0xFF5
  9889                           prodh	equ	0xFF4
  9890                           prodl	equ	0xFF3
  9891                           intcon	equ	0xFF2
  9892                           intcon2	equ	0xFF1
  9893                           postinc0	equ	0xFEE
  9894                           fsr0h	equ	0xFEA
  9895                           fsr0l	equ	0xFE9
  9896                           wreg	equ	0xFE8
  9897                           postdec1	equ	0xFE5
  9898                           plusw1	equ	0xFE3
  9899                           fsr1h	equ	0xFE2
  9900                           fsr1l	equ	0xFE1
  9901                           indf2	equ	0xFDF
  9902                           postinc2	equ	0xFDE
  9903                           plusw2	equ	0xFDB
  9904                           fsr2h	equ	0xFDA
  9905                           fsr2l	equ	0xFD9
  9906                           status	equ	0xFD8
  9907                           
  9908 ;; *************** function _IOCB4_DefaultInterruptHandler *****************
  9909 ;; Defined at:
  9910 ;;		line 177 in file "mcc_generated_files/pin_manager.c"
  9911 ;; Parameters:    Size  Location     Type
  9912 ;;		None
  9913 ;; Auto vars:     Size  Location     Type
  9914 ;;		None
  9915 ;; Return value:  Size  Location     Type
  9916 ;;                  1    wreg      void 
  9917 ;; Registers used:
  9918 ;;		None
  9919 ;; Tracked objects:
  9920 ;;		On entry : 0/0
  9921 ;;		On exit  : 0/0
  9922 ;;		Unchanged: 0/0
  9923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9925 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9926 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9927 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9928 ;;Total ram usage:        0 bytes
  9929 ;; Hardware stack levels used:    1
  9930 ;; This function calls:
  9931 ;;		Nothing
  9932 ;; This function is called by:
  9933 ;;		_PIN_MANAGER_Initialize
  9934 ;;		_IOCB4_ISR
  9935 ;; This function uses a non-reentrant model
  9936 ;;
  9937                           
  9938                           	psect	text63
  9939  001B2C                     __ptext63:
  9940                           	opt stack 0
  9941  001B2C                     _IOCB4_DefaultInterruptHandler:
  9942                           	opt stack 22
  9943                           
  9944                           ;incstack = 0
  9945  001B2C  0012               	return		;funcret
  9946  001B2E                     __end_of_IOCB4_DefaultInterruptHandler:
  9947                           	opt stack 0
  9948                           tosu	equ	0xFFF
  9949                           tosh	equ	0xFFE
  9950                           tosl	equ	0xFFD
  9951                           pclatu	equ	0xFFB
  9952                           pclath	equ	0xFFA
  9953                           tblptru	equ	0xFF8
  9954                           tblptrh	equ	0xFF7
  9955                           tblptrl	equ	0xFF6
  9956                           tablat	equ	0xFF5
  9957                           prodh	equ	0xFF4
  9958                           prodl	equ	0xFF3
  9959                           intcon	equ	0xFF2
  9960                           intcon2	equ	0xFF1
  9961                           postinc0	equ	0xFEE
  9962                           fsr0h	equ	0xFEA
  9963                           fsr0l	equ	0xFE9
  9964                           wreg	equ	0xFE8
  9965                           postdec1	equ	0xFE5
  9966                           plusw1	equ	0xFE3
  9967                           fsr1h	equ	0xFE2
  9968                           fsr1l	equ	0xFE1
  9969                           indf2	equ	0xFDF
  9970                           postinc2	equ	0xFDE
  9971                           plusw2	equ	0xFDB
  9972                           fsr2h	equ	0xFDA
  9973                           fsr2l	equ	0xFD9
  9974                           status	equ	0xFD8
  9975                           
  9976 ;; *************** function _I2C_ISR *****************
  9977 ;; Defined at:
  9978 ;;		line 109 in file "mcc_generated_files/i2c.c"
  9979 ;; Parameters:    Size  Location     Type
  9980 ;;		None
  9981 ;; Auto vars:     Size  Location     Type
  9982 ;;  i2c_data        1    1[COMRAM] unsigned char 
  9983 ;; Return value:  Size  Location     Type
  9984 ;;                  1    wreg      void 
  9985 ;; Registers used:
  9986 ;;		wreg, status,2, status,0, cstack
  9987 ;; Tracked objects:
  9988 ;;		On entry : 0/0
  9989 ;;		On exit  : 0/0
  9990 ;;		Unchanged: 0/0
  9991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9993 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9995 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9996 ;;Total ram usage:        1 bytes
  9997 ;; Hardware stack levels used:    1
  9998 ;; Hardware stack levels required when called:    1
  9999 ;; This function calls:
 10000 ;;		_I2C_StatusCallback
 10001 ;; This function is called by:
 10002 ;;		_I2C_Initialize
 10003 ;;		_INTERRUPT_InterruptManager
 10004 ;; This function uses a non-reentrant model
 10005 ;;
 10006                           
 10007                           	psect	text64
 10008  0015E8                     __ptext64:
 10009                           	opt stack 0
 10010  0015E8                     _I2C_ISR:
 10011                           	opt stack 23
 10012                           
 10013                           ;i2c.c: 111: uint8_t i2c_data = 0x55;
 10014                           
 10015                           ;incstack = 0
 10016  0015E8  0E55               	movlw	85
 10017  0015EA  6E02               	movwf	I2C_ISR@i2c_data,c
 10018                           
 10019                           ;i2c.c: 117: PIR1bits.SSPIF = 0;
 10020  0015EC  969E               	bcf	3998,3,c	;volatile
 10021                           
 10022                           ;i2c.c: 118: i2c_data = SSPBUF;
 10023  0015EE  CFC9 F002          	movff	4041,I2C_ISR@i2c_data	;volatile
 10024                           
 10025                           ;i2c.c: 121: if ((0 == SSPSTATbits.R_nW) && (0 == SSPSTATbits.D_nA)) {
 10026  0015F2  A4C7               	btfss	4039,2,c	;volatile
 10027  0015F4  BAC7               	btfsc	4039,5,c	;volatile
 10028  0015F6  D004               	goto	i2l544
 10029                           
 10030                           ;i2c.c: 124: I2C_StatusCallback(I2C_SLAVE_WRITE_REQUEST);
 10031  0015F8  0E00               	movlw	0
 10032  0015FA  EC06  F00D         	call	_I2C_StatusCallback
 10033                           
 10034                           ;i2c.c: 126: } else if (1 == SSPSTATbits.R_nW) {
 10035  0015FE  D014               	goto	i2l550
 10036  001600                     i2l544:
 10037  001600  A4C7               	btfss	4039,2,c	;volatile
 10038  001602  D00B               	goto	i2l546
 10039                           
 10040                           ;i2c.c: 128: if ((1 == SSPSTATbits.D_nA) && (1 == SSPCON2bits.ACKSTAT)) {
 10041  001604  BAC7               	btfsc	4039,5,c	;volatile
 10042  001606  ACC5               	btfss	4037,6,c	;volatile
 10043  001608  D004               	goto	i2l547
 10044                           
 10045                           ;i2c.c: 130: I2C_StatusCallback(I2C_SLAVE_READ_COMPLETED);
 10046  00160A  0E03               	movlw	3
 10047  00160C  EC06  F00D         	call	_I2C_StatusCallback
 10048                           
 10049                           ;i2c.c: 131: } else {
 10050  001610  D00B               	goto	i2l550
 10051  001612                     i2l547:
 10052                           
 10053                           ;i2c.c: 133: I2C_StatusCallback(I2C_SLAVE_READ_REQUEST);
 10054  001612  0E01               	movlw	1
 10055  001614  EC06  F00D         	call	_I2C_StatusCallback
 10056                           
 10057                           ;i2c.c: 134: }
 10058                           ;i2c.c: 136: } else if (1 == SSPSTATbits.D_nA) {
 10059  001618  D007               	goto	i2l550
 10060  00161A                     i2l546:
 10061  00161A  AAC7               	btfss	4039,5,c	;volatile
 10062  00161C  D005               	goto	i2l550
 10063                           
 10064                           ;i2c.c: 138: I2C_slaveWriteData = i2c_data;
 10065  00161E  C002  F05D         	movff	I2C_ISR@i2c_data,_I2C_slaveWriteData	;volatile
 10066                           
 10067                           ;i2c.c: 141: I2C_StatusCallback(I2C_SLAVE_WRITE_COMPLETED);
 10068  001622  0E02               	movlw	2
 10069  001624  EC06  F00D         	call	_I2C_StatusCallback
 10070  001628                     i2l550:
 10071                           
 10072                           ;i2c.c: 143: }
 10073                           ;i2c.c: 145: SSPCON1bits.CKP = 1;
 10074  001628  88C6               	bsf	4038,4,c	;volatile
 10075  00162A  0012               	return		;funcret
 10076  00162C                     __end_of_I2C_ISR:
 10077                           	opt stack 0
 10078                           tosu	equ	0xFFF
 10079                           tosh	equ	0xFFE
 10080                           tosl	equ	0xFFD
 10081                           pclatu	equ	0xFFB
 10082                           pclath	equ	0xFFA
 10083                           tblptru	equ	0xFF8
 10084                           tblptrh	equ	0xFF7
 10085                           tblptrl	equ	0xFF6
 10086                           tablat	equ	0xFF5
 10087                           prodh	equ	0xFF4
 10088                           prodl	equ	0xFF3
 10089                           intcon	equ	0xFF2
 10090                           intcon2	equ	0xFF1
 10091                           postinc0	equ	0xFEE
 10092                           fsr0h	equ	0xFEA
 10093                           fsr0l	equ	0xFE9
 10094                           wreg	equ	0xFE8
 10095                           postdec1	equ	0xFE5
 10096                           plusw1	equ	0xFE3
 10097                           fsr1h	equ	0xFE2
 10098                           fsr1l	equ	0xFE1
 10099                           indf2	equ	0xFDF
 10100                           postinc2	equ	0xFDE
 10101                           plusw2	equ	0xFDB
 10102                           fsr2h	equ	0xFDA
 10103                           fsr2l	equ	0xFD9
 10104                           status	equ	0xFD8
 10105                           
 10106 ;; *************** function _I2C_custom_isr *****************
 10107 ;; Defined at:
 10108 ;;		line 312 in file "main.c"
 10109 ;; Parameters:    Size  Location     Type
 10110 ;;		None
 10111 ;; Auto vars:     Size  Location     Type
 10112 ;;  i2c_data        1   25[COMRAM] unsigned char 
 10113 ;; Return value:  Size  Location     Type
 10114 ;;                  1    wreg      void 
 10115 ;; Registers used:
 10116 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10117 ;; Tracked objects:
 10118 ;;		On entry : 0/0
 10119 ;;		On exit  : 0/0
 10120 ;;		Unchanged: 0/0
 10121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10123 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10124 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10125 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10126 ;;Total ram usage:        1 bytes
 10127 ;; Hardware stack levels used:    1
 10128 ;; Hardware stack levels required when called:    3
 10129 ;; This function calls:
 10130 ;;		_I2C_StatusCallback2
 10131 ;;		_printf
 10132 ;; This function is called by:
 10133 ;;		_main
 10134 ;;		_INTERRUPT_InterruptManager
 10135 ;; This function uses a non-reentrant model
 10136 ;;
 10137                           
 10138                           	psect	text65
 10139  00154A                     __ptext65:
 10140                           	opt stack 0
 10141  00154A                     _I2C_custom_isr:
 10142                           	opt stack 21
 10143                           
 10144                           ;main.c: 313: printf("I2C isr\n");
 10145                           
 10146                           ;incstack = 0
 10147  00154A  0EF2               	movlw	low STR_6
 10148  00154C  6E0D               	movwf	printf@f,c
 10149  00154E  0EFF               	movlw	high STR_6
 10150  001550  6E0E               	movwf	printf@f+1,c
 10151  001552  EC68  F005         	call	_printf	;wreg free
 10152                           
 10153                           ;main.c: 315: uint8_t i2c_data = 0x55;
 10154  001556  0E55               	movlw	85
 10155  001558  6E1A               	movwf	I2C_custom_isr@i2c_data,c
 10156                           
 10157                           ;main.c: 317: PIR1bits.SSPIF = 0;
 10158  00155A  969E               	bcf	3998,3,c	;volatile
 10159                           
 10160                           ;main.c: 318: i2c_data = SSPBUF;
 10161  00155C  CFC9 F01A          	movff	4041,I2C_custom_isr@i2c_data	;volatile
 10162                           
 10163                           ;main.c: 321: if ((0 == SSPSTATbits.R_nW) && (0 == SSPSTATbits.D_nA)) {
 10164  001560  A4C7               	btfss	4039,2,c	;volatile
 10165  001562  BAC7               	btfsc	4039,5,c	;volatile
 10166  001564  D004               	goto	i2l750
 10167                           
 10168                           ;main.c: 324: I2C_StatusCallback2(I2C_SLAVE_WRITE_REQUEST);
 10169  001566  0E00               	movlw	0
 10170  001568  EC28  F00A         	call	_I2C_StatusCallback2
 10171                           
 10172                           ;main.c: 326: } else if (1 == SSPSTATbits.R_nW) {
 10173  00156C  D014               	goto	i2l756
 10174  00156E                     i2l750:
 10175  00156E  A4C7               	btfss	4039,2,c	;volatile
 10176  001570  D00B               	goto	i2l752
 10177                           
 10178                           ;main.c: 328: if ((1 == SSPSTATbits.D_nA) && (1 == SSPCON2bits.ACKSTAT)) {
 10179  001572  BAC7               	btfsc	4039,5,c	;volatile
 10180  001574  ACC5               	btfss	4037,6,c	;volatile
 10181  001576  D004               	goto	i2l753
 10182                           
 10183                           ;main.c: 330: I2C_StatusCallback2(I2C_SLAVE_READ_COMPLETED);
 10184  001578  0E03               	movlw	3
 10185  00157A  EC28  F00A         	call	_I2C_StatusCallback2
 10186                           
 10187                           ;main.c: 331: } else {
 10188  00157E  D00B               	goto	i2l756
 10189  001580                     i2l753:
 10190                           
 10191                           ;main.c: 333: I2C_StatusCallback2(I2C_SLAVE_READ_REQUEST);
 10192  001580  0E01               	movlw	1
 10193  001582  EC28  F00A         	call	_I2C_StatusCallback2
 10194                           
 10195                           ;main.c: 334: }
 10196                           ;main.c: 336: } else if (1 == SSPSTATbits.D_nA) {
 10197  001586  D007               	goto	i2l756
 10198  001588                     i2l752:
 10199  001588  AAC7               	btfss	4039,5,c	;volatile
 10200  00158A  D005               	goto	i2l756
 10201                           
 10202                           ;main.c: 338: i2c_received_byte = i2c_data;
 10203  00158C  C01A  F04D         	movff	I2C_custom_isr@i2c_data,_i2c_received_byte
 10204                           
 10205                           ;main.c: 341: I2C_StatusCallback2(I2C_SLAVE_WRITE_COMPLETED);
 10206  001590  0E02               	movlw	2
 10207  001592  EC28  F00A         	call	_I2C_StatusCallback2
 10208  001596                     i2l756:
 10209                           
 10210                           ;main.c: 343: }
 10211                           ;main.c: 345: SSPCON1bits.CKP = 1;
 10212  001596  88C6               	bsf	4038,4,c	;volatile
 10213  001598  0012               	return		;funcret
 10214  00159A                     __end_of_I2C_custom_isr:
 10215                           	opt stack 0
 10216                           tosu	equ	0xFFF
 10217                           tosh	equ	0xFFE
 10218                           tosl	equ	0xFFD
 10219                           pclatu	equ	0xFFB
 10220                           pclath	equ	0xFFA
 10221                           tblptru	equ	0xFF8
 10222                           tblptrh	equ	0xFF7
 10223                           tblptrl	equ	0xFF6
 10224                           tablat	equ	0xFF5
 10225                           prodh	equ	0xFF4
 10226                           prodl	equ	0xFF3
 10227                           intcon	equ	0xFF2
 10228                           intcon2	equ	0xFF1
 10229                           postinc0	equ	0xFEE
 10230                           fsr0h	equ	0xFEA
 10231                           fsr0l	equ	0xFE9
 10232                           wreg	equ	0xFE8
 10233                           postdec1	equ	0xFE5
 10234                           plusw1	equ	0xFE3
 10235                           fsr1h	equ	0xFE2
 10236                           fsr1l	equ	0xFE1
 10237                           indf2	equ	0xFDF
 10238                           postinc2	equ	0xFDE
 10239                           plusw2	equ	0xFDB
 10240                           fsr2h	equ	0xFDA
 10241                           fsr2l	equ	0xFD9
 10242                           status	equ	0xFD8
 10243                           
 10244 ;; *************** function _I2C_StatusCallback2 *****************
 10245 ;; Defined at:
 10246 ;;		line 295 in file "main.c"
 10247 ;; Parameters:    Size  Location     Type
 10248 ;;  i2c_bus_stat    1    wreg     enum E15216
 10249 ;; Auto vars:     Size  Location     Type
 10250 ;;  i2c_bus_stat    1   24[COMRAM] enum E15216
 10251 ;; Return value:  Size  Location     Type
 10252 ;;                  1    wreg      void 
 10253 ;; Registers used:
 10254 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10255 ;; Tracked objects:
 10256 ;;		On entry : 0/0
 10257 ;;		On exit  : 0/0
 10258 ;;		Unchanged: 0/0
 10259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10261 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10263 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10264 ;;Total ram usage:        1 bytes
 10265 ;; Hardware stack levels used:    1
 10266 ;; Hardware stack levels required when called:    2
 10267 ;; This function calls:
 10268 ;;		_printf
 10269 ;; This function is called by:
 10270 ;;		_I2C_custom_isr
 10271 ;; This function uses a non-reentrant model
 10272 ;;
 10273                           
 10274                           	psect	text66
 10275  001450                     __ptext66:
 10276                           	opt stack 0
 10277  001450                     _I2C_StatusCallback2:
 10278                           	opt stack 21
 10279                           
 10280                           ;incstack = 0
 10281                           ;I2C_StatusCallback2@i2c_bus_state stored from wreg
 10282  001450  6E19               	movwf	I2C_StatusCallback2@i2c_bus_state,c
 10283                           
 10284                           ;main.c: 296: switch (i2c_bus_state) {
 10285  001452  D01B               	goto	i2l741
 10286  001454                     
 10287                           ;main.c: 298: printf("Write output\n");
 10288  001454  0ED7               	movlw	low STR_3
 10289  001456  6E0D               	movwf	printf@f,c
 10290  001458  0EFF               	movlw	high STR_3
 10291  00145A  6E0E               	movwf	printf@f+1,c
 10292  00145C  EC68  F005         	call	_printf	;wreg free
 10293                           
 10294                           ;main.c: 299: break;
 10295  001460  0012               	return	
 10296  001462                     
 10297                           ;main.c: 301: printf("%d", i2c_received_byte);
 10298  001462  0EFB               	movlw	low STR_4
 10299  001464  6E0D               	movwf	printf@f,c
 10300  001466  0EFF               	movlw	high STR_4
 10301  001468  6E0E               	movwf	printf@f+1,c
 10302  00146A  C04D  F00F         	movff	_i2c_received_byte,?_printf+2
 10303  00146E  6A10               	clrf	?_printf+3,c
 10304  001470  EC68  F005         	call	_printf	;wreg free
 10305                           
 10306                           ;main.c: 302: break;
 10307  001474  0012               	return	
 10308  001476                     
 10309                           ;main.c: 304: printf("Write input\n");
 10310  001476  0EE5               	movlw	low STR_5
 10311  001478  6E0D               	movwf	printf@f,c
 10312  00147A  0EFF               	movlw	high STR_5
 10313  00147C  6E0E               	movwf	printf@f+1,c
 10314  00147E  EC68  F005         	call	_printf	;wreg free
 10315                           
 10316                           ;main.c: 305: break;
 10317  001482  0012               	return	
 10318  001484                     
 10319                           ;main.c: 307: SSPBUF = 0xAA;
 10320  001484  0EAA               	movlw	170
 10321  001486  6EC9               	movwf	4041,c	;volatile
 10322                           
 10323                           ;main.c: 309: }
 10324                           
 10325                           ;main.c: 308: break;
 10326  001488  0012               	return	
 10327  00148A                     i2l741:
 10328  00148A  5019               	movf	I2C_StatusCallback2@i2c_bus_state,w,c
 10329                           
 10330                           ; Switch size 1, requested type "space"
 10331                           ; Number of cases is 4, Range of values is 0 to 3
 10332                           ; switch strategies available:
 10333                           ; Name         Instructions Cycles
 10334                           ; simple_byte           13     7 (average)
 10335                           ;	Chosen strategy is simple_byte
 10336  00148C  0A00               	xorlw	0	; case 0
 10337  00148E  B4D8               	btfsc	status,2,c
 10338  001490  D7E1               	goto	i2l742
 10339  001492  0A01               	xorlw	1	; case 1
 10340  001494  B4D8               	btfsc	status,2,c
 10341  001496  D7EF               	goto	i2l745
 10342  001498  0A03               	xorlw	3	; case 2
 10343  00149A  B4D8               	btfsc	status,2,c
 10344  00149C  D7E2               	goto	i2l744
 10345  00149E  0A01               	xorlw	1	; case 3
 10346  0014A0  A4D8               	btfss	status,2,c
 10347  0014A2  0012               	return	
 10348  0014A4  D7EF               	goto	i2l746
 10349  0014A6                     __end_of_I2C_StatusCallback2:
 10350                           	opt stack 0
 10351                           tosu	equ	0xFFF
 10352                           tosh	equ	0xFFE
 10353                           tosl	equ	0xFFD
 10354                           pclatu	equ	0xFFB
 10355                           pclath	equ	0xFFA
 10356                           tblptru	equ	0xFF8
 10357                           tblptrh	equ	0xFF7
 10358                           tblptrl	equ	0xFF6
 10359                           tablat	equ	0xFF5
 10360                           prodh	equ	0xFF4
 10361                           prodl	equ	0xFF3
 10362                           intcon	equ	0xFF2
 10363                           intcon2	equ	0xFF1
 10364                           postinc0	equ	0xFEE
 10365                           fsr0h	equ	0xFEA
 10366                           fsr0l	equ	0xFE9
 10367                           wreg	equ	0xFE8
 10368                           postdec1	equ	0xFE5
 10369                           plusw1	equ	0xFE3
 10370                           fsr1h	equ	0xFE2
 10371                           fsr1l	equ	0xFE1
 10372                           indf2	equ	0xFDF
 10373                           postinc2	equ	0xFDE
 10374                           plusw2	equ	0xFDB
 10375                           fsr2h	equ	0xFDA
 10376                           fsr2l	equ	0xFD9
 10377                           status	equ	0xFD8
 10378                           
 10379 ;; *************** function _printf *****************
 10380 ;; Defined at:
 10381 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
 10382 ;; Parameters:    Size  Location     Type
 10383 ;;  f               2   12[COMRAM] PTR const unsigned char 
 10384 ;;		 -> STR_6(9), STR_5(13), STR_4(3), STR_3(14), 
 10385 ;; Auto vars:     Size  Location     Type
 10386 ;;  tmpval          4    0        struct .
 10387 ;;  cp              3    0        PTR const unsigned char 
 10388 ;;  val             2   21[COMRAM] unsigned int 
 10389 ;;  ap              2   17[COMRAM] PTR void [1]
 10390 ;;		 -> ?_printf(2), 
 10391 ;;  len             2    0        unsigned int 
 10392 ;;  c               1   23[COMRAM] char 
 10393 ;;  prec            1   20[COMRAM] char 
 10394 ;;  flag            1   19[COMRAM] unsigned char 
 10395 ;; Return value:  Size  Location     Type
 10396 ;;                  2   12[COMRAM] int 
 10397 ;; Registers used:
 10398 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10399 ;; Tracked objects:
 10400 ;;		On entry : 0/0
 10401 ;;		On exit  : 0/0
 10402 ;;		Unchanged: 0/0
 10403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10404 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10405 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10406 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10407 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10408 ;;Total ram usage:       12 bytes
 10409 ;; Hardware stack levels used:    1
 10410 ;; Hardware stack levels required when called:    1
 10411 ;; This function calls:
 10412 ;;		___lwdiv
 10413 ;;		___lwmod
 10414 ;;		i2_putch
 10415 ;; This function is called by:
 10416 ;;		_I2C_StatusCallback2
 10417 ;;		_I2C_custom_isr
 10418 ;; This function uses a non-reentrant model
 10419 ;;
 10420                           
 10421                           	psect	text67
 10422  000AD0                     __ptext67:
 10423                           	opt stack 0
 10424  000AD0                     _printf:
 10425                           	opt stack 22
 10426                           
 10427                           ;doprnt.c: 466: va_list ap;
 10428                           ;doprnt.c: 499: signed char c;
 10429                           ;doprnt.c: 506: signed char prec;
 10430                           ;doprnt.c: 508: unsigned char flag;
 10431                           ;doprnt.c: 523: union {
 10432                           ;doprnt.c: 524: unsigned long vd;
 10433                           ;doprnt.c: 525: double integ;
 10434                           ;doprnt.c: 526: } tmpval;
 10435                           ;doprnt.c: 528: unsigned int val;
 10436                           ;doprnt.c: 529: unsigned len;
 10437                           ;doprnt.c: 530: const char * cp;
 10438                           ;doprnt.c: 533: *ap = __va_start();
 10439                           
 10440                           ;incstack = 0
 10441  000AD0  0E0F               	movlw	low (?_printf+2)
 10442  000AD2  6E12               	movwf	printf@ap,c
 10443  000AD4  0E00               	movlw	high (?_printf+2)
 10444  000AD6  6E13               	movwf	printf@ap+1,c
 10445                           
 10446                           ;doprnt.c: 536: while(c = *f++) {
 10447  000AD8  D084               	goto	i2u267_40
 10448  000ADA                     
 10449                           ;doprnt.c: 538: if(c != '%')
 10450  000ADA  0E25               	movlw	37
 10451  000ADC  1818               	xorwf	printf@c,w,c
 10452  000ADE  B4D8               	btfsc	status,2,c
 10453  000AE0  D004               	goto	i2l933
 10454                           
 10455                           ;doprnt.c: 540: {
 10456                           ;doprnt.c: 541: (putch(c) );
 10457  000AE2  5018               	movf	printf@c,w,c
 10458  000AE4  EC4C  F00D         	call	i2_putch
 10459                           
 10460                           ;doprnt.c: 542: continue;
 10461  000AE8  D07C               	goto	i2u267_40
 10462  000AEA                     i2l933:
 10463                           
 10464                           ;doprnt.c: 543: }
 10465                           ;doprnt.c: 548: flag = 0;
 10466  000AEA  0E00               	movlw	0
 10467  000AEC  6E14               	movwf	printf@flag,c
 10468                           
 10469                           ;doprnt.c: 822: }
 10470                           
 10471                           ;doprnt.c: 813: continue;
 10472                           
 10473                           ;doprnt.c: 802: default:
 10474                           
 10475                           ;doprnt.c: 698: case 'i':
 10476                           ;doprnt.c: 699: break;
 10477                           
 10478                           ;doprnt.c: 697: case 'd':
 10479                           
 10480                           ;doprnt.c: 638: goto alldone;
 10481                           
 10482                           ;doprnt.c: 637: case 0:
 10483                           
 10484                           ;doprnt.c: 635: switch(c = *f++) {
 10485  000AEE  C00D  FFF6         	movff	printf@f,tblptrl
 10486  000AF2  C00E  FFF7         	movff	printf@f+1,tblptrh
 10487  000AF6  4A0D               	infsnz	printf@f,f,c
 10488  000AF8  2A0E               	incf	printf@f+1,f,c
 10489  000AFA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 10490  000AFA  6AF8               	clrf	tblptru,c
 10491  000AFC                     	endif
 10492  000AFC                     	if	0	;tblptru may be non-zero
 10493  000AFC                     	endif
 10494  000AFC  0008               	tblrd		*
 10495  000AFE  CFF5 F018          	movff	tablat,printf@c
 10496  000B02  5018               	movf	printf@c,w,c
 10497                           
 10498                           ; Switch size 1, requested type "space"
 10499                           ; Number of cases is 3, Range of values is 0 to 105
 10500                           ; switch strategies available:
 10501                           ; Name         Instructions Cycles
 10502                           ; simple_byte           10     6 (average)
 10503                           ;	Chosen strategy is simple_byte
 10504  000B04  0A00               	xorlw	0	; case 0
 10505  000B06  B4D8               	btfsc	status,2,c
 10506  000B08  0012               	return	
 10507  000B0A  0A64               	xorlw	100	; case 100
 10508  000B0C  B4D8               	btfsc	status,2,c
 10509  000B0E  D003               	goto	i2l939
 10510  000B10  0A0D               	xorlw	13	; case 105
 10511  000B12  A4D8               	btfss	status,2,c
 10512  000B14  D066               	goto	i2u267_40
 10513  000B16                     i2l939:
 10514                           
 10515                           ;doprnt.c: 1253: {
 10516                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 10517  000B16  C012  FFD9         	movff	printf@ap,fsr2l
 10518  000B1A  C013  FFDA         	movff	printf@ap+1,fsr2h
 10519  000B1E  CFDE F016          	movff	postinc2,printf@val
 10520  000B22  CFDD F017          	movff	postdec2,printf@val+1
 10521  000B26  0E02               	movlw	2
 10522  000B28  2612               	addwf	printf@ap,f,c
 10523  000B2A  0E00               	movlw	0
 10524  000B2C  2213               	addwfc	printf@ap+1,f,c
 10525                           
 10526                           ;doprnt.c: 1261: if((int)val < 0) {
 10527  000B2E  AE17               	btfss	printf@val+1,7,c
 10528  000B30  D006               	goto	i2l941
 10529                           
 10530                           ;doprnt.c: 1262: flag |= 0x03;
 10531  000B32  0E03               	movlw	3
 10532  000B34  1214               	iorwf	printf@flag,f,c
 10533                           
 10534                           ;doprnt.c: 1263: val = -val;
 10535  000B36  6C16               	negf	printf@val,c
 10536  000B38  1E17               	comf	printf@val+1,f,c
 10537  000B3A  B0D8               	btfsc	status,0,c
 10538  000B3C  2A17               	incf	printf@val+1,f,c
 10539  000B3E                     i2l941:
 10540                           
 10541                           ;doprnt.c: 1264: }
 10542                           ;doprnt.c: 1266: }
 10543                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 10544  000B3E  0E01               	movlw	1
 10545  000B40  6E18               	movwf	printf@c,c
 10546  000B42                     i2l3428:
 10547  000B42  0E05               	movlw	5
 10548  000B44  1818               	xorwf	printf@c,w,c
 10549  000B46  B4D8               	btfsc	status,2,c
 10550  000B48  D015               	goto	i2u265_40
 10551                           
 10552                           ;doprnt.c: 1306: if(val < dpowers[c])
 10553  000B4A  5018               	movf	printf@c,w,c
 10554  000B4C  0D02               	mullw	2
 10555  000B4E  0E9D               	movlw	low _dpowers
 10556  000B50  24F3               	addwf	prodl,w,c
 10557  000B52  6EF6               	movwf	tblptrl,c
 10558  000B54  0EFF               	movlw	high _dpowers
 10559  000B56  20F4               	addwfc	prodh,w,c
 10560  000B58  6EF7               	movwf	tblptrh,c
 10561  000B5A                     	if	1	;There are 3 active tblptr bytes
 10562  000B5A  6AF8               	clrf	tblptru,c
 10563  000B5C  0E00               	movlw	low (__mediumconst shr (0+16))
 10564  000B5E  22F8               	addwfc	tblptru,f,c
 10565  000B60                     	endif
 10566  000B60  0009               	tblrd		*+
 10567  000B62  50F5               	movf	tablat,w,c
 10568  000B64  5C16               	subwf	printf@val,w,c
 10569  000B66  0009               	tblrd		*+
 10570  000B68  50F5               	movf	tablat,w,c
 10571  000B6A  5817               	subwfb	printf@val+1,w,c
 10572  000B6C  A0D8               	btfss	status,0,c
 10573  000B6E  D002               	goto	i2u265_40
 10574                           
 10575                           ;doprnt.c: 1307: break;
 10576  000B70  2A18               	incf	printf@c,f,c
 10577  000B72  D7E7               	goto	i2l3428
 10578  000B74                     i2u265_40:
 10579                           
 10580                           ;doprnt.c: 1422: {
 10581                           ;doprnt.c: 1438: if(flag & 0x03)
 10582  000B74  C014  F011         	movff	printf@flag,??_printf
 10583  000B78  0E03               	movlw	3
 10584  000B7A  1611               	andwf	??_printf,f,c
 10585  000B7C  B4D8               	btfsc	status,2,c
 10586  000B7E  D003               	goto	i2l945
 10587                           
 10588                           ;doprnt.c: 1439: (putch('-') );
 10589  000B80  0E2D               	movlw	45
 10590  000B82  EC4C  F00D         	call	i2_putch
 10591  000B86                     i2l945:
 10592                           
 10593                           ;doprnt.c: 1469: }
 10594                           ;doprnt.c: 1472: prec = c;
 10595  000B86  C018  F015         	movff	printf@c,printf@prec
 10596                           
 10597                           ;doprnt.c: 1474: while(prec--) {
 10598  000B8A  D027               	goto	i2l946
 10599  000B8C                     
 10600                           ;doprnt.c: 1478: {
 10601                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 10602  000B8C  5015               	movf	printf@prec,w,c
 10603  000B8E  0D02               	mullw	2
 10604  000B90  0E9D               	movlw	low _dpowers
 10605  000B92  24F3               	addwf	prodl,w,c
 10606  000B94  6EF6               	movwf	tblptrl,c
 10607  000B96  0EFF               	movlw	high _dpowers
 10608  000B98  20F4               	addwfc	prodh,w,c
 10609  000B9A  6EF7               	movwf	tblptrh,c
 10610  000B9C                     	if	1	;There are 3 active tblptr bytes
 10611  000B9C  6AF8               	clrf	tblptru,c
 10612  000B9E  0E00               	movlw	low (__mediumconst shr (0+16))
 10613  000BA0  22F8               	addwfc	tblptru,f,c
 10614  000BA2                     	endif
 10615  000BA2  0009               	tblrd		*+
 10616  000BA4  CFF5 F003          	movff	tablat,___lwdiv@divisor
 10617  000BA8  000A               	tblrd		*-
 10618  000BAA  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
 10619  000BAE  C016  F001         	movff	printf@val,___lwdiv@dividend
 10620  000BB2  C017  F002         	movff	printf@val+1,___lwdiv@dividend+1
 10621  000BB6  EC7C  F00A         	call	___lwdiv	;wreg free
 10622  000BBA  C001  F008         	movff	?___lwdiv,___lwmod@dividend
 10623  000BBE  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
 10624  000BC2  0E00               	movlw	0
 10625  000BC4  6E0B               	movwf	___lwmod@divisor+1,c
 10626  000BC6  0E0A               	movlw	10
 10627  000BC8  6E0A               	movwf	___lwmod@divisor,c
 10628  000BCA  EC37  F00B         	call	___lwmod	;wreg free
 10629  000BCE  5008               	movf	?___lwmod,w,c
 10630  000BD0  0F30               	addlw	48
 10631  000BD2  6E18               	movwf	printf@c,c
 10632                           
 10633                           ;doprnt.c: 1523: }
 10634                           ;doprnt.c: 1524: (putch(c) );
 10635  000BD4  5018               	movf	printf@c,w,c
 10636  000BD6  EC4C  F00D         	call	i2_putch
 10637  000BDA                     i2l946:
 10638  000BDA  0615               	decf	printf@prec,f,c
 10639  000BDC  2815               	incf	printf@prec,w,c
 10640  000BDE  A4D8               	btfss	status,2,c
 10641  000BE0  D7D5               	goto	i2l947
 10642  000BE2                     i2u267_40:
 10643  000BE2  C00D  FFF6         	movff	printf@f,tblptrl
 10644  000BE6  C00E  FFF7         	movff	printf@f+1,tblptrh
 10645  000BEA  4A0D               	infsnz	printf@f,f,c
 10646  000BEC  2A0E               	incf	printf@f+1,f,c
 10647  000BEE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 10648  000BEE  6AF8               	clrf	tblptru,c
 10649  000BF0                     	endif
 10650  000BF0                     	if	0	;tblptru may be non-zero
 10651  000BF0                     	endif
 10652  000BF0  0008               	tblrd		*
 10653  000BF2  CFF5 F018          	movff	tablat,printf@c
 10654  000BF6  5018               	movf	printf@c,w,c
 10655  000BF8  B4D8               	btfsc	status,2,c
 10656  000BFA  0012               	return	
 10657  000BFC  D76E               	goto	i2l932
 10658  000BFE                     __end_of_printf:
 10659                           	opt stack 0
 10660                           tosu	equ	0xFFF
 10661                           tosh	equ	0xFFE
 10662                           tosl	equ	0xFFD
 10663                           pclatu	equ	0xFFB
 10664                           pclath	equ	0xFFA
 10665                           tblptru	equ	0xFF8
 10666                           tblptrh	equ	0xFF7
 10667                           tblptrl	equ	0xFF6
 10668                           tablat	equ	0xFF5
 10669                           prodh	equ	0xFF4
 10670                           prodl	equ	0xFF3
 10671                           intcon	equ	0xFF2
 10672                           intcon2	equ	0xFF1
 10673                           postinc0	equ	0xFEE
 10674                           fsr0h	equ	0xFEA
 10675                           fsr0l	equ	0xFE9
 10676                           wreg	equ	0xFE8
 10677                           postdec1	equ	0xFE5
 10678                           plusw1	equ	0xFE3
 10679                           fsr1h	equ	0xFE2
 10680                           fsr1l	equ	0xFE1
 10681                           indf2	equ	0xFDF
 10682                           postinc2	equ	0xFDE
 10683                           postdec2	equ	0xFDD
 10684                           plusw2	equ	0xFDB
 10685                           fsr2h	equ	0xFDA
 10686                           fsr2l	equ	0xFD9
 10687                           status	equ	0xFD8
 10688                           
 10689 ;; *************** function i2_putch *****************
 10690 ;; Defined at:
 10691 ;;		line 69 in file "main.c"
 10692 ;; Parameters:    Size  Location     Type
 10693 ;;  data            1    wreg     unsigned char 
 10694 ;; Auto vars:     Size  Location     Type
 10695 ;;  data            1    0[COMRAM] unsigned char 
 10696 ;; Return value:  Size  Location     Type
 10697 ;;                  1    wreg      void 
 10698 ;; Registers used:
 10699 ;;		wreg
 10700 ;; Tracked objects:
 10701 ;;		On entry : 0/0
 10702 ;;		On exit  : 0/0
 10703 ;;		Unchanged: 0/0
 10704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10706 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10707 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10708 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10709 ;;Total ram usage:        1 bytes
 10710 ;; Hardware stack levels used:    1
 10711 ;; This function calls:
 10712 ;;		Nothing
 10713 ;; This function is called by:
 10714 ;;		_tmr2_custom_isr
 10715 ;;		_printf
 10716 ;; This function uses a non-reentrant model
 10717 ;;
 10718                           
 10719                           	psect	text68
 10720  001A98                     __ptext68:
 10721                           	opt stack 0
 10722  001A98                     i2_putch:
 10723                           	opt stack 21
 10724                           
 10725                           ;incstack = 0
 10726                           ;i2putch@data stored from wreg
 10727  001A98  6E01               	movwf	i2putch@data,c
 10728  001A9A                     
 10729                           ;main.c: 71: continue;
 10730                           
 10731                           ;main.c: 70: while(!PIR3bits.TX2IF)
 10732  001A9A  A8A4               	btfss	4004,4,c	;volatile
 10733  001A9C  D7FE               	goto	i2l3244
 10734                           
 10735                           ;main.c: 72: TXREG2 = data;
 10736  001A9E  C001  FF79         	movff	i2putch@data,3961	;volatile
 10737  001AA2  0012               	return		;funcret
 10738  001AA4                     __end_ofi2_putch:
 10739                           	opt stack 0
 10740                           tosu	equ	0xFFF
 10741                           tosh	equ	0xFFE
 10742                           tosl	equ	0xFFD
 10743                           pclatu	equ	0xFFB
 10744                           pclath	equ	0xFFA
 10745                           tblptru	equ	0xFF8
 10746                           tblptrh	equ	0xFF7
 10747                           tblptrl	equ	0xFF6
 10748                           tablat	equ	0xFF5
 10749                           prodh	equ	0xFF4
 10750                           prodl	equ	0xFF3
 10751                           intcon	equ	0xFF2
 10752                           intcon2	equ	0xFF1
 10753                           postinc0	equ	0xFEE
 10754                           fsr0h	equ	0xFEA
 10755                           fsr0l	equ	0xFE9
 10756                           wreg	equ	0xFE8
 10757                           postdec1	equ	0xFE5
 10758                           plusw1	equ	0xFE3
 10759                           fsr1h	equ	0xFE2
 10760                           fsr1l	equ	0xFE1
 10761                           indf2	equ	0xFDF
 10762                           postinc2	equ	0xFDE
 10763                           postdec2	equ	0xFDD
 10764                           plusw2	equ	0xFDB
 10765                           fsr2h	equ	0xFDA
 10766                           fsr2l	equ	0xFD9
 10767                           status	equ	0xFD8
 10768                           
 10769 ;; *************** function ___lwmod *****************
 10770 ;; Defined at:
 10771 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 10772 ;; Parameters:    Size  Location     Type
 10773 ;;  dividend        2    7[COMRAM] unsigned int 
 10774 ;;  divisor         2    9[COMRAM] unsigned int 
 10775 ;; Auto vars:     Size  Location     Type
 10776 ;;  counter         1   11[COMRAM] unsigned char 
 10777 ;; Return value:  Size  Location     Type
 10778 ;;                  2    7[COMRAM] unsigned int 
 10779 ;; Registers used:
 10780 ;;		wreg, status,2, status,0
 10781 ;; Tracked objects:
 10782 ;;		On entry : 0/0
 10783 ;;		On exit  : 0/0
 10784 ;;		Unchanged: 0/0
 10785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10786 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10787 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10788 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10789 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10790 ;;Total ram usage:        5 bytes
 10791 ;; Hardware stack levels used:    1
 10792 ;; This function calls:
 10793 ;;		Nothing
 10794 ;; This function is called by:
 10795 ;;		_printf
 10796 ;; This function uses a non-reentrant model
 10797 ;;
 10798                           
 10799                           	psect	text69
 10800  00166E                     __ptext69:
 10801                           	opt stack 0
 10802  00166E                     ___lwmod:
 10803                           	opt stack 22
 10804                           
 10805                           ;incstack = 0
 10806  00166E  500A               	movf	___lwmod@divisor,w,c
 10807  001670  100B               	iorwf	___lwmod@divisor+1,w,c
 10808  001672  B4D8               	btfsc	status,2,c
 10809  001674  D018               	goto	i2l1369
 10810  001676  0E01               	movlw	1
 10811  001678  6E0C               	movwf	___lwmod@counter,c
 10812  00167A  D004               	goto	i2l1364
 10813  00167C  90D8               	bcf	status,0,c
 10814  00167E  360A               	rlcf	___lwmod@divisor,f,c
 10815  001680  360B               	rlcf	___lwmod@divisor+1,f,c
 10816  001682  2A0C               	incf	___lwmod@counter,f,c
 10817  001684                     i2l1364:
 10818  001684  AE0B               	btfss	___lwmod@divisor+1,7,c
 10819  001686  D7FA               	goto	i2l1365
 10820  001688                     i2u236_40:
 10821  001688  500A               	movf	___lwmod@divisor,w,c
 10822  00168A  5C08               	subwf	___lwmod@dividend,w,c
 10823  00168C  500B               	movf	___lwmod@divisor+1,w,c
 10824  00168E  5809               	subwfb	___lwmod@dividend+1,w,c
 10825  001690  A0D8               	btfss	status,0,c
 10826  001692  D004               	goto	i2l1368
 10827  001694  500A               	movf	___lwmod@divisor,w,c
 10828  001696  5E08               	subwf	___lwmod@dividend,f,c
 10829  001698  500B               	movf	___lwmod@divisor+1,w,c
 10830  00169A  5A09               	subwfb	___lwmod@dividend+1,f,c
 10831  00169C                     i2l1368:
 10832  00169C  90D8               	bcf	status,0,c
 10833  00169E  320B               	rrcf	___lwmod@divisor+1,f,c
 10834  0016A0  320A               	rrcf	___lwmod@divisor,f,c
 10835  0016A2  2E0C               	decfsz	___lwmod@counter,f,c
 10836  0016A4  D7F1               	goto	i2u236_40
 10837  0016A6                     i2l1369:
 10838  0016A6  C008  F008         	movff	___lwmod@dividend,?___lwmod
 10839  0016AA  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
 10840  0016AE  0012               	return		;funcret
 10841  0016B0                     __end_of___lwmod:
 10842                           	opt stack 0
 10843                           tosu	equ	0xFFF
 10844                           tosh	equ	0xFFE
 10845                           tosl	equ	0xFFD
 10846                           pclatu	equ	0xFFB
 10847                           pclath	equ	0xFFA
 10848                           tblptru	equ	0xFF8
 10849                           tblptrh	equ	0xFF7
 10850                           tblptrl	equ	0xFF6
 10851                           tablat	equ	0xFF5
 10852                           prodh	equ	0xFF4
 10853                           prodl	equ	0xFF3
 10854                           intcon	equ	0xFF2
 10855                           intcon2	equ	0xFF1
 10856                           postinc0	equ	0xFEE
 10857                           fsr0h	equ	0xFEA
 10858                           fsr0l	equ	0xFE9
 10859                           wreg	equ	0xFE8
 10860                           postdec1	equ	0xFE5
 10861                           plusw1	equ	0xFE3
 10862                           fsr1h	equ	0xFE2
 10863                           fsr1l	equ	0xFE1
 10864                           indf2	equ	0xFDF
 10865                           postinc2	equ	0xFDE
 10866                           postdec2	equ	0xFDD
 10867                           plusw2	equ	0xFDB
 10868                           fsr2h	equ	0xFDA
 10869                           fsr2l	equ	0xFD9
 10870                           status	equ	0xFD8
 10871                           
 10872 ;; *************** function ___lwdiv *****************
 10873 ;; Defined at:
 10874 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 10875 ;; Parameters:    Size  Location     Type
 10876 ;;  dividend        2    0[COMRAM] unsigned int 
 10877 ;;  divisor         2    2[COMRAM] unsigned int 
 10878 ;; Auto vars:     Size  Location     Type
 10879 ;;  quotient        2    4[COMRAM] unsigned int 
 10880 ;;  counter         1    6[COMRAM] unsigned char 
 10881 ;; Return value:  Size  Location     Type
 10882 ;;                  2    0[COMRAM] unsigned int 
 10883 ;; Registers used:
 10884 ;;		wreg, status,2, status,0
 10885 ;; Tracked objects:
 10886 ;;		On entry : 0/0
 10887 ;;		On exit  : 0/0
 10888 ;;		Unchanged: 0/0
 10889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10890 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10891 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10892 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10893 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10894 ;;Total ram usage:        7 bytes
 10895 ;; Hardware stack levels used:    1
 10896 ;; This function calls:
 10897 ;;		Nothing
 10898 ;; This function is called by:
 10899 ;;		_printf
 10900 ;; This function uses a non-reentrant model
 10901 ;;
 10902                           
 10903                           	psect	text70
 10904  0014F8                     __ptext70:
 10905                           	opt stack 0
 10906  0014F8                     ___lwdiv:
 10907                           	opt stack 22
 10908                           
 10909                           ;incstack = 0
 10910  0014F8  0E00               	movlw	0
 10911  0014FA  6E06               	movwf	___lwdiv@quotient+1,c
 10912  0014FC  0E00               	movlw	0
 10913  0014FE  6E05               	movwf	___lwdiv@quotient,c
 10914  001500  5003               	movf	___lwdiv@divisor,w,c
 10915  001502  1004               	iorwf	___lwdiv@divisor+1,w,c
 10916  001504  B4D8               	btfsc	status,2,c
 10917  001506  D01C               	goto	i2l1359
 10918  001508  0E01               	movlw	1
 10919  00150A  6E07               	movwf	___lwdiv@counter,c
 10920  00150C  D004               	goto	i2l1354
 10921  00150E  90D8               	bcf	status,0,c
 10922  001510  3603               	rlcf	___lwdiv@divisor,f,c
 10923  001512  3604               	rlcf	___lwdiv@divisor+1,f,c
 10924  001514  2A07               	incf	___lwdiv@counter,f,c
 10925  001516                     i2l1354:
 10926  001516  AE04               	btfss	___lwdiv@divisor+1,7,c
 10927  001518  D7FA               	goto	i2l1355
 10928  00151A                     i2u233_40:
 10929  00151A  90D8               	bcf	status,0,c
 10930  00151C  3605               	rlcf	___lwdiv@quotient,f,c
 10931  00151E  3606               	rlcf	___lwdiv@quotient+1,f,c
 10932  001520  5003               	movf	___lwdiv@divisor,w,c
 10933  001522  5C01               	subwf	___lwdiv@dividend,w,c
 10934  001524  5004               	movf	___lwdiv@divisor+1,w,c
 10935  001526  5802               	subwfb	___lwdiv@dividend+1,w,c
 10936  001528  A0D8               	btfss	status,0,c
 10937  00152A  D005               	goto	i2l1358
 10938  00152C  5003               	movf	___lwdiv@divisor,w,c
 10939  00152E  5E01               	subwf	___lwdiv@dividend,f,c
 10940  001530  5004               	movf	___lwdiv@divisor+1,w,c
 10941  001532  5A02               	subwfb	___lwdiv@dividend+1,f,c
 10942  001534  8005               	bsf	___lwdiv@quotient,0,c
 10943  001536                     i2l1358:
 10944  001536  90D8               	bcf	status,0,c
 10945  001538  3204               	rrcf	___lwdiv@divisor+1,f,c
 10946  00153A  3203               	rrcf	___lwdiv@divisor,f,c
 10947  00153C  2E07               	decfsz	___lwdiv@counter,f,c
 10948  00153E  D7ED               	goto	i2u233_40
 10949  001540                     i2l1359:
 10950  001540  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
 10951  001544  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
 10952  001548  0012               	return		;funcret
 10953  00154A                     __end_of___lwdiv:
 10954                           	opt stack 0
 10955                           tosu	equ	0xFFF
 10956                           tosh	equ	0xFFE
 10957                           tosl	equ	0xFFD
 10958                           pclatu	equ	0xFFB
 10959                           pclath	equ	0xFFA
 10960                           tblptru	equ	0xFF8
 10961                           tblptrh	equ	0xFF7
 10962                           tblptrl	equ	0xFF6
 10963                           tablat	equ	0xFF5
 10964                           prodh	equ	0xFF4
 10965                           prodl	equ	0xFF3
 10966                           intcon	equ	0xFF2
 10967                           intcon2	equ	0xFF1
 10968                           postinc0	equ	0xFEE
 10969                           fsr0h	equ	0xFEA
 10970                           fsr0l	equ	0xFE9
 10971                           wreg	equ	0xFE8
 10972                           postdec1	equ	0xFE5
 10973                           plusw1	equ	0xFE3
 10974                           fsr1h	equ	0xFE2
 10975                           fsr1l	equ	0xFE1
 10976                           indf2	equ	0xFDF
 10977                           postinc2	equ	0xFDE
 10978                           postdec2	equ	0xFDD
 10979                           plusw2	equ	0xFDB
 10980                           fsr2h	equ	0xFDA
 10981                           fsr2l	equ	0xFD9
 10982                           status	equ	0xFD8
 10983                           
 10984 ;; *************** function _I2C_StatusCallback *****************
 10985 ;; Defined at:
 10986 ;;		line 149 in file "mcc_generated_files/i2c.c"
 10987 ;; Parameters:    Size  Location     Type
 10988 ;;  i2c_bus_stat    1    wreg     enum E15097
 10989 ;; Auto vars:     Size  Location     Type
 10990 ;;  i2c_bus_stat    1    0[COMRAM] enum E15097
 10991 ;; Return value:  Size  Location     Type
 10992 ;;                  1    wreg      void 
 10993 ;; Registers used:
 10994 ;;		wreg, status,2, status,0
 10995 ;; Tracked objects:
 10996 ;;		On entry : 0/0
 10997 ;;		On exit  : 0/0
 10998 ;;		Unchanged: 0/0
 10999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11001 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11003 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11004 ;;Total ram usage:        1 bytes
 11005 ;; Hardware stack levels used:    1
 11006 ;; This function calls:
 11007 ;;		Nothing
 11008 ;; This function is called by:
 11009 ;;		_I2C_ISR
 11010 ;; This function uses a non-reentrant model
 11011 ;;
 11012                           
 11013                           	psect	text71
 11014  001A0C                     __ptext71:
 11015                           	opt stack 0
 11016  001A0C                     _I2C_StatusCallback:
 11017                           	opt stack 23
 11018                           
 11019                           ;incstack = 0
 11020                           ;I2C_StatusCallback@i2c_bus_state stored from wreg
 11021  001A0C  6E01               	movwf	I2C_StatusCallback@i2c_bus_state,c
 11022                           
 11023                           ;i2c.c: 162: }
 11024                           
 11025                           ;i2c.c: 160: default:;
 11026                           
 11027                           ;i2c.c: 159: break;
 11028                           
 11029                           ;i2c.c: 158: case I2C_SLAVE_READ_COMPLETED:
 11030                           
 11031                           ;i2c.c: 157: break;
 11032                           
 11033                           ;i2c.c: 156: case I2C_SLAVE_READ_REQUEST:
 11034                           
 11035                           ;i2c.c: 155: break;
 11036                           
 11037                           ;i2c.c: 154: case I2C_SLAVE_WRITE_COMPLETED:
 11038                           
 11039                           ;i2c.c: 153: break;
 11040                           
 11041                           ;i2c.c: 152: case I2C_SLAVE_WRITE_REQUEST:
 11042                           
 11043                           ;i2c.c: 151: switch (i2c_bus_state) {
 11044  001A0E  5001               	movf	I2C_StatusCallback@i2c_bus_state,w,c
 11045                           
 11046                           ; Switch size 1, requested type "space"
 11047                           ; Number of cases is 4, Range of values is 0 to 3
 11048                           ; switch strategies available:
 11049                           ; Name         Instructions Cycles
 11050                           ; simple_byte           13     7 (average)
 11051                           ;	Chosen strategy is simple_byte
 11052  001A10  0A00               	xorlw	0	; case 0
 11053  001A12  B4D8               	btfsc	status,2,c
 11054  001A14  0012               	return	
 11055  001A16  0A01               	xorlw	1	; case 1
 11056  001A18  B4D8               	btfsc	status,2,c
 11057  001A1A  0012               	return	
 11058  001A1C  0A03               	xorlw	3	; case 2
 11059  001A1E  B4D8               	btfsc	status,2,c
 11060  001A20  0012               	return	
 11061  001A22  0A01               	xorlw	1	; case 3
 11062  001A24  0012               	return	
 11063  001A26                     __end_of_I2C_StatusCallback:
 11064                           	opt stack 0
 11065                           tosu	equ	0xFFF
 11066                           tosh	equ	0xFFE
 11067                           tosl	equ	0xFFD
 11068                           pclatu	equ	0xFFB
 11069                           pclath	equ	0xFFA
 11070                           tblptru	equ	0xFF8
 11071                           tblptrh	equ	0xFF7
 11072                           tblptrl	equ	0xFF6
 11073                           tablat	equ	0xFF5
 11074                           prodh	equ	0xFF4
 11075                           prodl	equ	0xFF3
 11076                           intcon	equ	0xFF2
 11077                           intcon2	equ	0xFF1
 11078                           postinc0	equ	0xFEE
 11079                           fsr0h	equ	0xFEA
 11080                           fsr0l	equ	0xFE9
 11081                           wreg	equ	0xFE8
 11082                           postdec1	equ	0xFE5
 11083                           plusw1	equ	0xFE3
 11084                           fsr1h	equ	0xFE2
 11085                           fsr1l	equ	0xFE1
 11086                           indf2	equ	0xFDF
 11087                           postinc2	equ	0xFDE
 11088                           postdec2	equ	0xFDD
 11089                           plusw2	equ	0xFDB
 11090                           fsr2h	equ	0xFDA
 11091                           fsr2l	equ	0xFD9
 11092                           status	equ	0xFD8
 11093                           
 11094 ;; *************** function _EUSART2_Transmit_ISR *****************
 11095 ;; Defined at:
 11096 ;;		line 178 in file "mcc_generated_files/eusart2.c"
 11097 ;; Parameters:    Size  Location     Type
 11098 ;;		None
 11099 ;; Auto vars:     Size  Location     Type
 11100 ;;		None
 11101 ;; Return value:  Size  Location     Type
 11102 ;;                  1    wreg      void 
 11103 ;; Registers used:
 11104 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11105 ;; Tracked objects:
 11106 ;;		On entry : 0/0
 11107 ;;		On exit  : 0/0
 11108 ;;		Unchanged: 0/0
 11109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11110 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11111 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11112 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11113 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11114 ;;Total ram usage:        0 bytes
 11115 ;; Hardware stack levels used:    1
 11116 ;; This function calls:
 11117 ;;		Nothing
 11118 ;; This function is called by:
 11119 ;;		_EUSART2_Initialize
 11120 ;;		_INTERRUPT_InterruptManager
 11121 ;; This function uses a non-reentrant model
 11122 ;;
 11123                           
 11124                           	psect	text72
 11125  001792                     __ptext72:
 11126                           	opt stack 0
 11127  001792                     _EUSART2_Transmit_ISR:
 11128                           	opt stack 24
 11129                           
 11130                           ;eusart2.c: 182: if(sizeof(eusart2TxBuffer) > eusart2TxBufferRemaining)
 11131                           
 11132                           ;incstack = 0
 11133  001792  0E08               	movlw	8
 11134  001794  0100               	movlb	0	; () banked
 11135  001796  61F6               	cpfslt	_eusart2TxBufferRemaining& (0+255),b	;volatile
 11136  001798  D012               	goto	i2l350
 11137                           
 11138                           ; BSR set to: 0
 11139                           ;eusart2.c: 183: {
 11140                           ;eusart2.c: 184: TXREG2 = eusart2TxBuffer[eusart2TxTail++];
 11141  00179A  51A3               	movf	_eusart2TxTail& (0+255),w,b	;volatile
 11142  00179C  0D01               	mullw	1
 11143  00179E  0E87               	movlw	low _eusart2TxBuffer
 11144  0017A0  24F3               	addwf	prodl,w,c
 11145  0017A2  6ED9               	movwf	fsr2l,c
 11146  0017A4  0E00               	movlw	high _eusart2TxBuffer
 11147  0017A6  20F4               	addwfc	prodh,w,c
 11148  0017A8  6EDA               	movwf	fsr2h,c
 11149  0017AA  50DF               	movf	indf2,w,c
 11150  0017AC  6E79               	movwf	3961,c	;volatile
 11151                           
 11152                           ; BSR set to: 0
 11153  0017AE  2BA3               	incf	_eusart2TxTail& (0+255),f,b	;volatile
 11154                           
 11155                           ; BSR set to: 0
 11156                           ;eusart2.c: 185: if(sizeof(eusart2TxBuffer) <= eusart2TxTail)
 11157  0017B0  0E07               	movlw	7
 11158  0017B2  65A3               	cpfsgt	_eusart2TxTail& (0+255),b	;volatile
 11159  0017B4  D002               	goto	i2l351
 11160                           
 11161                           ; BSR set to: 0
 11162                           ;eusart2.c: 186: {
 11163                           ;eusart2.c: 187: eusart2TxTail = 0;
 11164  0017B6  0E00               	movlw	0
 11165  0017B8  6FA3               	movwf	_eusart2TxTail& (0+255),b	;volatile
 11166  0017BA                     i2l351:
 11167                           
 11168                           ; BSR set to: 0
 11169                           ;eusart2.c: 188: }
 11170                           ;eusart2.c: 189: eusart2TxBufferRemaining++;
 11171                           
 11172                           ; BSR set to: 0
 11173  0017BA  2BF6               	incf	_eusart2TxBufferRemaining& (0+255),f,b	;volatile
 11174                           
 11175                           ;eusart2.c: 190: }
 11176  0017BC  0012               	return	
 11177  0017BE                     i2l350:
 11178                           
 11179                           ; BSR set to: 0
 11180                           ;eusart2.c: 191: else
 11181                           ;eusart2.c: 192: {
 11182                           ;eusart2.c: 193: PIE3bits.TX2IE = 0;
 11183  0017BE  98A3               	bcf	4003,4,c	;volatile
 11184  0017C0  0012               	return	
 11185  0017C2                     __end_of_EUSART2_Transmit_ISR:
 11186                           	opt stack 0
 11187                           tosu	equ	0xFFF
 11188                           tosh	equ	0xFFE
 11189                           tosl	equ	0xFFD
 11190                           pclatu	equ	0xFFB
 11191                           pclath	equ	0xFFA
 11192                           tblptru	equ	0xFF8
 11193                           tblptrh	equ	0xFF7
 11194                           tblptrl	equ	0xFF6
 11195                           tablat	equ	0xFF5
 11196                           prodh	equ	0xFF4
 11197                           prodl	equ	0xFF3
 11198                           intcon	equ	0xFF2
 11199                           intcon2	equ	0xFF1
 11200                           postinc0	equ	0xFEE
 11201                           fsr0h	equ	0xFEA
 11202                           fsr0l	equ	0xFE9
 11203                           wreg	equ	0xFE8
 11204                           postdec1	equ	0xFE5
 11205                           plusw1	equ	0xFE3
 11206                           fsr1h	equ	0xFE2
 11207                           fsr1l	equ	0xFE1
 11208                           indf2	equ	0xFDF
 11209                           postinc2	equ	0xFDE
 11210                           postdec2	equ	0xFDD
 11211                           plusw2	equ	0xFDB
 11212                           fsr2h	equ	0xFDA
 11213                           fsr2l	equ	0xFD9
 11214                           status	equ	0xFD8
 11215                           
 11216 ;; *************** function _EUSART1_Transmit_ISR *****************
 11217 ;; Defined at:
 11218 ;;		line 172 in file "mcc_generated_files/eusart1.c"
 11219 ;; Parameters:    Size  Location     Type
 11220 ;;		None
 11221 ;; Auto vars:     Size  Location     Type
 11222 ;;		None
 11223 ;; Return value:  Size  Location     Type
 11224 ;;                  1    wreg      void 
 11225 ;; Registers used:
 11226 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11227 ;; Tracked objects:
 11228 ;;		On entry : 0/0
 11229 ;;		On exit  : 0/0
 11230 ;;		Unchanged: 0/0
 11231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11233 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11234 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11235 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11236 ;;Total ram usage:        0 bytes
 11237 ;; Hardware stack levels used:    1
 11238 ;; This function calls:
 11239 ;;		Nothing
 11240 ;; This function is called by:
 11241 ;;		_EUSART1_Initialize
 11242 ;;		_INTERRUPT_InterruptManager
 11243 ;; This function uses a non-reentrant model
 11244 ;;
 11245                           
 11246                           	psect	text73
 11247  0017C2                     __ptext73:
 11248                           	opt stack 0
 11249  0017C2                     _EUSART1_Transmit_ISR:
 11250                           	opt stack 24
 11251                           
 11252                           ;eusart1.c: 176: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
 11253                           
 11254                           ; BSR set to: 0
 11255                           ;incstack = 0
 11256  0017C2  0E08               	movlw	8
 11257  0017C4  0100               	movlb	0	; () banked
 11258  0017C6  61F5               	cpfslt	_eusart1TxBufferRemaining& (0+255),b	;volatile
 11259  0017C8  D012               	goto	i2l488
 11260                           
 11261                           ; BSR set to: 0
 11262                           ;eusart1.c: 177: {
 11263                           ;eusart1.c: 178: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 11264  0017CA  51A0               	movf	_eusart1TxTail& (0+255),w,b	;volatile
 11265  0017CC  0D01               	mullw	1
 11266  0017CE  0E77               	movlw	low _eusart1TxBuffer
 11267  0017D0  24F3               	addwf	prodl,w,c
 11268  0017D2  6ED9               	movwf	fsr2l,c
 11269  0017D4  0E00               	movlw	high _eusart1TxBuffer
 11270  0017D6  20F4               	addwfc	prodh,w,c
 11271  0017D8  6EDA               	movwf	fsr2h,c
 11272  0017DA  50DF               	movf	indf2,w,c
 11273  0017DC  6EAD               	movwf	4013,c	;volatile
 11274                           
 11275                           ; BSR set to: 0
 11276  0017DE  2BA0               	incf	_eusart1TxTail& (0+255),f,b	;volatile
 11277                           
 11278                           ; BSR set to: 0
 11279                           ;eusart1.c: 179: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
 11280  0017E0  0E07               	movlw	7
 11281  0017E2  65A0               	cpfsgt	_eusart1TxTail& (0+255),b	;volatile
 11282  0017E4  D002               	goto	i2l489
 11283                           
 11284                           ; BSR set to: 0
 11285                           ;eusart1.c: 180: {
 11286                           ;eusart1.c: 181: eusart1TxTail = 0;
 11287  0017E6  0E00               	movlw	0
 11288  0017E8  6FA0               	movwf	_eusart1TxTail& (0+255),b	;volatile
 11289  0017EA                     i2l489:
 11290                           
 11291                           ; BSR set to: 0
 11292                           ;eusart1.c: 182: }
 11293                           ;eusart1.c: 183: eusart1TxBufferRemaining++;
 11294                           
 11295                           ; BSR set to: 0
 11296  0017EA  2BF5               	incf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 11297                           
 11298                           ;eusart1.c: 184: }
 11299  0017EC  0012               	return	
 11300  0017EE                     i2l488:
 11301                           
 11302                           ; BSR set to: 0
 11303                           ;eusart1.c: 185: else
 11304                           ;eusart1.c: 186: {
 11305                           ;eusart1.c: 187: PIE1bits.TX1IE = 0;
 11306  0017EE  989D               	bcf	3997,4,c	;volatile
 11307  0017F0  0012               	return	
 11308  0017F2                     __end_of_EUSART1_Transmit_ISR:
 11309                           	opt stack 0
 11310                           tosu	equ	0xFFF
 11311                           tosh	equ	0xFFE
 11312                           tosl	equ	0xFFD
 11313                           pclatu	equ	0xFFB
 11314                           pclath	equ	0xFFA
 11315                           tblptru	equ	0xFF8
 11316                           tblptrh	equ	0xFF7
 11317                           tblptrl	equ	0xFF6
 11318                           tablat	equ	0xFF5
 11319                           prodh	equ	0xFF4
 11320                           prodl	equ	0xFF3
 11321                           intcon	equ	0xFF2
 11322                           intcon2	equ	0xFF1
 11323                           postinc0	equ	0xFEE
 11324                           fsr0h	equ	0xFEA
 11325                           fsr0l	equ	0xFE9
 11326                           wreg	equ	0xFE8
 11327                           postdec1	equ	0xFE5
 11328                           plusw1	equ	0xFE3
 11329                           fsr1h	equ	0xFE2
 11330                           fsr1l	equ	0xFE1
 11331                           indf2	equ	0xFDF
 11332                           postinc2	equ	0xFDE
 11333                           postdec2	equ	0xFDD
 11334                           plusw2	equ	0xFDB
 11335                           fsr2h	equ	0xFDA
 11336                           fsr2l	equ	0xFD9
 11337                           status	equ	0xFD8
 11338                           
 11339 ;; *************** function _EUSART1_Receive_ISR *****************
 11340 ;; Defined at:
 11341 ;;		line 191 in file "mcc_generated_files/eusart1.c"
 11342 ;; Parameters:    Size  Location     Type
 11343 ;;		None
 11344 ;; Auto vars:     Size  Location     Type
 11345 ;;		None
 11346 ;; Return value:  Size  Location     Type
 11347 ;;                  1    wreg      void 
 11348 ;; Registers used:
 11349 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11350 ;; Tracked objects:
 11351 ;;		On entry : 0/0
 11352 ;;		On exit  : 0/0
 11353 ;;		Unchanged: 0/0
 11354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11355 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11356 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11357 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11358 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11359 ;;Total ram usage:        0 bytes
 11360 ;; Hardware stack levels used:    1
 11361 ;; This function calls:
 11362 ;;		Nothing
 11363 ;; This function is called by:
 11364 ;;		_EUSART1_Initialize
 11365 ;;		_INTERRUPT_InterruptManager
 11366 ;; This function uses a non-reentrant model
 11367 ;;
 11368                           
 11369                           	psect	text74
 11370  001820                     __ptext74:
 11371                           	opt stack 0
 11372  001820                     _EUSART1_Receive_ISR:
 11373                           	opt stack 24
 11374                           
 11375                           ;eusart1.c: 194: if(1 == RCSTA1bits.OERR)
 11376                           
 11377                           ; BSR set to: 0
 11378                           ;incstack = 0
 11379  001820  A2AB               	btfss	4011,1,c	;volatile
 11380  001822  D002               	goto	i2l494
 11381                           
 11382                           ;eusart1.c: 195: {
 11383                           ;eusart1.c: 198: RCSTA1bits.CREN = 0;
 11384  001824  98AB               	bcf	4011,4,c	;volatile
 11385                           
 11386                           ;eusart1.c: 199: RCSTA1bits.CREN = 1;
 11387  001826  88AB               	bsf	4011,4,c	;volatile
 11388  001828                     i2l494:
 11389                           
 11390                           ;eusart1.c: 200: }
 11391                           ;eusart1.c: 203: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 11392  001828  0100               	movlb	0	; () banked
 11393  00182A  519F               	movf	_eusart1RxHead& (0+255),w,b	;volatile
 11394  00182C  0D01               	mullw	1
 11395  00182E  0E6F               	movlw	low _eusart1RxBuffer
 11396  001830  24F3               	addwf	prodl,w,c
 11397  001832  6ED9               	movwf	fsr2l,c
 11398  001834  0E00               	movlw	high _eusart1RxBuffer
 11399  001836  20F4               	addwfc	prodh,w,c
 11400  001838  6EDA               	movwf	fsr2h,c
 11401  00183A  CFAE FFDF          	movff	4014,indf2	;volatile
 11402                           
 11403                           ; BSR set to: 0
 11404  00183E  2B9F               	incf	_eusart1RxHead& (0+255),f,b	;volatile
 11405                           
 11406                           ; BSR set to: 0
 11407                           ;eusart1.c: 204: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
 11408  001840  0E07               	movlw	7
 11409  001842  659F               	cpfsgt	_eusart1RxHead& (0+255),b	;volatile
 11410  001844  D002               	goto	i2l495
 11411                           
 11412                           ; BSR set to: 0
 11413                           ;eusart1.c: 205: {
 11414                           ;eusart1.c: 206: eusart1RxHead = 0;
 11415  001846  0E00               	movlw	0
 11416  001848  6F9F               	movwf	_eusart1RxHead& (0+255),b	;volatile
 11417  00184A                     i2l495:
 11418                           
 11419                           ; BSR set to: 0
 11420                           ;eusart1.c: 207: }
 11421                           ;eusart1.c: 208: eusart1RxCount++;
 11422                           
 11423                           ; BSR set to: 0
 11424  00184A  2A58               	incf	_eusart1RxCount,f,c	;volatile
 11425                           
 11426                           ; BSR set to: 0
 11427  00184C  0012               	return		;funcret
 11428  00184E                     __end_of_EUSART1_Receive_ISR:
 11429                           	opt stack 0
 11430                           tosu	equ	0xFFF
 11431                           tosh	equ	0xFFE
 11432                           tosl	equ	0xFFD
 11433                           pclatu	equ	0xFFB
 11434                           pclath	equ	0xFFA
 11435                           tblptru	equ	0xFF8
 11436                           tblptrh	equ	0xFF7
 11437                           tblptrl	equ	0xFF6
 11438                           tablat	equ	0xFF5
 11439                           prodh	equ	0xFF4
 11440                           prodl	equ	0xFF3
 11441                           intcon	equ	0xFF2
 11442                           intcon2	equ	0xFF1
 11443                           postinc0	equ	0xFEE
 11444                           fsr0h	equ	0xFEA
 11445                           fsr0l	equ	0xFE9
 11446                           wreg	equ	0xFE8
 11447                           postdec1	equ	0xFE5
 11448                           plusw1	equ	0xFE3
 11449                           fsr1h	equ	0xFE2
 11450                           fsr1l	equ	0xFE1
 11451                           indf2	equ	0xFDF
 11452                           postinc2	equ	0xFDE
 11453                           postdec2	equ	0xFDD
 11454                           plusw2	equ	0xFDB
 11455                           fsr2h	equ	0xFDA
 11456                           fsr2l	equ	0xFD9
 11457                           status	equ	0xFD8
 11458                           tosu	equ	0xFFF
 11459                           tosh	equ	0xFFE
 11460                           tosl	equ	0xFFD
 11461                           pclatu	equ	0xFFB
 11462                           pclath	equ	0xFFA
 11463                           tblptru	equ	0xFF8
 11464                           tblptrh	equ	0xFF7
 11465                           tblptrl	equ	0xFF6
 11466                           tablat	equ	0xFF5
 11467                           prodh	equ	0xFF4
 11468                           prodl	equ	0xFF3
 11469                           intcon	equ	0xFF2
 11470                           intcon2	equ	0xFF1
 11471                           postinc0	equ	0xFEE
 11472                           fsr0h	equ	0xFEA
 11473                           fsr0l	equ	0xFE9
 11474                           wreg	equ	0xFE8
 11475                           postdec1	equ	0xFE5
 11476                           plusw1	equ	0xFE3
 11477                           fsr1h	equ	0xFE2
 11478                           fsr1l	equ	0xFE1
 11479                           indf2	equ	0xFDF
 11480                           postinc2	equ	0xFDE
 11481                           postdec2	equ	0xFDD
 11482                           plusw2	equ	0xFDB
 11483                           fsr2h	equ	0xFDA
 11484                           fsr2l	equ	0xFD9
 11485                           status	equ	0xFD8
 11486                           
 11487                           	psect	text75
 11488  000000                     __ptext75:
 11489                           	opt stack 0
 11490                           tosu	equ	0xFFF
 11491                           tosh	equ	0xFFE
 11492                           tosl	equ	0xFFD
 11493                           pclatu	equ	0xFFB
 11494                           pclath	equ	0xFFA
 11495                           tblptru	equ	0xFF8
 11496                           tblptrh	equ	0xFF7
 11497                           tblptrl	equ	0xFF6
 11498                           tablat	equ	0xFF5
 11499                           prodh	equ	0xFF4
 11500                           prodl	equ	0xFF3
 11501                           intcon	equ	0xFF2
 11502                           intcon2	equ	0xFF1
 11503                           postinc0	equ	0xFEE
 11504                           fsr0h	equ	0xFEA
 11505                           fsr0l	equ	0xFE9
 11506                           wreg	equ	0xFE8
 11507                           postdec1	equ	0xFE5
 11508                           plusw1	equ	0xFE3
 11509                           fsr1h	equ	0xFE2
 11510                           fsr1l	equ	0xFE1
 11511                           indf2	equ	0xFDF
 11512                           postinc2	equ	0xFDE
 11513                           postdec2	equ	0xFDD
 11514                           plusw2	equ	0xFDB
 11515                           fsr2h	equ	0xFDA
 11516                           fsr2l	equ	0xFD9
 11517                           status	equ	0xFD8
 11518                           
 11519                           	psect	rparam
 11520  0000                     tosu	equ	0xFFF
 11521                           tosh	equ	0xFFE
 11522                           tosl	equ	0xFFD
 11523                           pclatu	equ	0xFFB
 11524                           pclath	equ	0xFFA
 11525                           tblptru	equ	0xFF8
 11526                           tblptrh	equ	0xFF7
 11527                           tblptrl	equ	0xFF6
 11528                           tablat	equ	0xFF5
 11529                           prodh	equ	0xFF4
 11530                           prodl	equ	0xFF3
 11531                           intcon	equ	0xFF2
 11532                           intcon2	equ	0xFF1
 11533                           postinc0	equ	0xFEE
 11534                           fsr0h	equ	0xFEA
 11535                           fsr0l	equ	0xFE9
 11536                           wreg	equ	0xFE8
 11537                           postdec1	equ	0xFE5
 11538                           plusw1	equ	0xFE3
 11539                           fsr1h	equ	0xFE2
 11540                           fsr1l	equ	0xFE1
 11541                           indf2	equ	0xFDF
 11542                           postinc2	equ	0xFDE
 11543                           postdec2	equ	0xFDD
 11544                           plusw2	equ	0xFDB
 11545                           fsr2h	equ	0xFDA
 11546                           fsr2l	equ	0xFD9
 11547                           status	equ	0xFD8
 11548                           
 11549                           	psect	temp
 11550  00005E                     btemp:
 11551                           	opt stack 0
 11552  00005E                     	ds	1
 11553  0000                     int$flags	set	btemp
 11554  0000                     wtemp6	set	btemp+1
 11555                           tosu	equ	0xFFF
 11556                           tosh	equ	0xFFE
 11557                           tosl	equ	0xFFD
 11558                           pclatu	equ	0xFFB
 11559                           pclath	equ	0xFFA
 11560                           tblptru	equ	0xFF8
 11561                           tblptrh	equ	0xFF7
 11562                           tblptrl	equ	0xFF6
 11563                           tablat	equ	0xFF5
 11564                           prodh	equ	0xFF4
 11565                           prodl	equ	0xFF3
 11566                           intcon	equ	0xFF2
 11567                           intcon2	equ	0xFF1
 11568                           postinc0	equ	0xFEE
 11569                           fsr0h	equ	0xFEA
 11570                           fsr0l	equ	0xFE9
 11571                           wreg	equ	0xFE8
 11572                           postdec1	equ	0xFE5
 11573                           plusw1	equ	0xFE3
 11574                           fsr1h	equ	0xFE2
 11575                           fsr1l	equ	0xFE1
 11576                           indf2	equ	0xFDF
 11577                           postinc2	equ	0xFDE
 11578                           postdec2	equ	0xFDD
 11579                           plusw2	equ	0xFDB
 11580                           fsr2h	equ	0xFDA
 11581                           fsr2l	equ	0xFD9
 11582                           status	equ	0xFD8


Data Sizes:
    Strings     87
    Constant    1134
    Data        7
    BSS         123
    Persistent  22
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     72      93
    BANK0           160     40     156
    BANK1           256      0      15
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14           65      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_7(CODE[16]), STR_2(CODE[16]), STR_1(CODE[16]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 20
		 -> mensaje(BANK0[20]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 20
		 -> mensaje(BANK0[20]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_6(CODE[9]), STR_5(CODE[13]), STR_4(CODE[3]), STR_3(CODE[14]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    lcd_text_color@msjPtr	PTR unsigned char  size(2) Largest target is 20
		 -> mensaje(BANK0[20]), 

    lcd_text@msjPtr	PTR unsigned char  size(2) Largest target is 20
		 -> mensaje(BANK0[20]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 20
		 -> mensaje(BANK0[20]), 

    I2C_SetInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> I2C_custom_isr(), I2C_ISR(), 

    EUSART1_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Receive_ISR(), 

    EUSART1_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Transmit_ISR(), 

    EUSART2_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> uart2_rx_custom_isr(), EUSART2_Receive_ISR(), 

    EUSART2_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART2_Transmit_ISR(), 

    I2C_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> I2C_custom_isr(), I2C_ISR(), Absolute function(), 

    EUSART1_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Receive_ISR(), Absolute function(), 

    EUSART1_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Transmit_ISR(), Absolute function(), 

    EUSART2_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> uart2_rx_custom_isr(), EUSART2_Receive_ISR(), Absolute function(), 

    EUSART2_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART2_Transmit_ISR(), Absolute function(), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> tmr2_custom_isr(), TMR2_DefaultInterruptHandler(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> tmr2_custom_isr(), TMR2_DefaultInterruptHandler(), Absolute function(), 

    IOCB7_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCB7_DefaultInterruptHandler(), 

    IOCB7_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), IOCB7_DefaultInterruptHandler(), 

    IOCB6_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCB6_DefaultInterruptHandler(), 

    IOCB6_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), IOCB6_DefaultInterruptHandler(), 

    IOCB5_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCB5_DefaultInterruptHandler(), 

    IOCB5_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), IOCB5_DefaultInterruptHandler(), 

    IOCB4_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCB4_DefaultInterruptHandler(), 

    IOCB4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), IOCB4_DefaultInterruptHandler(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _uart2_rx_custom_isr->_save_uart_data
    _TMR2_CallBack->_tmr2_custom_isr
    _tmr2_custom_isr->_lcd_number
    _tmr2_custom_isr->_lcd_text_color
    _tmr2_custom_isr->i2_lcd_text
    i2_lcd_text->i2_lcd_pix
    i2_lcd_point->i2_lcd_pix
    _lcd_text_color->_lcd_pix_color
    _lcd_pix_color->i2_lcd_set_address
    _lcd_number->_lcd_sign
    _lcd_sign->i2_lcd_pix
    i2_lcd_pix->i2_lcd_set_address
    i2_lcd_set_address->i2_lcd_write_command
    i2_lcd_memory_start->i2_lcd_write_command
    i2_lcd_write_command->i2_lcd_write_bus
    _I2C_custom_isr->_I2C_StatusCallback2
    _I2C_StatusCallback2->_printf
    _printf->___lwmod
    ___lwmod->___lwdiv
    _I2C_ISR->_I2C_StatusCallback

Critical Paths under _main in BANK0

    _main->_lcd_text
    _lcd_text->_lcd_pix
    _lcd_set_background->_lcd_set_address
    _lcd_point->_lcd_pix
    _lcd_pix->_lcd_set_address
    _lcd_set_address->_lcd_write_command
    _lcd_memory_start->_lcd_write_command
    _lcd_init->_lcd_write_command
    _lcd_write_command->_lcd_write_bus
    _SYSTEM_Initialize->_EUSART2_Initialize
    _TMR2_Initialize->_TMR2_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCB4_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCB5_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCB6_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCB7_SetInterruptHandler
    _I2C_Initialize->_I2C_SetInterruptHandler
    _EUSART2_Initialize->_EUSART2_SetRxInterruptHandler
    _EUSART2_Initialize->_EUSART2_SetTxInterruptHandler
    _EUSART1_Initialize->_EUSART1_SetRxInterruptHandler
    _EUSART1_Initialize->_EUSART1_SetTxInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   18081
                                             39 BANK0      1     1      0
      _EUSART2_SetRxInterruptHandler
            _I2C_SetInterruptHandler
                  _SYSTEM_Initialize
           _TMR2_SetInterruptHandler
                           _lcd_init
                          _lcd_point
                 _lcd_set_background
                           _lcd_text
                              _putch
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _strcpy                                               6     2      4     427
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _putch                                                1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _lcd_text                                            16    14      2    8285
                                             23 BANK0     16    14      2
                             ___wmul
                            _bitRead
                            _lcd_pix
 ---------------------------------------------------------------------------------
 (2) _bitRead                                              7     3      4     419
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _lcd_set_background                                   6     4      2    1328
                                             10 BANK0      6     4      2
                   _lcd_memory_start
                    _lcd_set_address
                      _lcd_write_bus
 ---------------------------------------------------------------------------------
 (1) _lcd_point                                            1     1      0    6222
                                             23 BANK0      1     1      0
                            _lcd_pix
 ---------------------------------------------------------------------------------
 (2) _lcd_pix                                             13     7      6    6134
                                             10 BANK0     13     7      6
                             ___wmul
                            _bitRead (ARG)
                   _lcd_memory_start
                    _lcd_set_address
                      _lcd_write_bus
 ---------------------------------------------------------------------------------
 (3) _lcd_set_address                                      8     0      8    1050
                                              2 BANK0      8     0      8
                      _lcd_write_bus
                  _lcd_write_command
 ---------------------------------------------------------------------------------
 (3) _lcd_memory_start                                     0     0      0      44
                  _lcd_write_command
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     917
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             2     2      0      66
                                              2 BANK0      2     2      0
                      _lcd_write_bus
                  _lcd_write_command
 ---------------------------------------------------------------------------------
 (4) _lcd_write_command                                    1     1      0      44
                                              1 BANK0      1     1      0
                      _lcd_write_bus
 ---------------------------------------------------------------------------------
 (3) _lcd_write_bus                                        1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    1209
                 _EUSART1_Initialize
                 _EUSART2_Initialize
                     _I2C_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR2_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0     174
           _TMR2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR2_SetInterruptHandler                             2     0      2     174
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0     392
          _IOCB4_SetInterruptHandler
          _IOCB5_SetInterruptHandler
          _IOCB6_SetInterruptHandler
          _IOCB7_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _IOCB7_SetInterruptHandler                            2     0      2      98
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _IOCB6_SetInterruptHandler                            2     0      2      98
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _IOCB5_SetInterruptHandler                            2     0      2      98
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _IOCB4_SetInterruptHandler                            2     0      2      98
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Initialize                                       0     0      0     174
            _I2C_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _I2C_SetInterruptHandler                              2     0      2     174
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _EUSART2_Initialize                                   1     1      0     273
                                              2 BANK0      1     1      0
      _EUSART2_SetRxInterruptHandler
      _EUSART2_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART2_SetTxInterruptHandler                        2     0      2      98
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART2_SetRxInterruptHandler                        2     0      2     174
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0     196
      _EUSART1_SetRxInterruptHandler
      _EUSART1_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetTxInterruptHandler                        2     0      2      98
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetRxInterruptHandler                        2     0      2      98
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                          18    18      0   22079
                                             54 COMRAM    18    18      0
                   Absolute function *
                _EUSART1_Receive_ISR *
               _EUSART1_Transmit_ISR *
                _EUSART2_Receive_ISR *
               _EUSART2_Transmit_ISR *
                            _I2C_ISR *
                     _I2C_custom_isr *
                    _PIN_MANAGER_IOC
                           _TMR2_ISR
                _uart2_rx_custom_isr *
 ---------------------------------------------------------------------------------
 (7) _uart2_rx_custom_isr                                  0     0      0     120
                     _save_uart_data
 ---------------------------------------------------------------------------------
 (8) _save_uart_data                                       2     1      1     120
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (7) _TMR2_ISR                                             0     0      0   19193
                      _TMR2_CallBack
 ---------------------------------------------------------------------------------
 (8) _TMR2_CallBack                                        0     0      0   19193
                   Absolute function *
       _TMR2_DefaultInterruptHandler *
                    _tmr2_custom_isr *
 ---------------------------------------------------------------------------------
 (9) _tmr2_custom_isr                                     16    16      0   19193
                                             39 COMRAM    15    15      0
                            ___awdiv
                         _lcd_number
                     _lcd_text_color
                        i2_lcd_point
                         i2_lcd_text
                            i2_putch
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (10) i2_strcpy                                            6     2      4     179
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) i2_lcd_text                                         16    14      2    4437
                                             23 COMRAM    16    14      2
                           i2___wmul
                          i2_bitRead
                          i2_lcd_pix
 ---------------------------------------------------------------------------------
 (10) i2_lcd_point                                         1     1      0    3118
                                             23 COMRAM     1     1      0
                          i2_lcd_pix
 ---------------------------------------------------------------------------------
 (10) _lcd_text_color                                     16    14      2    3127
                                             23 COMRAM    16    14      2
                      _lcd_pix_color
                           i2___wmul
                          i2_bitRead
 ---------------------------------------------------------------------------------
 (11) _lcd_pix_color                                      13     7      6    1670
                                             10 COMRAM    13     7      6
                           i2___wmul
                          i2_bitRead (ARG)
                 i2_lcd_memory_start
                  i2_lcd_set_address
                    i2_lcd_write_bus
 ---------------------------------------------------------------------------------
 (10) _lcd_number                                         15    13      2    7291
                                             24 COMRAM    15    13      2
                           _lcd_sign
                          i2_bitRead
                          i2_lcd_pix
 ---------------------------------------------------------------------------------
 (11) i2_bitRead                                           7     3      4     223
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (11) _lcd_sign                                            1     1      0    3250
                                             23 COMRAM     1     1      0
                          i2_lcd_pix
 ---------------------------------------------------------------------------------
 (11) i2_lcd_pix                                          13     7      6    3030
                                             10 COMRAM    13     7      6
                           i2___wmul
                          i2_bitRead (ARG)
                 i2_lcd_memory_start
                  i2_lcd_set_address
                    i2_lcd_write_bus
 ---------------------------------------------------------------------------------
 (12) i2_lcd_set_address                                   8     0      8     450
                                              2 COMRAM     8     0      8
                    i2_lcd_write_bus
                i2_lcd_write_command
 ---------------------------------------------------------------------------------
 (12) i2_lcd_memory_start                                  0     0      0      44
                i2_lcd_write_command
 ---------------------------------------------------------------------------------
 (13) i2_lcd_write_command                                 1     1      0      44
                                              1 COMRAM     1     1      0
                    i2_lcd_write_bus
 ---------------------------------------------------------------------------------
 (12) i2_lcd_write_bus                                     1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (12) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) ___awdiv                                             8     4      4     604
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (9) _TMR2_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _PIN_MANAGER_IOC                                      0     0      0       0
                          _IOCB4_ISR
                          _IOCB5_ISR
                          _IOCB6_ISR
                          _IOCB7_ISR
 ---------------------------------------------------------------------------------
 (8) _IOCB7_ISR                                            0     0      0       0
                   Absolute function *
      _IOCB7_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (9) _IOCB7_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _IOCB6_ISR                                            0     0      0       0
                   Absolute function *
      _IOCB6_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (9) _IOCB6_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _IOCB5_ISR                                            0     0      0       0
                   Absolute function *
      _IOCB5_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (9) _IOCB5_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _IOCB4_ISR                                            0     0      0       0
                   Absolute function *
      _IOCB4_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (9) _IOCB4_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (9) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _I2C_custom_isr                                       1     1      0    2720
                                             25 COMRAM     1     1      0
                _I2C_StatusCallback2
                             _printf
 ---------------------------------------------------------------------------------
 (8) _I2C_StatusCallback2                                  1     1      0    1359
                                             24 COMRAM     1     1      0
                             _printf
 ---------------------------------------------------------------------------------
 (8) _printf                                              21    17      4    1337
                                             12 COMRAM    12     8      4
                            ___lwdiv
                            ___lwmod
                            i2_putch
 ---------------------------------------------------------------------------------
 (10) i2_putch                                             1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) ___lwmod                                              5     1      4     311
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (9) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (7) _I2C_ISR                                              1     1      0      46
                                              1 COMRAM     1     1      0
                 _I2C_StatusCallback
 ---------------------------------------------------------------------------------
 (8) _I2C_StatusCallback                                   1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _EUSART2_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART2_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART1_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART1_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART2_SetRxInterruptHandler
   _I2C_SetInterruptHandler
   _SYSTEM_Initialize
     _EUSART1_Initialize
       _EUSART1_SetRxInterruptHandler
       _EUSART1_SetTxInterruptHandler
     _EUSART2_Initialize
       _EUSART2_SetRxInterruptHandler
       _EUSART2_SetTxInterruptHandler
     _I2C_Initialize
       _I2C_SetInterruptHandler
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCB4_SetInterruptHandler
       _IOCB5_SetInterruptHandler
       _IOCB6_SetInterruptHandler
       _IOCB7_SetInterruptHandler
     _TMR2_Initialize
       _TMR2_SetInterruptHandler
   _TMR2_SetInterruptHandler
   _lcd_init
     _lcd_write_bus
     _lcd_write_command
       _lcd_write_bus
   _lcd_point
     _lcd_pix
       ___wmul
       _bitRead (ARG)
       _lcd_memory_start (ARG)
         _lcd_write_command
           _lcd_write_bus
       _lcd_set_address (ARG)
         _lcd_write_bus
         _lcd_write_command
           _lcd_write_bus
       _lcd_write_bus (ARG)
   _lcd_set_background
     _lcd_memory_start
       _lcd_write_command
         _lcd_write_bus
     _lcd_set_address
       _lcd_write_bus
       _lcd_write_command
         _lcd_write_bus
     _lcd_write_bus
   _lcd_text
     ___wmul
     _bitRead
     _lcd_pix
       ___wmul
       _bitRead (ARG)
       _lcd_memory_start (ARG)
         _lcd_write_command
           _lcd_write_bus
       _lcd_set_address (ARG)
         _lcd_write_bus
         _lcd_write_command
           _lcd_write_bus
       _lcd_write_bus (ARG)
   _putch
   _strcpy

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART1_Receive_ISR *
   _EUSART1_Transmit_ISR *
   _EUSART2_Receive_ISR *
   _EUSART2_Transmit_ISR *
   _I2C_ISR *
     _I2C_StatusCallback
   _I2C_custom_isr *
     _I2C_StatusCallback2
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         i2_putch
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       i2_putch
   _PIN_MANAGER_IOC *
     _IOCB4_ISR
       Absolute function(Fake) *
       _IOCB4_DefaultInterruptHandler *
     _IOCB5_ISR
       Absolute function(Fake) *
       _IOCB5_DefaultInterruptHandler *
     _IOCB6_ISR
       Absolute function(Fake) *
       _IOCB6_DefaultInterruptHandler *
     _IOCB7_ISR
       Absolute function(Fake) *
       _IOCB7_DefaultInterruptHandler *
   _TMR2_ISR *
     _TMR2_CallBack
       Absolute function(Fake) *
       _TMR2_DefaultInterruptHandler *
       _tmr2_custom_isr *
         ___awdiv
         _lcd_number
           _lcd_sign
             i2_lcd_pix
               i2___wmul
               i2_bitRead (ARG)
               i2_lcd_memory_start (ARG)
                 i2_lcd_write_command
                   i2_lcd_write_bus
               i2_lcd_set_address (ARG)
                 i2_lcd_write_bus
                 i2_lcd_write_command
                   i2_lcd_write_bus
               i2_lcd_write_bus (ARG)
           i2_bitRead
           i2_lcd_pix
             i2___wmul
             i2_bitRead (ARG)
             i2_lcd_memory_start (ARG)
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_set_address (ARG)
               i2_lcd_write_bus
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_write_bus (ARG)
         _lcd_text_color
           _lcd_pix_color
             i2___wmul
             i2_bitRead (ARG)
             i2_lcd_memory_start (ARG)
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_set_address (ARG)
               i2_lcd_write_bus
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_write_bus (ARG)
           i2___wmul
           i2_bitRead
         i2_lcd_point
           i2_lcd_pix
             i2___wmul
             i2_bitRead (ARG)
             i2_lcd_memory_start (ARG)
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_set_address (ARG)
               i2_lcd_write_bus
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_write_bus (ARG)
         i2_lcd_text
           i2___wmul
           i2_bitRead
           i2_lcd_pix
             i2___wmul
             i2_bitRead (ARG)
             i2_lcd_memory_start (ARG)
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_set_address (ARG)
               i2_lcd_write_bus
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_write_bus (ARG)
         i2_putch
         i2_strcpy
   _uart2_rx_custom_isr *
     _save_uart_data

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E40      0       0      35        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       F       8        5.9%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     28      9C       5       97.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     48      5D       1       98.9%
BITBANK14           41      0       0      33        0.0%
BANK14              41      0       0      34        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     108       6        0.0%
DATA                 0      0     108       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Nov 06 12:03:37 2018

                       __end_of_lcd_text_color 07F6               __end_of_TMR2_SetInterruptHandler 1AAE  
                     _eusart1TxBufferRemaining 00F5                                              _k 0052  
                                            _q 0051                                    _SSPSTATbits 000FC7  
                                 ___awdiv@sign 0006                            ___wmul@multiplicand 00BB  
           __size_of_IOCB4_SetInterruptHandler 000A                                    __CFG_BORV$3 000000  
           __size_of_IOCB7_SetInterruptHandler 000A                     ?_IOCB4_SetInterruptHandler 00B9  
                               ?_lcd_pix_color 000B                                   __CFG_CP0$OFF 000000  
                                 __CFG_CP1$OFF 000000                                   __CFG_CP2$OFF 000000  
                                 __CFG_CP3$OFF 000000                     ?_IOCB7_SetInterruptHandler 00B9  
                     __size_ofi2_lcd_write_bus 000C                                            l320 1442  
                                          l319 1446                                            l900 0394  
                                          l901 03B6                                            l903 04AA  
                                          l840 0E1A                                            l808 166A  
                                          l841 0DDA                                            l842 0DF6  
                                          l906 04B4                                            l835 0E0A  
                                          l843 0DE4                                            l836 0DA8  
                                          l828 134C                                            l837 0DC6  
                                          l838 0DB4                                            l774 1212  
                                          l895 032A                                            l897 0360  
                                 __CFG_CPB$OFF 000000                                            _PR2 000FCB  
                                 __CFG_CPD$OFF 000000                                __end_of_I2C_ISR 162C  
                                          _neg 0054                                            _key 004F  
                              _TMR2_Initialize 18F2                                            prod 000FF3  
                                          tosl 000FFD                                            wreg 000FE8  
                                   _TXSTA1bits 000FAC                                     _TXSTA2bits 000FBA  
                                  lcd_pix@size 00C8                             __size_of_IOCB4_ISR 0020  
                           __size_of_IOCB5_ISR 0020                             __size_of_IOCB6_ISR 0020  
                           __size_of_IOCB7_ISR 0020                                           l1498 1740  
                                         l1499 1736                                           l3830 04A0  
                                         l3818 03D2                                           l3834 04AA  
                                         l3936 1354                                           l3768 1A66  
                                         l3948 137A                                     i2_lcd_text 04B6  
                                         STR_1 FFC7                                           STR_2 FFB7  
                                         STR_3 FFD7                                           STR_4 FFFB  
                                         STR_5 FFE5                                           STR_6 FFF2  
                                         STR_7 FFA7                        lcd_set_background@color 00C3  
                                         _LATA 000F89                                           u3110 0350  
                                         _LATB 000F8A                                           _LATC 000F8B  
                                         _LATD 000F8C                                           _LATE 000F8D  
                                         u3170 04A0                                           u3090 0328  
                                         u3180 04AA                                           u3280 1376  
                                         u2804 1644                                           u2805 163E  
                                         u3607 1188                                           u3617 099E  
                                         u3627 09B2                                           u3637 09C4  
                                         u3647 09DC                                           u3657 0AB8  
                             tmr2_custom_isr@i 0030                               tmr2_custom_isr@j 002D  
                                         _TMR2 000FCC                                    lcd_number@i 0025  
                                  lcd_number@j 0026                                    lcd_number@k 0027  
                                         _WPUB 000F5B                          ??_EUSART2_Receive_ISR 0001  
                    _IOCB6_SetInterruptHandler 1AB8                                           _buff 0100  
                                         _main 117C                                           _text 0095  
                                         fsr0h 000FEA                                           fsr1h 000FE2  
                                         fsr2h 000FDA                                           fsr0l 000FE9  
                                         indf2 000FDF                                           fsr1l 000FE1  
                                         fsr2l 000FD9                                           btemp 005E  
                  __end_ofi2_lcd_write_command 1A8C                                           prodh 000FF4  
                                         prodl 000FF3                                           start 0138  
                               ?_lcd_write_bus 0001                                  __CFG_IESO$OFF 000000  
                             ?_lcd_set_address 00BB                        _I2C_SetInterruptHandler 1AD6  
                 __end_of_EUSART2_Transmit_ISR 17C2                                __end_ofi2_putch 1AA4  
                                __CFG_MCLRE$ON 000000                                   ___param_bank 000000  
                             ??_I2C_custom_isr 001A                                ?_lcd_text_color 0018  
                     __size_of_tmr2_custom_isr 01D0                                     i2lcd_pix@c 000F  
                                   i2lcd_pix@i 0016                                     i2lcd_pix@x 000B  
                                   i2lcd_pix@y 000D                 __size_of_OSCILLATOR_Initialize 0012  
                __end_of_OSCILLATOR_Initialize 1A62                                          ?_main 0001  
                                  i2_lcd_point 10C8                                __end_of___awdiv 1298  
            __end_of_IOCB4_SetInterruptHandler 1AD6                                ___awdiv@divisor 0003  
                                        _T2CON 000FCA                                          _LATA0 007C48  
                                        _LATA1 007C49                                          _LATB0 007C50  
                                        _LATA2 007C4A                                          _LATB1 007C51  
                                        _LATA3 007C4B                                          _LATB2 007C52  
                                        _LATB3 007C53              __end_of_IOCB7_SetInterruptHandler 1AB8  
                              __end_of___lwdiv 154A                                __end_of___lwmod 16B0  
                                        i2l250 005E                                          i2l261 00CE  
                                        i2l253 007A                                          i2l350 17BE  
                                        i2l351 17BA                                          i2l255 0092  
                                        i2l257 00AA                                          i2l259 00C2  
                                        i2l356 17FA                                          i2l357 181C  
                                        i2l550 1628                                          i2l710 1888  
                                        i2l711 189E                                          i2l544 1600  
                                        i2l720 02F0                                          i2l721 01AC  
                                        i2l546 161A                                          i2l722 0224  
                                        i2l547 1612                                          i2l731 0260  
                                        i2l723 01C2                                          i2l707 1882  
                                        i2l900 053A                                          i2l732 0256  
                                        i2l741 148A                                          i2l901 055C  
                                        i2l725 01F2                                          i2l717 0182  
                                        i2l494 1828                                          i2l742 1454  
                                        i2l750 156E                                          i2l726 01E8  
                                        i2l718 016A                                          i2l495 184A  
                                        i2l911 06A6                                          i2l903 064A  
                                        i2l735 0302                                          i2l488 17EE  
                                        i2l744 1462                                          i2l752 1588  
                                        i2l840 1006                                          i2l808 16EA  
                                        i2l920 07F4                                          i2l489 17EA  
                                        i2l745 1476                                          i2l753 1580  
                                        i2l841 0FCA                                          i2l737 02A4  
                                        i2l729 0230                                          i2l746 1484  
                                        i2l842 0FE4                                          i2l850 0EC0  
                                        i2l914 06DA                                          i2l906 0654  
                                        i2l835 0FF8                                          i2l843 0FD4  
                                        i2l851 0EB0                                          i2l915 06FC  
                                        i2l932 0ADA                                          i2l756 1596  
                                        i2l836 0F9C                                          i2l941 0B3E  
                                        i2l933 0AEA                                          i2l837 0FB6  
                                        i2l853 0F10                                          i2l917 07EA  
                                        i2l909 0670                                          i2l838 0FA6  
                                        i2l870 0822                                          i2l854 0ED4  
                                        i2l855 0EEE                                          i2l880 0882  
                                        i2l872 0842                                          i2l848 0F02  
                                        i2l856 0EDE                                          i2l945 0B86  
                                        i2l873 0838                                          i2l849 0EA6  
                                        i2l946 0BDA                                          i2l890 08F2  
                                        i2l947 0B8C                                          i2l939 0B16  
                                        i2l883 08BA                                          i2l875 085E  
                                        i2l884 08B0                                          i2l876 0854  
                              ___awdiv@counter 0005                                          i2l869 081C  
                                        i2l886 08DA                                          i2l879 088C  
                                        i2l895 04D0                                          i2l888 08E6  
                                        i2l897 0506                                          _TRISA 000F92  
                                        _TRISB 000F93                                          _TRISC 000F94  
                                        _TRISD 000F95                                          _TRISE 000F96  
                              __end_of_bitRead 166E                                  __CFG_WRT0$OFF 000000  
                                __CFG_WRT1$OFF 000000                                  __CFG_WRT2$OFF 000000  
                                __CFG_WRT3$OFF 000000                                __end_of_digitos FD1D  
                         _EUSART1_Transmit_ISR 17C2                                 __CFG_EBTR0$OFF 000000  
                               __CFG_FCMEN$OFF 000000                                 __CFG_EBTR1$OFF 000000  
                               __CFG_EBTR2$OFF 000000                                 __CFG_EBTR3$OFF 000000  
                             __end_of_TMR2_ISR 1932                                __end_of_lcd_pix 0E1E  
                                __CFG_WRTB$OFF 000000                                  __CFG_WRTC$OFF 000000  
                                __CFG_WRTD$OFF 000000                                 __CFG_EBTRB$OFF 000000  
                                        _digit FE75                        __end_of_PIN_MANAGER_IOC 1A0C  
                              __end_of_dpowers FFA7                                          _texto FD1D  
                                        _putch 1A62                              i2bitRead@position 0003  
                                        pclath 000FFA                                          tablat 000FF5  
                             __end_ofi2___wmul 18F2                        __size_of_save_uart_data 0018  
                                        plusw1 000FE3                                          plusw2 000FDB  
                                        status 000FD8                                          wtemp6 005F  
                          lcd_set_background@i 00C5                            lcd_set_background@j 00C7  
        __end_of_EUSART2_SetTxInterruptHandler 1AEA         __size_of_EUSART2_SetTxInterruptHandler 000A  
              ??_IOCB4_DefaultInterruptHandler 0001                  _EUSART2_SetTxInterruptHandler 1AE0  
                             __end_ofi2_strcpy 1792                                __initialization 138A  
                           __size_ofi2_bitRead 003E                     __size_of_lcd_write_command 0012  
                   __end_of_EUSART1_Initialize 14F8                         EUSART2_Initialize@drop 00BB  
                                 __end_of_main 1214                             __size_ofi2_lcd_pix 00F6  
                            __end_of_IOCB4_ISR 19D2                              __end_of_IOCB5_ISR 19B2  
                              ??_lcd_pix_color 0011                              __end_of_IOCB6_ISR 1992  
                            __end_of_IOCB7_ISR 1972                                      ??_I2C_ISR 0002  
                      __end_of_TMR2_Initialize 1912                    ?_INTERRUPT_InterruptManager 0001  
                     _TMR2_SetInterruptHandler 1AA4                                         ??_main 00E0  
                       _IOCB6_InterruptHandler 00EB                ??_IOCB7_DefaultInterruptHandler 0001  
                                __activetblptr 000003                                    i2lcd_pix@n1 0015  
                               __CFG_RETEN$OFF 000000                                     i2strcpy@cp 0005  
                        ?_EUSART1_Transmit_ISR 0001                                     i2strcpy@to 0001  
                                  i2lcd_text@i 0022                                    i2lcd_text@j 0024  
                                  i2lcd_text@k 0026                            _lcd_text_color$2776 001F  
                   __end_of_lcd_set_background 138A                              ??i2_lcd_write_bus 0001  
                   __end_of_EUSART2_Initialize 1450                       _eusart2TxBufferRemaining 00F6  
                                       _ANCON0 000F5D                                         _ANCON1 000F5C  
                             ___awdiv@dividend 0001                                         ?_putch 0001  
                                  ?i2_lcd_text 0018                 ?_IOCB5_DefaultInterruptHandler 0001  
                                       i2l1121 1256                                         i2l1122 124E  
                                       i2l1125 1276                                         i2l1126 1280  
                                       i2l1118 1228                                         i2l1127 128E  
                                       i2l1119 1238                                __CFG_BBSIZ$BB2K 000000  
                                       i2l1354 1516                                         i2l1355 150E  
                                       i2l1364 1684                                         i2l3060 0882  
                                       i2l1365 167C                                         i2l1358 1536  
                                       i2l1359 1540                                         i2l1368 169C  
                                       i2l3080 08D2                                         i2l3072 08B0  
                                       i2l3136 0718                                         i2l3152 07EA  
                                       i2l1369 16A6                                         i2l3244 1A9A  
                                       i2l3092 08EA                                         i2l3148 07E0  
                                       i2l3086 08DE                                 __CFG_WDTEN$OFF 000000  
                                       i2l1498 1772                                         i2l3362 0228  
                                       i2l3338 01BA                                         i2l1499 176A  
                                       i2l3428 0B42                                         i2l3276 0578  
                                       i2l3292 064A                                         i2l3288 0640  
                                       _RCREG1 000FAE                                         _RCREG2 000F7A  
                                       _RCSTA1 000FAB                                         _RCSTA2 000FA6  
                                       _OSCCON 000FD3                             tmr2_custom_isr@eoc 002F  
                                       _SPBRG1 000FAF                                         _SPBRG2 000F7B  
                                    ??i2_putch 0001                      ??_I2C_SetInterruptHandler 00BB  
                              ??_lcd_write_bus 00B9                                         _SSPADD 000FC8  
                                       _SSPBUF 000FC9                                         _TXREG1 000FAD  
                                       _TXREG2 000F79                                         _TXSTA1 000FAC  
                                       _TXSTA2 000FBA                   __size_of_I2C_StatusCallback2 0056  
                               __CFG_XINST$OFF 000000                               __end_of_lcd_init 0AD0  
                             __end_of_lcd_sign 0D1A                              lcd_write_bus@data 00B9  
                             __end_of_lcd_text 04B6                                         ___wmul 18A4  
                                    ??___awdiv 0005                                 __CFG_STVREN$ON 000000  
                             i2lcd_point@place 0018                                      ??___lwdiv 0005  
                                    ??___lwmod 000C                                         _indice 009B  
                  __size_ofi2_lcd_memory_start 0008                                         clear_0 13C8  
                                       clear_1 13D4                                         clear_2 13E0  
                                    ??_bitRead 00BD                               ___awdiv@quotient 0007  
                           _I2C_StatusCallback 1A0C                        __size_of_I2C_Initialize 002C  
                                       _printf 0AD0                                      ??_lcd_pix 00C9  
                                       _strcpy 172C                                   __pdataCOMRAM 005C  
                            ??_tmr2_custom_isr 0028                                   __mediumconst FB38  
                          ?_I2C_StatusCallback 0001                                         tblptrh 000FF7  
                                       tblptrl 000FF6                                         tblptru 000FF8  
                         _EUSART2_Transmit_ISR 1792                              __end_ofi2_bitRead 16EE  
                             i2lcd_text@msjPtr 0018       TMR2_SetInterruptHandler@InterruptHandler 00B9  
    IOCB7_SetInterruptHandler@InterruptHandler 00B9      IOCB6_SetInterruptHandler@InterruptHandler 00B9  
    IOCB5_SetInterruptHandler@InterruptHandler 00B9      IOCB4_SetInterruptHandler@InterruptHandler 00B9  
                             ?_PIN_MANAGER_IOC 0001                                _eusart1RxBuffer 006F  
                            __end_ofi2_lcd_pix 100A                  __size_of_INTERRUPT_Initialize 0004  
                              _eusart2RxBuffer 007F                                _eusart1TxBuffer 0077  
                            _SYSTEM_Initialize 19D2                           _i2c_upperAddressFlag 005C  
                              _eusart2TxBuffer 0087                                     __accesstop 0060  
                      __end_of__initialization 13E6                         i2lcd_write_command@cmd 0002  
                        __end_of_TMR2_CallBack 1952                             ?_SYSTEM_Initialize 0001  
                                ___rparam_used 000001                   __size_of_uart2_rx_custom_isr 002A  
                         ??_I2C_StatusCallback 0001                                 __pcstackCOMRAM 0001  
                                 __pidataBANK0 1B18                            ??_SYSTEM_Initialize 00BC  
                                    ?_TMR2_ISR 0001                                  __end_of_digit FF9D  
        __end_of_IOCB4_DefaultInterruptHandler 1B2E         __size_of_IOCB4_DefaultInterruptHandler 0002  
               ?_EUSART2_SetTxInterruptHandler 00B9                  _IOCB4_DefaultInterruptHandler 1B2C  
                                __end_of_texto FE75                                  __end_of_putch 1A70  
                             ?_TMR2_Initialize 0001                      __size_of_lcd_memory_start 0008  
                          __size_ofi2_lcd_text 01A0                    ??_IOCB4_SetInterruptHandler 00BB  
                  ??_IOCB7_SetInterruptHandler 00BB                                      ?i2___wmul 0001  
                       ??_EUSART1_Transmit_ISR 0001                                    i2putch@data 0001  
                        ?_EUSART2_Transmit_ISR 0001                    __end_of_EUSART1_Receive_ISR 184E  
        __end_of_IOCB7_DefaultInterruptHandler 1B28         __size_of_IOCB7_DefaultInterruptHandler 0002  
                _IOCB7_DefaultInterruptHandler 1B26                             __size_of_lcd_point 00BE  
                                    ?i2_strcpy 0001                      __end_of_SYSTEM_Initialize 19F0  
                                      ??_putch 00B9                                  _eusart1RxHead 009F  
                                _eusart2RxHead 00A2                                  _eusart1TxHead 00A1  
                                _eusart1RxTail 0059                                  _eusart2TxHead 00A4  
                                   __pbssBANK0 0060                                     __pbssBANK1 0100  
                                _eusart1TxTail 00A0                                  _eusart2RxTail 005B  
            _EUSART1_TxDefaultInterruptHandler 00E5                                  _eusart2TxTail 00A3  
                               _save_uart_data 1A26                ??_EUSART1_SetRxInterruptHandler 00BB  
                              __CFG_PLLCFG$OFF 000000                         _IOCB7_InterruptHandler 00E9  
                             ??_lcd_text_color 001A                                 lcd_sign@enable 0018  
                         lcd_text_color@msjPtr 0018                                        ?___wmul 00B9  
                                   ??_TMR2_ISR 0037                                        _I2C_ISR 15E8  
           __size_of_IOCB5_SetInterruptHandler 000A                     ?_IOCB5_SetInterruptHandler 00B9  
                                      ?_printf 000D                                   ?i2_lcd_point 0001  
                                      ?_strcpy 00B9                                     ??i2___wmul 0005  
                                bitRead@number 00B9                                 lcd_pix_color@c 000F  
                               lcd_pix_color@i 0016                                 lcd_pix_color@x 000B  
                               lcd_pix_color@y 000D                               __CFG_CANMX$PORTB 000000  
                              i2_lcd_text$2777 001F                                        _REFOCON 000F9A  
                                      _OSCCON2 000FD2                    __end_of_EUSART2_Receive_ISR 1820  
                                      _OSCTUNE 000F9B                            save_uart_data@index 0001  
                                      _SPBRGH1 000F7D                                        _SPBRGH2 000F7C  
                          tmr2_custom_isr@peso 0031                                     _lcd_number 07F6  
                               lcd_point@place 00D0                                     ??i2_strcpy 0005  
                       __end_of_save_uart_data 1A3E                                        _SSPCON1 000FC6  
                                      _SSPCON2 000FC5                                      ?_lcd_init 0001  
                                    ?_lcd_sign 0001                                        _SSPSTAT 000FC7  
                                    ?_lcd_text 00D0                      _IOCB4_SetInterruptHandler 1ACC  
                                      i2_putch 1A98                      _IOCB7_SetInterruptHandler 1AAE  
                              __CFG_PWRTEN$OFF 000000                                        __Hparam 0000  
                                      __Lparam 0000                                 lcd_text@msjPtr 00D0  
                   ??_TMR2_SetInterruptHandler 00BB                              __end_of_lcd_point 10C8  
                                      ___awdiv 1214                                __size_of___wmul 0028  
                 __size_ofi2_lcd_write_command 000E                                        ___lwdiv 14F8  
                                      ___lwmod 166E                       __size_of_lcd_set_address 004E  
                                      _bitRead 162C                                        __pcinit 138A  
                              i2_lcd_write_bus 1A8C                                 _I2C_Initialize 184E  
                                      __ramtop 0F00                                        _digitos FB39  
                                      __ptext0 117C                                        __ptext1 172C  
                                      __ptext2 1A62                                        __ptext3 030C  
                                      __ptext4 162C                                        __ptext5 1314  
                                      __ptext6 100A                                        __ptext7 0D1A  
                                      __ptext8 159A                                        __ptext9 1B08  
                                      _k_count 004E                                __size_of_printf 012E  
                 tmr2_custom_isr@multiplicador 0035                                        _lcd_pix 0D1A  
            __end_of_IOCB5_SetInterruptHandler 1ACC                                      _IOCB4_ISR 19B2  
                                    _IOCB5_ISR 1992                                __size_of_strcpy 0034  
                                    _IOCB6_ISR 1972                                      _IOCB7_ISR 1952  
                                      _dpowers FF9D                          _OSCILLATOR_Initialize 1A50  
                       ??_EUSART2_Transmit_ISR 0001                                      _T2CONbits 000FCA  
                                      _mensaje 00A5                             _EUSART1_Initialize 14A6  
                          _I2C_StatusCallback2 1450                       ??_PIN_MANAGER_Initialize 00BB  
                            __CFG_MSSPMSK$MSK7 000000                                bitRead@position 00BB  
                              ?_save_uart_data 0001                     __size_of_SYSTEM_Initialize 001E  
                                   ??_lcd_init 00BB                                     ??_lcd_sign 0018  
                                 ??i2_lcd_text 001A                                     ??_lcd_text 00D2  
                         end_of_initialization 13E6                            ?_EUSART1_Initialize 0001  
                          i2___wmul@multiplier 0001                          tmr2_custom_isr@i_1911 0034  
                        tmr2_custom_isr@i_1909 0033                          tmr2_custom_isr@j_1912 002E  
                           _lcd_set_background 1314          __end_of_EUSART1_SetRxInterruptHandler 1B08  
       __size_of_EUSART1_SetRxInterruptHandler 000A                  _EUSART1_SetRxInterruptHandler 1AFE  
                         ?_I2C_StatusCallback2 0001                               lcd_number@F15340 00F7  
                           _EUSART2_Initialize 13F0                                        printf@c 0018  
                                      printf@f 000D                                        postdec1 000FE5  
                                      postdec2 000FDD                                _tmr2_custom_isr 013C  
              ??_IOCB5_DefaultInterruptHandler 0001                                        postinc0 000FEE  
                                      postinc2 000FDE                         __end_of_I2C_Initialize 187A  
                            i2lcd_text@renglon 0021                            ?_lcd_set_background 00C3  
                         ??_EUSART1_Initialize 00BB                               _lcd_memory_start 1B08  
                          ?_EUSART2_Initialize 0001                          __end_of_lcd_pix_color 0F14  
                            i2_lcd_set_address 16EE                             __end_ofi2_lcd_text 0656  
                                    _PORTBbits 000F81                                     ?_IOCB4_ISR 0001  
                                   ?_IOCB5_ISR 0001                                     ?_IOCB6_ISR 0001  
                                   ?_IOCB7_ISR 0001                            i2lcd_set_address@x1 0003  
                          i2lcd_set_address@x2 0007                            i2lcd_set_address@y1 0005  
                          i2lcd_set_address@y2 0009                             ?i2_lcd_set_address 0003  
                      __size_of_I2C_custom_isr 0050                               __CFG_FOSC$INTIO2 000000  
                          _uart2_rx_custom_isr 187A                                    ?_lcd_number 0019  
                          ??i2_lcd_set_address 000B                           ??_lcd_set_background 00C5  
                         ??_EUSART2_Initialize 00BB                                      i2_bitRead 16B0  
                             lcd_number@number 0019                 ?_IOCB6_DefaultInterruptHandler 0001  
                                    i2_lcd_pix 0F14                          __end_of_lcd_write_bus 1A7E  
                         ?_uart2_rx_custom_isr 0001                          ??_I2C_StatusCallback2 0019  
                      __end_ofi2_lcd_write_bus 1A98                     __end_ofi2_lcd_memory_start 1B18  
                 __end_of_INTERRUPT_Initialize 1B22                                ?_I2C_Initialize 0001  
         __end_of_TMR2_DefaultInterruptHandler 1B26          __size_of_TMR2_DefaultInterruptHandler 0002  
                 _TMR2_DefaultInterruptHandler 1B24                      __end_ofi2_lcd_set_address 172C  
                               __end_of___wmul 18CC                                  __pidataCOMRAM 1B22  
                            __size_of_TMR2_ISR 0020                         ?_OSCILLATOR_Initialize 0001  
             I2C_StatusCallback2@i2c_bus_state 0019                               i2___wmul@product 0005  
                               __end_of_printf 0BFE                                 __end_of_strcpy 1760  
                         __size_ofi2_lcd_point 00B4                            start_initialization 138A  
                            ??_lcd_set_address 00C3                              __size_ofi2___wmul 0026  
              __size_of_PIN_MANAGER_Initialize 007C                       ?_I2C_SetInterruptHandler 00B9  
      I2C_SetInterruptHandler@interruptHandler 00B9  EUSART1_SetRxInterruptHandler@interruptHandler 00B9  
EUSART1_SetTxInterruptHandler@interruptHandler 00B9  EUSART2_SetRxInterruptHandler@interruptHandler 00B9  
EUSART2_SetTxInterruptHandler@interruptHandler 00B9                              __size_ofi2_strcpy 0032  
                                   ?i2_bitRead 0001                              _i2c_transmit_byte 004C  
                                   ?i2_lcd_pix 000B                        __end_of_tmr2_custom_isr 030C  
                        ??_uart2_rx_custom_isr 0003                       __size_of_PIN_MANAGER_IOC 001C  
                  __size_of_I2C_StatusCallback 001A                                       ??___wmul 00BD  
                          __size_of_lcd_number 019E                 ?_EUSART1_SetRxInterruptHandler 00B9  
                                  __pdataBANK0 00F7                                       ?_I2C_ISR 0001  
                ?_TMR2_DefaultInterruptHandler 0001                                       ??_printf 0011  
        __end_of_IOCB5_DefaultInterruptHandler 1B2C         __size_of_IOCB5_DefaultInterruptHandler 0002  
                _IOCB5_DefaultInterruptHandler 1B2A                    ??_IOCB5_SetInterruptHandler 00BB  
                                     ??_strcpy 00BD                                 _eusart1RxCount 0058  
                                  ??_IOCB4_ISR 0001                                    ??_IOCB5_ISR 0001  
                                  ??_IOCB6_ISR 0001                                    ??_IOCB7_ISR 0001  
                               _eusart2RxCount 005A                         __size_of_TMR2_CallBack 0020  
                                  __pbssCOMRAM 0049              _EUSART1_RxDefaultInterruptHandler 00E3  
                __size_of_EUSART1_Transmit_ISR 0030                                  __pcstackBANK0 00B9  
                     __size_of_TMR2_Initialize 0020                            i2_lcd_write_command 1A7E  
                                i2lcd_pix@size 0010                ??_EUSART1_SetTxInterruptHandler 00BB  
              ??_EUSART2_SetRxInterruptHandler 00BB                                   i2strcpy@from 0003  
                 __size_of_EUSART1_Receive_ISR 002E                              __size_of_lcd_init 013C  
                                     ?i2_putch 0001                              __size_of_lcd_sign 011C  
                            __size_of_lcd_text 01AA                          lcd_text_color@renglon 0021  
                         lcd_write_command@cmd 00BA                                      __pnvBANK0 00E1  
                             ___lwdiv@dividend 0001                         _PIN_MANAGER_Initialize 1298  
                             ?i2_lcd_write_bus 0001                                      __pintcode 0008  
                                __pmediumconst FB38                                       ?___awdiv 0001  
                         ?i2_lcd_write_command 0001                     __size_ofi2_lcd_set_address 003E  
                                     ?___lwdiv 0001                                       ?___lwmod 0008  
            _EUSART2_TxDefaultInterruptHandler 00F3                                       ?_bitRead 00B9  
           __size_of_IOCB6_SetInterruptHandler 000A                   ??_INTERRUPT_InterruptManager 0037  
                                    _lcd_point 100A                     ?_IOCB6_SetInterruptHandler 00B9  
                                     ?_lcd_pix 00C3                                 _I2C_custom_isr 154A  
                             ??_save_uart_data 0002                                       _BAUDCON1 000FA7  
                                     _BAUDCON2 000FB9                __end_of_I2C_SetInterruptHandler 1AE0  
                             ___lwdiv@quotient 0005                                 __size_of_putch 000E  
                         _INTERRUPT_Initialize 1B1E                       __end_of_lcd_memory_start 1B10  
                                  ??i2_bitRead 0005                                lcd_pix_color@n1 0015  
                    _IOCB5_SetInterruptHandler 1AC2                   __size_of_EUSART2_Receive_ISR 002E  
                               ___wmul@product 00BD                                       _IOCBbits 000F5A  
                                  ??i2_lcd_pix 0011                               ?_tmr2_custom_isr 0001  
                                _TMR2_CallBack 1932                                       _PIE1bits 000F9D  
                                     _PIE3bits 000FA3                           _I2C_InterruptHandler 00E1  
                                     i2u202_40 086E                                       i2u212_40 098C  
                                     i2u213_40 0990                                       i2u205_40 089C  
                                     i2u223_40 07E0                                       i2u215_40 066E  
          __size_of_INTERRUPT_InterruptManager 0130                                       i2u208_40 08CA  
                                     i2u224_40 07EA                                       i2u233_40 151A  
                                     i2u217_40 0696                                       i2u241_40 04F6  
                                     i2u236_40 1688                                       i2u229_40 125A  
                                     i2u341_48 009C                                       i2u270_48 19C0  
                                     i2u247_40 0640                                       i2u239_40 04CE  
                                     i2u248_40 064A                                       i2u256_40 021A  
                                     i2u335_48 006C                                       i2u265_40 0B74  
                                     i2u272_48 19A0                                       i2u344_48 00B4  
                                     _PIR1bits 000F9E                           save_uart_data@inData 0002  
                                     i2u267_40 0BE2                                       i2u274_48 1980  
                                     i2u259_40 0288                                       i2u338_48 0084  
                                     i2u196_44 16C6                                       i2u196_45 16C0  
                                     i2u276_48 1960                                       _PIR3bits 000FA4  
                                     i2u349_48 00D8                                       i2u198_41 0800  
                                     i2u349_49 00EC                                       i2u278_48 1940  
                                     i2u288_40 1924                                       _RCONbits 000FD0  
                        ??i2_lcd_write_command 0002                                       _TMR2_ISR 1912  
                            ??_PIN_MANAGER_IOC 0001                        __size_of_lcd_text_color 01A0  
                       __end_of_I2C_custom_isr 159A                               __size_of_I2C_ISR 0044  
                                   ?_lcd_point 0001                              ___wmul@multiplier 00B9  
                             __CFG_SOSCSEL$DIG 000000                                lcd_number@index 0020  
            __end_of_IOCB6_SetInterruptHandler 1AC2                                       i2___wmul 18CC  
                                    lcd_pix@n1 00CD                                     printf@flag 0014  
                                   printf@prec 0015                                      lcd_text@i 00DA  
                                    lcd_text@j 00DC                                      lcd_text@k 00DE  
               ??_TMR2_DefaultInterruptHandler 0001              __size_of_TMR2_SetInterruptHandler 000A  
                    ?_TMR2_SetInterruptHandler 00B9                  __size_of_EUSART2_Transmit_ISR 0030  
                                 ??_lcd_number 001B                                       i2_strcpy 1760  
                                  _INTCON2bits 000FF1                                      copy_data0 139E  
                        ?_INTERRUPT_Initialize 0001                                i2bitRead@number 0001  
                            ??_TMR2_Initialize 00BB                                 ?_TMR2_CallBack 0001  
                             __size_ofi2_putch 000C                              lcd_set_address@x1 00BB  
                            lcd_set_address@x2 00BF                              lcd_set_address@y1 00BD  
                            lcd_set_address@y2 00C1                               ??_I2C_Initialize 00BB  
        __end_of_EUSART1_SetTxInterruptHandler 1AFE         __size_of_EUSART1_SetTxInterruptHandler 000A  
                _EUSART1_SetTxInterruptHandler 1AF4                                       __Hrparam 0000  
        __end_of_EUSART2_SetRxInterruptHandler 1AF4         __size_of_EUSART2_SetRxInterruptHandler 000A  
                _EUSART2_SetRxInterruptHandler 1AEA                                lcd_text@renglon 00D9  
                                     __Lrparam 0000                             __CFG_BOREN$SBORDIS 000000  
                      ??_OSCILLATOR_Initialize 00B9                                _lcd_set_address 159A  
                              I2C_ISR@i2c_data 0002                             __end_of_lcd_number 0994  
                             __size_of___awdiv 0084                          i2___wmul@multiplicand 0003  
              ??_IOCB6_DefaultInterruptHandler 0001                    __size_of_EUSART1_Initialize 0052  
                             __size_of___lwdiv 0052                               __size_of___lwmod 0042  
                              ?_I2C_custom_isr 0001                               __size_of_bitRead 0042  
                       _IOCB4_InterruptHandler 00EF                               __size_of_lcd_pix 0104  
                           i2_lcd_memory_start 1B10                                ___lwdiv@divisor 0003  
               ?_IOCB4_DefaultInterruptHandler 0001                                ___lwdiv@counter 0007  
                                     __ptext10 18A4                                       __ptext11 0994  
                                     __ptext20 1AC2                                       __ptext12 1A3E  
                                     __ptext21 1ACC                                       __ptext13 1A70  
                                     __ptext30 1AF4                                       __ptext22 1A50  
                                     __ptext14 19D2                                       __ptext31 1AFE  
                                     __ptext23 1B1E                                       __ptext15 18F2  
                                     __ptext40 1760                                       __ptext24 184E  
                                     __ptext16 1AA4                                       __ptext41 04B6  
                                     __ptext33 17F2                                       __ptext25 1AD6  
                                     __ptext17 1298                                       __ptext50 1B10  
                                     __ptext42 10C8                                       __ptext34 187A  
                                     __ptext26 13F0                                       __ptext18 1AAE  
                                     __ptext51 1A7E                                       __ptext43 0656  
                                     __ptext35 1A26                                       __ptext27 1AE0  
                                     __ptext19 1AB8                                       __ptext60 1992  
                                     __ptext52 1A8C                                       __ptext44 0E1E  
                                     __ptext36 1912                                       __ptext28 1AEA  
                                     __ptext61 1B2A                                       __ptext53 18CC  
                                     __ptext45 07F6                                       __ptext37 1932  
                                     __ptext29 14A6                                       __ptext70 14F8  
                                     __ptext62 19B2                                       __ptext54 1214  
                                     __ptext46 16B0                                       __ptext38 1B24  
                                     __ptext71 1A0C                                       __ptext63 1B2C  
                                     __ptext55 19F0                                       __ptext47 0BFE  
                                     __ptext39 013C                                       __ptext72 1792  
                                     __ptext64 15E8                                       __ptext56 1952  
                                     __ptext48 0F14                                       __ptext73 17C2  
                                     __ptext65 154A                                       __ptext57 1B26  
                                     __ptext49 16EE                                       __ptext74 1820  
                                     __ptext66 1450                                       __ptext58 1972  
                                     __ptext75 0000                                       __ptext67 0AD0  
                                     __ptext59 1B28                                       __ptext68 1A98  
                                     __ptext69 166E                                       _lcd_init 0994  
                                     _lcd_sign 0BFE                                       _lcd_text 030C  
                  __size_of_lcd_set_background 0076                    __end_of_I2C_StatusCallback2 14A6  
                          ?i2_lcd_memory_start 0001                    __size_of_EUSART2_Initialize 0060  
                                   strcpy@from 00BB                                  __size_of_main 0098  
                              lcd_text_color@i 0022                                lcd_text_color@j 0024  
                              lcd_text_color@k 0026                                       _key_text 008F  
                                     _read_key 0050                         __size_of_lcd_pix_color 00F6  
               ?_IOCB7_DefaultInterruptHandler 0001                                       _rxBuffer 0060  
                            lcd_pix_color@size 0010                                       _uartBuff 0053  
             __size_of_I2C_SetInterruptHandler 000A                                       _spiDummy 0055  
                                     int$flags 005E                           ??i2_lcd_memory_start 0003  
           __end_of_INTERRUPT_InterruptManager 0138                     _INTERRUPT_InterruptManager 0008  
                                     lcd_pix@c 00C7                                       lcd_pix@i 00CE  
                                     lcd_pix@x 00C3                                       lcd_pix@y 00C5  
                                    printf@val 0016                                  ??i2_lcd_point 0018  
                          __CFG_INTOSCSEL$HIGH 000000                            _EUSART1_Receive_ISR 1820  
                                  ??_lcd_point 00D0                                      putch@data 00B9  
                           _I2C_slaveWriteData 005D                                     _INTCONbits 000FF2  
                       __size_of_lcd_write_bus 000E                            i2lcd_write_bus@data 0001  
                       ??_INTERRUPT_Initialize 00B9                         I2C_custom_isr@i2c_data 001A  
                  __end_of_uart2_rx_custom_isr 18A4                                       intlevel2 0000  
                              ??_TMR2_CallBack 0037                           ?_EUSART1_Receive_ISR 0001  
                             ___lwmod@dividend 0008                        ?_PIN_MANAGER_Initialize 0001  
                   __end_of_I2C_StatusCallback 1A26                                     _RCSTA1bits 000FAB  
                                   _RCSTA2bits 000FA6                        __end_of_lcd_set_address 15E8  
                 __end_of_EUSART1_Transmit_ISR 17F2                I2C_StatusCallback@i2c_bus_state 0001  
                             _i2c_addressUpper 0056                              _i2c_received_byte 004D  
                                     printf@ap 0012                             __CFG_WDTPS$1048576 000000  
               ?_EUSART1_SetTxInterruptHandler 00B9                                  _lcd_text$2702 00D7  
                            _lcd_write_command 1A3E                                 _lcd_text_color 0656  
               ?_EUSART2_SetRxInterruptHandler 00B9                             ?_lcd_write_command 0001  
                          _EUSART2_Receive_ISR 17F2                    ??_IOCB6_SetInterruptHandler 00BB  
                                _lcd_pix_color 0E1E                                ___lwmod@divisor 000A  
                        TMR2_ISR@CountCallBack 0049          __end_of_IOCB6_DefaultInterruptHandler 1B2A  
       __size_of_IOCB6_DefaultInterruptHandler 0002                  _IOCB6_DefaultInterruptHandler 1B28  
                                     strcpy@cp 00BD                                       strcpy@to 00B9  
                              ___lwmod@counter 000C                            ??_lcd_write_command 00BA  
                          __end_ofi2_lcd_point 117C                                    _printEnable 004B  
                                  _SSPCON1bits 000FC6                                    _SSPCON2bits 000FC5  
                        ??_EUSART1_Receive_ISR 0001                 __end_of_PIN_MANAGER_Initialize 1314  
                               _i2c_addressLow 0057                ??_EUSART2_SetTxInterruptHandler 00BB  
                         ?_EUSART2_Receive_ISR 0001                              ?_lcd_memory_start 0001  
                          __CFG_BORPWR$ZPBORMV 000000                         _IOCB5_InterruptHandler 00ED  
                              _PIN_MANAGER_IOC 19F0                          _TMR2_InterruptHandler 00E7  
                           ??_lcd_memory_start 00BB              _EUSART2_RxDefaultInterruptHandler 00F1  
                                _lcd_write_bus 1A70                      __end_of_lcd_write_command 1A50  
