

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Feb 27 11:48:20 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F46K80
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
     9                           	psect	idataBANK3,global,class=CODE,delta=1,noexec
    10                           	psect	idataBANK4,global,class=CODE,delta=1,noexec
    11                           	psect	idataBANK5,global,class=CODE,delta=1,noexec
    12                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
    13                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    14                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    17                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    18                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    19                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    20                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    21                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    22                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1,lowdata,noexec
    23                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1,lowdata,noexec
    24                           	psect	dataBANK5,global,class=BANK5,space=1,delta=1,lowdata,noexec
    25                           	psect	cstackBANK5,global,class=BANK5,space=1,delta=1,noexec
    26                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    27                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    28                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    29                           	psect	text0,global,reloc=2,class=CODE,delta=1
    30                           	psect	text1,global,reloc=2,class=CODE,delta=1
    31                           	psect	text2,global,reloc=2,class=CODE,delta=1
    32                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text4,global,reloc=2,class=CODE,delta=1
    34                           	psect	text5,global,reloc=2,class=CODE,delta=1
    35                           	psect	text6,global,reloc=2,class=CODE,delta=1
    36                           	psect	text7,global,reloc=2,class=CODE,delta=1
    37                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text11,global,reloc=2,class=CODE,delta=1
    41                           	psect	text12,global,reloc=2,class=CODE,delta=1
    42                           	psect	text13,global,reloc=2,class=CODE,delta=1
    43                           	psect	text14,global,reloc=2,class=CODE,delta=1
    44                           	psect	text15,global,reloc=2,class=CODE,delta=1
    45                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text17,global,reloc=2,class=CODE,delta=1
    47                           	psect	text18,global,reloc=2,class=CODE,delta=1
    48                           	psect	text19,global,reloc=2,class=CODE,delta=1
    49                           	psect	text20,global,reloc=2,class=CODE,delta=1
    50                           	psect	text21,global,reloc=2,class=CODE,delta=1
    51                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text23,global,reloc=2,class=CODE,delta=1
    53                           	psect	text24,global,reloc=2,class=CODE,delta=1
    54                           	psect	text25,global,reloc=2,class=CODE,delta=1
    55                           	psect	text26,global,reloc=2,class=CODE,delta=1
    56                           	psect	text27,global,reloc=2,class=CODE,delta=1
    57                           	psect	text28,global,reloc=2,class=CODE,delta=1
    58                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    59                           	psect	text30,global,reloc=2,class=CODE,delta=1
    60                           	psect	text31,global,reloc=2,class=CODE,delta=1
    61                           	psect	text32,global,reloc=2,class=CODE,delta=1
    62                           	psect	text33,global,reloc=2,class=CODE,delta=1
    63                           	psect	text34,global,reloc=2,class=CODE,delta=1
    64                           	psect	text35,global,reloc=2,class=CODE,delta=1
    65                           	psect	text36,global,reloc=2,class=CODE,delta=1
    66                           	psect	text37,global,reloc=2,class=CODE,delta=1
    67                           	psect	text38,global,reloc=2,class=CODE,delta=1
    68                           	psect	text39,global,reloc=2,class=CODE,delta=1
    69                           	psect	text40,global,reloc=2,class=CODE,delta=1
    70                           	psect	text41,global,reloc=2,class=CODE,delta=1
    71                           	psect	text42,global,reloc=2,class=CODE,delta=1
    72                           	psect	text43,global,reloc=2,class=CODE,delta=1
    73                           	psect	text44,global,reloc=2,class=CODE,delta=1
    74                           	psect	text45,global,reloc=2,class=CODE,delta=1
    75                           	psect	text46,global,reloc=2,class=CODE,delta=1
    76                           	psect	text47,global,reloc=2,class=CODE,delta=1
    77                           	psect	text48,global,reloc=2,class=CODE,delta=1
    78                           	psect	text49,global,reloc=2,class=CODE,delta=1
    79                           	psect	text50,global,reloc=2,class=CODE,delta=1
    80                           	psect	text51,global,reloc=2,class=CODE,delta=1
    81                           	psect	text52,global,reloc=2,class=CODE,delta=1
    82                           	psect	text53,global,reloc=2,class=CODE,delta=1
    83                           	psect	text54,global,reloc=2,class=CODE,delta=1
    84                           	psect	text55,global,reloc=2,class=CODE,delta=1
    85                           	psect	text56,global,reloc=2,class=CODE,delta=1
    86                           	psect	text57,global,reloc=2,class=CODE,delta=1
    87                           	psect	text58,global,reloc=2,class=CODE,delta=1
    88                           	psect	text59,global,reloc=2,class=CODE,delta=1
    89                           	psect	text60,global,reloc=2,class=CODE,delta=1
    90                           	psect	text61,global,reloc=2,class=CODE,delta=1
    91                           	psect	text62,global,reloc=2,class=CODE,delta=1
    92                           	psect	text63,global,reloc=2,class=CODE,delta=1
    93                           	psect	text64,global,reloc=2,class=CODE,delta=1,group=1
    94                           	psect	text65,global,reloc=2,class=CODE,delta=1
    95                           	psect	text66,global,reloc=2,class=CODE,delta=1
    96                           	psect	text67,global,reloc=2,class=CODE,delta=1
    97                           	psect	text68,global,reloc=2,class=CODE,delta=1
    98                           	psect	text69,global,reloc=2,class=CODE,delta=1
    99                           	psect	text70,global,reloc=2,class=CODE,delta=1
   100                           	psect	text71,global,reloc=2,class=CODE,delta=1
   101                           	psect	text72,global,reloc=2,class=CODE,delta=1
   102                           	psect	text73,global,reloc=2,class=CODE,delta=1
   103                           	psect	text74,global,reloc=2,class=CODE,delta=1
   104                           	psect	text75,global,reloc=2,class=CODE,delta=1
   105                           	psect	text76,global,reloc=2,class=CODE,delta=1
   106                           	psect	text77,global,reloc=2,class=CODE,delta=1,group=1
   107                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   108                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   109                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   110  0000                     
   111                           ; Version 1.45
   112                           ; Generated 16/11/2017 GMT
   113                           ; 
   114                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   115                           ; All rights reserved.
   116                           ; 
   117                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   118                           ; 
   119                           ; Redistribution and use in source and binary forms, with or without modification, are
   120                           ; permitted provided that the following conditions are met:
   121                           ; 
   122                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   123                           ;        conditions and the following disclaimer.
   124                           ; 
   125                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   126                           ;        of conditions and the following disclaimer in the documentation and/or other
   127                           ;        materials provided with the distribution.
   128                           ; 
   129                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   130                           ;        software without specific prior written permission.
   131                           ; 
   132                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   133                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   134                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   135                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   136                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   137                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   138                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   139                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   140                           ; 
   141                           ; 
   142                           ; Code-generator required, PIC18F46K80 Definitions
   143                           ; 
   144                           ; SFR Addresses
   145  0000                     
   146                           	psect	idataCOMRAM
   147  004C58                     __pidataCOMRAM:
   148                           	opt stack 0
   149                           
   150                           ;initializer for _globalVar1
   151  004C58  01                 	db	1
   152                           
   153                           	psect	idataBANK0
   154  004BAC                     __pidataBANK0:
   155                           	opt stack 0
   156                           
   157                           ;initializer for _memBaud
   158  004BAC  01                 	db	1
   159                           
   160                           ;initializer for _memFilter
   161  004BAD  01                 	db	1
   162                           
   163                           ;initializer for _memDivision
   164  004BAE  01                 	db	1
   165                           
   166                           ;initializer for _keyEnable
   167  004BAF  01                 	db	1
   168                           
   169                           ;initializer for _lastKey
   170  004BB0  14                 	db	20
   171                           
   172                           ;initializer for _mux
   173  004BB1  01                 	db	1
   174                           
   175                           ;initializer for _memBuff1
   176  004BB2  20                 	db	32
   177  004BB3  20                 	db	32
   178  004BB4  20                 	db	32
   179  004BB5  20                 	db	32
   180  004BB6  20                 	db	32
   181  004BB7  20                 	db	32
   182  004BB8  20                 	db	32
   183  004BB9  20                 	db	32
   184  004BBA  20                 	db	32
   185  004BBB  20                 	db	32
   186  004BBC  20                 	db	32
   187  004BBD  20                 	db	32
   188  004BBE  20                 	db	32
   189  004BBF  20                 	db	32
   190  004BC0  20                 	db	32
   191  004BC1  00                 	db	0
   192                           
   193                           ;initializer for _menu_rowColor
   194  004BC2  01                 	db	1
   195                           
   196                           	psect	idataBANK1
   197  003EE6                     __pidataBANK1:
   198                           	opt stack 0
   199                           
   200                           ;initializer for lcd_number@F15145
   201  003EE6  0A                 	db	10
   202  003EE7  00                 	db	0
   203  003EE8  00                 	db	0
   204  003EE9  00                 	db	0
   205  003EEA  00                 	db	0
   206                           
   207                           ;initializer for _msjOFF
   208  003EEB  4F                 	db	79
   209  003EEC  46                 	db	70
   210  003EED  46                 	db	70
   211  003EEE  20                 	db	32
   212  003EEF  20                 	db	32
   213  003EF0  20                 	db	32
   214  003EF1  20                 	db	32
   215  003EF2  20                 	db	32
   216  003EF3  20                 	db	32
   217  003EF4  20                 	db	32
   218  003EF5  20                 	db	32
   219  003EF6  20                 	db	32
   220  003EF7  20                 	db	32
   221  003EF8  20                 	db	32
   222  003EF9  20                 	db	32
   223  003EFA  00                 	db	0
   224                           
   225                           ;initializer for _msjON
   226  003EFB  4F                 	db	79
   227  003EFC  4E                 	db	78
   228  003EFD  20                 	db	32
   229  003EFE  20                 	db	32
   230  003EFF  20                 	db	32
   231  003F00  20                 	db	32
   232  003F01  20                 	db	32
   233  003F02  20                 	db	32
   234  003F03  20                 	db	32
   235  003F04  20                 	db	32
   236  003F05  20                 	db	32
   237  003F06  20                 	db	32
   238  003F07  20                 	db	32
   239  003F08  20                 	db	32
   240  003F09  20                 	db	32
   241  003F0A  00                 	db	0
   242                           
   243                           ;initializer for _msjRANGE
   244  003F0B  53                 	db	83
   245  003F0C  54                 	db	84
   246  003F0D  41                 	db	65
   247  003F0E  42                 	db	66
   248  003F0F  4C                 	db	76
   249  003F10  45                 	db	69
   250  003F11  20                 	db	32
   251  003F12  52                 	db	82
   252  003F13  41                 	db	65
   253  003F14  4E                 	db	78
   254  003F15  47                 	db	71
   255  003F16  45                 	db	69
   256  003F17  20                 	db	32
   257  003F18  20                 	db	32
   258  003F19  20                 	db	32
   259  003F1A  00                 	db	0
   260                           
   261                           ;initializer for _msjTHRESHOLD
   262  003F1B  54                 	db	84
   263  003F1C  48                 	db	72
   264  003F1D  52                 	db	82
   265  003F1E  45                 	db	69
   266  003F1F  53                 	db	83
   267  003F20  48                 	db	72
   268  003F21  4F                 	db	79
   269  003F22  4C                 	db	76
   270  003F23  44                 	db	68
   271  003F24  20                 	db	32
   272  003F25  20                 	db	32
   273  003F26  20                 	db	32
   274  003F27  20                 	db	32
   275  003F28  20                 	db	32
   276  003F29  20                 	db	32
   277  003F2A  00                 	db	0
   278                           
   279                           ;initializer for _msjSTEP
   280  003F2B  54                 	db	84
   281  003F2C  41                 	db	65
   282  003F2D  52                 	db	82
   283  003F2E  45                 	db	69
   284  003F2F  20                 	db	32
   285  003F30  20                 	db	32
   286  003F31  20                 	db	32
   287  003F32  20                 	db	32
   288  003F33  20                 	db	32
   289  003F34  20                 	db	32
   290  003F35  20                 	db	32
   291  003F36  20                 	db	32
   292  003F37  20                 	db	32
   293  003F38  20                 	db	32
   294  003F39  20                 	db	32
   295  003F3A  00                 	db	0
   296                           
   297                           ;initializer for _msjFILTER
   298  003F3B  46                 	db	70
   299  003F3C  49                 	db	73
   300  003F3D  4C                 	db	76
   301  003F3E  54                 	db	84
   302  003F3F  45                 	db	69
   303  003F40  52                 	db	82
   304  003F41  20                 	db	32
   305  003F42  20                 	db	32
   306  003F43  20                 	db	32
   307  003F44  20                 	db	32
   308  003F45  20                 	db	32
   309  003F46  20                 	db	32
   310  003F47  20                 	db	32
   311  003F48  20                 	db	32
   312  003F49  20                 	db	32
   313  003F4A  00                 	db	0
   314                           
   315                           ;initializer for _msjPATTERN
   316  003F4B  50                 	db	80
   317  003F4C  41                 	db	65
   318  003F4D  54                 	db	84
   319  003F4E  54                 	db	84
   320  003F4F  45                 	db	69
   321  003F50  52                 	db	82
   322  003F51  4E                 	db	78
   323  003F52  20                 	db	32
   324  003F53  20                 	db	32
   325  003F54  20                 	db	32
   326  003F55  20                 	db	32
   327  003F56  20                 	db	32
   328  003F57  20                 	db	32
   329  003F58  20                 	db	32
   330  003F59  20                 	db	32
   331  003F5A  00                 	db	0
   332                           
   333                           ;initializer for _msjDIVISIONS
   334  003F5B  44                 	db	68
   335  003F5C  45                 	db	69
   336  003F5D  43                 	db	67
   337  003F5E  49                 	db	73
   338  003F5F  4D                 	db	77
   339  003F60  41                 	db	65
   340  003F61  4C                 	db	76
   341  003F62  53                 	db	83
   342  003F63  20                 	db	32
   343  003F64  20                 	db	32
   344  003F65  20                 	db	32
   345  003F66  20                 	db	32
   346  003F67  20                 	db	32
   347  003F68  20                 	db	32
   348  003F69  20                 	db	32
   349  003F6A  00                 	db	0
   350                           
   351                           ;initializer for _msjZERO
   352  003F6B  5A                 	db	90
   353  003F6C  45                 	db	69
   354  003F6D  52                 	db	82
   355  003F6E  4F                 	db	79
   356  003F6F  20                 	db	32
   357  003F70  20                 	db	32
   358  003F71  20                 	db	32
   359  003F72  20                 	db	32
   360  003F73  20                 	db	32
   361  003F74  20                 	db	32
   362  003F75  20                 	db	32
   363  003F76  20                 	db	32
   364  003F77  20                 	db	32
   365  003F78  20                 	db	32
   366  003F79  20                 	db	32
   367  003F7A  00                 	db	0
   368                           
   369                           ;initializer for _msjCALIBRATE
   370  003F7B  43                 	db	67
   371  003F7C  41                 	db	65
   372  003F7D  4C                 	db	76
   373  003F7E  49                 	db	73
   374  003F7F  42                 	db	66
   375  003F80  52                 	db	82
   376  003F81  41                 	db	65
   377  003F82  54                 	db	84
   378  003F83  45                 	db	69
   379  003F84  20                 	db	32
   380  003F85  20                 	db	32
   381  003F86  20                 	db	32
   382  003F87  20                 	db	32
   383  003F88  20                 	db	32
   384  003F89  20                 	db	32
   385  003F8A  00                 	db	0
   386                           
   387                           ;initializer for _menu_text
   388  003F8B  20                 	db	32
   389  003F8C  20                 	db	32
   390  003F8D  20                 	db	32
   391  003F8E  20                 	db	32
   392  003F8F  20                 	db	32
   393  003F90  20                 	db	32
   394  003F91  20                 	db	32
   395  003F92  20                 	db	32
   396  003F93  20                 	db	32
   397  003F94  20                 	db	32
   398  003F95  20                 	db	32
   399  003F96  20                 	db	32
   400  003F97  20                 	db	32
   401  003F98  20                 	db	32
   402  003F99  20                 	db	32
   403  003F9A  00                 	db	0
   404                           
   405                           	psect	idataBANK2
   406  003358                     __pidataBANK2:
   407                           	opt stack 0
   408                           
   409                           ;initializer for _msjDIVISION1
   410  003358  30                 	db	48
   411  003359  2E                 	db	46
   412  00335A  30                 	db	48
   413  00335B  20                 	db	32
   414  00335C  20                 	db	32
   415  00335D  20                 	db	32
   416  00335E  20                 	db	32
   417  00335F  20                 	db	32
   418  003360  20                 	db	32
   419  003361  20                 	db	32
   420  003362  20                 	db	32
   421  003363  20                 	db	32
   422  003364  20                 	db	32
   423  003365  20                 	db	32
   424  003366  20                 	db	32
   425  003367  00                 	db	0
   426                           
   427                           ;initializer for _msjDIVISION0
   428  003368  30                 	db	48
   429  003369  20                 	db	32
   430  00336A  20                 	db	32
   431  00336B  20                 	db	32
   432  00336C  20                 	db	32
   433  00336D  20                 	db	32
   434  00336E  20                 	db	32
   435  00336F  20                 	db	32
   436  003370  20                 	db	32
   437  003371  20                 	db	32
   438  003372  20                 	db	32
   439  003373  20                 	db	32
   440  003374  20                 	db	32
   441  003375  20                 	db	32
   442  003376  20                 	db	32
   443  003377  00                 	db	0
   444                           
   445                           ;initializer for _msjCANCEL
   446  003378  43                 	db	67
   447  003379  41                 	db	65
   448  00337A  4E                 	db	78
   449  00337B  43                 	db	67
   450  00337C  45                 	db	69
   451  00337D  4C                 	db	76
   452  00337E  20                 	db	32
   453  00337F  20                 	db	32
   454  003380  20                 	db	32
   455  003381  20                 	db	32
   456  003382  20                 	db	32
   457  003383  20                 	db	32
   458  003384  20                 	db	32
   459  003385  20                 	db	32
   460  003386  20                 	db	32
   461  003387  00                 	db	0
   462                           
   463                           ;initializer for _msjCONFIRM
   464  003388  43                 	db	67
   465  003389  4F                 	db	79
   466  00338A  4E                 	db	78
   467  00338B  46                 	db	70
   468  00338C  49                 	db	73
   469  00338D  52                 	db	82
   470  00338E  4D                 	db	77
   471  00338F  20                 	db	32
   472  003390  20                 	db	32
   473  003391  20                 	db	32
   474  003392  20                 	db	32
   475  003393  20                 	db	32
   476  003394  20                 	db	32
   477  003395  20                 	db	32
   478  003396  20                 	db	32
   479  003397  00                 	db	0
   480                           
   481                           ;initializer for _msjFINISH
   482  003398  46                 	db	70
   483  003399  49                 	db	73
   484  00339A  4E                 	db	78
   485  00339B  49                 	db	73
   486  00339C  53                 	db	83
   487  00339D  48                 	db	72
   488  00339E  20                 	db	32
   489  00339F  20                 	db	32
   490  0033A0  20                 	db	32
   491  0033A1  20                 	db	32
   492  0033A2  20                 	db	32
   493  0033A3  20                 	db	32
   494  0033A4  20                 	db	32
   495  0033A5  20                 	db	32
   496  0033A6  20                 	db	32
   497  0033A7  00                 	db	0
   498                           
   499                           ;initializer for _msjRESET
   500  0033A8  52                 	db	82
   501  0033A9  45                 	db	69
   502  0033AA  53                 	db	83
   503  0033AB  45                 	db	69
   504  0033AC  54                 	db	84
   505  0033AD  20                 	db	32
   506  0033AE  20                 	db	32
   507  0033AF  20                 	db	32
   508  0033B0  20                 	db	32
   509  0033B1  20                 	db	32
   510  0033B2  20                 	db	32
   511  0033B3  20                 	db	32
   512  0033B4  20                 	db	32
   513  0033B5  20                 	db	32
   514  0033B6  20                 	db	32
   515  0033B7  00                 	db	0
   516                           
   517                           ;initializer for _msjCHANGE
   518  0033B8  43                 	db	67
   519  0033B9  48                 	db	72
   520  0033BA  41                 	db	65
   521  0033BB  4E                 	db	78
   522  0033BC  47                 	db	71
   523  0033BD  45                 	db	69
   524  0033BE  20                 	db	32
   525  0033BF  20                 	db	32
   526  0033C0  20                 	db	32
   527  0033C1  20                 	db	32
   528  0033C2  20                 	db	32
   529  0033C3  20                 	db	32
   530  0033C4  20                 	db	32
   531  0033C5  20                 	db	32
   532  0033C6  20                 	db	32
   533  0033C7  00                 	db	0
   534                           
   535                           ;initializer for _msjPASSWORD
   536  0033C8  50                 	db	80
   537  0033C9  41                 	db	65
   538  0033CA  53                 	db	83
   539  0033CB  53                 	db	83
   540  0033CC  57                 	db	87
   541  0033CD  4F                 	db	79
   542  0033CE  52                 	db	82
   543  0033CF  44                 	db	68
   544  0033D0  20                 	db	32
   545  0033D1  20                 	db	32
   546  0033D2  20                 	db	32
   547  0033D3  20                 	db	32
   548  0033D4  20                 	db	32
   549  0033D5  20                 	db	32
   550  0033D6  20                 	db	32
   551  0033D7  00                 	db	0
   552                           
   553                           ;initializer for _msjPORT
   554  0033D8  50                 	db	80
   555  0033D9  4F                 	db	79
   556  0033DA  52                 	db	82
   557  0033DB  54                 	db	84
   558  0033DC  20                 	db	32
   559  0033DD  20                 	db	32
   560  0033DE  20                 	db	32
   561  0033DF  20                 	db	32
   562  0033E0  20                 	db	32
   563  0033E1  20                 	db	32
   564  0033E2  20                 	db	32
   565  0033E3  20                 	db	32
   566  0033E4  20                 	db	32
   567  0033E5  20                 	db	32
   568  0033E6  20                 	db	32
   569  0033E7  00                 	db	0
   570                           
   571                           ;initializer for _msjIP
   572  0033E8  49                 	db	73
   573  0033E9  50                 	db	80
   574  0033EA  20                 	db	32
   575  0033EB  20                 	db	32
   576  0033EC  20                 	db	32
   577  0033ED  20                 	db	32
   578  0033EE  20                 	db	32
   579  0033EF  20                 	db	32
   580  0033F0  20                 	db	32
   581  0033F1  20                 	db	32
   582  0033F2  20                 	db	32
   583  0033F3  20                 	db	32
   584  0033F4  20                 	db	32
   585  0033F5  20                 	db	32
   586  0033F6  20                 	db	32
   587  0033F7  00                 	db	0
   588                           
   589                           ;initializer for _msjMAC
   590  0033F8  4D                 	db	77
   591  0033F9  41                 	db	65
   592  0033FA  43                 	db	67
   593  0033FB  20                 	db	32
   594  0033FC  20                 	db	32
   595  0033FD  20                 	db	32
   596  0033FE  20                 	db	32
   597  0033FF  20                 	db	32
   598  003400  20                 	db	32
   599  003401  20                 	db	32
   600  003402  20                 	db	32
   601  003403  20                 	db	32
   602  003404  20                 	db	32
   603  003405  20                 	db	32
   604  003406  20                 	db	32
   605  003407  00                 	db	0
   606                           
   607                           ;initializer for _msjSUBNETMASK
   608  003408  53                 	db	83
   609  003409  55                 	db	85
   610  00340A  42                 	db	66
   611  00340B  4E                 	db	78
   612  00340C  45                 	db	69
   613  00340D  54                 	db	84
   614  00340E  20                 	db	32
   615  00340F  4D                 	db	77
   616  003410  41                 	db	65
   617  003411  53                 	db	83
   618  003412  4B                 	db	75
   619  003413  20                 	db	32
   620  003414  20                 	db	32
   621  003415  20                 	db	32
   622  003416  20                 	db	32
   623  003417  00                 	db	0
   624                           
   625                           ;initializer for _msjGATEWAY
   626  003418  47                 	db	71
   627  003419  41                 	db	65
   628  00341A  54                 	db	84
   629  00341B  45                 	db	69
   630  00341C  57                 	db	87
   631  00341D  41                 	db	65
   632  00341E  59                 	db	89
   633  00341F  20                 	db	32
   634  003420  20                 	db	32
   635  003421  20                 	db	32
   636  003422  20                 	db	32
   637  003423  20                 	db	32
   638  003424  20                 	db	32
   639  003425  20                 	db	32
   640  003426  20                 	db	32
   641  003427  00                 	db	0
   642                           
   643                           ;initializer for _msjETHERNET
   644  003428  45                 	db	69
   645  003429  54                 	db	84
   646  00342A  48                 	db	72
   647  00342B  45                 	db	69
   648  00342C  52                 	db	82
   649  00342D  4E                 	db	78
   650  00342E  45                 	db	69
   651  00342F  54                 	db	84
   652  003430  20                 	db	32
   653  003431  20                 	db	32
   654  003432  20                 	db	32
   655  003433  20                 	db	32
   656  003434  20                 	db	32
   657  003435  20                 	db	32
   658  003436  20                 	db	32
   659  003437  00                 	db	0
   660                           
   661                           ;initializer for _msjBAUD
   662  003438  42                 	db	66
   663  003439  41                 	db	65
   664  00343A  55                 	db	85
   665  00343B  44                 	db	68
   666  00343C  20                 	db	32
   667  00343D  20                 	db	32
   668  00343E  20                 	db	32
   669  00343F  20                 	db	32
   670  003440  20                 	db	32
   671  003441  20                 	db	32
   672  003442  20                 	db	32
   673  003443  20                 	db	32
   674  003444  20                 	db	32
   675  003445  20                 	db	32
   676  003446  20                 	db	32
   677  003447  00                 	db	0
   678                           
   679                           ;initializer for _msjSERIAL
   680  003448  53                 	db	83
   681  003449  45                 	db	69
   682  00344A  52                 	db	82
   683  00344B  49                 	db	73
   684  00344C  41                 	db	65
   685  00344D  4C                 	db	76
   686  00344E  20                 	db	32
   687  00344F  20                 	db	32
   688  003450  20                 	db	32
   689  003451  20                 	db	32
   690  003452  20                 	db	32
   691  003453  20                 	db	32
   692  003454  20                 	db	32
   693  003455  20                 	db	32
   694  003456  20                 	db	32
   695  003457  00                 	db	0
   696                           
   697                           	psect	idataBANK3
   698  003458                     __pidataBANK3:
   699                           	opt stack 0
   700                           
   701                           ;initializer for _memSubnet
   702  003458  32                 	db	50
   703  003459  35                 	db	53
   704  00345A  35                 	db	53
   705  00345B  2E                 	db	46
   706  00345C  32                 	db	50
   707  00345D  35                 	db	53
   708  00345E  35                 	db	53
   709  00345F  2E                 	db	46
   710  003460  32                 	db	50
   711  003461  35                 	db	53
   712  003462  35                 	db	53
   713  003463  2E                 	db	46
   714  003464  30                 	db	48
   715  003465  20                 	db	32
   716  003466  20                 	db	32
   717  003467  00                 	db	0
   718                           
   719                           ;initializer for _memGateway
   720  003468  31                 	db	49
   721  003469  39                 	db	57
   722  00346A  32                 	db	50
   723  00346B  2E                 	db	46
   724  00346C  31                 	db	49
   725  00346D  36                 	db	54
   726  00346E  38                 	db	56
   727  00346F  2E                 	db	46
   728  003470  30                 	db	48
   729  003471  2E                 	db	46
   730  003472  32                 	db	50
   731  003473  35                 	db	53
   732  003474  34                 	db	52
   733  003475  20                 	db	32
   734  003476  20                 	db	32
   735  003477  00                 	db	0
   736                           
   737                           ;initializer for _msjVALUEINGR
   738  003478  56                 	db	86
   739  003479  41                 	db	65
   740  00347A  4C                 	db	76
   741  00347B  55                 	db	85
   742  00347C  45                 	db	69
   743  00347D  20                 	db	32
   744  00347E  49                 	db	73
   745  00347F  4E                 	db	78
   746  003480  20                 	db	32
   747  003481  47                 	db	71
   748  003482  52                 	db	82
   749  003483  20                 	db	32
   750  003484  20                 	db	32
   751  003485  20                 	db	32
   752  003486  20                 	db	32
   753  003487  00                 	db	0
   754                           
   755                           ;initializer for _msjTAREINGR
   756  003488  54                 	db	84
   757  003489  41                 	db	65
   758  00348A  52                 	db	82
   759  00348B  45                 	db	69
   760  00348C  20                 	db	32
   761  00348D  49                 	db	73
   762  00348E  4E                 	db	78
   763  00348F  20                 	db	32
   764  003490  47                 	db	71
   765  003491  52                 	db	82
   766  003492  20                 	db	32
   767  003493  20                 	db	32
   768  003494  20                 	db	32
   769  003495  20                 	db	32
   770  003496  20                 	db	32
   771  003497  00                 	db	0
   772                           
   773                           ;initializer for _msjWEIGHTINGR
   774  003498  57                 	db	87
   775  003499  45                 	db	69
   776  00349A  49                 	db	73
   777  00349B  47                 	db	71
   778  00349C  48                 	db	72
   779  00349D  54                 	db	84
   780  00349E  20                 	db	32
   781  00349F  49                 	db	73
   782  0034A0  4E                 	db	78
   783  0034A1  20                 	db	32
   784  0034A2  47                 	db	71
   785  0034A3  52                 	db	82
   786  0034A4  20                 	db	32
   787  0034A5  20                 	db	32
   788  0034A6  20                 	db	32
   789  0034A7  00                 	db	0
   790                           
   791                           ;initializer for _msjBAUD4
   792  0034A8  31                 	db	49
   793  0034A9  31                 	db	49
   794  0034AA  35                 	db	53
   795  0034AB  32                 	db	50
   796  0034AC  30                 	db	48
   797  0034AD  30                 	db	48
   798  0034AE  20                 	db	32
   799  0034AF  20                 	db	32
   800  0034B0  20                 	db	32
   801  0034B1  20                 	db	32
   802  0034B2  20                 	db	32
   803  0034B3  20                 	db	32
   804  0034B4  20                 	db	32
   805  0034B5  20                 	db	32
   806  0034B6  20                 	db	32
   807  0034B7  00                 	db	0
   808                           
   809                           ;initializer for _msjBAUD3
   810  0034B8  33                 	db	51
   811  0034B9  38                 	db	56
   812  0034BA  34                 	db	52
   813  0034BB  30                 	db	48
   814  0034BC  30                 	db	48
   815  0034BD  20                 	db	32
   816  0034BE  20                 	db	32
   817  0034BF  20                 	db	32
   818  0034C0  20                 	db	32
   819  0034C1  20                 	db	32
   820  0034C2  20                 	db	32
   821  0034C3  20                 	db	32
   822  0034C4  20                 	db	32
   823  0034C5  20                 	db	32
   824  0034C6  20                 	db	32
   825  0034C7  00                 	db	0
   826                           
   827                           ;initializer for _msjBAUD2
   828  0034C8  31                 	db	49
   829  0034C9  39                 	db	57
   830  0034CA  32                 	db	50
   831  0034CB  30                 	db	48
   832  0034CC  30                 	db	48
   833  0034CD  20                 	db	32
   834  0034CE  20                 	db	32
   835  0034CF  20                 	db	32
   836  0034D0  20                 	db	32
   837  0034D1  20                 	db	32
   838  0034D2  20                 	db	32
   839  0034D3  20                 	db	32
   840  0034D4  20                 	db	32
   841  0034D5  20                 	db	32
   842  0034D6  20                 	db	32
   843  0034D7  00                 	db	0
   844                           
   845                           ;initializer for _msjBAUD1
   846  0034D8  39                 	db	57
   847  0034D9  36                 	db	54
   848  0034DA  30                 	db	48
   849  0034DB  30                 	db	48
   850  0034DC  20                 	db	32
   851  0034DD  20                 	db	32
   852  0034DE  20                 	db	32
   853  0034DF  20                 	db	32
   854  0034E0  20                 	db	32
   855  0034E1  20                 	db	32
   856  0034E2  20                 	db	32
   857  0034E3  20                 	db	32
   858  0034E4  20                 	db	32
   859  0034E5  20                 	db	32
   860  0034E6  20                 	db	32
   861  0034E7  00                 	db	0
   862                           
   863                           ;initializer for _msjFILTER3
   864  0034E8  53                 	db	83
   865  0034E9  54                 	db	84
   866  0034EA  52                 	db	82
   867  0034EB  4F                 	db	79
   868  0034EC  4E                 	db	78
   869  0034ED  47                 	db	71
   870  0034EE  20                 	db	32
   871  0034EF  20                 	db	32
   872  0034F0  20                 	db	32
   873  0034F1  20                 	db	32
   874  0034F2  20                 	db	32
   875  0034F3  20                 	db	32
   876  0034F4  20                 	db	32
   877  0034F5  20                 	db	32
   878  0034F6  20                 	db	32
   879  0034F7  00                 	db	0
   880                           
   881                           ;initializer for _msjFILTER2
   882  0034F8  4D                 	db	77
   883  0034F9  45                 	db	69
   884  0034FA  44                 	db	68
   885  0034FB  49                 	db	73
   886  0034FC  55                 	db	85
   887  0034FD  4D                 	db	77
   888  0034FE  20                 	db	32
   889  0034FF  20                 	db	32
   890  003500  20                 	db	32
   891  003501  20                 	db	32
   892  003502  20                 	db	32
   893  003503  20                 	db	32
   894  003504  20                 	db	32
   895  003505  20                 	db	32
   896  003506  20                 	db	32
   897  003507  00                 	db	0
   898                           
   899                           ;initializer for _msjFILTER1
   900  003508  57                 	db	87
   901  003509  45                 	db	69
   902  00350A  41                 	db	65
   903  00350B  4B                 	db	75
   904  00350C  20                 	db	32
   905  00350D  20                 	db	32
   906  00350E  20                 	db	32
   907  00350F  20                 	db	32
   908  003510  20                 	db	32
   909  003511  20                 	db	32
   910  003512  20                 	db	32
   911  003513  20                 	db	32
   912  003514  20                 	db	32
   913  003515  20                 	db	32
   914  003516  20                 	db	32
   915  003517  00                 	db	0
   916                           
   917                           ;initializer for _msjDIVISION3
   918  003518  30                 	db	48
   919  003519  2E                 	db	46
   920  00351A  30                 	db	48
   921  00351B  30                 	db	48
   922  00351C  30                 	db	48
   923  00351D  20                 	db	32
   924  00351E  20                 	db	32
   925  00351F  20                 	db	32
   926  003520  20                 	db	32
   927  003521  20                 	db	32
   928  003522  20                 	db	32
   929  003523  20                 	db	32
   930  003524  20                 	db	32
   931  003525  20                 	db	32
   932  003526  20                 	db	32
   933  003527  00                 	db	0
   934                           
   935                           ;initializer for _msjDIVISION2
   936  003528  30                 	db	48
   937  003529  2E                 	db	46
   938  00352A  30                 	db	48
   939  00352B  30                 	db	48
   940  00352C  20                 	db	32
   941  00352D  20                 	db	32
   942  00352E  20                 	db	32
   943  00352F  20                 	db	32
   944  003530  20                 	db	32
   945  003531  20                 	db	32
   946  003532  20                 	db	32
   947  003533  20                 	db	32
   948  003534  20                 	db	32
   949  003535  20                 	db	32
   950  003536  20                 	db	32
   951  003537  00                 	db	0
   952                           
   953                           ;initializer for _msjWAIT
   954  003538  57                 	db	87
   955  003539  41                 	db	65
   956  00353A  49                 	db	73
   957  00353B  54                 	db	84
   958  00353C  20                 	db	32
   959  00353D  20                 	db	32
   960  00353E  20                 	db	32
   961  00353F  20                 	db	32
   962  003540  20                 	db	32
   963  003541  20                 	db	32
   964  003542  20                 	db	32
   965  003543  20                 	db	32
   966  003544  20                 	db	32
   967  003545  20                 	db	32
   968  003546  20                 	db	32
   969  003547  00                 	db	0
   970                           
   971                           ;initializer for _msjDONE
   972  003548  44                 	db	68
   973  003549  4F                 	db	79
   974  00354A  4E                 	db	78
   975  00354B  45                 	db	69
   976  00354C  20                 	db	32
   977  00354D  20                 	db	32
   978  00354E  20                 	db	32
   979  00354F  20                 	db	32
   980  003550  20                 	db	32
   981  003551  20                 	db	32
   982  003552  20                 	db	32
   983  003553  20                 	db	32
   984  003554  20                 	db	32
   985  003555  20                 	db	32
   986  003556  20                 	db	32
   987  003557  00                 	db	0
   988                           
   989                           	psect	idataBANK4
   990  003558                     __pidataBANK4:
   991                           	opt stack 0
   992                           
   993                           ;initializer for menu_41@F15284
   994  003558  20                 	db	32
   995  003559  20                 	db	32
   996  00355A  20                 	db	32
   997  00355B  20                 	db	32
   998  00355C  20                 	db	32
   999  00355D  20                 	db	32
  1000  00355E  20                 	db	32
  1001  00355F  20                 	db	32
  1002  003560  20                 	db	32
  1003  003561  20                 	db	32
  1004  003562  20                 	db	32
  1005  003563  20                 	db	32
  1006  003564  20                 	db	32
  1007  003565  20                 	db	32
  1008  003566  20                 	db	32
  1009  003567  00                 	db	0
  1010                           
  1011                           ;initializer for menu_4@F15281
  1012  003568  20                 	db	32
  1013  003569  20                 	db	32
  1014  00356A  20                 	db	32
  1015  00356B  20                 	db	32
  1016  00356C  20                 	db	32
  1017  00356D  20                 	db	32
  1018  00356E  20                 	db	32
  1019  00356F  20                 	db	32
  1020  003570  20                 	db	32
  1021  003571  20                 	db	32
  1022  003572  20                 	db	32
  1023  003573  20                 	db	32
  1024  003574  20                 	db	32
  1025  003575  20                 	db	32
  1026  003576  20                 	db	32
  1027  003577  00                 	db	0
  1028                           
  1029                           ;initializer for menu_31@F15277
  1030  003578  20                 	db	32
  1031  003579  20                 	db	32
  1032  00357A  20                 	db	32
  1033  00357B  20                 	db	32
  1034  00357C  20                 	db	32
  1035  00357D  20                 	db	32
  1036  00357E  20                 	db	32
  1037  00357F  20                 	db	32
  1038  003580  20                 	db	32
  1039  003581  20                 	db	32
  1040  003582  20                 	db	32
  1041  003583  20                 	db	32
  1042  003584  20                 	db	32
  1043  003585  20                 	db	32
  1044  003586  20                 	db	32
  1045  003587  00                 	db	0
  1046                           
  1047                           ;initializer for menu_3@F15273
  1048  003588  20                 	db	32
  1049  003589  20                 	db	32
  1050  00358A  20                 	db	32
  1051  00358B  20                 	db	32
  1052  00358C  20                 	db	32
  1053  00358D  20                 	db	32
  1054  00358E  20                 	db	32
  1055  00358F  20                 	db	32
  1056  003590  20                 	db	32
  1057  003591  20                 	db	32
  1058  003592  20                 	db	32
  1059  003593  20                 	db	32
  1060  003594  20                 	db	32
  1061  003595  20                 	db	32
  1062  003596  20                 	db	32
  1063  003597  00                 	db	0
  1064                           
  1065                           ;initializer for menu_27@F15269
  1066  003598  20                 	db	32
  1067  003599  20                 	db	32
  1068  00359A  20                 	db	32
  1069  00359B  20                 	db	32
  1070  00359C  20                 	db	32
  1071  00359D  20                 	db	32
  1072  00359E  20                 	db	32
  1073  00359F  20                 	db	32
  1074  0035A0  20                 	db	32
  1075  0035A1  20                 	db	32
  1076  0035A2  20                 	db	32
  1077  0035A3  20                 	db	32
  1078  0035A4  20                 	db	32
  1079  0035A5  20                 	db	32
  1080  0035A6  20                 	db	32
  1081  0035A7  00                 	db	0
  1082                           
  1083                           ;initializer for menu_26@F15265
  1084  0035A8  20                 	db	32
  1085  0035A9  20                 	db	32
  1086  0035AA  20                 	db	32
  1087  0035AB  20                 	db	32
  1088  0035AC  20                 	db	32
  1089  0035AD  20                 	db	32
  1090  0035AE  20                 	db	32
  1091  0035AF  20                 	db	32
  1092  0035B0  20                 	db	32
  1093  0035B1  20                 	db	32
  1094  0035B2  20                 	db	32
  1095  0035B3  20                 	db	32
  1096  0035B4  20                 	db	32
  1097  0035B5  20                 	db	32
  1098  0035B6  20                 	db	32
  1099  0035B7  00                 	db	0
  1100                           
  1101                           ;initializer for menu_25@F15261
  1102  0035B8  20                 	db	32
  1103  0035B9  20                 	db	32
  1104  0035BA  20                 	db	32
  1105  0035BB  20                 	db	32
  1106  0035BC  20                 	db	32
  1107  0035BD  20                 	db	32
  1108  0035BE  20                 	db	32
  1109  0035BF  20                 	db	32
  1110  0035C0  20                 	db	32
  1111  0035C1  20                 	db	32
  1112  0035C2  20                 	db	32
  1113  0035C3  20                 	db	32
  1114  0035C4  20                 	db	32
  1115  0035C5  20                 	db	32
  1116  0035C6  20                 	db	32
  1117  0035C7  00                 	db	0
  1118                           
  1119                           ;initializer for menu_24@F15257
  1120  0035C8  20                 	db	32
  1121  0035C9  20                 	db	32
  1122  0035CA  20                 	db	32
  1123  0035CB  20                 	db	32
  1124  0035CC  20                 	db	32
  1125  0035CD  20                 	db	32
  1126  0035CE  20                 	db	32
  1127  0035CF  20                 	db	32
  1128  0035D0  20                 	db	32
  1129  0035D1  20                 	db	32
  1130  0035D2  20                 	db	32
  1131  0035D3  20                 	db	32
  1132  0035D4  20                 	db	32
  1133  0035D5  20                 	db	32
  1134  0035D6  20                 	db	32
  1135  0035D7  00                 	db	0
  1136                           
  1137                           ;initializer for menu_23@F15253
  1138  0035D8  20                 	db	32
  1139  0035D9  20                 	db	32
  1140  0035DA  20                 	db	32
  1141  0035DB  20                 	db	32
  1142  0035DC  20                 	db	32
  1143  0035DD  20                 	db	32
  1144  0035DE  20                 	db	32
  1145  0035DF  20                 	db	32
  1146  0035E0  20                 	db	32
  1147  0035E1  20                 	db	32
  1148  0035E2  20                 	db	32
  1149  0035E3  20                 	db	32
  1150  0035E4  20                 	db	32
  1151  0035E5  20                 	db	32
  1152  0035E6  20                 	db	32
  1153  0035E7  00                 	db	0
  1154                           
  1155                           ;initializer for menu_22@F15249
  1156  0035E8  20                 	db	32
  1157  0035E9  20                 	db	32
  1158  0035EA  20                 	db	32
  1159  0035EB  20                 	db	32
  1160  0035EC  20                 	db	32
  1161  0035ED  20                 	db	32
  1162  0035EE  20                 	db	32
  1163  0035EF  20                 	db	32
  1164  0035F0  20                 	db	32
  1165  0035F1  20                 	db	32
  1166  0035F2  20                 	db	32
  1167  0035F3  20                 	db	32
  1168  0035F4  20                 	db	32
  1169  0035F5  20                 	db	32
  1170  0035F6  20                 	db	32
  1171  0035F7  00                 	db	0
  1172                           
  1173                           ;initializer for menu_21@F15245
  1174  0035F8  20                 	db	32
  1175  0035F9  20                 	db	32
  1176  0035FA  20                 	db	32
  1177  0035FB  20                 	db	32
  1178  0035FC  20                 	db	32
  1179  0035FD  20                 	db	32
  1180  0035FE  20                 	db	32
  1181  0035FF  20                 	db	32
  1182  003600  20                 	db	32
  1183  003601  20                 	db	32
  1184  003602  20                 	db	32
  1185  003603  20                 	db	32
  1186  003604  20                 	db	32
  1187  003605  20                 	db	32
  1188  003606  20                 	db	32
  1189  003607  00                 	db	0
  1190                           
  1191                           ;initializer for menu_2@F15242
  1192  003608  20                 	db	32
  1193  003609  20                 	db	32
  1194  00360A  20                 	db	32
  1195  00360B  20                 	db	32
  1196  00360C  20                 	db	32
  1197  00360D  20                 	db	32
  1198  00360E  20                 	db	32
  1199  00360F  20                 	db	32
  1200  003610  20                 	db	32
  1201  003611  20                 	db	32
  1202  003612  20                 	db	32
  1203  003613  20                 	db	32
  1204  003614  20                 	db	32
  1205  003615  20                 	db	32
  1206  003616  20                 	db	32
  1207  003617  00                 	db	0
  1208                           
  1209                           ;initializer for menu_1@F15239
  1210  003618  20                 	db	32
  1211  003619  20                 	db	32
  1212  00361A  20                 	db	32
  1213  00361B  20                 	db	32
  1214  00361C  20                 	db	32
  1215  00361D  20                 	db	32
  1216  00361E  20                 	db	32
  1217  00361F  20                 	db	32
  1218  003620  20                 	db	32
  1219  003621  20                 	db	32
  1220  003622  20                 	db	32
  1221  003623  20                 	db	32
  1222  003624  20                 	db	32
  1223  003625  20                 	db	32
  1224  003626  20                 	db	32
  1225  003627  00                 	db	0
  1226                           
  1227                           ;initializer for _memPort
  1228  003628  38                 	db	56
  1229  003629  30                 	db	48
  1230  00362A  38                 	db	56
  1231  00362B  30                 	db	48
  1232  00362C  20                 	db	32
  1233  00362D  20                 	db	32
  1234  00362E  20                 	db	32
  1235  00362F  20                 	db	32
  1236  003630  20                 	db	32
  1237  003631  20                 	db	32
  1238  003632  20                 	db	32
  1239  003633  20                 	db	32
  1240  003634  20                 	db	32
  1241  003635  20                 	db	32
  1242  003636  20                 	db	32
  1243  003637  00                 	db	0
  1244                           
  1245                           ;initializer for _memMac
  1246  003638  30                 	db	48
  1247  003639  32                 	db	50
  1248  00363A  31                 	db	49
  1249  00363B  45                 	db	69
  1250  00363C  45                 	db	69
  1251  00363D  33                 	db	51
  1252  00363E  38                 	db	56
  1253  00363F  30                 	db	48
  1254  003640  30                 	db	48
  1255  003641  41                 	db	65
  1256  003642  41                 	db	65
  1257  003643  32                 	db	50
  1258  003644  20                 	db	32
  1259  003645  20                 	db	32
  1260  003646  20                 	db	32
  1261  003647  00                 	db	0
  1262                           
  1263                           ;initializer for _memIp
  1264  003648  31                 	db	49
  1265  003649  39                 	db	57
  1266  00364A  32                 	db	50
  1267  00364B  2E                 	db	46
  1268  00364C  31                 	db	49
  1269  00364D  36                 	db	54
  1270  00364E  38                 	db	56
  1271  00364F  2E                 	db	46
  1272  003650  30                 	db	48
  1273  003651  2E                 	db	46
  1274  003652  31                 	db	49
  1275  003653  30                 	db	48
  1276  003654  20                 	db	32
  1277  003655  20                 	db	32
  1278  003656  20                 	db	32
  1279  003657  00                 	db	0
  1280                           
  1281                           	psect	idataBANK5
  1282  0042BA                     __pidataBANK5:
  1283                           	opt stack 0
  1284                           
  1285                           ;initializer for menu_6@F15310
  1286  0042BA  20                 	db	32
  1287  0042BB  20                 	db	32
  1288  0042BC  20                 	db	32
  1289  0042BD  20                 	db	32
  1290  0042BE  20                 	db	32
  1291  0042BF  20                 	db	32
  1292  0042C0  20                 	db	32
  1293  0042C1  20                 	db	32
  1294  0042C2  20                 	db	32
  1295  0042C3  20                 	db	32
  1296  0042C4  20                 	db	32
  1297  0042C5  20                 	db	32
  1298  0042C6  20                 	db	32
  1299  0042C7  20                 	db	32
  1300  0042C8  20                 	db	32
  1301  0042C9  00                 	db	0
  1302                           
  1303                           ;initializer for menu_5@F15306
  1304  0042CA  20                 	db	32
  1305  0042CB  20                 	db	32
  1306  0042CC  20                 	db	32
  1307  0042CD  20                 	db	32
  1308  0042CE  20                 	db	32
  1309  0042CF  20                 	db	32
  1310  0042D0  20                 	db	32
  1311  0042D1  20                 	db	32
  1312  0042D2  20                 	db	32
  1313  0042D3  20                 	db	32
  1314  0042D4  20                 	db	32
  1315  0042D5  20                 	db	32
  1316  0042D6  20                 	db	32
  1317  0042D7  20                 	db	32
  1318  0042D8  20                 	db	32
  1319  0042D9  00                 	db	0
  1320                           
  1321                           ;initializer for menu_45@F15300
  1322  0042DA  20                 	db	32
  1323  0042DB  20                 	db	32
  1324  0042DC  20                 	db	32
  1325  0042DD  20                 	db	32
  1326  0042DE  20                 	db	32
  1327  0042DF  20                 	db	32
  1328  0042E0  20                 	db	32
  1329  0042E1  20                 	db	32
  1330  0042E2  20                 	db	32
  1331  0042E3  20                 	db	32
  1332  0042E4  20                 	db	32
  1333  0042E5  20                 	db	32
  1334  0042E6  20                 	db	32
  1335  0042E7  20                 	db	32
  1336  0042E8  20                 	db	32
  1337  0042E9  00                 	db	0
  1338                           
  1339                           ;initializer for menu_44@F15296
  1340  0042EA  20                 	db	32
  1341  0042EB  20                 	db	32
  1342  0042EC  20                 	db	32
  1343  0042ED  20                 	db	32
  1344  0042EE  20                 	db	32
  1345  0042EF  20                 	db	32
  1346  0042F0  20                 	db	32
  1347  0042F1  20                 	db	32
  1348  0042F2  20                 	db	32
  1349  0042F3  20                 	db	32
  1350  0042F4  20                 	db	32
  1351  0042F5  20                 	db	32
  1352  0042F6  20                 	db	32
  1353  0042F7  20                 	db	32
  1354  0042F8  20                 	db	32
  1355  0042F9  00                 	db	0
  1356                           
  1357                           ;initializer for menu_43@F15292
  1358  0042FA  20                 	db	32
  1359  0042FB  20                 	db	32
  1360  0042FC  20                 	db	32
  1361  0042FD  20                 	db	32
  1362  0042FE  20                 	db	32
  1363  0042FF  20                 	db	32
  1364  004300  20                 	db	32
  1365  004301  20                 	db	32
  1366  004302  20                 	db	32
  1367  004303  20                 	db	32
  1368  004304  20                 	db	32
  1369  004305  20                 	db	32
  1370  004306  20                 	db	32
  1371  004307  20                 	db	32
  1372  004308  20                 	db	32
  1373  004309  00                 	db	0
  1374                           
  1375                           ;initializer for menu_42@F15288
  1376  00430A  20                 	db	32
  1377  00430B  20                 	db	32
  1378  00430C  20                 	db	32
  1379  00430D  20                 	db	32
  1380  00430E  20                 	db	32
  1381  00430F  20                 	db	32
  1382  004310  20                 	db	32
  1383  004311  20                 	db	32
  1384  004312  20                 	db	32
  1385  004313  20                 	db	32
  1386  004314  20                 	db	32
  1387  004315  20                 	db	32
  1388  004316  20                 	db	32
  1389  004317  20                 	db	32
  1390  004318  20                 	db	32
  1391  004319  00                 	db	0
  1392                           
  1393                           ;initializer for _msjBLANK
  1394  00431A  20                 	db	32
  1395  00431B  20                 	db	32
  1396  00431C  20                 	db	32
  1397  00431D  20                 	db	32
  1398  00431E  20                 	db	32
  1399  00431F  20                 	db	32
  1400  004320  20                 	db	32
  1401  004321  20                 	db	32
  1402  004322  20                 	db	32
  1403  004323  20                 	db	32
  1404  004324  20                 	db	32
  1405  004325  20                 	db	32
  1406  004326  20                 	db	32
  1407  004327  20                 	db	32
  1408  004328  20                 	db	32
  1409  004329  00                 	db	0
  1410                           
  1411                           	psect	mediumconst
  1412  00FC5A                     __pmediumconst:
  1413                           	opt stack 0
  1414  00FC5A  00                 	db	0
  1415  00FC5B                     _digitos:
  1416                           	opt stack 0
  1417  00FC5B  07E0               	dw	2016
  1418  00FC5D  0FF0               	dw	4080
  1419  00FC5F  1008               	dw	4104
  1420  00FC61  300C               	dw	12300
  1421  00FC63  300C               	dw	12300
  1422  00FC65  300C               	dw	12300
  1423  00FC67  300C               	dw	12300
  1424  00FC69  300C               	dw	12300
  1425  00FC6B  300C               	dw	12300
  1426  00FC6D  300C               	dw	12300
  1427  00FC6F  300C               	dw	12300
  1428  00FC71  300C               	dw	12300
  1429  00FC73  300C               	dw	12300
  1430  00FC75  300C               	dw	12300
  1431  00FC77  300C               	dw	12300
  1432  00FC79  300C               	dw	12300
  1433  00FC7B  300C               	dw	12300
  1434  00FC7D  300C               	dw	12300
  1435  00FC7F  300C               	dw	12300
  1436  00FC81  1008               	dw	4104
  1437  00FC83  0FF0               	dw	4080
  1438  00FC85  07E0               	dw	2016
  1439  00FC87  0780               	dw	1920
  1440  00FC89  0780               	dw	1920
  1441  00FC8B  0180               	dw	384
  1442  00FC8D  0180               	dw	384
  1443  00FC8F  0180               	dw	384
  1444  00FC91  0180               	dw	384
  1445  00FC93  0180               	dw	384
  1446  00FC95  0180               	dw	384
  1447  00FC97  0180               	dw	384
  1448  00FC99  0180               	dw	384
  1449  00FC9B  0180               	dw	384
  1450  00FC9D  0180               	dw	384
  1451  00FC9F  0180               	dw	384
  1452  00FCA1  0180               	dw	384
  1453  00FCA3  0180               	dw	384
  1454  00FCA5  0180               	dw	384
  1455  00FCA7  0180               	dw	384
  1456  00FCA9  0180               	dw	384
  1457  00FCAB  0180               	dw	384
  1458  00FCAD  0180               	dw	384
  1459  00FCAF  1FF8               	dw	8184
  1460  00FCB1  1FF8               	dw	8184
  1461  00FCB3  07E0               	dw	2016
  1462  00FCB5  0FF0               	dw	4080
  1463  00FCB7  1008               	dw	4104
  1464  00FCB9  000C               	dw	12
  1465  00FCBB  0006               	dw	6
  1466  00FCBD  0006               	dw	6
  1467  00FCBF  0006               	dw	6
  1468  00FCC1  000C               	dw	12
  1469  00FCC3  001C               	dw	28
  1470  00FCC5  0038               	dw	56
  1471  00FCC7  0070               	dw	112
  1472  00FCC9  00E0               	dw	224
  1473  00FCCB  01C0               	dw	448
  1474  00FCCD  0380               	dw	896
  1475  00FCCF  0700               	dw	1792
  1476  00FCD1  0E00               	dw	3584
  1477  00FCD3  1C00               	dw	7168
  1478  00FCD5  1800               	dw	6144
  1479  00FCD7  3000               	dw	12288
  1480  00FCD9  3000               	dw	12288
  1481  00FCDB  3FFE               	dw	16382
  1482  00FCDD  3FFE               	dw	16382
  1483  00FCDF  1FF0               	dw	8176
  1484  00FCE1  3FF8               	dw	16376
  1485  00FCE3  601C               	dw	24604
  1486  00FCE5  000C               	dw	12
  1487  00FCE7  000C               	dw	12
  1488  00FCE9  000C               	dw	12
  1489  00FCEB  000C               	dw	12
  1490  00FCED  000C               	dw	12
  1491  00FCEF  000C               	dw	12
  1492  00FCF1  0018               	dw	24
  1493  00FCF3  07F0               	dw	2032
  1494  00FCF5  07F0               	dw	2032
  1495  00FCF7  0018               	dw	24
  1496  00FCF9  000C               	dw	12
  1497  00FCFB  000C               	dw	12
  1498  00FCFD  000C               	dw	12
  1499  00FCFF  000C               	dw	12
  1500  00FD01  000C               	dw	12
  1501  00FD03  000C               	dw	12
  1502  00FD05  601C               	dw	24604
  1503  00FD07  3FF8               	dw	16376
  1504  00FD09  1FF0               	dw	8176
  1505  00FD0B  0000               	dw	0
  1506  00FD0D  000C               	dw	12
  1507  00FD0F  001C               	dw	28
  1508  00FD11  003C               	dw	60
  1509  00FD13  006C               	dw	108
  1510  00FD15  00CC               	dw	204
  1511  00FD17  018C               	dw	396
  1512  00FD19  030C               	dw	780
  1513  00FD1B  060C               	dw	1548
  1514  00FD1D  0C0C               	dw	3084
  1515  00FD1F  180C               	dw	6156
  1516  00FD21  300C               	dw	12300
  1517  00FD23  3FFE               	dw	16382
  1518  00FD25  3FFE               	dw	16382
  1519  00FD27  000C               	dw	12
  1520  00FD29  000C               	dw	12
  1521  00FD2B  000C               	dw	12
  1522  00FD2D  000C               	dw	12
  1523  00FD2F  000C               	dw	12
  1524  00FD31  000C               	dw	12
  1525  00FD33  000C               	dw	12
  1526  00FD35  000C               	dw	12
  1527  00FD37  7FF8               	dw	32760
  1528  00FD39  7FF8               	dw	32760
  1529  00FD3B  6000               	dw	24576
  1530  00FD3D  6000               	dw	24576
  1531  00FD3F  6000               	dw	24576
  1532  00FD41  6000               	dw	24576
  1533  00FD43  6000               	dw	24576
  1534  00FD45  6000               	dw	24576
  1535  00FD47  6000               	dw	24576
  1536  00FD49  6000               	dw	24576
  1537  00FD4B  7FF0               	dw	32752
  1538  00FD4D  7FF8               	dw	32760
  1539  00FD4F  000C               	dw	12
  1540  00FD51  000C               	dw	12
  1541  00FD53  000C               	dw	12
  1542  00FD55  000C               	dw	12
  1543  00FD57  000C               	dw	12
  1544  00FD59  000C               	dw	12
  1545  00FD5B  000C               	dw	12
  1546  00FD5D  000C               	dw	12
  1547  00FD5F  7FF8               	dw	32760
  1548  00FD61  7FF0               	dw	32752
  1549  00FD63  0FF0               	dw	4080
  1550  00FD65  1FF0               	dw	8176
  1551  00FD67  3000               	dw	12288
  1552  00FD69  6000               	dw	24576
  1553  00FD6B  6000               	dw	24576
  1554  00FD6D  6000               	dw	24576
  1555  00FD6F  6000               	dw	24576
  1556  00FD71  6000               	dw	24576
  1557  00FD73  6000               	dw	24576
  1558  00FD75  6000               	dw	24576
  1559  00FD77  6FF0               	dw	28656
  1560  00FD79  7FF8               	dw	32760
  1561  00FD7B  700C               	dw	28684
  1562  00FD7D  600C               	dw	24588
  1563  00FD7F  600C               	dw	24588
  1564  00FD81  600C               	dw	24588
  1565  00FD83  600C               	dw	24588
  1566  00FD85  600C               	dw	24588
  1567  00FD87  600C               	dw	24588
  1568  00FD89  600C               	dw	24588
  1569  00FD8B  3FF8               	dw	16376
  1570  00FD8D  1FF0               	dw	8176
  1571  00FD8F  3FFC               	dw	16380
  1572  00FD91  3FFC               	dw	16380
  1573  00FD93  000C               	dw	12
  1574  00FD95  000C               	dw	12
  1575  00FD97  0018               	dw	24
  1576  00FD99  0018               	dw	24
  1577  00FD9B  0030               	dw	48
  1578  00FD9D  0030               	dw	48
  1579  00FD9F  0060               	dw	96
  1580  00FDA1  0060               	dw	96
  1581  00FDA3  00C0               	dw	192
  1582  00FDA5  00C0               	dw	192
  1583  00FDA7  0180               	dw	384
  1584  00FDA9  0180               	dw	384
  1585  00FDAB  0300               	dw	768
  1586  00FDAD  0300               	dw	768
  1587  00FDAF  0600               	dw	1536
  1588  00FDB1  0600               	dw	1536
  1589  00FDB3  0C00               	dw	3072
  1590  00FDB5  0C00               	dw	3072
  1591  00FDB7  1800               	dw	6144
  1592  00FDB9  1800               	dw	6144
  1593  00FDBB  07E0               	dw	2016
  1594  00FDBD  0FF0               	dw	4080
  1595  00FDBF  1008               	dw	4104
  1596  00FDC1  300C               	dw	12300
  1597  00FDC3  300C               	dw	12300
  1598  00FDC5  300C               	dw	12300
  1599  00FDC7  300C               	dw	12300
  1600  00FDC9  300C               	dw	12300
  1601  00FDCB  300C               	dw	12300
  1602  00FDCD  1818               	dw	6168
  1603  00FDCF  0FF0               	dw	4080
  1604  00FDD1  0FF0               	dw	4080
  1605  00FDD3  1818               	dw	6168
  1606  00FDD5  300C               	dw	12300
  1607  00FDD7  300C               	dw	12300
  1608  00FDD9  300C               	dw	12300
  1609  00FDDB  300C               	dw	12300
  1610  00FDDD  300C               	dw	12300
  1611  00FDDF  300C               	dw	12300
  1612  00FDE1  1008               	dw	4104
  1613  00FDE3  0FF0               	dw	4080
  1614  00FDE5  07E0               	dw	2016
  1615  00FDE7  07F8               	dw	2040
  1616  00FDE9  1FFC               	dw	8188
  1617  00FDEB  180C               	dw	6156
  1618  00FDED  3006               	dw	12294
  1619  00FDEF  3006               	dw	12294
  1620  00FDF1  3006               	dw	12294
  1621  00FDF3  3006               	dw	12294
  1622  00FDF5  3006               	dw	12294
  1623  00FDF7  3006               	dw	12294
  1624  00FDF9  180E               	dw	6158
  1625  00FDFB  1FFE               	dw	8190
  1626  00FDFD  07F6               	dw	2038
  1627  00FDFF  0006               	dw	6
  1628  00FE01  0006               	dw	6
  1629  00FE03  0006               	dw	6
  1630  00FE05  0006               	dw	6
  1631  00FE07  0006               	dw	6
  1632  00FE09  0006               	dw	6
  1633  00FE0B  000C               	dw	12
  1634  00FE0D  0018               	dw	24
  1635  00FE0F  0FF0               	dw	4080
  1636  00FE11  0FE0               	dw	4064
  1637  00FE13  0000               	dw	0
  1638  00FE15  0000               	dw	0
  1639  00FE17  0000               	dw	0
  1640  00FE19  0000               	dw	0
  1641  00FE1B  0000               	dw	0
  1642  00FE1D  0000               	dw	0
  1643  00FE1F  0000               	dw	0
  1644  00FE21  0000               	dw	0
  1645  00FE23  0000               	dw	0
  1646  00FE25  0000               	dw	0
  1647  00FE27  0000               	dw	0
  1648  00FE29  0000               	dw	0
  1649  00FE2B  0000               	dw	0
  1650  00FE2D  0000               	dw	0
  1651  00FE2F  0000               	dw	0
  1652  00FE31  0000               	dw	0
  1653  00FE33  0000               	dw	0
  1654  00FE35  0000               	dw	0
  1655  00FE37  0000               	dw	0
  1656  00FE39  0000               	dw	0
  1657  00FE3B  0000               	dw	0
  1658  00FE3D  0000               	dw	0
  1659  00FE3F                     __end_of_digitos:
  1660                           	opt stack 0
  1661  00FE3F                     _texto:
  1662                           	opt stack 0
  1663  00FE3F  00                 	db	0
  1664  00FE40  7E                 	db	126
  1665  00FE41  A1                 	db	161
  1666  00FE42  91                 	db	145
  1667  00FE43  89                 	db	137
  1668  00FE44  85                 	db	133
  1669  00FE45  7E                 	db	126
  1670  00FE46  00                 	db	0
  1671  00FE47  00                 	db	0
  1672  00FE48  00                 	db	0
  1673  00FE49  82                 	db	130
  1674  00FE4A  FF                 	db	255
  1675  00FE4B  80                 	db	128
  1676  00FE4C  00                 	db	0
  1677  00FE4D  00                 	db	0
  1678  00FE4E  00                 	db	0
  1679  00FE4F  00                 	db	0
  1680  00FE50  C2                 	db	194
  1681  00FE51  A1                 	db	161
  1682  00FE52  91                 	db	145
  1683  00FE53  89                 	db	137
  1684  00FE54  86                 	db	134
  1685  00FE55  00                 	db	0
  1686  00FE56  00                 	db	0
  1687  00FE57  00                 	db	0
  1688  00FE58  00                 	db	0
  1689  00FE59  81                 	db	129
  1690  00FE5A  81                 	db	129
  1691  00FE5B  89                 	db	137
  1692  00FE5C  95                 	db	149
  1693  00FE5D  63                 	db	99
  1694  00FE5E  00                 	db	0
  1695  00FE5F  00                 	db	0
  1696  00FE60  00                 	db	0
  1697  00FE61  18                 	db	24
  1698  00FE62  14                 	db	20
  1699  00FE63  12                 	db	18
  1700  00FE64  FF                 	db	255
  1701  00FE65  10                 	db	16
  1702  00FE66  00                 	db	0
  1703  00FE67  00                 	db	0
  1704  00FE68  8F                 	db	143
  1705  00FE69  89                 	db	137
  1706  00FE6A  89                 	db	137
  1707  00FE6B  89                 	db	137
  1708  00FE6C  89                 	db	137
  1709  00FE6D  70                 	db	112
  1710  00FE6E  00                 	db	0
  1711  00FE6F  00                 	db	0
  1712  00FE70  7E                 	db	126
  1713  00FE71  89                 	db	137
  1714  00FE72  89                 	db	137
  1715  00FE73  89                 	db	137
  1716  00FE74  89                 	db	137
  1717  00FE75  70                 	db	112
  1718  00FE76  00                 	db	0
  1719  00FE77  00                 	db	0
  1720  00FE78  01                 	db	1
  1721  00FE79  C1                 	db	193
  1722  00FE7A  31                 	db	49
  1723  00FE7B  09                 	db	9
  1724  00FE7C  05                 	db	5
  1725  00FE7D  03                 	db	3
  1726  00FE7E  00                 	db	0
  1727  00FE7F  00                 	db	0
  1728  00FE80  76                 	db	118
  1729  00FE81  89                 	db	137
  1730  00FE82  89                 	db	137
  1731  00FE83  89                 	db	137
  1732  00FE84  76                 	db	118
  1733  00FE85  00                 	db	0
  1734  00FE86  00                 	db	0
  1735  00FE87  00                 	db	0
  1736  00FE88  0E                 	db	14
  1737  00FE89  91                 	db	145
  1738  00FE8A  91                 	db	145
  1739  00FE8B  91                 	db	145
  1740  00FE8C  7E                 	db	126
  1741  00FE8D  00                 	db	0
  1742  00FE8E  00                 	db	0
  1743  00FE8F  00                 	db	0
  1744  00FE90  00                 	db	0
  1745  00FE91  00                 	db	0
  1746  00FE92  CC                 	db	204
  1747  00FE93  CC                 	db	204
  1748  00FE94  00                 	db	0
  1749  00FE95  00                 	db	0
  1750  00FE96  00                 	db	0
  1751  00FE97  00                 	db	0
  1752  00FE98  00                 	db	0
  1753  00FE99  48                 	db	72
  1754  00FE9A  48                 	db	72
  1755  00FE9B  48                 	db	72
  1756  00FE9C  48                 	db	72
  1757  00FE9D  00                 	db	0
  1758  00FE9E  00                 	db	0
  1759  00FE9F  00                 	db	0
  1760  00FEA0  FC                 	db	252
  1761  00FEA1  12                 	db	18
  1762  00FEA2  11                 	db	17
  1763  00FEA3  12                 	db	18
  1764  00FEA4  FC                 	db	252
  1765  00FEA5  00                 	db	0
  1766  00FEA6  00                 	db	0
  1767  00FEA7  00                 	db	0
  1768  00FEA8  FF                 	db	255
  1769  00FEA9  89                 	db	137
  1770  00FEAA  89                 	db	137
  1771  00FEAB  89                 	db	137
  1772  00FEAC  76                 	db	118
  1773  00FEAD  00                 	db	0
  1774  00FEAE  00                 	db	0
  1775  00FEAF  00                 	db	0
  1776  00FEB0  7E                 	db	126
  1777  00FEB1  81                 	db	129
  1778  00FEB2  81                 	db	129
  1779  00FEB3  81                 	db	129
  1780  00FEB4  81                 	db	129
  1781  00FEB5  00                 	db	0
  1782  00FEB6  00                 	db	0
  1783  00FEB7  00                 	db	0
  1784  00FEB8  FF                 	db	255
  1785  00FEB9  81                 	db	129
  1786  00FEBA  81                 	db	129
  1787  00FEBB  81                 	db	129
  1788  00FEBC  81                 	db	129
  1789  00FEBD  7E                 	db	126
  1790  00FEBE  00                 	db	0
  1791  00FEBF  00                 	db	0
  1792  00FEC0  FF                 	db	255
  1793  00FEC1  89                 	db	137
  1794  00FEC2  89                 	db	137
  1795  00FEC3  89                 	db	137
  1796  00FEC4  81                 	db	129
  1797  00FEC5  00                 	db	0
  1798  00FEC6  00                 	db	0
  1799  00FEC7  00                 	db	0
  1800  00FEC8  FF                 	db	255
  1801  00FEC9  09                 	db	9
  1802  00FECA  09                 	db	9
  1803  00FECB  09                 	db	9
  1804  00FECC  01                 	db	1
  1805  00FECD  00                 	db	0
  1806  00FECE  00                 	db	0
  1807  00FECF  00                 	db	0
  1808  00FED0  7E                 	db	126
  1809  00FED1  81                 	db	129
  1810  00FED2  91                 	db	145
  1811  00FED3  91                 	db	145
  1812  00FED4  F0                 	db	240
  1813  00FED5  00                 	db	0
  1814  00FED6  00                 	db	0
  1815  00FED7  00                 	db	0
  1816  00FED8  FF                 	db	255
  1817  00FED9  10                 	db	16
  1818  00FEDA  10                 	db	16
  1819  00FEDB  10                 	db	16
  1820  00FEDC  FF                 	db	255
  1821  00FEDD  00                 	db	0
  1822  00FEDE  00                 	db	0
  1823  00FEDF  00                 	db	0
  1824  00FEE0  00                 	db	0
  1825  00FEE1  81                 	db	129
  1826  00FEE2  FF                 	db	255
  1827  00FEE3  81                 	db	129
  1828  00FEE4  00                 	db	0
  1829  00FEE5  00                 	db	0
  1830  00FEE6  00                 	db	0
  1831  00FEE7  00                 	db	0
  1832  00FEE8  41                 	db	65
  1833  00FEE9  81                 	db	129
  1834  00FEEA  7F                 	db	127
  1835  00FEEB  01                 	db	1
  1836  00FEEC  00                 	db	0
  1837  00FEED  00                 	db	0
  1838  00FEEE  00                 	db	0
  1839  00FEEF  00                 	db	0
  1840  00FEF0  FF                 	db	255
  1841  00FEF1  18                 	db	24
  1842  00FEF2  24                 	db	36
  1843  00FEF3  42                 	db	66
  1844  00FEF4  80                 	db	128
  1845  00FEF5  00                 	db	0
  1846  00FEF6  00                 	db	0
  1847  00FEF7  00                 	db	0
  1848  00FEF8  FF                 	db	255
  1849  00FEF9  80                 	db	128
  1850  00FEFA  80                 	db	128
  1851  00FEFB  80                 	db	128
  1852  00FEFC  80                 	db	128
  1853  00FEFD  00                 	db	0
  1854  00FEFE  00                 	db	0
  1855  00FEFF  FF                 	db	255
  1856  00FF00  02                 	db	2
  1857  00FF01  04                 	db	4
  1858  00FF02  08                 	db	8
  1859  00FF03  04                 	db	4
  1860  00FF04  02                 	db	2
  1861  00FF05  FF                 	db	255
  1862  00FF06  00                 	db	0
  1863  00FF07  00                 	db	0
  1864  00FF08  FF                 	db	255
  1865  00FF09  06                 	db	6
  1866  00FF0A  08                 	db	8
  1867  00FF0B  10                 	db	16
  1868  00FF0C  60                 	db	96
  1869  00FF0D  FF                 	db	255
  1870  00FF0E  00                 	db	0
  1871  00FF0F  00                 	db	0
  1872  00FF10  7E                 	db	126
  1873  00FF11  81                 	db	129
  1874  00FF12  81                 	db	129
  1875  00FF13  81                 	db	129
  1876  00FF14  81                 	db	129
  1877  00FF15  7E                 	db	126
  1878  00FF16  00                 	db	0
  1879  00FF17  00                 	db	0
  1880  00FF18  FF                 	db	255
  1881  00FF19  11                 	db	17
  1882  00FF1A  11                 	db	17
  1883  00FF1B  11                 	db	17
  1884  00FF1C  0E                 	db	14
  1885  00FF1D  00                 	db	0
  1886  00FF1E  00                 	db	0
  1887  00FF1F  00                 	db	0
  1888  00FF20  7E                 	db	126
  1889  00FF21  81                 	db	129
  1890  00FF22  A1                 	db	161
  1891  00FF23  C1                 	db	193
  1892  00FF24  7E                 	db	126
  1893  00FF25  00                 	db	0
  1894  00FF26  00                 	db	0
  1895  00FF27  00                 	db	0
  1896  00FF28  FF                 	db	255
  1897  00FF29  31                 	db	49
  1898  00FF2A  31                 	db	49
  1899  00FF2B  51                 	db	81
  1900  00FF2C  8E                 	db	142
  1901  00FF2D  00                 	db	0
  1902  00FF2E  00                 	db	0
  1903  00FF2F  00                 	db	0
  1904  00FF30  86                 	db	134
  1905  00FF31  89                 	db	137
  1906  00FF32  89                 	db	137
  1907  00FF33  89                 	db	137
  1908  00FF34  71                 	db	113
  1909  00FF35  00                 	db	0
  1910  00FF36  00                 	db	0
  1911  00FF37  01                 	db	1
  1912  00FF38  01                 	db	1
  1913  00FF39  01                 	db	1
  1914  00FF3A  FF                 	db	255
  1915  00FF3B  01                 	db	1
  1916  00FF3C  01                 	db	1
  1917  00FF3D  01                 	db	1
  1918  00FF3E  00                 	db	0
  1919  00FF3F  00                 	db	0
  1920  00FF40  7F                 	db	127
  1921  00FF41  80                 	db	128
  1922  00FF42  80                 	db	128
  1923  00FF43  80                 	db	128
  1924  00FF44  80                 	db	128
  1925  00FF45  7F                 	db	127
  1926  00FF46  00                 	db	0
  1927  00FF47  00                 	db	0
  1928  00FF48  3F                 	db	63
  1929  00FF49  40                 	db	64
  1930  00FF4A  80                 	db	128
  1931  00FF4B  80                 	db	128
  1932  00FF4C  40                 	db	64
  1933  00FF4D  3F                 	db	63
  1934  00FF4E  00                 	db	0
  1935  00FF4F  1E                 	db	30
  1936  00FF50  60                 	db	96
  1937  00FF51  C0                 	db	192
  1938  00FF52  30                 	db	48
  1939  00FF53  30                 	db	48
  1940  00FF54  C0                 	db	192
  1941  00FF55  60                 	db	96
  1942  00FF56  1E                 	db	30
  1943  00FF57  00                 	db	0
  1944  00FF58  84                 	db	132
  1945  00FF59  48                 	db	72
  1946  00FF5A  30                 	db	48
  1947  00FF5B  30                 	db	48
  1948  00FF5C  48                 	db	72
  1949  00FF5D  84                 	db	132
  1950  00FF5E  00                 	db	0
  1951  00FF5F  01                 	db	1
  1952  00FF60  02                 	db	2
  1953  00FF61  04                 	db	4
  1954  00FF62  F8                 	db	248
  1955  00FF63  04                 	db	4
  1956  00FF64  02                 	db	2
  1957  00FF65  01                 	db	1
  1958  00FF66  00                 	db	0
  1959  00FF67  00                 	db	0
  1960  00FF68  C1                 	db	193
  1961  00FF69  A1                 	db	161
  1962  00FF6A  91                 	db	145
  1963  00FF6B  89                 	db	137
  1964  00FF6C  85                 	db	133
  1965  00FF6D  83                 	db	131
  1966  00FF6E  00                 	db	0
  1967  00FF6F  00                 	db	0
  1968  00FF70  00                 	db	0
  1969  00FF71  00                 	db	0
  1970  00FF72  00                 	db	0
  1971  00FF73  00                 	db	0
  1972  00FF74  00                 	db	0
  1973  00FF75  00                 	db	0
  1974  00FF76  00                 	db	0
  1975  00FF77  00                 	db	0
  1976  00FF78  00                 	db	0
  1977  00FF79  00                 	db	0
  1978  00FF7A  C0                 	db	192
  1979  00FF7B  C0                 	db	192
  1980  00FF7C  00                 	db	0
  1981  00FF7D  00                 	db	0
  1982  00FF7E  00                 	db	0
  1983  00FF7F  00                 	db	0
  1984  00FF80  00                 	db	0
  1985  00FF81  00                 	db	0
  1986  00FF82  00                 	db	0
  1987  00FF83  00                 	db	0
  1988  00FF84  00                 	db	0
  1989  00FF85  00                 	db	0
  1990  00FF86  00                 	db	0
  1991  00FF87  00                 	db	0
  1992  00FF88  00                 	db	0
  1993  00FF89  00                 	db	0
  1994  00FF8A  00                 	db	0
  1995  00FF8B  00                 	db	0
  1996  00FF8C  00                 	db	0
  1997  00FF8D  00                 	db	0
  1998  00FF8E  00                 	db	0
  1999  00FF8F  00                 	db	0
  2000  00FF90  00                 	db	0
  2001  00FF91  00                 	db	0
  2002  00FF92  00                 	db	0
  2003  00FF93  00                 	db	0
  2004  00FF94  00                 	db	0
  2005  00FF95  00                 	db	0
  2006  00FF96  00                 	db	0
  2007  00FF97  00                 	db	0
  2008  00FF98  00                 	db	0
  2009  00FF99  00                 	db	0
  2010  00FF9A  00                 	db	0
  2011  00FF9B  00                 	db	0
  2012  00FF9C  00                 	db	0
  2013  00FF9D  00                 	db	0
  2014  00FF9E  00                 	db	0
  2015  00FF9F                     __end_of_texto:
  2016                           	opt stack 0
  2017  00FF9F                     _dpowers:
  2018                           	opt stack 0
  2019  00FF9F  0001               	dw	1
  2020  00FFA1  000A               	dw	10
  2021  00FFA3  0064               	dw	100
  2022  00FFA5  03E8               	dw	1000
  2023  00FFA7  2710               	dw	10000
  2024  00FFA9                     __end_of_dpowers:
  2025                           	opt stack 0
  2026  00FFA9                     _debounceTime:
  2027                           	opt stack 0
  2028  00FFA9  19                 	db	25
  2029  00FFAA                     __end_of_debounceTime:
  2030                           	opt stack 0
  2031  0000                     _ANCON1	set	3932
  2032  0000                     _ANCON0	set	3933
  2033  0000                     _TRISDbits	set	3989
  2034  0000                     _TRISCbits	set	3988
  2035  0000                     _TRISAbits	set	3986
  2036  0000                     _PORTCbits	set	3970
  2037  0000                     _LATD	set	3980
  2038  0000                     _PORTC	set	3970
  2039  0000                     _LATDbits	set	3980
  2040  0000                     _LATA	set	3977
  2041  0000                     _LATB	set	3978
  2042  0000                     _RCONbits	set	4048
  2043  0000                     _IPR5	set	3960
  2044  0000                     _IPR4	set	4024
  2045  0000                     _IPR3	set	4005
  2046  0000                     _IPR2	set	4002
  2047  0000                     _IPR1	set	3999
  2048  0000                     _INTCON	set	4082
  2049  0000                     _TRISD	set	3989
  2050  0000                     _TRISC	set	3988
  2051  0000                     _TRISB	set	3987
  2052  0000                     _TRISA	set	3986
  2053  0000                     _OSCTUNE	set	3995
  2054  0000                     _OSCCON	set	4051
  2055  0000                     _PORTAbits	set	3968
  2056  0000                     _PORTDbits	set	3971
  2057  0000                     _LATAbits	set	3977
  2058  0000                     _LATCbits	set	3979
  2059  0000                     _RCREG2	set	3962
  2060  0000                     _RCSTA2bits	set	4006
  2061  0000                     _RCREG1	set	4014
  2062  0000                     _RCSTA1bits	set	4011
  2063  0000                     _PIE3bits	set	4003
  2064  0000                     _BAUDCON2bits	set	4025
  2065  0000                     _RCSTA2	set	4006
  2066  0000                     _TXSTA2	set	4026
  2067  0000                     _SPBRGH2	set	3964
  2068  0000                     _SPBRG2	set	3963
  2069  0000                     _BAUDCON1bits	set	4007
  2070  0000                     _RCSTA1	set	4011
  2071  0000                     _TXSTA1	set	4012
  2072  0000                     _SPBRGH1	set	3965
  2073  0000                     _SPBRG1	set	4015
  2074  0000                     _T2CONbits	set	4042
  2075  0000                     _PIE1bits	set	3997
  2076  0000                     _PR2	set	4043
  2077  0000                     _T2CON	set	4042
  2078  0000                     _PIR4bits	set	4023
  2079  0000                     _EECON2	set	3966
  2080  0000                     _INTCONbits	set	4082
  2081  0000                     _EECON1bits	set	3967
  2082  0000                     _EEDATA	set	3955
  2083  0000                     _EEADRH	set	3957
  2084  0000                     _EEADR	set	3956
  2085  0000                     _TXREG1	set	4013
  2086  0000                     _PIR1bits	set	3998
  2087  0000                     _TXREG2	set	3961
  2088  0000                     _PIR3bits	set	4004
  2089  0000                     _LATA1	set	31817
  2090  0000                     _LATA0	set	31816
  2091  0000                     _LATA2	set	31818
  2092  0000                     _LATA3	set	31819
  2093  00FFAA                     STR_1:
  2094  00FFAA  54                 	db	84	;'T'
  2095  00FFAB  41                 	db	65	;'A'
  2096  00FFAC  52                 	db	82	;'R'
  2097  00FFAD  45                 	db	69	;'E'
  2098  00FFAE  3A                 	db	58	;':'
  2099  00FFAF  20                 	db	32
  2100  00FFB0  20                 	db	32
  2101  00FFB1  20                 	db	32
  2102  00FFB2  20                 	db	32
  2103  00FFB3  20                 	db	32
  2104  00FFB4  20                 	db	32
  2105  00FFB5  20                 	db	32
  2106  00FFB6  20                 	db	32
  2107  00FFB7  20                 	db	32
  2108  00FFB8  20                 	db	32
  2109  00FFB9  20                 	db	32
  2110  00FFBA  00                 	db	0
  2111  00FFBB                     STR_4:
  2112  00FFBB  43                 	db	67	;'C'
  2113  00FFBC  44                 	db	68	;'D'
  2114  00FFBD  25                 	db	37
  2115  00FFBE  64                 	db	100	;'d'
  2116  00FFBF  0A                 	db	10
  2117  00FFC0  00                 	db	0
  2118  00FFC1                     STR_6:
  2119  00FFC1  43                 	db	67	;'C'
  2120  00FFC2  46                 	db	70	;'F'
  2121  00FFC3  25                 	db	37
  2122  00FFC4  64                 	db	100	;'d'
  2123  00FFC5  0A                 	db	10
  2124  00FFC6  00                 	db	0
  2125  00FFC7                     STR_17:
  2126  00FFC7  25                 	db	37
  2127  00FFC8  30                 	db	48	;'0'
  2128  00FFC9  35                 	db	53	;'5'
  2129  00FFCA  64                 	db	100	;'d'
  2130  00FFCB  0A                 	db	10
  2131  00FFCC  00                 	db	0
  2132  00FFCD                     STR_12:
  2133  00FFCD  42                 	db	66	;'B'
  2134  00FFCE  45                 	db	69	;'E'
  2135  00FFCF  30                 	db	48	;'0'
  2136  00FFD0  0A                 	db	10
  2137  00FFD1  00                 	db	0
  2138  00FFD2                     STR_11:
  2139  00FFD2  42                 	db	66	;'B'
  2140  00FFD3  45                 	db	69	;'E'
  2141  00FFD4  31                 	db	49	;'1'
  2142  00FFD5  0A                 	db	10
  2143  00FFD6  00                 	db	0
  2144  00FFD7                     STR_10:
  2145  00FFD7  42                 	db	66	;'B'
  2146  00FFD8  25                 	db	37
  2147  00FFD9  64                 	db	100	;'d'
  2148  00FFDA  0A                 	db	10
  2149  00FFDB  00                 	db	0
  2150  00FFDC                     STR_3:
  2151  00FFDC  43                 	db	67	;'C'
  2152  00FFDD  5A                 	db	90	;'Z'
  2153  00FFDE  0A                 	db	10
  2154  00FFDF  00                 	db	0
  2155  00FFE0                     STR_13:
  2156  00FFE0  46                 	db	70	;'F'
  2157  00FFE1  0A                 	db	10
  2158  00FFE2  00                 	db	0
  2159  00FFE3                     STR_18:
  2160  00FFE3  52                 	db	82	;'R'
  2161  00FFE4  0A                 	db	10
  2162  00FFE5  00                 	db	0
  2163  00FFE6                     STR_2:
  2164  00FFE6  57                 	db	87	;'W'
  2165  00FFE7  0A                 	db	10
  2166  00FFE8  00                 	db	0
  2167  00FFE9                     STR_14:
  2168  00FFE9  49                 	db	73	;'I'
  2169  00FFEA  31                 	db	49	;'1'
  2170  00FFEB  00                 	db	0
  2171  00FFEC                     STR_15:
  2172  00FFEC  49                 	db	73	;'I'
  2173  00FFED  32                 	db	50	;'2'
  2174  00FFEE  00                 	db	0
  2175  00FFEF                     STR_16:
  2176  00FFEF  49                 	db	73	;'I'
  2177  00FFF0  33                 	db	51	;'3'
  2178  00FFF1  00                 	db	0
  2179  00FFF2                     STR_7:
  2180  00FFF2  43                 	db	67	;'C'
  2181  00FFF3  45                 	db	69	;'E'
  2182  00FFF4  00                 	db	0
  2183  00FFF5                     STR_5:
  2184  00FFF5  43                 	db	67	;'C'
  2185  00FFF6  50                 	db	80	;'P'
  2186  00FFF7  00                 	db	0
  2187  00FFF8                     STR_9:
  2188  00FFF8  43                 	db	67	;'C'
  2189  00FFF9  52                 	db	82	;'R'
  2190  00FFFA  00                 	db	0
  2191  00FFFB                     STR_8:
  2192  00FFFB  43                 	db	67	;'C'
  2193  00FFFC  54                 	db	84	;'T'
  2194  00FFFD  00                 	db	0
  2195                           
  2196                           ; #config settings
  2197  00FFFE  00                 	db	0	; dummy byte at the end
  2198  0000                     
  2199                           	psect	cinit
  2200  002F02                     __pcinit:
  2201                           	opt stack 0
  2202  002F02                     start_initialization:
  2203                           	opt stack 0
  2204  002F02                     __initialization:
  2205                           	opt stack 0
  2206                           
  2207                           ; Initialize objects allocated to BANK5 (112 bytes)
  2208                           ; load TBLPTR registers with __pidataBANK5
  2209  002F02  0EBA               	movlw	low __pidataBANK5
  2210  002F04  6EF6               	movwf	tblptrl,c
  2211  002F06  0E42               	movlw	high __pidataBANK5
  2212  002F08  6EF7               	movwf	tblptrh,c
  2213  002F0A  0E00               	movlw	low (__pidataBANK5 shr (0+16))
  2214  002F0C  6EF8               	movwf	tblptru,c
  2215  002F0E  EE05  F000         	lfsr	0,__pdataBANK5
  2216  002F12  EE10 F070          	lfsr	1,112
  2217  002F16                     copy_data0:
  2218  002F16  0009               	tblrd		*+
  2219  002F18  CFF5 FFEE          	movff	tablat,postinc0
  2220  002F1C  50E5               	movf	postdec1,w,c
  2221  002F1E  50E1               	movf	fsr1l,w,c
  2222  002F20  E1FA               	bnz	copy_data0
  2223                           
  2224                           ; Initialize objects allocated to BANK4 (256 bytes)
  2225                           ; load TBLPTR registers with __pidataBANK4
  2226  002F22  0E58               	movlw	low __pidataBANK4
  2227  002F24  6EF6               	movwf	tblptrl,c
  2228  002F26  0E35               	movlw	high __pidataBANK4
  2229  002F28  6EF7               	movwf	tblptrh,c
  2230  002F2A  0E00               	movlw	low (__pidataBANK4 shr (0+16))
  2231  002F2C  6EF8               	movwf	tblptru,c
  2232  002F2E  EE04  F000         	lfsr	0,__pdataBANK4
  2233  002F32  EE11 F000          	lfsr	1,256
  2234  002F36                     copy_data1:
  2235  002F36  0009               	tblrd		*+
  2236  002F38  CFF5 FFEE          	movff	tablat,postinc0
  2237  002F3C  50E5               	movf	postdec1,w,c
  2238  002F3E  50E1               	movf	fsr1l,w,c
  2239  002F40  E1FA               	bnz	copy_data1
  2240  002F42  50E2               	movf	fsr1h,w,c
  2241  002F44  E1F8               	bnz	copy_data1
  2242                           
  2243                           ; Initialize objects allocated to BANK3 (256 bytes)
  2244                           ; load TBLPTR registers with __pidataBANK3
  2245  002F46  0E58               	movlw	low __pidataBANK3
  2246  002F48  6EF6               	movwf	tblptrl,c
  2247  002F4A  0E34               	movlw	high __pidataBANK3
  2248  002F4C  6EF7               	movwf	tblptrh,c
  2249  002F4E  0E00               	movlw	low (__pidataBANK3 shr (0+16))
  2250  002F50  6EF8               	movwf	tblptru,c
  2251  002F52  EE03  F000         	lfsr	0,__pdataBANK3
  2252  002F56  EE11 F000          	lfsr	1,256
  2253  002F5A                     copy_data2:
  2254  002F5A  0009               	tblrd		*+
  2255  002F5C  CFF5 FFEE          	movff	tablat,postinc0
  2256  002F60  50E5               	movf	postdec1,w,c
  2257  002F62  50E1               	movf	fsr1l,w,c
  2258  002F64  E1FA               	bnz	copy_data2
  2259  002F66  50E2               	movf	fsr1h,w,c
  2260  002F68  E1F8               	bnz	copy_data2
  2261                           
  2262                           ; Initialize objects allocated to BANK2 (256 bytes)
  2263                           ; load TBLPTR registers with __pidataBANK2
  2264  002F6A  0E58               	movlw	low __pidataBANK2
  2265  002F6C  6EF6               	movwf	tblptrl,c
  2266  002F6E  0E33               	movlw	high __pidataBANK2
  2267  002F70  6EF7               	movwf	tblptrh,c
  2268  002F72  0E00               	movlw	low (__pidataBANK2 shr (0+16))
  2269  002F74  6EF8               	movwf	tblptru,c
  2270  002F76  EE02  F000         	lfsr	0,__pdataBANK2
  2271  002F7A  EE11 F000          	lfsr	1,256
  2272  002F7E                     copy_data3:
  2273  002F7E  0009               	tblrd		*+
  2274  002F80  CFF5 FFEE          	movff	tablat,postinc0
  2275  002F84  50E5               	movf	postdec1,w,c
  2276  002F86  50E1               	movf	fsr1l,w,c
  2277  002F88  E1FA               	bnz	copy_data3
  2278  002F8A  50E2               	movf	fsr1h,w,c
  2279  002F8C  E1F8               	bnz	copy_data3
  2280                           
  2281                           ; Initialize objects allocated to BANK1 (181 bytes)
  2282                           ; load TBLPTR registers with __pidataBANK1
  2283  002F8E  0EE6               	movlw	low __pidataBANK1
  2284  002F90  6EF6               	movwf	tblptrl,c
  2285  002F92  0E3E               	movlw	high __pidataBANK1
  2286  002F94  6EF7               	movwf	tblptrh,c
  2287  002F96  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  2288  002F98  6EF8               	movwf	tblptru,c
  2289  002F9A  EE01  F000         	lfsr	0,__pdataBANK1
  2290  002F9E  EE10 F0B5          	lfsr	1,181
  2291  002FA2                     copy_data4:
  2292  002FA2  0009               	tblrd		*+
  2293  002FA4  CFF5 FFEE          	movff	tablat,postinc0
  2294  002FA8  50E5               	movf	postdec1,w,c
  2295  002FAA  50E1               	movf	fsr1l,w,c
  2296  002FAC  E1FA               	bnz	copy_data4
  2297                           
  2298                           ; Initialize objects allocated to BANK0 (23 bytes)
  2299                           ; load TBLPTR registers with __pidataBANK0
  2300  002FAE  0EAC               	movlw	low __pidataBANK0
  2301  002FB0  6EF6               	movwf	tblptrl,c
  2302  002FB2  0E4B               	movlw	high __pidataBANK0
  2303  002FB4  6EF7               	movwf	tblptrh,c
  2304  002FB6  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  2305  002FB8  6EF8               	movwf	tblptru,c
  2306  002FBA  EE00  F0B6         	lfsr	0,__pdataBANK0
  2307  002FBE  EE10 F017          	lfsr	1,23
  2308  002FC2                     copy_data5:
  2309  002FC2  0009               	tblrd		*+
  2310  002FC4  CFF5 FFEE          	movff	tablat,postinc0
  2311  002FC8  50E5               	movf	postdec1,w,c
  2312  002FCA  50E1               	movf	fsr1l,w,c
  2313  002FCC  E1FA               	bnz	copy_data5
  2314                           
  2315                           ; Initialize objects allocated to COMRAM (1 bytes)
  2316                           ; load TBLPTR registers with __pidataCOMRAM
  2317  002FCE  0E58               	movlw	low __pidataCOMRAM
  2318  002FD0  6EF6               	movwf	tblptrl,c
  2319  002FD2  0E4C               	movlw	high __pidataCOMRAM
  2320  002FD4  6EF7               	movwf	tblptrh,c
  2321  002FD6  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  2322  002FD8  6EF8               	movwf	tblptru,c
  2323  002FDA  0009               	tblrd		*+	;fetch initializer
  2324  002FDC  CFF5 F05E          	movff	tablat,__pdataCOMRAM
  2325                           
  2326                           ; Clear objects allocated to BANK5 (20 bytes)
  2327  002FE0  EE05  F099         	lfsr	0,__pbssBANK5
  2328  002FE4  0E14               	movlw	20
  2329  002FE6                     clear_0:
  2330  002FE6  6AEE               	clrf	postinc0,c
  2331  002FE8  06E8               	decf	wreg,f,c
  2332  002FEA  E1FD               	bnz	clear_0
  2333                           
  2334                           ; Clear objects allocated to BANK1 (57 bytes)
  2335  002FEC  EE01  F0B5         	lfsr	0,__pbssBANK1
  2336  002FF0  0E39               	movlw	57
  2337  002FF2                     clear_1:
  2338  002FF2  6AEE               	clrf	postinc0,c
  2339  002FF4  06E8               	decf	wreg,f,c
  2340  002FF6  E1FD               	bnz	clear_1
  2341                           
  2342                           ; Clear objects allocated to BANK0 (28 bytes)
  2343  002FF8  EE00  F09A         	lfsr	0,__pbssBANK0
  2344  002FFC  0E1C               	movlw	28
  2345  002FFE                     clear_2:
  2346  002FFE  6AEE               	clrf	postinc0,c
  2347  003000  06E8               	decf	wreg,f,c
  2348  003002  E1FD               	bnz	clear_2
  2349                           
  2350                           ; Clear objects allocated to COMRAM (4 bytes)
  2351  003004  6A5D               	clrf	(__pbssCOMRAM+3)& (0+255),c
  2352  003006  6A5C               	clrf	(__pbssCOMRAM+2)& (0+255),c
  2353  003008  6A5B               	clrf	(__pbssCOMRAM+1)& (0+255),c
  2354  00300A  6A5A               	clrf	__pbssCOMRAM& (0+255),c
  2355  00300C                     end_of_initialization:
  2356                           	opt stack 0
  2357  00300C                     __end_of__initialization:
  2358                           	opt stack 0
  2359  00300C  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  2360  00300E  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  2361  003010  0E00               	movlw	low (__Lmediumconst shr (0+16))
  2362  003012  6EF8               	movwf	tblptru,c
  2363  003014  0100               	movlb	0
  2364  003016  EF64  F016         	goto	_main	;jump to C main() function
  2365                           tblptru	equ	0xFF8
  2366                           tblptrh	equ	0xFF7
  2367                           tblptrl	equ	0xFF6
  2368                           tablat	equ	0xFF5
  2369                           postinc0	equ	0xFEE
  2370                           wreg	equ	0xFE8
  2371                           postdec1	equ	0xFE5
  2372                           fsr1h	equ	0xFE2
  2373                           fsr1l	equ	0xFE1
  2374                           
  2375                           	psect	bssCOMRAM
  2376  00005A                     __pbssCOMRAM:
  2377                           	opt stack 0
  2378  00005A                     _m1:
  2379                           	opt stack 0
  2380  00005A                     	ds	1
  2381  00005B                     _decimal_places:
  2382                           	opt stack 0
  2383  00005B                     	ds	1
  2384  00005C                     _menu_update:
  2385                           	opt stack 0
  2386  00005C                     	ds	1
  2387  00005D                     _m2:
  2388                           	opt stack 0
  2389  00005D                     	ds	1
  2390                           tblptru	equ	0xFF8
  2391                           tblptrh	equ	0xFF7
  2392                           tblptrl	equ	0xFF6
  2393                           tablat	equ	0xFF5
  2394                           postinc0	equ	0xFEE
  2395                           wreg	equ	0xFE8
  2396                           postdec1	equ	0xFE5
  2397                           fsr1h	equ	0xFE2
  2398                           fsr1l	equ	0xFE1
  2399                           
  2400                           	psect	dataCOMRAM
  2401  00005E                     __pdataCOMRAM:
  2402                           	opt stack 0
  2403  00005E                     _globalVar1:
  2404                           	opt stack 0
  2405  00005E                     	ds	1
  2406                           tblptru	equ	0xFF8
  2407                           tblptrh	equ	0xFF7
  2408                           tblptrl	equ	0xFF6
  2409                           tablat	equ	0xFF5
  2410                           postinc0	equ	0xFEE
  2411                           wreg	equ	0xFE8
  2412                           postdec1	equ	0xFE5
  2413                           fsr1h	equ	0xFE2
  2414                           fsr1l	equ	0xFE1
  2415                           
  2416                           	psect	bssBANK0
  2417  00009A                     __pbssBANK0:
  2418                           	opt stack 0
  2419  00009A                     _buff2:
  2420                           	opt stack 0
  2421  00009A                     	ds	15
  2422  0000A9                     _inPort:
  2423                           	opt stack 0
  2424  0000A9                     	ds	2
  2425  0000AB                     _divisor:
  2426                           	opt stack 0
  2427  0000AB                     	ds	2
  2428  0000AD                     _inMac:
  2429                           	opt stack 0
  2430  0000AD                     	ds	1
  2431  0000AE                     _g1:
  2432                           	opt stack 0
  2433  0000AE                     	ds	1
  2434  0000AF                     _printEnable:
  2435                           	opt stack 0
  2436  0000AF                     	ds	1
  2437  0000B0                     _keyConfirm:
  2438                           	opt stack 0
  2439  0000B0                     	ds	1
  2440  0000B1                     _debounceCounter:
  2441                           	opt stack 0
  2442  0000B1                     	ds	1
  2443  0000B2                     _decimal_point:
  2444                           	opt stack 0
  2445  0000B2                     	ds	1
  2446  0000B3                     _k2:
  2447                           	opt stack 0
  2448  0000B3                     	ds	1
  2449  0000B4                     _k1:
  2450                           	opt stack 0
  2451  0000B4                     	ds	1
  2452  0000B5                     _menu_shown:
  2453                           	opt stack 0
  2454  0000B5                     	ds	1
  2455                           tblptru	equ	0xFF8
  2456                           tblptrh	equ	0xFF7
  2457                           tblptrl	equ	0xFF6
  2458                           tablat	equ	0xFF5
  2459                           postinc0	equ	0xFEE
  2460                           wreg	equ	0xFE8
  2461                           postdec1	equ	0xFE5
  2462                           fsr1h	equ	0xFE2
  2463                           fsr1l	equ	0xFE1
  2464                           
  2465                           	psect	dataBANK0
  2466  0000B6                     __pdataBANK0:
  2467                           	opt stack 0
  2468  0000B6                     _memBaud:
  2469                           	opt stack 0
  2470  0000B6                     	ds	1
  2471  0000B7                     _memFilter:
  2472                           	opt stack 0
  2473  0000B7                     	ds	1
  2474  0000B8                     _memDivision:
  2475                           	opt stack 0
  2476  0000B8                     	ds	1
  2477  0000B9                     _keyEnable:
  2478                           	opt stack 0
  2479  0000B9                     	ds	1
  2480  0000BA                     _lastKey:
  2481                           	opt stack 0
  2482  0000BA                     	ds	1
  2483  0000BB                     _mux:
  2484                           	opt stack 0
  2485  0000BB                     	ds	1
  2486  0000BC                     _memBuff1:
  2487                           	opt stack 0
  2488  0000BC                     	ds	16
  2489  0000CC                     _menu_rowColor:
  2490                           	opt stack 0
  2491  0000CC                     	ds	1
  2492                           tblptru	equ	0xFF8
  2493                           tblptrh	equ	0xFF7
  2494                           tblptrl	equ	0xFF6
  2495                           tablat	equ	0xFF5
  2496                           postinc0	equ	0xFEE
  2497                           wreg	equ	0xFE8
  2498                           postdec1	equ	0xFE5
  2499                           fsr1h	equ	0xFE2
  2500                           fsr1l	equ	0xFE1
  2501                           
  2502                           	psect	bssBANK1
  2503  0001B5                     __pbssBANK1:
  2504                           	opt stack 0
  2505  0001B5                     _buff1:
  2506                           	opt stack 0
  2507  0001B5                     	ds	15
  2508  0001C4                     _inIp:
  2509                           	opt stack 0
  2510  0001C4                     	ds	8
  2511  0001CC                     _inSubnet:
  2512                           	opt stack 0
  2513  0001CC                     	ds	8
  2514  0001D4                     _inGateway:
  2515                           	opt stack 0
  2516  0001D4                     	ds	8
  2517  0001DC                     _tara:
  2518                           	opt stack 0
  2519  0001DC                     	ds	2
  2520  0001DE                     _lcdText:
  2521                           	opt stack 0
  2522  0001DE                     	ds	16
  2523                           tblptru	equ	0xFF8
  2524                           tblptrh	equ	0xFF7
  2525                           tblptrl	equ	0xFF6
  2526                           tablat	equ	0xFF5
  2527                           postinc0	equ	0xFEE
  2528                           wreg	equ	0xFE8
  2529                           postdec1	equ	0xFE5
  2530                           fsr1h	equ	0xFE2
  2531                           fsr1l	equ	0xFE1
  2532                           
  2533                           	psect	dataBANK1
  2534  000100                     __pdataBANK1:
  2535                           	opt stack 0
  2536  000100                     lcd_number@F15145:
  2537                           	opt stack 0
  2538  000100                     	ds	5
  2539  000105                     _msjOFF:
  2540                           	opt stack 0
  2541  000105                     	ds	16
  2542  000115                     _msjON:
  2543                           	opt stack 0
  2544  000115                     	ds	16
  2545  000125                     _msjRANGE:
  2546                           	opt stack 0
  2547  000125                     	ds	16
  2548  000135                     _msjTHRESHOLD:
  2549                           	opt stack 0
  2550  000135                     	ds	16
  2551  000145                     _msjSTEP:
  2552                           	opt stack 0
  2553  000145                     	ds	16
  2554  000155                     _msjFILTER:
  2555                           	opt stack 0
  2556  000155                     	ds	16
  2557  000165                     _msjPATTERN:
  2558                           	opt stack 0
  2559  000165                     	ds	16
  2560  000175                     _msjDIVISIONS:
  2561                           	opt stack 0
  2562  000175                     	ds	16
  2563  000185                     _msjZERO:
  2564                           	opt stack 0
  2565  000185                     	ds	16
  2566  000195                     _msjCALIBRATE:
  2567                           	opt stack 0
  2568  000195                     	ds	16
  2569  0001A5                     _menu_text:
  2570                           	opt stack 0
  2571  0001A5                     	ds	16
  2572                           tblptru	equ	0xFF8
  2573                           tblptrh	equ	0xFF7
  2574                           tblptrl	equ	0xFF6
  2575                           tablat	equ	0xFF5
  2576                           postinc0	equ	0xFEE
  2577                           wreg	equ	0xFE8
  2578                           postdec1	equ	0xFE5
  2579                           fsr1h	equ	0xFE2
  2580                           fsr1l	equ	0xFE1
  2581                           
  2582                           	psect	dataBANK2
  2583  000200                     __pdataBANK2:
  2584                           	opt stack 0
  2585  000200                     _msjDIVISION1:
  2586                           	opt stack 0
  2587  000200                     	ds	16
  2588  000210                     _msjDIVISION0:
  2589                           	opt stack 0
  2590  000210                     	ds	16
  2591  000220                     _msjCANCEL:
  2592                           	opt stack 0
  2593  000220                     	ds	16
  2594  000230                     _msjCONFIRM:
  2595                           	opt stack 0
  2596  000230                     	ds	16
  2597  000240                     _msjFINISH:
  2598                           	opt stack 0
  2599  000240                     	ds	16
  2600  000250                     _msjRESET:
  2601                           	opt stack 0
  2602  000250                     	ds	16
  2603  000260                     _msjCHANGE:
  2604                           	opt stack 0
  2605  000260                     	ds	16
  2606  000270                     _msjPASSWORD:
  2607                           	opt stack 0
  2608  000270                     	ds	16
  2609  000280                     _msjPORT:
  2610                           	opt stack 0
  2611  000280                     	ds	16
  2612  000290                     _msjIP:
  2613                           	opt stack 0
  2614  000290                     	ds	16
  2615  0002A0                     _msjMAC:
  2616                           	opt stack 0
  2617  0002A0                     	ds	16
  2618  0002B0                     _msjSUBNETMASK:
  2619                           	opt stack 0
  2620  0002B0                     	ds	16
  2621  0002C0                     _msjGATEWAY:
  2622                           	opt stack 0
  2623  0002C0                     	ds	16
  2624  0002D0                     _msjETHERNET:
  2625                           	opt stack 0
  2626  0002D0                     	ds	16
  2627  0002E0                     _msjBAUD:
  2628                           	opt stack 0
  2629  0002E0                     	ds	16
  2630  0002F0                     _msjSERIAL:
  2631                           	opt stack 0
  2632  0002F0                     	ds	16
  2633                           tblptru	equ	0xFF8
  2634                           tblptrh	equ	0xFF7
  2635                           tblptrl	equ	0xFF6
  2636                           tablat	equ	0xFF5
  2637                           postinc0	equ	0xFEE
  2638                           wreg	equ	0xFE8
  2639                           postdec1	equ	0xFE5
  2640                           fsr1h	equ	0xFE2
  2641                           fsr1l	equ	0xFE1
  2642                           
  2643                           	psect	dataBANK3
  2644  000300                     __pdataBANK3:
  2645                           	opt stack 0
  2646  000300                     _memSubnet:
  2647                           	opt stack 0
  2648  000300                     	ds	16
  2649  000310                     _memGateway:
  2650                           	opt stack 0
  2651  000310                     	ds	16
  2652  000320                     _msjVALUEINGR:
  2653                           	opt stack 0
  2654  000320                     	ds	16
  2655  000330                     _msjTAREINGR:
  2656                           	opt stack 0
  2657  000330                     	ds	16
  2658  000340                     _msjWEIGHTINGR:
  2659                           	opt stack 0
  2660  000340                     	ds	16
  2661  000350                     _msjBAUD4:
  2662                           	opt stack 0
  2663  000350                     	ds	16
  2664  000360                     _msjBAUD3:
  2665                           	opt stack 0
  2666  000360                     	ds	16
  2667  000370                     _msjBAUD2:
  2668                           	opt stack 0
  2669  000370                     	ds	16
  2670  000380                     _msjBAUD1:
  2671                           	opt stack 0
  2672  000380                     	ds	16
  2673  000390                     _msjFILTER3:
  2674                           	opt stack 0
  2675  000390                     	ds	16
  2676  0003A0                     _msjFILTER2:
  2677                           	opt stack 0
  2678  0003A0                     	ds	16
  2679  0003B0                     _msjFILTER1:
  2680                           	opt stack 0
  2681  0003B0                     	ds	16
  2682  0003C0                     _msjDIVISION3:
  2683                           	opt stack 0
  2684  0003C0                     	ds	16
  2685  0003D0                     _msjDIVISION2:
  2686                           	opt stack 0
  2687  0003D0                     	ds	16
  2688  0003E0                     _msjWAIT:
  2689                           	opt stack 0
  2690  0003E0                     	ds	16
  2691  0003F0                     _msjDONE:
  2692                           	opt stack 0
  2693  0003F0                     	ds	16
  2694                           tblptru	equ	0xFF8
  2695                           tblptrh	equ	0xFF7
  2696                           tblptrl	equ	0xFF6
  2697                           tablat	equ	0xFF5
  2698                           postinc0	equ	0xFEE
  2699                           wreg	equ	0xFE8
  2700                           postdec1	equ	0xFE5
  2701                           fsr1h	equ	0xFE2
  2702                           fsr1l	equ	0xFE1
  2703                           
  2704                           	psect	dataBANK4
  2705  000400                     __pdataBANK4:
  2706                           	opt stack 0
  2707  000400                     menu_41@F15284:
  2708                           	opt stack 0
  2709  000400                     	ds	16
  2710  000410                     menu_4@F15281:
  2711                           	opt stack 0
  2712  000410                     	ds	16
  2713  000420                     menu_31@F15277:
  2714                           	opt stack 0
  2715  000420                     	ds	16
  2716  000430                     menu_3@F15273:
  2717                           	opt stack 0
  2718  000430                     	ds	16
  2719  000440                     menu_27@F15269:
  2720                           	opt stack 0
  2721  000440                     	ds	16
  2722  000450                     menu_26@F15265:
  2723                           	opt stack 0
  2724  000450                     	ds	16
  2725  000460                     menu_25@F15261:
  2726                           	opt stack 0
  2727  000460                     	ds	16
  2728  000470                     menu_24@F15257:
  2729                           	opt stack 0
  2730  000470                     	ds	16
  2731  000480                     menu_23@F15253:
  2732                           	opt stack 0
  2733  000480                     	ds	16
  2734  000490                     menu_22@F15249:
  2735                           	opt stack 0
  2736  000490                     	ds	16
  2737  0004A0                     menu_21@F15245:
  2738                           	opt stack 0
  2739  0004A0                     	ds	16
  2740  0004B0                     menu_2@F15242:
  2741                           	opt stack 0
  2742  0004B0                     	ds	16
  2743  0004C0                     menu_1@F15239:
  2744                           	opt stack 0
  2745  0004C0                     	ds	16
  2746  0004D0                     _memPort:
  2747                           	opt stack 0
  2748  0004D0                     	ds	16
  2749  0004E0                     _memMac:
  2750                           	opt stack 0
  2751  0004E0                     	ds	16
  2752  0004F0                     _memIp:
  2753                           	opt stack 0
  2754  0004F0                     	ds	16
  2755                           tblptru	equ	0xFF8
  2756                           tblptrh	equ	0xFF7
  2757                           tblptrl	equ	0xFF6
  2758                           tablat	equ	0xFF5
  2759                           postinc0	equ	0xFEE
  2760                           wreg	equ	0xFE8
  2761                           postdec1	equ	0xFE5
  2762                           fsr1h	equ	0xFE2
  2763                           fsr1l	equ	0xFE1
  2764                           
  2765                           	psect	bssBANK5
  2766  000599                     __pbssBANK5:
  2767                           	opt stack 0
  2768  000599                     _outBuff2:
  2769                           	opt stack 0
  2770  000599                     	ds	20
  2771                           tblptru	equ	0xFF8
  2772                           tblptrh	equ	0xFF7
  2773                           tblptrl	equ	0xFF6
  2774                           tablat	equ	0xFF5
  2775                           postinc0	equ	0xFEE
  2776                           wreg	equ	0xFE8
  2777                           postdec1	equ	0xFE5
  2778                           fsr1h	equ	0xFE2
  2779                           fsr1l	equ	0xFE1
  2780                           
  2781                           	psect	dataBANK5
  2782  000500                     __pdataBANK5:
  2783                           	opt stack 0
  2784  000500                     menu_6@F15310:
  2785                           	opt stack 0
  2786  000500                     	ds	16
  2787  000510                     menu_5@F15306:
  2788                           	opt stack 0
  2789  000510                     	ds	16
  2790  000520                     menu_45@F15300:
  2791                           	opt stack 0
  2792  000520                     	ds	16
  2793  000530                     menu_44@F15296:
  2794                           	opt stack 0
  2795  000530                     	ds	16
  2796  000540                     menu_43@F15292:
  2797                           	opt stack 0
  2798  000540                     	ds	16
  2799  000550                     menu_42@F15288:
  2800                           	opt stack 0
  2801  000550                     	ds	16
  2802  000560                     _msjBLANK:
  2803                           	opt stack 0
  2804  000560                     	ds	16
  2805                           tblptru	equ	0xFF8
  2806                           tblptrh	equ	0xFF7
  2807                           tblptrl	equ	0xFF6
  2808                           tablat	equ	0xFF5
  2809                           postinc0	equ	0xFEE
  2810                           wreg	equ	0xFE8
  2811                           postdec1	equ	0xFE5
  2812                           fsr1h	equ	0xFE2
  2813                           fsr1l	equ	0xFE1
  2814                           
  2815                           	psect	cstackBANK5
  2816  000570                     __pcstackBANK5:
  2817                           	opt stack 0
  2818  000570                     lcd_pix@n1:
  2819                           	opt stack 0
  2820  000570                     lcd_pix_color@n1:
  2821                           	opt stack 0
  2822  000570                     printf@ap:
  2823                           	opt stack 0
  2824                           
  2825                           ; 2 bytes @ 0x0
  2826  000570                     	ds	1
  2827  000571                     lcd_pix@i:
  2828                           	opt stack 0
  2829  000571                     lcd_pix_color@i:
  2830                           	opt stack 0
  2831                           
  2832                           ; 2 bytes @ 0x1
  2833  000571                     	ds	1
  2834  000572                     printf@prec:
  2835                           	opt stack 0
  2836                           
  2837                           ; 1 bytes @ 0x2
  2838  000572                     	ds	1
  2839  000573                     lcd_text@msjPtr:
  2840                           	opt stack 0
  2841  000573                     printf@val:
  2842                           	opt stack 0
  2843                           
  2844                           ; 2 bytes @ 0x3
  2845  000573                     	ds	2
  2846  000575                     lcd_text@color:
  2847                           	opt stack 0
  2848  000575                     printf@flag:
  2849                           	opt stack 0
  2850                           
  2851                           ; 1 bytes @ 0x5
  2852  000575                     	ds	1
  2853  000576                     ??_lcd_text:
  2854  000576                     printf@width:
  2855                           	opt stack 0
  2856                           
  2857                           ; 2 bytes @ 0x6
  2858  000576                     	ds	2
  2859  000578                     printf@c:
  2860                           	opt stack 0
  2861                           
  2862                           ; 1 bytes @ 0x8
  2863  000578                     	ds	3
  2864  00057B                     _lcd_text$2363:
  2865                           	opt stack 0
  2866                           
  2867                           ; 2 bytes @ 0xB
  2868  00057B                     	ds	2
  2869  00057D                     _lcd_text$2364:
  2870                           	opt stack 0
  2871                           
  2872                           ; 2 bytes @ 0xD
  2873  00057D                     	ds	2
  2874  00057F                     lcd_text@msjPtrCpy:
  2875                           	opt stack 0
  2876                           
  2877                           ; 15 bytes @ 0xF
  2878  00057F                     	ds	15
  2879  00058E                     lcd_text@renglon:
  2880                           	opt stack 0
  2881                           
  2882                           ; 1 bytes @ 0x1E
  2883  00058E                     	ds	1
  2884  00058F                     lcd_text@i:
  2885                           	opt stack 0
  2886                           
  2887                           ; 2 bytes @ 0x1F
  2888  00058F                     	ds	2
  2889  000591                     lcd_text@j:
  2890                           	opt stack 0
  2891                           
  2892                           ; 2 bytes @ 0x21
  2893  000591                     	ds	2
  2894  000593                     lcd_text@k:
  2895                           	opt stack 0
  2896                           
  2897                           ; 2 bytes @ 0x23
  2898  000593                     	ds	2
  2899  000595                     lcd_legend@opt:
  2900                           	opt stack 0
  2901                           
  2902                           ; 1 bytes @ 0x25
  2903  000595                     	ds	1
  2904  000596                     lcd_legend@aux:
  2905                           	opt stack 0
  2906                           
  2907                           ; 2 bytes @ 0x26
  2908  000596                     	ds	2
  2909  000598                     ??_main:
  2910                           
  2911                           ; 1 bytes @ 0x28
  2912  000598                     	ds	1
  2913                           tblptru	equ	0xFF8
  2914                           tblptrh	equ	0xFF7
  2915                           tblptrl	equ	0xFF6
  2916                           tablat	equ	0xFF5
  2917                           postinc0	equ	0xFEE
  2918                           wreg	equ	0xFE8
  2919                           postdec1	equ	0xFE5
  2920                           fsr1h	equ	0xFE2
  2921                           fsr1l	equ	0xFE1
  2922                           
  2923                           	psect	cstackBANK1
  2924  0001EE                     __pcstackBANK1:
  2925                           	opt stack 0
  2926  0001EE                     ?___lwmod:
  2927                           	opt stack 0
  2928  0001EE                     ?___lldiv:
  2929                           	opt stack 0
  2930  0001EE                     lcd_set_address@x1:
  2931                           	opt stack 0
  2932  0001EE                     ___lwmod@dividend:
  2933                           	opt stack 0
  2934  0001EE                     ___lldiv@dividend:
  2935                           	opt stack 0
  2936                           
  2937                           ; 4 bytes @ 0x0
  2938  0001EE                     	ds	2
  2939  0001F0                     lcd_set_address@y1:
  2940                           	opt stack 0
  2941  0001F0                     ___lwmod@divisor:
  2942                           	opt stack 0
  2943                           
  2944                           ; 2 bytes @ 0x2
  2945  0001F0                     	ds	2
  2946  0001F2                     ___lwmod@counter:
  2947                           	opt stack 0
  2948  0001F2                     lcd_set_address@x2:
  2949                           	opt stack 0
  2950  0001F2                     ___lldiv@divisor:
  2951                           	opt stack 0
  2952                           
  2953                           ; 4 bytes @ 0x4
  2954  0001F2                     	ds	1
  2955  0001F3                     ?_printf:
  2956                           	opt stack 0
  2957  0001F3                     printf@f:
  2958                           	opt stack 0
  2959                           
  2960                           ; 2 bytes @ 0x5
  2961  0001F3                     	ds	1
  2962  0001F4                     lcd_set_address@y2:
  2963                           	opt stack 0
  2964                           
  2965                           ; 2 bytes @ 0x6
  2966  0001F4                     	ds	1
  2967  0001F5                     ??_printf:
  2968                           
  2969                           ; 1 bytes @ 0x7
  2970  0001F5                     	ds	1
  2971  0001F6                     lcd_set_background@i:
  2972                           	opt stack 0
  2973  0001F6                     lcd_pix@x:
  2974                           	opt stack 0
  2975  0001F6                     lcd_pix_color@x:
  2976                           	opt stack 0
  2977  0001F6                     uart1_config@baudRate:
  2978                           	opt stack 0
  2979  0001F6                     uart2_config@baudRate:
  2980                           	opt stack 0
  2981                           
  2982                           ; 4 bytes @ 0x8
  2983  0001F6                     	ds	2
  2984  0001F8                     lcd_set_background@j:
  2985                           	opt stack 0
  2986  0001F8                     lcd_pix@y:
  2987                           	opt stack 0
  2988  0001F8                     lcd_pix_color@y:
  2989                           	opt stack 0
  2990                           
  2991                           ; 2 bytes @ 0xA
  2992  0001F8                     	ds	2
  2993  0001FA                     uart1_config@option8:
  2994                           	opt stack 0
  2995  0001FA                     uart2_config@option8:
  2996                           	opt stack 0
  2997  0001FA                     lcd_pix@c:
  2998                           	opt stack 0
  2999  0001FA                     lcd_pix_color@c:
  3000                           	opt stack 0
  3001                           
  3002                           ; 1 bytes @ 0xC
  3003  0001FA                     	ds	1
  3004  0001FB                     lcd_pix@size:
  3005                           	opt stack 0
  3006  0001FB                     lcd_pix_color@size:
  3007                           	opt stack 0
  3008  0001FB                     uart1_config@option16:
  3009                           	opt stack 0
  3010  0001FB                     uart2_config@option16:
  3011                           	opt stack 0
  3012                           
  3013                           ; 2 bytes @ 0xD
  3014  0001FB                     	ds	1
  3015  0001FC                     ??_lcd_pix:
  3016  0001FC                     ??_lcd_pix_color:
  3017                           
  3018                           ; 1 bytes @ 0xE
  3019  0001FC                     	ds	4
  3020                           tblptru	equ	0xFF8
  3021                           tblptrh	equ	0xFF7
  3022                           tblptrl	equ	0xFF6
  3023                           tablat	equ	0xFF5
  3024                           postinc0	equ	0xFEE
  3025                           wreg	equ	0xFE8
  3026                           postdec1	equ	0xFE5
  3027                           fsr1h	equ	0xFE2
  3028                           fsr1l	equ	0xFE1
  3029                           
  3030                           	psect	cstackBANK0
  3031  000060                     __pcstackBANK0:
  3032                           	opt stack 0
  3033  000060                     ??_isr:
  3034                           
  3035                           ; 1 bytes @ 0x0
  3036  000060                     	ds	23
  3037  000077                     isr@peso_cpy:
  3038                           	opt stack 0
  3039                           
  3040                           ; 2 bytes @ 0x17
  3041  000077                     	ds	2
  3042  000079                     isr@j:
  3043                           	opt stack 0
  3044                           
  3045                           ; 1 bytes @ 0x19
  3046  000079                     	ds	1
  3047  00007A                     isr@j_1087:
  3048                           	opt stack 0
  3049                           
  3050                           ; 1 bytes @ 0x1A
  3051  00007A                     	ds	1
  3052  00007B                     isr@i_1088:
  3053                           	opt stack 0
  3054                           
  3055                           ; 1 bytes @ 0x1B
  3056  00007B                     	ds	1
  3057  00007C                     isr@i_1009:
  3058                           	opt stack 0
  3059                           
  3060                           ; 1 bytes @ 0x1C
  3061  00007C                     	ds	1
  3062  00007D                     isr@i_1013:
  3063                           	opt stack 0
  3064                           
  3065                           ; 1 bytes @ 0x1D
  3066  00007D                     	ds	1
  3067  00007E                     isr@i_1014:
  3068                           	opt stack 0
  3069                           
  3070                           ; 1 bytes @ 0x1E
  3071  00007E                     	ds	1
  3072  00007F                     isr@i_1018:
  3073                           	opt stack 0
  3074                           
  3075                           ; 1 bytes @ 0x1F
  3076  00007F                     	ds	1
  3077  000080                     isr@i_1021:
  3078                           	opt stack 0
  3079                           
  3080                           ; 1 bytes @ 0x20
  3081  000080                     	ds	1
  3082  000081                     isr@eoc:
  3083                           	opt stack 0
  3084                           
  3085                           ; 1 bytes @ 0x21
  3086  000081                     	ds	1
  3087  000082                     isr@tara_resta:
  3088                           	opt stack 0
  3089                           
  3090                           ; 2 bytes @ 0x22
  3091  000082                     	ds	2
  3092  000084                     isr@aux1:
  3093                           	opt stack 0
  3094                           
  3095                           ; 1 bytes @ 0x24
  3096  000084                     	ds	1
  3097  000085                     isr@i:
  3098                           	opt stack 0
  3099                           
  3100                           ; 1 bytes @ 0x25
  3101  000085                     	ds	1
  3102  000086                     isr@i_1003:
  3103                           	opt stack 0
  3104                           
  3105                           ; 1 bytes @ 0x26
  3106  000086                     	ds	1
  3107  000087                     isr@i_1010:
  3108                           	opt stack 0
  3109                           
  3110                           ; 1 bytes @ 0x27
  3111  000087                     	ds	1
  3112  000088                     isr@i_1016:
  3113                           	opt stack 0
  3114                           
  3115                           ; 1 bytes @ 0x28
  3116  000088                     	ds	1
  3117  000089                     isr@i_1019:
  3118                           	opt stack 0
  3119                           
  3120                           ; 1 bytes @ 0x29
  3121  000089                     	ds	1
  3122  00008A                     isr@i_1022:
  3123                           	opt stack 0
  3124                           
  3125                           ; 1 bytes @ 0x2A
  3126  00008A                     	ds	1
  3127  00008B                     isr@i_1084:
  3128                           	opt stack 0
  3129                           
  3130                           ; 1 bytes @ 0x2B
  3131  00008B                     	ds	1
  3132  00008C                     isr@i_1086:
  3133                           	opt stack 0
  3134                           
  3135                           ; 1 bytes @ 0x2C
  3136  00008C                     	ds	1
  3137  00008D                     isr@aux2:
  3138                           	opt stack 0
  3139                           
  3140                           ; 2 bytes @ 0x2D
  3141  00008D                     	ds	2
  3142  00008F                     isr@multiplicador:
  3143                           	opt stack 0
  3144                           
  3145                           ; 2 bytes @ 0x2F
  3146  00008F                     	ds	2
  3147  000091                     isr@peso:
  3148                           	opt stack 0
  3149                           
  3150                           ; 2 bytes @ 0x31
  3151  000091                     	ds	2
  3152  000093                     ??_isdigit:
  3153  000093                     ?___wmul:
  3154                           	opt stack 0
  3155  000093                     ?___lwdiv:
  3156                           	opt stack 0
  3157  000093                     putch@data:
  3158                           	opt stack 0
  3159  000093                     rw_eeprom@data:
  3160                           	opt stack 0
  3161  000093                     timer2_config@post:
  3162                           	opt stack 0
  3163  000093                     lcd_write_bus@data:
  3164                           	opt stack 0
  3165  000093                     mem_write@data:
  3166                           	opt stack 0
  3167  000093                     mem_read@address:
  3168                           	opt stack 0
  3169  000093                     bitRead@number:
  3170                           	opt stack 0
  3171  000093                     ___wmul@multiplier:
  3172                           	opt stack 0
  3173  000093                     ___lwdiv@dividend:
  3174                           	opt stack 0
  3175  000093                     strcpy@to:
  3176                           	opt stack 0
  3177  000093                     ___lldiv@quotient:
  3178                           	opt stack 0
  3179                           
  3180                           ; 4 bytes @ 0x33
  3181  000093                     	ds	1
  3182  000094                     rw_eeprom@rw:
  3183                           	opt stack 0
  3184  000094                     timer2_config@eoc:
  3185                           	opt stack 0
  3186  000094                     lcd_write_command@cmd:
  3187                           	opt stack 0
  3188  000094                     mem_write@address:
  3189                           	opt stack 0
  3190  000094                     _isdigit$1963:
  3191                           	opt stack 0
  3192                           
  3193                           ; 1 bytes @ 0x34
  3194  000094                     	ds	1
  3195  000095                     ??_lcd_init:
  3196  000095                     rw_eeprom@addr:
  3197                           	opt stack 0
  3198  000095                     timer2_config@pre:
  3199                           	opt stack 0
  3200  000095                     isdigit@c:
  3201                           	opt stack 0
  3202  000095                     bitRead@position:
  3203                           	opt stack 0
  3204  000095                     lcd_set_background@color:
  3205                           	opt stack 0
  3206  000095                     ___wmul@multiplicand:
  3207                           	opt stack 0
  3208  000095                     ___lwdiv@divisor:
  3209                           	opt stack 0
  3210  000095                     strcpy@from:
  3211                           	opt stack 0
  3212                           
  3213                           ; 2 bytes @ 0x35
  3214  000095                     	ds	1
  3215  000096                     timer2_config@option:
  3216                           	opt stack 0
  3217                           
  3218                           ; 1 bytes @ 0x36
  3219  000096                     	ds	1
  3220  000097                     ??_bitRead:
  3221  000097                     ___lldiv@counter:
  3222                           	opt stack 0
  3223  000097                     ___lwdiv@counter:
  3224                           	opt stack 0
  3225  000097                     ___wmul@product:
  3226                           	opt stack 0
  3227  000097                     strcpy@cp:
  3228                           	opt stack 0
  3229                           
  3230                           ; 2 bytes @ 0x37
  3231  000097                     	ds	1
  3232  000098                     ??_uart1_config:
  3233  000098                     ??_uart2_config:
  3234  000098                     ___lwdiv@quotient:
  3235                           	opt stack 0
  3236                           
  3237                           ; 2 bytes @ 0x38
  3238  000098                     	ds	2
  3239  00009A                     tblptru	equ	0xFF8
  3240                           tblptrh	equ	0xFF7
  3241                           tblptrl	equ	0xFF6
  3242                           tablat	equ	0xFF5
  3243                           postinc0	equ	0xFEE
  3244                           wreg	equ	0xFE8
  3245                           postdec1	equ	0xFE5
  3246                           fsr1h	equ	0xFE2
  3247                           fsr1l	equ	0xFE1
  3248                           
  3249                           ; 1 bytes @ 0x3A
  3250                           
  3251                           	psect	cstackCOMRAM
  3252  000001                     __pcstackCOMRAM:
  3253                           	opt stack 0
  3254  000001                     ??i2_isdigit:
  3255  000001                     ?___awdiv:
  3256                           	opt stack 0
  3257  000001                     ?i2___wmul:
  3258                           	opt stack 0
  3259  000001                     ?i2___lwdiv:
  3260                           	opt stack 0
  3261  000001                     key_pressed@outPort:
  3262                           	opt stack 0
  3263  000001                     ___lbdiv@divisor:
  3264                           	opt stack 0
  3265  000001                     i2putch@data:
  3266                           	opt stack 0
  3267  000001                     i2rw_eeprom@data:
  3268                           	opt stack 0
  3269  000001                     i2lcd_write_bus@data:
  3270                           	opt stack 0
  3271  000001                     i2mem_write@data:
  3272                           	opt stack 0
  3273  000001                     i2mem_read@address:
  3274                           	opt stack 0
  3275  000001                     ___awdiv@dividend:
  3276                           	opt stack 0
  3277  000001                     i2bitRead@number:
  3278                           	opt stack 0
  3279  000001                     i2___wmul@multiplier:
  3280                           	opt stack 0
  3281  000001                     i2___lwdiv@dividend:
  3282                           	opt stack 0
  3283  000001                     i2strcpy@to:
  3284                           	opt stack 0
  3285                           
  3286                           ; 2 bytes @ 0x0
  3287  000001                     	ds	1
  3288  000002                     key_pressed@colPressed:
  3289                           	opt stack 0
  3290  000002                     ___lbdiv@dividend:
  3291                           	opt stack 0
  3292  000002                     i2rw_eeprom@rw:
  3293                           	opt stack 0
  3294  000002                     i2lcd_write_command@cmd:
  3295                           	opt stack 0
  3296  000002                     i2mem_write@address:
  3297                           	opt stack 0
  3298  000002                     i2_isdigit$1963:
  3299                           	opt stack 0
  3300                           
  3301                           ; 1 bytes @ 0x1
  3302  000002                     	ds	1
  3303  000003                     key_pressed@keyRta:
  3304                           	opt stack 0
  3305  000003                     ___lbdiv@counter:
  3306                           	opt stack 0
  3307  000003                     i2rw_eeprom@addr:
  3308                           	opt stack 0
  3309  000003                     i2isdigit@c:
  3310                           	opt stack 0
  3311  000003                     ___awdiv@divisor:
  3312                           	opt stack 0
  3313  000003                     i2bitRead@position:
  3314                           	opt stack 0
  3315  000003                     i2lcd_set_address@x1:
  3316                           	opt stack 0
  3317  000003                     i2___wmul@multiplicand:
  3318                           	opt stack 0
  3319  000003                     i2___lwdiv@divisor:
  3320                           	opt stack 0
  3321  000003                     i2strcpy@from:
  3322                           	opt stack 0
  3323                           
  3324                           ; 2 bytes @ 0x2
  3325  000003                     	ds	1
  3326  000004                     key_pressed@inPort:
  3327                           	opt stack 0
  3328  000004                     ___lbdiv@quotient:
  3329                           	opt stack 0
  3330                           
  3331                           ; 1 bytes @ 0x3
  3332  000004                     	ds	1
  3333  000005                     ??i2_bitRead:
  3334  000005                     ___awdiv@counter:
  3335                           	opt stack 0
  3336  000005                     i2lcd_set_address@y1:
  3337                           	opt stack 0
  3338  000005                     i2___wmul@product:
  3339                           	opt stack 0
  3340  000005                     i2___lwdiv@quotient:
  3341                           	opt stack 0
  3342  000005                     i2strcpy@cp:
  3343                           	opt stack 0
  3344                           
  3345                           ; 2 bytes @ 0x4
  3346  000005                     	ds	1
  3347  000006                     ___awdiv@sign:
  3348                           	opt stack 0
  3349                           
  3350                           ; 1 bytes @ 0x5
  3351  000006                     	ds	1
  3352  000007                     i2___lwdiv@counter:
  3353                           	opt stack 0
  3354  000007                     ___awdiv@quotient:
  3355                           	opt stack 0
  3356  000007                     i2lcd_set_address@x2:
  3357                           	opt stack 0
  3358                           
  3359                           ; 2 bytes @ 0x6
  3360  000007                     	ds	1
  3361  000008                     ?i2___lwmod:
  3362                           	opt stack 0
  3363  000008                     i2___lwmod@dividend:
  3364                           	opt stack 0
  3365                           
  3366                           ; 2 bytes @ 0x7
  3367  000008                     	ds	1
  3368  000009                     i2lcd_set_address@y2:
  3369                           	opt stack 0
  3370                           
  3371                           ; 2 bytes @ 0x8
  3372  000009                     	ds	1
  3373  00000A                     i2___lwmod@divisor:
  3374                           	opt stack 0
  3375                           
  3376                           ; 2 bytes @ 0x9
  3377  00000A                     	ds	1
  3378  00000B                     i2lcd_set_background@color:
  3379                           	opt stack 0
  3380  00000B                     i2lcd_pix@x:
  3381                           	opt stack 0
  3382  00000B                     i2lcd_pix_color@x:
  3383                           	opt stack 0
  3384                           
  3385                           ; 2 bytes @ 0xA
  3386  00000B                     	ds	1
  3387  00000C                     i2___lwmod@counter:
  3388                           	opt stack 0
  3389                           
  3390                           ; 1 bytes @ 0xB
  3391  00000C                     	ds	1
  3392  00000D                     ?i2_printf:
  3393                           	opt stack 0
  3394  00000D                     i2lcd_set_background@i:
  3395                           	opt stack 0
  3396  00000D                     i2lcd_pix@y:
  3397                           	opt stack 0
  3398  00000D                     i2lcd_pix_color@y:
  3399                           	opt stack 0
  3400  00000D                     i2printf@f:
  3401                           	opt stack 0
  3402                           
  3403                           ; 2 bytes @ 0xC
  3404  00000D                     	ds	2
  3405  00000F                     i2lcd_pix@c:
  3406                           	opt stack 0
  3407  00000F                     i2lcd_pix_color@c:
  3408                           	opt stack 0
  3409  00000F                     i2lcd_set_background@j:
  3410                           	opt stack 0
  3411                           
  3412                           ; 2 bytes @ 0xE
  3413  00000F                     	ds	1
  3414  000010                     i2lcd_pix@size:
  3415                           	opt stack 0
  3416  000010                     i2lcd_pix_color@size:
  3417                           	opt stack 0
  3418                           
  3419                           ; 1 bytes @ 0xF
  3420  000010                     	ds	1
  3421  000011                     ??i2_lcd_pix:
  3422  000011                     ??i2_lcd_pix_color:
  3423  000011                     ??i2_printf:
  3424                           
  3425                           ; 1 bytes @ 0x10
  3426  000011                     	ds	4
  3427  000015                     i2lcd_pix@n1:
  3428                           	opt stack 0
  3429  000015                     i2lcd_pix_color@n1:
  3430                           	opt stack 0
  3431  000015                     i2printf@ap:
  3432                           	opt stack 0
  3433                           
  3434                           ; 2 bytes @ 0x14
  3435  000015                     	ds	1
  3436  000016                     i2lcd_pix@i:
  3437                           	opt stack 0
  3438  000016                     i2lcd_pix_color@i:
  3439                           	opt stack 0
  3440                           
  3441                           ; 2 bytes @ 0x15
  3442  000016                     	ds	1
  3443  000017                     i2printf@prec:
  3444                           	opt stack 0
  3445                           
  3446                           ; 1 bytes @ 0x16
  3447  000017                     	ds	1
  3448  000018                     lcd_sign@enable:
  3449                           	opt stack 0
  3450  000018                     lcd_point@place:
  3451                           	opt stack 0
  3452  000018                     i2lcd_text@msjPtr:
  3453                           	opt stack 0
  3454  000018                     i2printf@val:
  3455                           	opt stack 0
  3456                           
  3457                           ; 2 bytes @ 0x17
  3458  000018                     	ds	1
  3459  000019                     lcd_number@number:
  3460                           	opt stack 0
  3461                           
  3462                           ; 2 bytes @ 0x18
  3463  000019                     	ds	1
  3464  00001A                     i2lcd_text@color:
  3465                           	opt stack 0
  3466  00001A                     i2printf@flag:
  3467                           	opt stack 0
  3468                           
  3469                           ; 1 bytes @ 0x19
  3470  00001A                     	ds	1
  3471  00001B                     ??_lcd_number:
  3472  00001B                     ??i2_lcd_text:
  3473  00001B                     i2printf@width:
  3474                           	opt stack 0
  3475                           
  3476                           ; 2 bytes @ 0x1A
  3477  00001B                     	ds	2
  3478  00001D                     i2printf@c:
  3479                           	opt stack 0
  3480                           
  3481                           ; 1 bytes @ 0x1C
  3482  00001D                     	ds	3
  3483  000020                     lcd_number@index:
  3484                           	opt stack 0
  3485  000020                     i2lcd_text@msjPtrCpy:
  3486                           	opt stack 0
  3487                           
  3488                           ; 15 bytes @ 0x1F
  3489  000020                     	ds	5
  3490  000025                     lcd_number@i:
  3491                           	opt stack 0
  3492                           
  3493                           ; 1 bytes @ 0x24
  3494  000025                     	ds	1
  3495  000026                     lcd_number@j:
  3496                           	opt stack 0
  3497                           
  3498                           ; 1 bytes @ 0x25
  3499  000026                     	ds	1
  3500  000027                     lcd_number@k:
  3501                           	opt stack 0
  3502                           
  3503                           ; 1 bytes @ 0x26
  3504  000027                     	ds	8
  3505  00002F                     i2_lcd_text$2512:
  3506                           	opt stack 0
  3507                           
  3508                           ; 2 bytes @ 0x2E
  3509  00002F                     	ds	2
  3510  000031                     i2_lcd_text$2513:
  3511                           	opt stack 0
  3512                           
  3513                           ; 2 bytes @ 0x30
  3514  000031                     	ds	2
  3515  000033                     i2lcd_text@renglon:
  3516                           	opt stack 0
  3517                           
  3518                           ; 1 bytes @ 0x32
  3519  000033                     	ds	1
  3520  000034                     i2lcd_text@i:
  3521                           	opt stack 0
  3522                           
  3523                           ; 2 bytes @ 0x33
  3524  000034                     	ds	2
  3525  000036                     i2lcd_text@j:
  3526                           	opt stack 0
  3527                           
  3528                           ; 2 bytes @ 0x35
  3529  000036                     	ds	2
  3530  000038                     i2lcd_text@k:
  3531                           	opt stack 0
  3532                           
  3533                           ; 2 bytes @ 0x37
  3534  000038                     	ds	2
  3535  00003A                     i2lcd_legend@opt:
  3536                           	opt stack 0
  3537  00003A                     menu_1@mBlank:
  3538                           	opt stack 0
  3539  00003A                     menu_2@mBlank:
  3540                           	opt stack 0
  3541  00003A                     menu_21@mBlank:
  3542                           	opt stack 0
  3543  00003A                     menu_22@mBlank:
  3544                           	opt stack 0
  3545  00003A                     menu_23@mBlank:
  3546                           	opt stack 0
  3547  00003A                     menu_24@mBlank:
  3548                           	opt stack 0
  3549  00003A                     menu_25@mBlank:
  3550                           	opt stack 0
  3551  00003A                     menu_26@mBlank:
  3552                           	opt stack 0
  3553  00003A                     menu_27@mBlank:
  3554                           	opt stack 0
  3555  00003A                     menu_3@mBlank:
  3556                           	opt stack 0
  3557  00003A                     menu_31@mBlank:
  3558                           	opt stack 0
  3559  00003A                     menu_4@mBlank:
  3560                           	opt stack 0
  3561  00003A                     menu_41@mBlank:
  3562                           	opt stack 0
  3563  00003A                     menu_42@mBlank:
  3564                           	opt stack 0
  3565  00003A                     menu_43@mBlank:
  3566                           	opt stack 0
  3567  00003A                     menu_44@mBlank:
  3568                           	opt stack 0
  3569  00003A                     menu_45@mBlank:
  3570                           	opt stack 0
  3571  00003A                     menu_5@mBlank:
  3572                           	opt stack 0
  3573  00003A                     menu_6@mBlank:
  3574                           	opt stack 0
  3575                           
  3576                           ; 16 bytes @ 0x39
  3577  00003A                     	ds	1
  3578  00003B                     i2lcd_legend@aux:
  3579                           	opt stack 0
  3580                           
  3581                           ; 2 bytes @ 0x3A
  3582  00003B                     	ds	15
  3583  00004A                     menu_1@colorRow:
  3584                           	opt stack 0
  3585  00004A                     menu_2@colorRow:
  3586                           	opt stack 0
  3587  00004A                     menu_21@colorRow:
  3588                           	opt stack 0
  3589  00004A                     menu_22@i:
  3590                           	opt stack 0
  3591  00004A                     menu_23@i:
  3592                           	opt stack 0
  3593  00004A                     menu_24@colorRow:
  3594                           	opt stack 0
  3595  00004A                     menu_25@i:
  3596                           	opt stack 0
  3597  00004A                     menu_26@i:
  3598                           	opt stack 0
  3599  00004A                     menu_27@i:
  3600                           	opt stack 0
  3601  00004A                     menu_3@colorRow:
  3602                           	opt stack 0
  3603  00004A                     menu_31@i:
  3604                           	opt stack 0
  3605  00004A                     menu_4@colorRow:
  3606                           	opt stack 0
  3607  00004A                     menu_41@colorRow:
  3608                           	opt stack 0
  3609  00004A                     menu_42@colorRow:
  3610                           	opt stack 0
  3611  00004A                     menu_43@colorRow:
  3612                           	opt stack 0
  3613  00004A                     menu_44@colorRow:
  3614                           	opt stack 0
  3615  00004A                     menu_45@colorRow:
  3616                           	opt stack 0
  3617  00004A                     menu_5@colorRow:
  3618                           	opt stack 0
  3619  00004A                     menu_6@colorRow:
  3620                           	opt stack 0
  3621                           
  3622                           ; 1 bytes @ 0x49
  3623  00004A                     	ds	1
  3624  00004B                     menu_21@i:
  3625                           	opt stack 0
  3626  00004B                     menu_22@colorRow:
  3627                           	opt stack 0
  3628  00004B                     menu_24@i:
  3629                           	opt stack 0
  3630  00004B                     menu_3@i:
  3631                           	opt stack 0
  3632  00004B                     menu_31@colorRow:
  3633                           	opt stack 0
  3634  00004B                     menu_41@i:
  3635                           	opt stack 0
  3636  00004B                     menu_42@i:
  3637                           	opt stack 0
  3638  00004B                     menu_43@i:
  3639                           	opt stack 0
  3640  00004B                     menu_44@i:
  3641                           	opt stack 0
  3642  00004B                     menu_45@i:
  3643                           	opt stack 0
  3644  00004B                     menu_5@i:
  3645                           	opt stack 0
  3646  00004B                     menu_6@i:
  3647                           	opt stack 0
  3648                           
  3649                           ; 1 bytes @ 0x4A
  3650  00004B                     	ds	1
  3651  00004C                     menu_navigate@rowColor:
  3652                           	opt stack 0
  3653                           
  3654                           ; 1 bytes @ 0x4B
  3655  00004C                     	ds	1
  3656  00004D                     menu_navigate@opt:
  3657                           	opt stack 0
  3658                           
  3659                           ; 1 bytes @ 0x4C
  3660  00004D                     	ds	1
  3661  00004E                     menu_next@menuShown:
  3662                           	opt stack 0
  3663                           
  3664                           ; 2 bytes @ 0x4D
  3665  00004E                     	ds	2
  3666  000050                     menu_next@menuRow:
  3667                           	opt stack 0
  3668                           
  3669                           ; 2 bytes @ 0x4F
  3670  000050                     	ds	2
  3671  000052                     menu_next@command:
  3672                           	opt stack 0
  3673                           
  3674                           ; 1 bytes @ 0x51
  3675  000052                     	ds	1
  3676  000053                     menu_next@menuText:
  3677                           	opt stack 0
  3678                           
  3679                           ; 2 bytes @ 0x52
  3680  000053                     	ds	2
  3681  000055                     ??_menu_next:
  3682                           
  3683                           ; 1 bytes @ 0x54
  3684  000055                     	ds	1
  3685  000056                     menu_next@aux1:
  3686                           	opt stack 0
  3687                           
  3688                           ; 1 bytes @ 0x55
  3689  000056                     	ds	1
  3690  000057                     menu_next@i:
  3691                           	opt stack 0
  3692                           
  3693                           ; 1 bytes @ 0x56
  3694  000057                     	ds	1
  3695  000058                     menu_next@i_1375:
  3696                           	opt stack 0
  3697                           
  3698                           ; 1 bytes @ 0x57
  3699  000058                     	ds	1
  3700  000059                     menu_next@rta:
  3701                           	opt stack 0
  3702                           
  3703                           ; 1 bytes @ 0x58
  3704  000059                     	ds	1
  3705                           tblptru	equ	0xFF8
  3706                           tblptrh	equ	0xFF7
  3707                           tblptrl	equ	0xFF6
  3708                           tablat	equ	0xFF5
  3709                           postinc0	equ	0xFEE
  3710                           wreg	equ	0xFE8
  3711                           postdec1	equ	0xFE5
  3712                           fsr1h	equ	0xFE2
  3713                           fsr1l	equ	0xFE1
  3714                           
  3715 ;;
  3716 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  3717 ;;
  3718 ;; *************** function _main *****************
  3719 ;; Defined at:
  3720 ;;		line 532 in file "hmiMain.c"
  3721 ;; Parameters:    Size  Location     Type
  3722 ;;		None
  3723 ;; Auto vars:     Size  Location     Type
  3724 ;;		None
  3725 ;; Return value:  Size  Location     Type
  3726 ;;                  1    wreg      void 
  3727 ;; Registers used:
  3728 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3729 ;; Tracked objects:
  3730 ;;		On entry : 0/0
  3731 ;;		On exit  : 0/0
  3732 ;;		Unchanged: 0/0
  3733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3735 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3736 ;;      Temps:          0       0       0       0       0       0       1       0       0       0       0       0       
      +0       0       0       0
  3737 ;;      Totals:         0       0       0       0       0       0       1       0       0       0       0       0       
      +0       0       0       0
  3738 ;;Total ram usage:        1 bytes
  3739 ;; Hardware stack levels required when called:   15
  3740 ;; This function calls:
  3741 ;;		_gpio_init
  3742 ;;		_keyboard_init
  3743 ;;		_lcd_init
  3744 ;;		_lcd_legend
  3745 ;;		_lcd_set_background
  3746 ;;		_menu_init
  3747 ;;		_printf
  3748 ;;		_putch
  3749 ;;		_rw_eeprom
  3750 ;;		_timer2_config
  3751 ;;		_uart1_config
  3752 ;;		_uart2_config
  3753 ;; This function is called by:
  3754 ;;		Startup code after reset
  3755 ;; This function uses a non-reentrant model
  3756 ;;
  3757                           
  3758                           	psect	text0
  3759  002CC8                     __ptext0:
  3760                           	opt stack 0
  3761  002CC8                     _main:
  3762                           	opt stack 16
  3763                           
  3764                           ;hmiMain.c: 534: OSCCON = 0b01110000;
  3765                           
  3766                           ;incstack = 0
  3767  002CC8  0E70               	movlw	112
  3768  002CCA  6ED3               	movwf	4051,c	;volatile
  3769                           
  3770                           ;hmiMain.c: 535: OSCTUNE = 0b01000000;
  3771  002CCC  0E40               	movlw	64
  3772  002CCE  6E9B               	movwf	3995,c	;volatile
  3773                           
  3774                           ;hmiMain.c: 538: TRISA = 0x00;
  3775  002CD0  0E00               	movlw	0
  3776  002CD2  6E92               	movwf	3986,c	;volatile
  3777                           
  3778                           ;hmiMain.c: 539: TRISB = 0x00;
  3779  002CD4  0E00               	movlw	0
  3780  002CD6  6E93               	movwf	3987,c	;volatile
  3781                           
  3782                           ;hmiMain.c: 540: TRISC = 0xBF;
  3783  002CD8  0EBF               	movlw	191
  3784  002CDA  6E94               	movwf	3988,c	;volatile
  3785                           
  3786                           ;hmiMain.c: 541: TRISD = 0xB0;
  3787  002CDC  0EB0               	movlw	176
  3788  002CDE  6E95               	movwf	3989,c	;volatile
  3789                           
  3790                           ;hmiMain.c: 542: ANCON0 = 0x00;
  3791  002CE0  0E00               	movlw	0
  3792  002CE2  010F               	movlb	15	; () banked
  3793  002CE4  6F5D               	movwf	93,b	;volatile
  3794                           
  3795                           ;hmiMain.c: 543: ANCON1 = 0x00;
  3796  002CE6  0E00               	movlw	0
  3797  002CE8  6F5C               	movwf	92,b	;volatile
  3798                           
  3799                           ;hmiMain.c: 546: INTCON = 0b11000000;
  3800  002CEA  0EC0               	movlw	192
  3801  002CEC  6EF2               	movwf	intcon,c	;volatile
  3802                           
  3803                           ;hmiMain.c: 547: IPR1 = 0x00;
  3804  002CEE  0E00               	movlw	0
  3805  002CF0  6E9F               	movwf	3999,c	;volatile
  3806                           
  3807                           ;hmiMain.c: 548: IPR2 = 0x00;
  3808  002CF2  0E00               	movlw	0
  3809  002CF4  6EA2               	movwf	4002,c	;volatile
  3810                           
  3811                           ;hmiMain.c: 549: IPR3 = 0x20;
  3812  002CF6  0E20               	movlw	32
  3813  002CF8  6EA5               	movwf	4005,c	;volatile
  3814                           
  3815                           ;hmiMain.c: 550: IPR4 = 0x00;
  3816  002CFA  0E00               	movlw	0
  3817  002CFC  6EB8               	movwf	4024,c	;volatile
  3818                           
  3819                           ;hmiMain.c: 551: IPR5 = 0x00;
  3820  002CFE  0E00               	movlw	0
  3821  002D00  6E78               	movwf	3960,c	;volatile
  3822                           
  3823                           ; BSR set to: 15
  3824                           ;hmiMain.c: 552: RCONbits.IPEN = 1;
  3825  002D02  8ED0               	bsf	4048,7,c	;volatile
  3826                           
  3827                           ; BSR set to: 15
  3828                           ;hmiMain.c: 555: gpio_init();
  3829  002D04  ECF8  F025         	call	_gpio_init	;wreg free
  3830                           
  3831                           ;hmiMain.c: 559: uart1_config(9600);
  3832  002D08  0E80               	movlw	128
  3833  002D0A  0101               	movlb	1	; () banked
  3834  002D0C  6FF6               	movwf	uart1_config@baudRate& (0+255),b
  3835  002D0E  0E25               	movlw	37
  3836  002D10  6FF7               	movwf	(uart1_config@baudRate+1)& (0+255),b
  3837  002D12  0E00               	movlw	0
  3838  002D14  6FF8               	movwf	(uart1_config@baudRate+2)& (0+255),b
  3839  002D16  0E00               	movlw	0
  3840  002D18  6FF9               	movwf	(uart1_config@baudRate+3)& (0+255),b
  3841  002D1A  ECE3  F020         	call	_uart1_config	;wreg free
  3842                           
  3843                           ;hmiMain.c: 560: uart2_config(9600);
  3844  002D1E  0E80               	movlw	128
  3845  002D20  0101               	movlb	1	; () banked
  3846  002D22  6FF6               	movwf	uart2_config@baudRate& (0+255),b
  3847  002D24  0E25               	movlw	37
  3848  002D26  6FF7               	movwf	(uart2_config@baudRate+1)& (0+255),b
  3849  002D28  0E00               	movlw	0
  3850  002D2A  6FF8               	movwf	(uart2_config@baudRate+2)& (0+255),b
  3851  002D2C  0E00               	movlw	0
  3852  002D2E  6FF9               	movwf	(uart2_config@baudRate+3)& (0+255),b
  3853  002D30  ECA5  F020         	call	_uart2_config	;wreg free
  3854                           
  3855                           ;hmiMain.c: 563: lcd_init();
  3856  002D34  EC1E  F015         	call	_lcd_init	;wreg free
  3857                           
  3858                           ;hmiMain.c: 564: lcd_set_background(0xFFFF);
  3859  002D38  0EFF               	movlw	255
  3860  002D3A  0100               	movlb	0	; () banked
  3861  002D3C  6F96               	movwf	(lcd_set_background@color+1)& (0+255),b
  3862  002D3E  6995               	setf	lcd_set_background@color& (0+255),b
  3863  002D40  EC21  F021         	call	_lcd_set_background	;wreg free
  3864                           
  3865                           ;hmiMain.c: 565: _delay((unsigned long)((1)*(64000000/4000.0)));
  3866  002D44  0E15               	movlw	21
  3867  002D46  0105               	movlb	5	; () banked
  3868  002D48  6F98               	movwf	??_main& (0+255),b
  3869  002D4A  0EC6               	movlw	198
  3870  002D4C                     u11917:
  3871  002D4C  2EE8               	decfsz	wreg,f,c
  3872  002D4E  D7FE               	bra	u11917
  3873  002D50  2F98               	decfsz	??_main& (0+255),f,b
  3874  002D52  D7FC               	bra	u11917
  3875  002D54  F000               	nop	
  3876                           
  3877                           ;hmiMain.c: 566: printEnable = 1;
  3878  002D56  0E01               	movlw	1
  3879  002D58  0100               	movlb	0	; () banked
  3880  002D5A  6FAF               	movwf	_printEnable& (0+255),b
  3881                           
  3882                           ; BSR set to: 0
  3883                           ;hmiMain.c: 567: putch(2);
  3884  002D5C  0E02               	movlw	2
  3885  002D5E  EC9C  F025         	call	_putch
  3886                           
  3887                           ;hmiMain.c: 568: printf("R\n");
  3888  002D62  0EE3               	movlw	low STR_18
  3889  002D64  0101               	movlb	1	; () banked
  3890  002D66  6FF3               	movwf	printf@f& (0+255),b
  3891  002D68  0EFF               	movlw	high STR_18
  3892  002D6A  6FF4               	movwf	(printf@f+1)& (0+255),b
  3893  002D6C  EC80  F010         	call	_printf	;wreg free
  3894                           
  3895                           ;hmiMain.c: 571: keyboard_init();
  3896  002D70  EC1F  F026         	call	_keyboard_init	;wreg free
  3897                           
  3898                           ;hmiMain.c: 574: menu_init();
  3899  002D74  ECFE  F021         	call	_menu_init	;wreg free
  3900                           
  3901                           ;hmiMain.c: 577: if (rw_eeprom(0x00,0,0) == 0xAA) {
  3902  002D78  0E00               	movlw	0
  3903  002D7A  0100               	movlb	0	; () banked
  3904  002D7C  6F93               	movwf	rw_eeprom@data& (0+255),b
  3905  002D7E  0E00               	movlw	0
  3906  002D80  6F94               	movwf	rw_eeprom@rw& (0+255),b
  3907  002D82  0E00               	movlw	0
  3908  002D84  ECA4  F022         	call	_rw_eeprom
  3909  002D88  0AAA               	xorlw	170
  3910  002D8A  A4D8               	btfss	status,2,c
  3911  002D8C  D020               	goto	l356
  3912                           
  3913                           ;hmiMain.c: 578: tara = rw_eeprom(0x01,0,0);
  3914  002D8E  0E00               	movlw	0
  3915  002D90  0100               	movlb	0	; () banked
  3916  002D92  6F93               	movwf	rw_eeprom@data& (0+255),b
  3917  002D94  0E00               	movlw	0
  3918  002D96  6F94               	movwf	rw_eeprom@rw& (0+255),b
  3919  002D98  0E01               	movlw	1
  3920  002D9A  ECA4  F022         	call	_rw_eeprom
  3921  002D9E  0105               	movlb	5	; () banked
  3922  002DA0  6F98               	movwf	??_main& (0+255),b
  3923  002DA2  5198               	movf	??_main& (0+255),w,b
  3924  002DA4  0101               	movlb	1	; () banked
  3925  002DA6  6FDC               	movwf	_tara& (0+255),b
  3926  002DA8  6BDD               	clrf	(_tara+1)& (0+255),b
  3927                           
  3928                           ; BSR set to: 1
  3929                           ;hmiMain.c: 579: tara = tara << 8;
  3930  002DAA  51DC               	movf	_tara& (0+255),w,b
  3931  002DAC  6FDD               	movwf	(_tara+1)& (0+255),b
  3932  002DAE  6BDC               	clrf	_tara& (0+255),b
  3933                           
  3934                           ; BSR set to: 1
  3935                           ;hmiMain.c: 580: tara += rw_eeprom(0x02,0,0);
  3936  002DB0  0E00               	movlw	0
  3937  002DB2  0100               	movlb	0	; () banked
  3938  002DB4  6F93               	movwf	rw_eeprom@data& (0+255),b
  3939  002DB6  0E00               	movlw	0
  3940  002DB8  6F94               	movwf	rw_eeprom@rw& (0+255),b
  3941  002DBA  0E02               	movlw	2
  3942  002DBC  ECA4  F022         	call	_rw_eeprom
  3943  002DC0  0105               	movlb	5	; () banked
  3944  002DC2  6F98               	movwf	??_main& (0+255),b
  3945  002DC4  5198               	movf	??_main& (0+255),w,b
  3946  002DC6  0101               	movlb	1	; () banked
  3947  002DC8  27DC               	addwf	_tara& (0+255),f,b
  3948  002DCA  0E00               	movlw	0
  3949  002DCC  23DD               	addwfc	(_tara+1)& (0+255),f,b
  3950  002DCE                     l356:
  3951                           
  3952                           ;hmiMain.c: 581: }
  3953                           ;hmiMain.c: 582: lcd_legend(1);
  3954                           
  3955                           ; BSR set to: 1
  3956  002DCE  0E01               	movlw	1
  3957  002DD0  EC2C  F01B         	call	_lcd_legend
  3958                           
  3959                           ;hmiMain.c: 585: timer2_config(2, 10, 100);
  3960  002DD4  0E0A               	movlw	10
  3961  002DD6  0100               	movlb	0	; () banked
  3962  002DD8  6F93               	movwf	timer2_config@post& (0+255),b
  3963  002DDA  0E64               	movlw	100
  3964  002DDC  6F94               	movwf	timer2_config@eoc& (0+255),b
  3965  002DDE  0E02               	movlw	2
  3966  002DE0  EC3A  F025         	call	_timer2_config
  3967  002DE4                     l357:
  3968  002DE4  D7FF               	goto	l357
  3969  002DE6                     __end_of_main:
  3970                           	opt stack 0
  3971                           tblptru	equ	0xFF8
  3972                           tblptrh	equ	0xFF7
  3973                           tblptrl	equ	0xFF6
  3974                           tablat	equ	0xFF5
  3975                           intcon	equ	0xFF2
  3976                           postinc0	equ	0xFEE
  3977                           wreg	equ	0xFE8
  3978                           postdec1	equ	0xFE5
  3979                           fsr1h	equ	0xFE2
  3980                           fsr1l	equ	0xFE1
  3981                           status	equ	0xFD8
  3982                           
  3983 ;; *************** function _uart2_config *****************
  3984 ;; Defined at:
  3985 ;;		line 129 in file "hmiMain.c"
  3986 ;; Parameters:    Size  Location     Type
  3987 ;;  baudRate        4    8[BANK1 ] unsigned long 
  3988 ;; Auto vars:     Size  Location     Type
  3989 ;;  option16        2   13[BANK1 ] unsigned int 
  3990 ;;  option8         1   12[BANK1 ] unsigned char 
  3991 ;; Return value:  Size  Location     Type
  3992 ;;                  1    wreg      void 
  3993 ;; Registers used:
  3994 ;;		wreg, status,2, status,0, cstack
  3995 ;; Tracked objects:
  3996 ;;		On entry : 0/0
  3997 ;;		On exit  : 0/0
  3998 ;;		Unchanged: 0/0
  3999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4000 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4001 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4002 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4003 ;;      Totals:         0       1       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4004 ;;Total ram usage:        8 bytes
  4005 ;; Hardware stack levels used:    1
  4006 ;; Hardware stack levels required when called:   10
  4007 ;; This function calls:
  4008 ;;		___lldiv
  4009 ;; This function is called by:
  4010 ;;		_main
  4011 ;; This function uses a non-reentrant model
  4012 ;;
  4013                           
  4014                           	psect	text1
  4015  00414A                     __ptext1:
  4016                           	opt stack 0
  4017  00414A                     _uart2_config:
  4018                           	opt stack 20
  4019                           
  4020                           ;hmiMain.c: 130: unsigned int option16;
  4021                           ;hmiMain.c: 131: char option8;
  4022                           ;hmiMain.c: 133: baudRate *= 4;
  4023                           
  4024                           ;incstack = 0
  4025  00414A  0101               	movlb	1	; () banked
  4026  00414C  0E02               	movlw	2
  4027  00414E                     u10045:
  4028  00414E  90D8               	bcf	status,0,c
  4029  004150  37F6               	rlcf	uart2_config@baudRate& (0+255),f,b
  4030  004152  37F7               	rlcf	(uart2_config@baudRate+1)& (0+255),f,b
  4031  004154  37F8               	rlcf	(uart2_config@baudRate+2)& (0+255),f,b
  4032  004156  37F9               	rlcf	(uart2_config@baudRate+3)& (0+255),f,b
  4033  004158  2EE8               	decfsz	wreg,f,c
  4034  00415A  D7F9               	goto	u10045
  4035                           
  4036                           ; BSR set to: 1
  4037                           ;hmiMain.c: 134: option16 = 64000000 / baudRate;
  4038  00415C  0E00               	movlw	0
  4039  00415E  6FEE               	movwf	___lldiv@dividend& (0+255),b
  4040  004160  0E90               	movlw	144
  4041  004162  6FEF               	movwf	(___lldiv@dividend+1)& (0+255),b
  4042  004164  0ED0               	movlw	208
  4043  004166  6FF0               	movwf	(___lldiv@dividend+2)& (0+255),b
  4044  004168  0E03               	movlw	3
  4045  00416A  6FF1               	movwf	(___lldiv@dividend+3)& (0+255),b
  4046  00416C  C1F6  F1F2         	movff	uart2_config@baudRate,___lldiv@divisor
  4047  004170  C1F7  F1F3         	movff	uart2_config@baudRate+1,___lldiv@divisor+1
  4048  004174  C1F8  F1F4         	movff	uart2_config@baudRate+2,___lldiv@divisor+2
  4049  004178  C1F9  F1F5         	movff	uart2_config@baudRate+3,___lldiv@divisor+3
  4050  00417C  ECCE  F01F         	call	___lldiv	;wreg free
  4051  004180  C1EE  F1FB         	movff	?___lldiv,uart2_config@option16
  4052  004184  C1EF  F1FC         	movff	?___lldiv+1,uart2_config@option16+1
  4053                           
  4054                           ;hmiMain.c: 135: option8 = option16 & 0x00FF;
  4055  004188  C1FB  F1FA         	movff	uart2_config@option16,uart2_config@option8
  4056                           
  4057                           ;hmiMain.c: 136: SPBRG2 = option8;
  4058  00418C  C1FA  FF7B         	movff	uart2_config@option8,3963	;volatile
  4059                           
  4060                           ;hmiMain.c: 137: option16 = option16 >> 8;
  4061  004190  0101               	movlb	1	; () banked
  4062  004192  51FC               	movf	(uart2_config@option16+1)& (0+255),w,b
  4063  004194  6FFB               	movwf	uart2_config@option16& (0+255),b
  4064  004196  6BFC               	clrf	(uart2_config@option16+1)& (0+255),b
  4065                           
  4066                           ; BSR set to: 1
  4067                           ;hmiMain.c: 138: option8 = option16 & 0x00FF;
  4068  004198  C1FB  F1FA         	movff	uart2_config@option16,uart2_config@option8
  4069                           
  4070                           ; BSR set to: 1
  4071                           ;hmiMain.c: 139: SPBRGH2 = option8;
  4072  00419C  C1FA  FF7C         	movff	uart2_config@option8,3964	;volatile
  4073                           
  4074                           ; BSR set to: 1
  4075                           ;hmiMain.c: 141: TXSTA2 = 0b00100100;
  4076  0041A0  0E24               	movlw	36
  4077  0041A2  6EBA               	movwf	4026,c	;volatile
  4078                           
  4079                           ; BSR set to: 1
  4080                           ;hmiMain.c: 142: RCSTA2 = 0b10010000;
  4081  0041A4  0E90               	movlw	144
  4082  0041A6  6EA6               	movwf	4006,c	;volatile
  4083                           
  4084                           ; BSR set to: 1
  4085                           ;hmiMain.c: 143: BAUDCON2bits.BRG16 = 1;
  4086  0041A8  86B9               	bsf	4025,3,c	;volatile
  4087                           
  4088                           ; BSR set to: 1
  4089                           ;hmiMain.c: 145: PIE3bits.TX2IE = 0;
  4090  0041AA  98A3               	bcf	4003,4,c	;volatile
  4091                           
  4092                           ; BSR set to: 1
  4093                           ;hmiMain.c: 146: PIR3bits.TX2IF = 0;
  4094  0041AC  98A4               	bcf	4004,4,c	;volatile
  4095                           
  4096                           ; BSR set to: 1
  4097                           ;hmiMain.c: 147: PIE3bits.RC2IE = 1;
  4098  0041AE  8AA3               	bsf	4003,5,c	;volatile
  4099                           
  4100                           ; BSR set to: 1
  4101                           ;hmiMain.c: 148: PIR3bits.RC2IF = 0;
  4102  0041B0  9AA4               	bcf	4004,5,c	;volatile
  4103                           
  4104                           ; BSR set to: 1
  4105                           ;hmiMain.c: 149: _delay((unsigned long)((1)*(64000000/4000.0)));
  4106  0041B2  0E15               	movlw	21
  4107  0041B4  0100               	movlb	0	; () banked
  4108  0041B6  6F98               	movwf	??_uart2_config& (0+255),b
  4109  0041B8  0EC6               	movlw	198
  4110  0041BA                     u11927:
  4111  0041BA  2EE8               	decfsz	wreg,f,c
  4112  0041BC  D7FE               	bra	u11927
  4113  0041BE  2F98               	decfsz	??_uart2_config& (0+255),f,b
  4114  0041C0  D7FC               	bra	u11927
  4115  0041C2  F000               	nop	
  4116  0041C4  0012               	return		;funcret
  4117  0041C6                     __end_of_uart2_config:
  4118                           	opt stack 0
  4119                           tblptru	equ	0xFF8
  4120                           tblptrh	equ	0xFF7
  4121                           tblptrl	equ	0xFF6
  4122                           tablat	equ	0xFF5
  4123                           intcon	equ	0xFF2
  4124                           postinc0	equ	0xFEE
  4125                           wreg	equ	0xFE8
  4126                           postdec1	equ	0xFE5
  4127                           fsr1h	equ	0xFE2
  4128                           fsr1l	equ	0xFE1
  4129                           status	equ	0xFD8
  4130                           
  4131 ;; *************** function _uart1_config *****************
  4132 ;; Defined at:
  4133 ;;		line 106 in file "hmiMain.c"
  4134 ;; Parameters:    Size  Location     Type
  4135 ;;  baudRate        4    8[BANK1 ] unsigned long 
  4136 ;; Auto vars:     Size  Location     Type
  4137 ;;  option16        2   13[BANK1 ] unsigned int 
  4138 ;;  option8         1   12[BANK1 ] unsigned char 
  4139 ;; Return value:  Size  Location     Type
  4140 ;;                  1    wreg      void 
  4141 ;; Registers used:
  4142 ;;		wreg, status,2, status,0, cstack
  4143 ;; Tracked objects:
  4144 ;;		On entry : 0/0
  4145 ;;		On exit  : 0/0
  4146 ;;		Unchanged: 0/0
  4147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4148 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4149 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4150 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4151 ;;      Totals:         0       1       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4152 ;;Total ram usage:        8 bytes
  4153 ;; Hardware stack levels used:    1
  4154 ;; Hardware stack levels required when called:   10
  4155 ;; This function calls:
  4156 ;;		___lldiv
  4157 ;; This function is called by:
  4158 ;;		_main
  4159 ;; This function uses a non-reentrant model
  4160 ;;
  4161                           
  4162                           	psect	text2
  4163  0041C6                     __ptext2:
  4164                           	opt stack 0
  4165  0041C6                     _uart1_config:
  4166                           	opt stack 20
  4167                           
  4168                           ;hmiMain.c: 107: unsigned int option16;
  4169                           ;hmiMain.c: 108: char option8;
  4170                           ;hmiMain.c: 110: baudRate *= 4;
  4171                           
  4172                           ;incstack = 0
  4173  0041C6  0101               	movlb	1	; () banked
  4174  0041C8  0E02               	movlw	2
  4175  0041CA                     u10035:
  4176  0041CA  90D8               	bcf	status,0,c
  4177  0041CC  37F6               	rlcf	uart1_config@baudRate& (0+255),f,b
  4178  0041CE  37F7               	rlcf	(uart1_config@baudRate+1)& (0+255),f,b
  4179  0041D0  37F8               	rlcf	(uart1_config@baudRate+2)& (0+255),f,b
  4180  0041D2  37F9               	rlcf	(uart1_config@baudRate+3)& (0+255),f,b
  4181  0041D4  2EE8               	decfsz	wreg,f,c
  4182  0041D6  D7F9               	goto	u10035
  4183                           
  4184                           ; BSR set to: 1
  4185                           ;hmiMain.c: 111: option16 = 64000000 / baudRate;
  4186  0041D8  0E00               	movlw	0
  4187  0041DA  6FEE               	movwf	___lldiv@dividend& (0+255),b
  4188  0041DC  0E90               	movlw	144
  4189  0041DE  6FEF               	movwf	(___lldiv@dividend+1)& (0+255),b
  4190  0041E0  0ED0               	movlw	208
  4191  0041E2  6FF0               	movwf	(___lldiv@dividend+2)& (0+255),b
  4192  0041E4  0E03               	movlw	3
  4193  0041E6  6FF1               	movwf	(___lldiv@dividend+3)& (0+255),b
  4194  0041E8  C1F6  F1F2         	movff	uart1_config@baudRate,___lldiv@divisor
  4195  0041EC  C1F7  F1F3         	movff	uart1_config@baudRate+1,___lldiv@divisor+1
  4196  0041F0  C1F8  F1F4         	movff	uart1_config@baudRate+2,___lldiv@divisor+2
  4197  0041F4  C1F9  F1F5         	movff	uart1_config@baudRate+3,___lldiv@divisor+3
  4198  0041F8  ECCE  F01F         	call	___lldiv	;wreg free
  4199  0041FC  C1EE  F1FB         	movff	?___lldiv,uart1_config@option16
  4200  004200  C1EF  F1FC         	movff	?___lldiv+1,uart1_config@option16+1
  4201                           
  4202                           ;hmiMain.c: 112: option8 = option16 & 0x00FF;
  4203  004204  C1FB  F1FA         	movff	uart1_config@option16,uart1_config@option8
  4204                           
  4205                           ;hmiMain.c: 113: SPBRG1 = option8;
  4206  004208  C1FA  FFAF         	movff	uart1_config@option8,4015	;volatile
  4207                           
  4208                           ;hmiMain.c: 114: option16 = option16 >> 8;
  4209  00420C  0101               	movlb	1	; () banked
  4210  00420E  51FC               	movf	(uart1_config@option16+1)& (0+255),w,b
  4211  004210  6FFB               	movwf	uart1_config@option16& (0+255),b
  4212  004212  6BFC               	clrf	(uart1_config@option16+1)& (0+255),b
  4213                           
  4214                           ; BSR set to: 1
  4215                           ;hmiMain.c: 115: option8 = option16 & 0x00FF;
  4216  004214  C1FB  F1FA         	movff	uart1_config@option16,uart1_config@option8
  4217                           
  4218                           ; BSR set to: 1
  4219                           ;hmiMain.c: 116: SPBRGH1 = option8;
  4220  004218  C1FA  FF7D         	movff	uart1_config@option8,3965	;volatile
  4221                           
  4222                           ; BSR set to: 1
  4223                           ;hmiMain.c: 118: TXSTA1 = 0b00100100;
  4224  00421C  0E24               	movlw	36
  4225  00421E  6EAC               	movwf	4012,c	;volatile
  4226                           
  4227                           ; BSR set to: 1
  4228                           ;hmiMain.c: 119: RCSTA1 = 0b10010000;
  4229  004220  0E90               	movlw	144
  4230  004222  6EAB               	movwf	4011,c	;volatile
  4231                           
  4232                           ; BSR set to: 1
  4233                           ;hmiMain.c: 120: BAUDCON1bits.BRG16 = 1;
  4234  004224  86A7               	bsf	4007,3,c	;volatile
  4235                           
  4236                           ; BSR set to: 1
  4237                           ;hmiMain.c: 122: PIE1bits.TX1IE = 0;
  4238  004226  989D               	bcf	3997,4,c	;volatile
  4239                           
  4240                           ; BSR set to: 1
  4241                           ;hmiMain.c: 123: PIR1bits.TX1IF = 0;
  4242  004228  989E               	bcf	3998,4,c	;volatile
  4243                           
  4244                           ; BSR set to: 1
  4245                           ;hmiMain.c: 124: PIE1bits.RC1IE = 1;
  4246  00422A  8A9D               	bsf	3997,5,c	;volatile
  4247                           
  4248                           ; BSR set to: 1
  4249                           ;hmiMain.c: 125: PIR1bits.RC1IF = 0;
  4250  00422C  9A9E               	bcf	3998,5,c	;volatile
  4251                           
  4252                           ; BSR set to: 1
  4253                           ;hmiMain.c: 126: _delay((unsigned long)((1)*(64000000/4000.0)));
  4254  00422E  0E15               	movlw	21
  4255  004230  0100               	movlb	0	; () banked
  4256  004232  6F98               	movwf	??_uart1_config& (0+255),b
  4257  004234  0EC6               	movlw	198
  4258  004236                     u11937:
  4259  004236  2EE8               	decfsz	wreg,f,c
  4260  004238  D7FE               	bra	u11937
  4261  00423A  2F98               	decfsz	??_uart1_config& (0+255),f,b
  4262  00423C  D7FC               	bra	u11937
  4263  00423E  F000               	nop	
  4264  004240  0012               	return		;funcret
  4265  004242                     __end_of_uart1_config:
  4266                           	opt stack 0
  4267                           tblptru	equ	0xFF8
  4268                           tblptrh	equ	0xFF7
  4269                           tblptrl	equ	0xFF6
  4270                           tablat	equ	0xFF5
  4271                           intcon	equ	0xFF2
  4272                           postinc0	equ	0xFEE
  4273                           wreg	equ	0xFE8
  4274                           postdec1	equ	0xFE5
  4275                           fsr1h	equ	0xFE2
  4276                           fsr1l	equ	0xFE1
  4277                           status	equ	0xFD8
  4278                           
  4279 ;; *************** function ___lldiv *****************
  4280 ;; Defined at:
  4281 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  4282 ;; Parameters:    Size  Location     Type
  4283 ;;  dividend        4    0[BANK1 ] unsigned long 
  4284 ;;  divisor         4    4[BANK1 ] unsigned long 
  4285 ;; Auto vars:     Size  Location     Type
  4286 ;;  quotient        4   51[BANK0 ] unsigned long 
  4287 ;;  counter         1   55[BANK0 ] unsigned char 
  4288 ;; Return value:  Size  Location     Type
  4289 ;;                  4    0[BANK1 ] unsigned long 
  4290 ;; Registers used:
  4291 ;;		wreg, status,2, status,0
  4292 ;; Tracked objects:
  4293 ;;		On entry : 0/0
  4294 ;;		On exit  : 0/0
  4295 ;;		Unchanged: 0/0
  4296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4297 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4298 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4300 ;;      Totals:         0       5       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4301 ;;Total ram usage:       13 bytes
  4302 ;; Hardware stack levels used:    1
  4303 ;; Hardware stack levels required when called:    9
  4304 ;; This function calls:
  4305 ;;		Nothing
  4306 ;; This function is called by:
  4307 ;;		_uart1_config
  4308 ;;		_uart2_config
  4309 ;; This function uses a non-reentrant model
  4310 ;;
  4311                           
  4312                           	psect	text3
  4313  003F9C                     __ptext3:
  4314                           	opt stack 0
  4315  003F9C                     ___lldiv:
  4316                           	opt stack 20
  4317                           
  4318                           ;incstack = 0
  4319  003F9C  0E00               	movlw	0
  4320  003F9E  0100               	movlb	0	; () banked
  4321  003FA0  6F93               	movwf	___lldiv@quotient& (0+255),b
  4322  003FA2  0E00               	movlw	0
  4323  003FA4  6F94               	movwf	(___lldiv@quotient+1)& (0+255),b
  4324  003FA6  0E00               	movlw	0
  4325  003FA8  6F95               	movwf	(___lldiv@quotient+2)& (0+255),b
  4326  003FAA  0E00               	movlw	0
  4327  003FAC  6F96               	movwf	(___lldiv@quotient+3)& (0+255),b
  4328                           
  4329                           ; BSR set to: 0
  4330  003FAE  0101               	movlb	1	; () banked
  4331  003FB0  51F2               	movf	___lldiv@divisor& (0+255),w,b
  4332  003FB2  11F3               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  4333  003FB4  11F4               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  4334  003FB6  11F5               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  4335  003FB8  B4D8               	btfsc	status,2,c
  4336  003FBA  D033               	goto	l1488
  4337                           
  4338                           ; BSR set to: 1
  4339  003FBC  0E01               	movlw	1
  4340  003FBE  0100               	movlb	0	; () banked
  4341  003FC0  6F97               	movwf	___lldiv@counter& (0+255),b
  4342  003FC2  D008               	goto	l1483
  4343  003FC4                     
  4344                           ; BSR set to: 0
  4345  003FC4  0101               	movlb	1	; () banked
  4346  003FC6  90D8               	bcf	status,0,c
  4347  003FC8  37F2               	rlcf	___lldiv@divisor& (0+255),f,b
  4348  003FCA  37F3               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  4349  003FCC  37F4               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  4350  003FCE  37F5               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  4351  003FD0  0100               	movlb	0	; () banked
  4352  003FD2  2B97               	incf	___lldiv@counter& (0+255),f,b
  4353  003FD4                     l1483:
  4354                           
  4355                           ; BSR set to: 0
  4356                           
  4357                           ; BSR set to: 0
  4358  003FD4  0101               	movlb	1	; () banked
  4359  003FD6  AFF5               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  4360  003FD8  D7F5               	goto	l1484
  4361  003FDA                     u9910:
  4362                           
  4363                           ; BSR set to: 1
  4364                           
  4365                           ; BSR set to: 1
  4366  003FDA  0100               	movlb	0	; () banked
  4367  003FDC  90D8               	bcf	status,0,c
  4368  003FDE  3793               	rlcf	___lldiv@quotient& (0+255),f,b
  4369  003FE0  3794               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  4370  003FE2  3795               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  4371  003FE4  3796               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  4372                           
  4373                           ; BSR set to: 0
  4374  003FE6  0101               	movlb	1	; () banked
  4375  003FE8  51F2               	movf	___lldiv@divisor& (0+255),w,b
  4376  003FEA  5DEE               	subwf	___lldiv@dividend& (0+255),w,b
  4377  003FEC  51F3               	movf	(___lldiv@divisor+1)& (0+255),w,b
  4378  003FEE  59EF               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  4379  003FF0  51F4               	movf	(___lldiv@divisor+2)& (0+255),w,b
  4380  003FF2  59F0               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  4381  003FF4  51F5               	movf	(___lldiv@divisor+3)& (0+255),w,b
  4382  003FF6  59F1               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  4383  003FF8  A0D8               	btfss	status,0,c
  4384  003FFA  D00A               	goto	l1487
  4385                           
  4386                           ; BSR set to: 1
  4387  003FFC  51F2               	movf	___lldiv@divisor& (0+255),w,b
  4388  003FFE  5FEE               	subwf	___lldiv@dividend& (0+255),f,b
  4389  004000  51F3               	movf	(___lldiv@divisor+1)& (0+255),w,b
  4390  004002  5BEF               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  4391  004004  51F4               	movf	(___lldiv@divisor+2)& (0+255),w,b
  4392  004006  5BF0               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  4393  004008  51F5               	movf	(___lldiv@divisor+3)& (0+255),w,b
  4394  00400A  5BF1               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  4395                           
  4396                           ; BSR set to: 1
  4397  00400C  0100               	movlb	0	; () banked
  4398  00400E  8193               	bsf	___lldiv@quotient& (0+255),0,b
  4399  004010                     l1487:
  4400                           
  4401                           ; BSR set to: 0
  4402  004010  0101               	movlb	1	; () banked
  4403  004012  90D8               	bcf	status,0,c
  4404  004014  33F5               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  4405  004016  33F4               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  4406  004018  33F3               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  4407  00401A  33F2               	rrcf	___lldiv@divisor& (0+255),f,b
  4408                           
  4409                           ; BSR set to: 1
  4410  00401C  0100               	movlb	0	; () banked
  4411  00401E  2F97               	decfsz	___lldiv@counter& (0+255),f,b
  4412  004020  D7DC               	goto	u9910
  4413  004022                     l1488:
  4414                           
  4415                           ; BSR set to: 0
  4416  004022  C093  F1EE         	movff	___lldiv@quotient,?___lldiv
  4417  004026  C094  F1EF         	movff	___lldiv@quotient+1,?___lldiv+1
  4418  00402A  C095  F1F0         	movff	___lldiv@quotient+2,?___lldiv+2
  4419  00402E  C096  F1F1         	movff	___lldiv@quotient+3,?___lldiv+3
  4420  004032  0012               	return		;funcret
  4421  004034                     __end_of___lldiv:
  4422                           	opt stack 0
  4423                           tblptru	equ	0xFF8
  4424                           tblptrh	equ	0xFF7
  4425                           tblptrl	equ	0xFF6
  4426                           tablat	equ	0xFF5
  4427                           intcon	equ	0xFF2
  4428                           postinc0	equ	0xFEE
  4429                           wreg	equ	0xFE8
  4430                           postdec1	equ	0xFE5
  4431                           fsr1h	equ	0xFE2
  4432                           fsr1l	equ	0xFE1
  4433                           status	equ	0xFD8
  4434                           
  4435 ;; *************** function _timer2_config *****************
  4436 ;; Defined at:
  4437 ;;		line 93 in file "hmiMain.c"
  4438 ;; Parameters:    Size  Location     Type
  4439 ;;  pre             1    wreg     unsigned char 
  4440 ;;  post            1   51[BANK0 ] unsigned char 
  4441 ;;  eoc             1   52[BANK0 ] unsigned char 
  4442 ;; Auto vars:     Size  Location     Type
  4443 ;;  pre             1   53[BANK0 ] unsigned char 
  4444 ;;  option          1   54[BANK0 ] unsigned char 
  4445 ;; Return value:  Size  Location     Type
  4446 ;;                  1    wreg      void 
  4447 ;; Registers used:
  4448 ;;		wreg, status,2, status,0
  4449 ;; Tracked objects:
  4450 ;;		On entry : 0/0
  4451 ;;		On exit  : 0/0
  4452 ;;		Unchanged: 0/0
  4453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4454 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4455 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4456 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4457 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4458 ;;Total ram usage:        4 bytes
  4459 ;; Hardware stack levels used:    1
  4460 ;; Hardware stack levels required when called:    9
  4461 ;; This function calls:
  4462 ;;		Nothing
  4463 ;; This function is called by:
  4464 ;;		_main
  4465 ;; This function uses a non-reentrant model
  4466 ;;
  4467                           
  4468                           	psect	text4
  4469  004A74                     __ptext4:
  4470                           	opt stack 0
  4471  004A74                     _timer2_config:
  4472                           	opt stack 21
  4473                           
  4474                           ;incstack = 0
  4475                           ;timer2_config@pre stored from wreg
  4476  004A74  0100               	movlb	0	; () banked
  4477  004A76  6F95               	movwf	timer2_config@pre& (0+255),b
  4478                           
  4479                           ;hmiMain.c: 94: char option = 0;
  4480  004A78  0E00               	movlw	0
  4481  004A7A  0100               	movlb	0	; () banked
  4482  004A7C  6F96               	movwf	timer2_config@option& (0+255),b
  4483                           
  4484                           ; BSR set to: 0
  4485                           ;hmiMain.c: 96: option = post - 1;
  4486  004A7E  0593               	decf	timer2_config@post& (0+255),w,b
  4487  004A80  6F96               	movwf	timer2_config@option& (0+255),b
  4488                           
  4489                           ; BSR set to: 0
  4490                           ;hmiMain.c: 97: option = option << 3;
  4491  004A82  3996               	swapf	timer2_config@option& (0+255),w,b
  4492  004A84  42E8               	rrncf	wreg,f,c
  4493  004A86  0BF8               	andlw	248
  4494  004A88  6F96               	movwf	timer2_config@option& (0+255),b
  4495                           
  4496                           ; BSR set to: 0
  4497                           ;hmiMain.c: 98: T2CON = option;
  4498  004A8A  C096  FFCA         	movff	timer2_config@option,4042	;volatile
  4499                           
  4500                           ; BSR set to: 0
  4501                           ;hmiMain.c: 99: T2CON += pre;
  4502  004A8E  5195               	movf	timer2_config@pre& (0+255),w,b
  4503  004A90  26CA               	addwf	4042,f,c	;volatile
  4504                           
  4505                           ; BSR set to: 0
  4506                           ;hmiMain.c: 100: PR2 = eoc;
  4507  004A92  C094  FFCB         	movff	timer2_config@eoc,4043	;volatile
  4508                           
  4509                           ; BSR set to: 0
  4510                           ;hmiMain.c: 101: PIE1bits.TMR2IE = 1;
  4511  004A96  829D               	bsf	3997,1,c	;volatile
  4512                           
  4513                           ; BSR set to: 0
  4514                           ;hmiMain.c: 102: PIR1bits.TMR2IF = 0;
  4515  004A98  929E               	bcf	3998,1,c	;volatile
  4516                           
  4517                           ; BSR set to: 0
  4518                           ;hmiMain.c: 103: T2CONbits.TMR2ON = 1;
  4519  004A9A  84CA               	bsf	4042,2,c	;volatile
  4520                           
  4521                           ; BSR set to: 0
  4522  004A9C  0012               	return		;funcret
  4523  004A9E                     __end_of_timer2_config:
  4524                           	opt stack 0
  4525                           tblptru	equ	0xFF8
  4526                           tblptrh	equ	0xFF7
  4527                           tblptrl	equ	0xFF6
  4528                           tablat	equ	0xFF5
  4529                           intcon	equ	0xFF2
  4530                           postinc0	equ	0xFEE
  4531                           wreg	equ	0xFE8
  4532                           postdec1	equ	0xFE5
  4533                           fsr1h	equ	0xFE2
  4534                           fsr1l	equ	0xFE1
  4535                           status	equ	0xFD8
  4536                           
  4537 ;; *************** function _rw_eeprom *****************
  4538 ;; Defined at:
  4539 ;;		line 64 in file "hmiMain.c"
  4540 ;; Parameters:    Size  Location     Type
  4541 ;;  addr            1    wreg     unsigned char 
  4542 ;;  data            1   51[BANK0 ] unsigned char 
  4543 ;;  rw              1   52[BANK0 ] unsigned char 
  4544 ;; Auto vars:     Size  Location     Type
  4545 ;;  addr            1   53[BANK0 ] unsigned char 
  4546 ;; Return value:  Size  Location     Type
  4547 ;;                  1    wreg      unsigned char 
  4548 ;; Registers used:
  4549 ;;		wreg, status,2
  4550 ;; Tracked objects:
  4551 ;;		On entry : 0/0
  4552 ;;		On exit  : 0/0
  4553 ;;		Unchanged: 0/0
  4554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4555 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4556 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4558 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4559 ;;Total ram usage:        3 bytes
  4560 ;; Hardware stack levels used:    1
  4561 ;; Hardware stack levels required when called:    9
  4562 ;; This function calls:
  4563 ;;		Nothing
  4564 ;; This function is called by:
  4565 ;;		_main
  4566 ;; This function uses a non-reentrant model
  4567 ;;
  4568                           
  4569                           	psect	text5
  4570  004548                     __ptext5:
  4571                           	opt stack 0
  4572  004548                     _rw_eeprom:
  4573                           	opt stack 21
  4574                           
  4575                           ; BSR set to: 0
  4576                           ;incstack = 0
  4577                           ;rw_eeprom@addr stored from wreg
  4578  004548  0100               	movlb	0	; () banked
  4579  00454A  6F95               	movwf	rw_eeprom@addr& (0+255),b
  4580                           
  4581                           ;hmiMain.c: 66: if (rw) {
  4582  00454C  0100               	movlb	0	; () banked
  4583  00454E  5194               	movf	rw_eeprom@rw& (0+255),w,b
  4584  004550  B4D8               	btfsc	status,2,c
  4585  004552  D015               	goto	l194
  4586                           
  4587                           ; BSR set to: 0
  4588                           ;hmiMain.c: 67: EEADR = addr;
  4589  004554  C095  FF74         	movff	rw_eeprom@addr,3956	;volatile
  4590                           
  4591                           ; BSR set to: 0
  4592                           ;hmiMain.c: 68: EEADRH = 0;
  4593  004558  0E00               	movlw	0
  4594  00455A  6E75               	movwf	3957,c	;volatile
  4595                           
  4596                           ; BSR set to: 0
  4597                           ;hmiMain.c: 69: EEDATA = data;
  4598  00455C  C093  FF73         	movff	rw_eeprom@data,3955	;volatile
  4599                           
  4600                           ; BSR set to: 0
  4601                           ;hmiMain.c: 70: EECON1bits.EEPGD = 0;
  4602  004560  9E7F               	bcf	3967,7,c	;volsfr
  4603                           
  4604                           ; BSR set to: 0
  4605                           ;hmiMain.c: 71: EECON1bits.CFGS = 0;
  4606  004562  9C7F               	bcf	3967,6,c	;volsfr
  4607                           
  4608                           ; BSR set to: 0
  4609                           ;hmiMain.c: 72: EECON1bits.WREN = 1;
  4610  004564  847F               	bsf	3967,2,c	;volsfr
  4611                           
  4612                           ; BSR set to: 0
  4613                           ;hmiMain.c: 73: INTCONbits.GIE = 0;
  4614  004566  9EF2               	bcf	intcon,7,c	;volatile
  4615                           
  4616                           ;hmiMain.c: 74: EECON2 = 0x55;
  4617  004568  0E55               	movlw	85
  4618  00456A  6E7E               	movwf	3966,c	;volsfr
  4619                           
  4620                           ;hmiMain.c: 75: EECON2 = 0xAA;
  4621  00456C  0EAA               	movlw	170
  4622  00456E  6E7E               	movwf	3966,c	;volsfr
  4623                           
  4624                           ; BSR set to: 0
  4625                           ;hmiMain.c: 76: EECON1bits.WR = 1;
  4626  004570  827F               	bsf	3967,1,c	;volsfr
  4627                           
  4628                           ; BSR set to: 0
  4629                           ;hmiMain.c: 77: INTCONbits.GIE = 1;
  4630  004572  8EF2               	bsf	intcon,7,c	;volatile
  4631  004574                     
  4632                           ; BSR set to: 0
  4633  004574  ACB7               	btfss	4023,6,c	;volatile
  4634  004576  D7FE               	goto	l196
  4635                           
  4636                           ;hmiMain.c: 79: PIR4bits.EEIF = 0;
  4637  004578  9CB7               	bcf	4023,6,c	;volatile
  4638                           
  4639                           ;hmiMain.c: 80: return 0;
  4640  00457A  0E00               	movlw	0
  4641                           
  4642                           ;hmiMain.c: 81: }
  4643  00457C  0012               	return	
  4644  00457E                     l194:
  4645                           
  4646                           ; BSR set to: 0
  4647                           ;hmiMain.c: 82: else {
  4648                           ;hmiMain.c: 83: EEADR = addr;
  4649  00457E  C095  FF74         	movff	rw_eeprom@addr,3956	;volatile
  4650                           
  4651                           ; BSR set to: 0
  4652                           ;hmiMain.c: 84: EEADRH = 0;
  4653  004582  0E00               	movlw	0
  4654  004584  6E75               	movwf	3957,c	;volatile
  4655                           
  4656                           ; BSR set to: 0
  4657                           ;hmiMain.c: 85: EECON1bits.EEPGD = 0;
  4658  004586  9E7F               	bcf	3967,7,c	;volsfr
  4659                           
  4660                           ; BSR set to: 0
  4661                           ;hmiMain.c: 86: EECON1bits.CFGS = 0;
  4662  004588  9C7F               	bcf	3967,6,c	;volsfr
  4663                           
  4664                           ; BSR set to: 0
  4665                           ;hmiMain.c: 87: EECON1bits.RD = 1;
  4666  00458A  807F               	bsf	3967,0,c	;volsfr
  4667  00458C  F000               	nop		;# 
  4668                           
  4669                           ;hmiMain.c: 89: return EEDATA;
  4670  00458E  5073               	movf	3955,w,c	;volatile
  4671  004590  0012               	return	
  4672  004592                     __end_of_rw_eeprom:
  4673                           	opt stack 0
  4674                           tblptru	equ	0xFF8
  4675                           tblptrh	equ	0xFF7
  4676                           tblptrl	equ	0xFF6
  4677                           tablat	equ	0xFF5
  4678                           intcon	equ	0xFF2
  4679                           postinc0	equ	0xFEE
  4680                           wreg	equ	0xFE8
  4681                           postdec1	equ	0xFE5
  4682                           fsr1h	equ	0xFE2
  4683                           fsr1l	equ	0xFE1
  4684                           status	equ	0xFD8
  4685                           
  4686 ;; *************** function _printf *****************
  4687 ;; Defined at:
  4688 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  4689 ;; Parameters:    Size  Location     Type
  4690 ;;  f               2    5[BANK1 ] PTR const unsigned char 
  4691 ;;		 -> STR_18(3), STR_17(6), STR_16(3), STR_15(3), 
  4692 ;;		 -> STR_14(3), STR_13(3), STR_12(5), STR_11(5), 
  4693 ;;		 -> STR_10(5), STR_9(3), STR_8(3), STR_7(3), 
  4694 ;;		 -> STR_6(6), STR_5(3), STR_4(6), STR_3(4), 
  4695 ;;		 -> STR_2(3), 
  4696 ;; Auto vars:     Size  Location     Type
  4697 ;;  tmpval          4    0        struct .
  4698 ;;  cp              3    0        PTR const unsigned char 
  4699 ;;  width           2    6[BANK5 ] int 
  4700 ;;  val             2    3[BANK5 ] unsigned int 
  4701 ;;  ap              2    0[BANK5 ] PTR void [1]
  4702 ;;		 -> ?i2_printf(2), ?_printf(2), 
  4703 ;;  len             2    0        unsigned int 
  4704 ;;  c               1    8[BANK5 ] char 
  4705 ;;  flag            1    5[BANK5 ] unsigned char 
  4706 ;;  prec            1    2[BANK5 ] char 
  4707 ;; Return value:  Size  Location     Type
  4708 ;;                  2    5[BANK1 ] int 
  4709 ;; Registers used:
  4710 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4711 ;; Tracked objects:
  4712 ;;		On entry : 0/0
  4713 ;;		On exit  : 0/0
  4714 ;;		Unchanged: 0/0
  4715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4716 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4717 ;;      Locals:         0       0       0       0       0       0       9       0       0       0       0       0       
      +0       0       0       0
  4718 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4719 ;;      Totals:         0       0       6       0       0       0       9       0       0       0       0       0       
      +0       0       0       0
  4720 ;;Total ram usage:       15 bytes
  4721 ;; Hardware stack levels used:    1
  4722 ;; Hardware stack levels required when called:   10
  4723 ;; This function calls:
  4724 ;;		___lwdiv
  4725 ;;		___lwmod
  4726 ;;		___wmul
  4727 ;;		_isdigit
  4728 ;;		_putch
  4729 ;; This function is called by:
  4730 ;;		_main
  4731 ;; This function uses a non-reentrant model
  4732 ;;
  4733                           
  4734                           	psect	text6
  4735  002100                     __ptext6:
  4736                           	opt stack 0
  4737  002100                     _printf:
  4738                           	opt stack 20
  4739                           
  4740                           ;doprnt.c: 466: va_list ap;
  4741                           ;doprnt.c: 499: signed char c;
  4742                           ;doprnt.c: 501: int width;
  4743                           ;doprnt.c: 506: signed char prec;
  4744                           ;doprnt.c: 508: unsigned char flag;
  4745                           ;doprnt.c: 523: union {
  4746                           ;doprnt.c: 524: unsigned long vd;
  4747                           ;doprnt.c: 525: double integ;
  4748                           ;doprnt.c: 526: } tmpval;
  4749                           ;doprnt.c: 528: unsigned int val;
  4750                           ;doprnt.c: 529: unsigned len;
  4751                           ;doprnt.c: 530: const char * cp;
  4752                           ;doprnt.c: 533: *ap = __va_start();
  4753                           
  4754                           ;incstack = 0
  4755  002100  0EF5               	movlw	low (?_printf+2)
  4756  002102  0105               	movlb	5	; () banked
  4757  002104  6F70               	movwf	printf@ap& (0+255),b
  4758  002106  0E01               	movlw	high (?_printf+2)
  4759  002108  6F71               	movwf	(printf@ap+1)& (0+255),b
  4760                           
  4761                           ;doprnt.c: 536: while(c = *f++) {
  4762  00210A  D130               	goto	u10270
  4763  00210C                     
  4764                           ; BSR set to: 5
  4765                           ;doprnt.c: 538: if(c != '%')
  4766                           
  4767                           ; BSR set to: 5
  4768  00210C  0E25               	movlw	37
  4769  00210E  1978               	xorwf	printf@c& (0+255),w,b
  4770  002110  B4D8               	btfsc	status,2,c
  4771  002112  D004               	goto	l1089
  4772                           
  4773                           ; BSR set to: 5
  4774                           ;doprnt.c: 540: {
  4775                           ;doprnt.c: 541: (putch(c) );
  4776  002114  5178               	movf	printf@c& (0+255),w,b
  4777  002116  EC9C  F025         	call	_putch
  4778                           
  4779                           ;doprnt.c: 542: continue;
  4780  00211A  D128               	goto	u10270
  4781  00211C                     l1089:
  4782                           
  4783                           ;doprnt.c: 543: }
  4784                           ;doprnt.c: 546: width = 0;
  4785  00211C  0E00               	movlw	0
  4786  00211E  0105               	movlb	5	; () banked
  4787  002120  6F77               	movwf	(printf@width+1)& (0+255),b
  4788  002122  0E00               	movlw	0
  4789  002124  6F76               	movwf	printf@width& (0+255),b
  4790                           
  4791                           ;doprnt.c: 548: flag = 0;
  4792  002126  0E00               	movlw	0
  4793  002128  6F75               	movwf	printf@flag& (0+255),b
  4794                           
  4795                           ; BSR set to: 5
  4796                           ;doprnt.c: 551: switch(*f) {
  4797                           
  4798                           ;doprnt.c: 550: for(;;) {
  4799  00212A  D005               	goto	l1091
  4800  00212C                     
  4801                           ;doprnt.c: 580: flag |= 0x04;
  4802                           
  4803                           ; BSR set to: 5
  4804  00212C  0105               	movlb	5	; () banked
  4805  00212E  8575               	bsf	printf@flag& (0+255),2,b
  4806                           
  4807                           ;doprnt.c: 581: f++;
  4808  002130  0101               	movlb	1	; () banked
  4809  002132  4BF3               	infsnz	printf@f& (0+255),f,b
  4810  002134  2BF4               	incf	(printf@f+1)& (0+255),f,b
  4811  002136                     l1091:
  4812                           
  4813                           ; BSR set to: 1
  4814  002136  C1F3  FFF6         	movff	printf@f,tblptrl
  4815  00213A  C1F4  FFF7         	movff	printf@f+1,tblptrh
  4816  00213E                     	if	0	;tblptru may be non-zero
  4817  00213E                     	endif
  4818  00213E                     	if	0	;tblptru may be non-zero
  4819  00213E                     	endif
  4820  00213E  0008               	tblrd		*
  4821  002140  50F5               	movf	tablat,w,c
  4822                           
  4823                           ; Switch size 1, requested type "space"
  4824                           ; Number of cases is 1, Range of values is 48 to 48
  4825                           ; switch strategies available:
  4826                           ; Name         Instructions Cycles
  4827                           ; simple_byte            4     3 (average)
  4828                           ;	Chosen strategy is simple_byte
  4829  002142  0A30               	xorlw	48	; case 48
  4830  002144  B4D8               	btfsc	status,2,c
  4831  002146  D7F2               	goto	l1092
  4832                           
  4833                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4834                           
  4835                           ;doprnt.c: 586: }
  4836                           
  4837                           ;doprnt.c: 585: break;
  4838  002148  C1F3  FFF6         	movff	printf@f,tblptrl
  4839  00214C  C1F4  FFF7         	movff	printf@f+1,tblptrh
  4840  002150                     	if	0	;tblptru may be non-zero
  4841  002150                     	endif
  4842  002150                     	if	0	;tblptru may be non-zero
  4843  002150                     	endif
  4844  002150  0008               	tblrd		*
  4845  002152  50F5               	movf	tablat,w,c
  4846  002154  EC8B  F025         	call	_isdigit
  4847  002158  A0D8               	btfss	status,0,c
  4848  00215A  D039               	goto	l1099
  4849                           
  4850                           ;doprnt.c: 598: width = 0;
  4851  00215C  0E00               	movlw	0
  4852  00215E  0105               	movlb	5	; () banked
  4853  002160  6F77               	movwf	(printf@width+1)& (0+255),b
  4854  002162  0E00               	movlw	0
  4855  002164  6F76               	movwf	printf@width& (0+255),b
  4856  002166                     
  4857                           ;doprnt.c: 600: width *= 10;
  4858                           
  4859                           ; BSR set to: 5
  4860  002166  C576  F093         	movff	printf@width,___wmul@multiplier
  4861  00216A  C577  F094         	movff	printf@width+1,___wmul@multiplier+1
  4862  00216E  0E00               	movlw	0
  4863  002170  0100               	movlb	0	; () banked
  4864  002172  6F96               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4865  002174  0E0A               	movlw	10
  4866  002176  6F95               	movwf	___wmul@multiplicand& (0+255),b
  4867  002178  EC64  F025         	call	___wmul	;wreg free
  4868  00217C  C093  F576         	movff	?___wmul,printf@width
  4869  002180  C094  F577         	movff	?___wmul+1,printf@width+1
  4870                           
  4871                           ;doprnt.c: 601: width += *f++ - '0';
  4872  002184  0ED0               	movlw	208
  4873  002186  0101               	movlb	1	; () banked
  4874  002188  6FF5               	movwf	??_printf& (0+255),b
  4875  00218A  0EFF               	movlw	255
  4876  00218C  6FF6               	movwf	(??_printf+1)& (0+255),b
  4877  00218E  C1F3  FFF6         	movff	printf@f,tblptrl
  4878  002192  C1F4  FFF7         	movff	printf@f+1,tblptrh
  4879  002196                     	if	0	;tblptru may be non-zero
  4880  002196                     	endif
  4881  002196                     	if	0	;tblptru may be non-zero
  4882  002196                     	endif
  4883  002196  0008               	tblrd		*
  4884  002198  50F5               	movf	tablat,w,c
  4885  00219A  6FF7               	movwf	(??_printf+2)& (0+255),b
  4886  00219C  6BF8               	clrf	(??_printf+3)& (0+255),b
  4887  00219E  51F5               	movf	??_printf& (0+255),w,b
  4888  0021A0  27F7               	addwf	(??_printf+2)& (0+255),f,b
  4889  0021A2  51F6               	movf	(??_printf+1)& (0+255),w,b
  4890  0021A4  23F8               	addwfc	(??_printf+3)& (0+255),f,b
  4891  0021A6  51F7               	movf	(??_printf+2)& (0+255),w,b
  4892  0021A8  0105               	movlb	5	; () banked
  4893  0021AA  2776               	addwf	printf@width& (0+255),f,b
  4894  0021AC  0101               	movlb	1	; () banked
  4895  0021AE  51F8               	movf	(??_printf+3)& (0+255),w,b
  4896  0021B0  0105               	movlb	5	; () banked
  4897  0021B2  2377               	addwfc	(printf@width+1)& (0+255),f,b
  4898                           
  4899                           ; BSR set to: 5
  4900  0021B4  0101               	movlb	1	; () banked
  4901  0021B6  4BF3               	infsnz	printf@f& (0+255),f,b
  4902  0021B8  2BF4               	incf	(printf@f+1)& (0+255),f,b
  4903                           
  4904                           ; BSR set to: 1
  4905                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4906  0021BA  C1F3  FFF6         	movff	printf@f,tblptrl
  4907  0021BE  C1F4  FFF7         	movff	printf@f+1,tblptrh
  4908  0021C2                     	if	0	;tblptru may be non-zero
  4909  0021C2                     	endif
  4910  0021C2                     	if	0	;tblptru may be non-zero
  4911  0021C2                     	endif
  4912  0021C2  0008               	tblrd		*
  4913  0021C4  50F5               	movf	tablat,w,c
  4914  0021C6  EC8B  F025         	call	_isdigit
  4915  0021CA  B0D8               	btfsc	status,0,c
  4916  0021CC  D7CC               	goto	l1097
  4917  0021CE                     l1099:
  4918  0021CE  C1F3  FFF6         	movff	printf@f,tblptrl
  4919  0021D2  C1F4  FFF7         	movff	printf@f+1,tblptrh
  4920  0021D6  0101               	movlb	1	; () banked
  4921  0021D8  4BF3               	infsnz	printf@f& (0+255),f,b
  4922  0021DA  2BF4               	incf	(printf@f+1)& (0+255),f,b
  4923  0021DC                     	if	0	;tblptru may be non-zero
  4924  0021DC                     	endif
  4925  0021DC                     	if	0	;tblptru may be non-zero
  4926  0021DC                     	endif
  4927  0021DC  0008               	tblrd		*
  4928  0021DE  CFF5 F578          	movff	tablat,printf@c
  4929  0021E2  0105               	movlb	5	; () banked
  4930  0021E4  5178               	movf	printf@c& (0+255),w,b
  4931                           
  4932                           ; Switch size 1, requested type "space"
  4933                           ; Number of cases is 3, Range of values is 0 to 105
  4934                           ; switch strategies available:
  4935                           ; Name         Instructions Cycles
  4936                           ; simple_byte           10     6 (average)
  4937                           ;	Chosen strategy is simple_byte
  4938  0021E6  0A00               	xorlw	0	; case 0
  4939  0021E8  B4D8               	btfsc	status,2,c
  4940  0021EA  0012               	return	
  4941  0021EC  0A64               	xorlw	100	; case 100
  4942  0021EE  B4D8               	btfsc	status,2,c
  4943  0021F0  D003               	goto	l1104
  4944  0021F2  0A0D               	xorlw	13	; case 105
  4945  0021F4  A4D8               	btfss	status,2,c
  4946  0021F6  D0BA               	goto	u10270
  4947  0021F8                     l1104:
  4948                           
  4949                           ;doprnt.c: 1253: {
  4950                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4951                           
  4952                           ; BSR set to: 5
  4953  0021F8  C570  FFD9         	movff	printf@ap,fsr2l
  4954  0021FC  C571  FFDA         	movff	printf@ap+1,fsr2h
  4955  002200  CFDE F573          	movff	postinc2,printf@val
  4956  002204  CFDD F574          	movff	postdec2,printf@val+1
  4957  002208  0E02               	movlw	2
  4958  00220A  0105               	movlb	5	; () banked
  4959  00220C  2770               	addwf	printf@ap& (0+255),f,b
  4960  00220E  0E00               	movlw	0
  4961  002210  2371               	addwfc	(printf@ap+1)& (0+255),f,b
  4962                           
  4963                           ; BSR set to: 5
  4964                           ;doprnt.c: 1261: if((int)val < 0) {
  4965  002212  AF74               	btfss	(printf@val+1)& (0+255),7,b
  4966  002214  D006               	goto	l1106
  4967                           
  4968                           ; BSR set to: 5
  4969                           ;doprnt.c: 1262: flag |= 0x03;
  4970  002216  0E03               	movlw	3
  4971  002218  1375               	iorwf	printf@flag& (0+255),f,b
  4972                           
  4973                           ; BSR set to: 5
  4974                           ;doprnt.c: 1263: val = -val;
  4975  00221A  6D73               	negf	printf@val& (0+255),b
  4976  00221C  1F74               	comf	(printf@val+1)& (0+255),f,b
  4977  00221E  B0D8               	btfsc	status,0,c
  4978  002220  2B74               	incf	(printf@val+1)& (0+255),f,b
  4979  002222                     l1106:
  4980                           
  4981                           ; BSR set to: 5
  4982                           ;doprnt.c: 1264: }
  4983                           ;doprnt.c: 1266: }
  4984                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4985                           
  4986                           ; BSR set to: 5
  4987  002222  0E01               	movlw	1
  4988  002224  6F78               	movwf	printf@c& (0+255),b
  4989  002226                     l9136:
  4990                           
  4991                           ; BSR set to: 5
  4992  002226  0E05               	movlw	5
  4993  002228  1978               	xorwf	printf@c& (0+255),w,b
  4994  00222A  B4D8               	btfsc	status,2,c
  4995  00222C  D012               	goto	u10160
  4996                           
  4997                           ; BSR set to: 5
  4998                           ;doprnt.c: 1306: if(val < dpowers[c])
  4999                           
  5000                           ; BSR set to: 5
  5001                           
  5002                           ; BSR set to: 5
  5003  00222E  5178               	movf	printf@c& (0+255),w,b
  5004  002230  0D02               	mullw	2
  5005  002232  0E9F               	movlw	low _dpowers
  5006  002234  24F3               	addwf	prodl,w,c
  5007  002236  6EF6               	movwf	tblptrl,c
  5008  002238  0EFF               	movlw	high _dpowers
  5009  00223A  20F4               	addwfc	prodh,w,c
  5010  00223C  6EF7               	movwf	tblptrh,c
  5011  00223E                     	if	0	;There are less than 3 active tblptr bytes
  5012  00223E                     	endif
  5013  00223E  0009               	tblrd		*+
  5014  002240  50F5               	movf	tablat,w,c
  5015  002242  5D73               	subwf	printf@val& (0+255),w,b
  5016  002244  0009               	tblrd		*+
  5017  002246  50F5               	movf	tablat,w,c
  5018  002248  5974               	subwfb	(printf@val+1)& (0+255),w,b
  5019  00224A  A0D8               	btfss	status,0,c
  5020  00224C  D002               	goto	u10160
  5021                           
  5022                           ; BSR set to: 5
  5023                           
  5024                           ; BSR set to: 5
  5025                           
  5026                           ; BSR set to: 5
  5027                           ;doprnt.c: 1307: break;
  5028  00224E  2B78               	incf	printf@c& (0+255),f,b
  5029  002250  D7EA               	goto	l9136
  5030  002252                     u10160:
  5031                           
  5032                           ; BSR set to: 5
  5033                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5034                           
  5035                           ; BSR set to: 5
  5036  002252  5176               	movf	printf@width& (0+255),w,b
  5037  002254  1177               	iorwf	(printf@width+1)& (0+255),w,b
  5038  002256  B4D8               	btfsc	status,2,c
  5039  002258  D00B               	goto	l1110
  5040                           
  5041                           ; BSR set to: 5
  5042  00225A  C575  F1F5         	movff	printf@flag,??_printf
  5043  00225E  0E03               	movlw	3
  5044  002260  0101               	movlb	1	; () banked
  5045  002262  17F5               	andwf	??_printf& (0+255),f,b
  5046  002264  B4D8               	btfsc	status,2,c
  5047  002266  D004               	goto	l1110
  5048                           
  5049                           ; BSR set to: 1
  5050                           ;doprnt.c: 1346: width--;
  5051  002268  0105               	movlb	5	; () banked
  5052  00226A  0776               	decf	printf@width& (0+255),f,b
  5053  00226C  A0D8               	btfss	status,0,c
  5054  00226E  0777               	decf	(printf@width+1)& (0+255),f,b
  5055  002270                     l1110:
  5056                           
  5057                           ;doprnt.c: 1381: if(width > c)
  5058                           
  5059                           ; BSR set to: 5
  5060  002270  0E80               	movlw	128
  5061  002272  0105               	movlb	5	; () banked
  5062  002274  BF78               	btfsc	printf@c& (0+255),7,b
  5063  002276  0E7F               	movlw	127
  5064  002278  0101               	movlb	1	; () banked
  5065  00227A  6FF5               	movwf	??_printf& (0+255),b
  5066  00227C  0105               	movlb	5	; () banked
  5067  00227E  5176               	movf	printf@width& (0+255),w,b
  5068  002280  5D78               	subwf	printf@c& (0+255),w,b
  5069  002282  5177               	movf	(printf@width+1)& (0+255),w,b
  5070  002284  0A80               	xorlw	128
  5071  002286  0101               	movlb	1	; () banked
  5072  002288  59F5               	subwfb	??_printf& (0+255),w,b
  5073  00228A  B0D8               	btfsc	status,0,c
  5074  00228C  D008               	goto	l1111
  5075                           
  5076                           ; BSR set to: 1
  5077                           ;doprnt.c: 1382: width -= c;
  5078  00228E  0105               	movlb	5	; () banked
  5079  002290  5178               	movf	printf@c& (0+255),w,b
  5080  002292  5F76               	subwf	printf@width& (0+255),f,b
  5081  002294  0E00               	movlw	0
  5082  002296  BF78               	btfsc	printf@c& (0+255),7,b
  5083  002298  0EFF               	movlw	255
  5084  00229A  5B77               	subwfb	(printf@width+1)& (0+255),f,b
  5085  00229C  D005               	goto	l1112
  5086  00229E                     l1111:
  5087                           
  5088                           ;doprnt.c: 1383: else
  5089                           ;doprnt.c: 1384: width = 0;
  5090                           
  5091                           ; BSR set to: 5
  5092  00229E  0E00               	movlw	0
  5093  0022A0  0105               	movlb	5	; () banked
  5094  0022A2  6F77               	movwf	(printf@width+1)& (0+255),b
  5095  0022A4  0E00               	movlw	0
  5096  0022A6  6F76               	movwf	printf@width& (0+255),b
  5097  0022A8                     l1112:
  5098                           
  5099                           ; BSR set to: 5
  5100                           ;doprnt.c: 1387: if(flag & 0x04) {
  5101                           
  5102                           ; BSR set to: 5
  5103  0022A8  A575               	btfss	printf@flag& (0+255),2,b
  5104  0022AA  D017               	goto	l1113
  5105                           
  5106                           ; BSR set to: 5
  5107                           ;doprnt.c: 1392: if(flag & 0x03)
  5108  0022AC  C575  F1F5         	movff	printf@flag,??_printf
  5109  0022B0  0E03               	movlw	3
  5110  0022B2  0101               	movlb	1	; () banked
  5111  0022B4  17F5               	andwf	??_printf& (0+255),f,b
  5112  0022B6  B4D8               	btfsc	status,2,c
  5113  0022B8  D003               	goto	l1114
  5114                           
  5115                           ; BSR set to: 1
  5116                           ;doprnt.c: 1393: (putch('-') );
  5117  0022BA  0E2D               	movlw	45
  5118  0022BC  EC9C  F025         	call	_putch
  5119  0022C0                     l1114:
  5120                           
  5121                           ;doprnt.c: 1415: if(width)
  5122  0022C0  0105               	movlb	5	; () banked
  5123  0022C2  5176               	movf	printf@width& (0+255),w,b
  5124  0022C4  1177               	iorwf	(printf@width+1)& (0+255),w,b
  5125  0022C6  B4D8               	btfsc	status,2,c
  5126  0022C8  D021               	goto	l1122
  5127                           
  5128                           ; BSR set to: 5
  5129                           ;doprnt.c: 1417: (putch('0') );
  5130                           
  5131                           ; BSR set to: 5
  5132                           
  5133                           ;doprnt.c: 1416: do
  5134  0022CA  0E30               	movlw	48
  5135  0022CC  EC9C  F025         	call	_putch
  5136                           
  5137                           ;doprnt.c: 1418: while(--width);
  5138  0022D0  0105               	movlb	5	; () banked
  5139  0022D2  0776               	decf	printf@width& (0+255),f,b
  5140  0022D4  A0D8               	btfss	status,0,c
  5141  0022D6  0777               	decf	(printf@width+1)& (0+255),f,b
  5142  0022D8  D7F4               	goto	L25
  5143  0022DA                     l1113:
  5144                           
  5145                           ; BSR set to: 5
  5146                           ;doprnt.c: 1422: {
  5147                           ;doprnt.c: 1424: if(width
  5148                           ;doprnt.c: 1428: )
  5149                           
  5150                           ; BSR set to: 5
  5151  0022DA  5176               	movf	printf@width& (0+255),w,b
  5152  0022DC  1177               	iorwf	(printf@width+1)& (0+255),w,b
  5153  0022DE  B4D8               	btfsc	status,2,c
  5154  0022E0  D00B               	goto	u10250
  5155  0022E2                     u10240:
  5156                           
  5157                           ; BSR set to: 5
  5158                           ;doprnt.c: 1430: (putch(' ') );
  5159                           
  5160                           ; BSR set to: 5
  5161                           
  5162                           ;doprnt.c: 1429: do
  5163  0022E2  0E20               	movlw	32
  5164  0022E4  EC9C  F025         	call	_putch
  5165                           
  5166                           ;doprnt.c: 1431: while(--width);
  5167  0022E8  0105               	movlb	5	; () banked
  5168  0022EA  0776               	decf	printf@width& (0+255),f,b
  5169  0022EC  A0D8               	btfss	status,0,c
  5170  0022EE  0777               	decf	(printf@width+1)& (0+255),f,b
  5171  0022F0  5176               	movf	printf@width& (0+255),w,b
  5172  0022F2  1177               	iorwf	(printf@width+1)& (0+255),w,b
  5173  0022F4  A4D8               	btfss	status,2,c
  5174  0022F6  D7F5               	goto	u10240
  5175  0022F8                     u10250:
  5176                           
  5177                           ; BSR set to: 5
  5178                           ;doprnt.c: 1438: if(flag & 0x03)
  5179                           
  5180                           ; BSR set to: 5
  5181                           
  5182                           ; BSR set to: 5
  5183  0022F8  C575  F1F5         	movff	printf@flag,??_printf
  5184  0022FC  0E03               	movlw	3
  5185  0022FE  0101               	movlb	1	; () banked
  5186  002300  17F5               	andwf	??_printf& (0+255),f,b
  5187  002302  B4D8               	btfsc	status,2,c
  5188  002304  D003               	goto	l1122
  5189                           
  5190                           ; BSR set to: 1
  5191                           ;doprnt.c: 1439: (putch('-') );
  5192  002306  0E2D               	movlw	45
  5193  002308  EC9C  F025         	call	_putch
  5194  00230C                     l1122:
  5195                           
  5196                           ;doprnt.c: 1469: }
  5197                           ;doprnt.c: 1472: prec = c;
  5198  00230C  C578  F572         	movff	printf@c,printf@prec
  5199                           
  5200                           ;doprnt.c: 1474: while(prec--) {
  5201  002310  D028               	goto	l1123
  5202  002312                     
  5203                           ;doprnt.c: 1478: {
  5204                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5205  002312  0105               	movlb	5	; () banked
  5206  002314  5172               	movf	printf@prec& (0+255),w,b
  5207  002316  0D02               	mullw	2
  5208  002318  0E9F               	movlw	low _dpowers
  5209  00231A  24F3               	addwf	prodl,w,c
  5210  00231C  6EF6               	movwf	tblptrl,c
  5211  00231E  0EFF               	movlw	high _dpowers
  5212  002320  20F4               	addwfc	prodh,w,c
  5213  002322  6EF7               	movwf	tblptrh,c
  5214  002324                     	if	0	;There are less than 3 active tblptr bytes
  5215  002324                     	endif
  5216  002324  0009               	tblrd		*+
  5217  002326  CFF5 F095          	movff	tablat,___lwdiv@divisor
  5218  00232A  000A               	tblrd		*-
  5219  00232C  CFF5 F096          	movff	tablat,___lwdiv@divisor+1
  5220  002330  C573  F093         	movff	printf@val,___lwdiv@dividend
  5221  002334  C574  F094         	movff	printf@val+1,___lwdiv@dividend+1
  5222  002338  EC2A  F022         	call	___lwdiv	;wreg free
  5223  00233C  C093  F1EE         	movff	?___lwdiv,___lwmod@dividend
  5224  002340  C094  F1EF         	movff	?___lwdiv+1,___lwmod@dividend+1
  5225  002344  0E00               	movlw	0
  5226  002346  0101               	movlb	1	; () banked
  5227  002348  6FF1               	movwf	(___lwmod@divisor+1)& (0+255),b
  5228  00234A  0E0A               	movlw	10
  5229  00234C  6FF0               	movwf	___lwmod@divisor& (0+255),b
  5230  00234E  EC12  F024         	call	___lwmod	;wreg free
  5231  002352  0101               	movlb	1	; () banked
  5232  002354  51EE               	movf	?___lwmod& (0+255),w,b
  5233  002356  0F30               	addlw	48
  5234  002358  0105               	movlb	5	; () banked
  5235  00235A  6F78               	movwf	printf@c& (0+255),b
  5236                           
  5237                           ; BSR set to: 5
  5238                           ;doprnt.c: 1523: }
  5239                           ;doprnt.c: 1524: (putch(c) );
  5240  00235C  5178               	movf	printf@c& (0+255),w,b
  5241  00235E  EC9C  F025         	call	_putch
  5242  002362                     l1123:
  5243  002362  0105               	movlb	5	; () banked
  5244  002364  0772               	decf	printf@prec& (0+255),f,b
  5245  002366  2972               	incf	printf@prec& (0+255),w,b
  5246  002368  A4D8               	btfss	status,2,c
  5247  00236A  D7D3               	goto	l1124
  5248  00236C                     u10270:
  5249                           
  5250                           ; BSR set to: 5
  5251                           
  5252                           ; BSR set to: 5
  5253  00236C  C1F3  FFF6         	movff	printf@f,tblptrl
  5254  002370  C1F4  FFF7         	movff	printf@f+1,tblptrh
  5255  002374  0101               	movlb	1	; () banked
  5256  002376  4BF3               	infsnz	printf@f& (0+255),f,b
  5257  002378  2BF4               	incf	(printf@f+1)& (0+255),f,b
  5258  00237A                     	if	0	;tblptru may be non-zero
  5259  00237A                     	endif
  5260  00237A                     	if	0	;tblptru may be non-zero
  5261  00237A                     	endif
  5262  00237A  0008               	tblrd		*
  5263  00237C  CFF5 F578          	movff	tablat,printf@c
  5264  002380  0105               	movlb	5	; () banked
  5265  002382  5178               	movf	printf@c& (0+255),w,b
  5266  002384  B4D8               	btfsc	status,2,c
  5267  002386  0012               	return	
  5268  002388  D6C1               	goto	l1088
  5269  00238A                     __end_of_printf:
  5270                           	opt stack 0
  5271                           tblptru	equ	0xFF8
  5272                           tblptrh	equ	0xFF7
  5273                           tblptrl	equ	0xFF6
  5274                           tablat	equ	0xFF5
  5275                           prodh	equ	0xFF4
  5276                           prodl	equ	0xFF3
  5277                           intcon	equ	0xFF2
  5278                           postinc0	equ	0xFEE
  5279                           wreg	equ	0xFE8
  5280                           postdec1	equ	0xFE5
  5281                           fsr1h	equ	0xFE2
  5282                           fsr1l	equ	0xFE1
  5283                           postinc2	equ	0xFDE
  5284                           postdec2	equ	0xFDD
  5285                           fsr2h	equ	0xFDA
  5286                           fsr2l	equ	0xFD9
  5287                           status	equ	0xFD8
  5288                           
  5289 ;; *************** function _putch *****************
  5290 ;; Defined at:
  5291 ;;		line 52 in file "hmiMain.c"
  5292 ;; Parameters:    Size  Location     Type
  5293 ;;  data            1    wreg     unsigned char 
  5294 ;; Auto vars:     Size  Location     Type
  5295 ;;  data            1   51[BANK0 ] unsigned char 
  5296 ;; Return value:  Size  Location     Type
  5297 ;;                  1    wreg      void 
  5298 ;; Registers used:
  5299 ;;		wreg, status,2
  5300 ;; Tracked objects:
  5301 ;;		On entry : 0/0
  5302 ;;		On exit  : 0/0
  5303 ;;		Unchanged: 0/0
  5304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5306 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5307 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5308 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5309 ;;Total ram usage:        1 bytes
  5310 ;; Hardware stack levels used:    1
  5311 ;; Hardware stack levels required when called:    9
  5312 ;; This function calls:
  5313 ;;		Nothing
  5314 ;; This function is called by:
  5315 ;;		_main
  5316 ;;		_printf
  5317 ;; This function uses a non-reentrant model
  5318 ;;
  5319                           
  5320                           	psect	text7
  5321  004B38                     __ptext7:
  5322                           	opt stack 0
  5323  004B38                     _putch:
  5324                           	opt stack 21
  5325                           
  5326                           ;incstack = 0
  5327                           ;putch@data stored from wreg
  5328  004B38  0100               	movlb	0	; () banked
  5329  004B3A  6F93               	movwf	putch@data& (0+255),b
  5330                           
  5331                           ;hmiMain.c: 53: if (mux) {
  5332  004B3C  0100               	movlb	0	; () banked
  5333  004B3E  51BB               	movf	_mux& (0+255),w,b	;volatile
  5334  004B40  B4D8               	btfsc	status,2,c
  5335  004B42  D005               	goto	l183
  5336  004B44                     u9580:
  5337                           
  5338                           ; BSR set to: 0
  5339                           ;hmiMain.c: 55: continue;
  5340                           
  5341                           ; BSR set to: 0
  5342                           ;hmiMain.c: 54: while(!PIR3bits.TX2IF)
  5343  004B44  A8A4               	btfss	4004,4,c	;volatile
  5344  004B46  D7FE               	goto	u9580
  5345                           
  5346                           ;hmiMain.c: 56: TXREG2 = data;
  5347  004B48  C093  FF79         	movff	putch@data,3961	;volatile
  5348                           
  5349                           ;hmiMain.c: 57: } else {
  5350  004B4C  0012               	return	
  5351  004B4E                     l183:
  5352                           
  5353                           ;hmiMain.c: 59: continue;
  5354                           
  5355                           ;hmiMain.c: 58: while(!PIR1bits.TX1IF)
  5356  004B4E  A89E               	btfss	3998,4,c	;volatile
  5357  004B50  D7FE               	goto	l183
  5358                           
  5359                           ;hmiMain.c: 60: TXREG1 = data;
  5360  004B52  C093  FFAD         	movff	putch@data,4013	;volatile
  5361  004B56  0012               	return	
  5362  004B58                     __end_of_putch:
  5363                           	opt stack 0
  5364                           tblptru	equ	0xFF8
  5365                           tblptrh	equ	0xFF7
  5366                           tblptrl	equ	0xFF6
  5367                           tablat	equ	0xFF5
  5368                           prodh	equ	0xFF4
  5369                           prodl	equ	0xFF3
  5370                           intcon	equ	0xFF2
  5371                           postinc0	equ	0xFEE
  5372                           wreg	equ	0xFE8
  5373                           postdec1	equ	0xFE5
  5374                           fsr1h	equ	0xFE2
  5375                           fsr1l	equ	0xFE1
  5376                           postinc2	equ	0xFDE
  5377                           postdec2	equ	0xFDD
  5378                           fsr2h	equ	0xFDA
  5379                           fsr2l	equ	0xFD9
  5380                           status	equ	0xFD8
  5381                           
  5382 ;; *************** function _isdigit *****************
  5383 ;; Defined at:
  5384 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  5385 ;; Parameters:    Size  Location     Type
  5386 ;;  c               1    wreg     unsigned char 
  5387 ;; Auto vars:     Size  Location     Type
  5388 ;;  c               1   53[BANK0 ] unsigned char 
  5389 ;; Return value:  Size  Location     Type
  5390 ;;		None               void
  5391 ;; Registers used:
  5392 ;;		wreg, status,2, status,0
  5393 ;; Tracked objects:
  5394 ;;		On entry : 0/0
  5395 ;;		On exit  : 0/0
  5396 ;;		Unchanged: 0/0
  5397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5399 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5400 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5401 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5402 ;;Total ram usage:        3 bytes
  5403 ;; Hardware stack levels used:    1
  5404 ;; Hardware stack levels required when called:    9
  5405 ;; This function calls:
  5406 ;;		Nothing
  5407 ;; This function is called by:
  5408 ;;		_printf
  5409 ;; This function uses a non-reentrant model
  5410 ;;
  5411                           
  5412                           	psect	text8
  5413  004B16                     __ptext8:
  5414                           	opt stack 0
  5415  004B16                     _isdigit:
  5416                           	opt stack 20
  5417                           
  5418                           ;incstack = 0
  5419                           ;isdigit@c stored from wreg
  5420  004B16  0100               	movlb	0	; () banked
  5421  004B18  6F95               	movwf	isdigit@c& (0+255),b
  5422  004B1A  0E00               	movlw	0
  5423  004B1C  0100               	movlb	0	; () banked
  5424  004B1E  6F94               	movwf	_isdigit$1963& (0+255),b
  5425                           
  5426                           ; BSR set to: 0
  5427  004B20  0E3A               	movlw	58
  5428  004B22  6195               	cpfslt	isdigit@c& (0+255),b
  5429  004B24  D005               	goto	l1457
  5430                           
  5431                           ; BSR set to: 0
  5432  004B26  0E2F               	movlw	47
  5433  004B28  6595               	cpfsgt	isdigit@c& (0+255),b
  5434  004B2A  D002               	goto	l1457
  5435                           
  5436                           ; BSR set to: 0
  5437  004B2C  0E01               	movlw	1
  5438  004B2E  6F94               	movwf	_isdigit$1963& (0+255),b
  5439  004B30                     l1457:
  5440                           
  5441                           ; BSR set to: 0
  5442                           
  5443                           ; BSR set to: 0
  5444  004B30  C094  F093         	movff	_isdigit$1963,??_isdigit
  5445  004B34  3193               	rrcf	??_isdigit& (0+255),w,b
  5446  004B36  0012               	return	
  5447  004B38                     __end_of_isdigit:
  5448                           	opt stack 0
  5449                           tblptru	equ	0xFF8
  5450                           tblptrh	equ	0xFF7
  5451                           tblptrl	equ	0xFF6
  5452                           tablat	equ	0xFF5
  5453                           prodh	equ	0xFF4
  5454                           prodl	equ	0xFF3
  5455                           intcon	equ	0xFF2
  5456                           postinc0	equ	0xFEE
  5457                           wreg	equ	0xFE8
  5458                           postdec1	equ	0xFE5
  5459                           fsr1h	equ	0xFE2
  5460                           fsr1l	equ	0xFE1
  5461                           postinc2	equ	0xFDE
  5462                           postdec2	equ	0xFDD
  5463                           fsr2h	equ	0xFDA
  5464                           fsr2l	equ	0xFD9
  5465                           status	equ	0xFD8
  5466                           
  5467 ;; *************** function ___lwmod *****************
  5468 ;; Defined at:
  5469 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  5470 ;; Parameters:    Size  Location     Type
  5471 ;;  dividend        2    0[BANK1 ] unsigned int 
  5472 ;;  divisor         2    2[BANK1 ] unsigned int 
  5473 ;; Auto vars:     Size  Location     Type
  5474 ;;  counter         1    4[BANK1 ] unsigned char 
  5475 ;; Return value:  Size  Location     Type
  5476 ;;                  2    0[BANK1 ] unsigned int 
  5477 ;; Registers used:
  5478 ;;		wreg, status,2, status,0
  5479 ;; Tracked objects:
  5480 ;;		On entry : 0/0
  5481 ;;		On exit  : 0/0
  5482 ;;		Unchanged: 0/0
  5483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5484 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5485 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5486 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5487 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5488 ;;Total ram usage:        5 bytes
  5489 ;; Hardware stack levels used:    1
  5490 ;; Hardware stack levels required when called:    9
  5491 ;; This function calls:
  5492 ;;		Nothing
  5493 ;; This function is called by:
  5494 ;;		_printf
  5495 ;; This function uses a non-reentrant model
  5496 ;;
  5497                           
  5498                           	psect	text9
  5499  004824                     __ptext9:
  5500                           	opt stack 0
  5501  004824                     ___lwmod:
  5502                           	opt stack 20
  5503                           
  5504                           ; BSR set to: 0
  5505                           ;incstack = 0
  5506  004824  0101               	movlb	1	; () banked
  5507  004826  51F0               	movf	___lwmod@divisor& (0+255),w,b
  5508  004828  11F1               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  5509  00482A  B4D8               	btfsc	status,2,c
  5510  00482C  D018               	goto	l1551
  5511                           
  5512                           ; BSR set to: 1
  5513  00482E  0E01               	movlw	1
  5514  004830  6FF2               	movwf	___lwmod@counter& (0+255),b
  5515  004832  D004               	goto	l1546
  5516  004834                     
  5517                           ; BSR set to: 1
  5518                           
  5519                           ; BSR set to: 1
  5520  004834  90D8               	bcf	status,0,c
  5521  004836  37F0               	rlcf	___lwmod@divisor& (0+255),f,b
  5522  004838  37F1               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  5523  00483A  2BF2               	incf	___lwmod@counter& (0+255),f,b
  5524  00483C                     l1546:
  5525                           
  5526                           ; BSR set to: 1
  5527                           
  5528                           ; BSR set to: 1
  5529  00483C  AFF1               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  5530  00483E  D7FA               	goto	l1547
  5531  004840                     u9970:
  5532                           
  5533                           ; BSR set to: 1
  5534                           
  5535                           ; BSR set to: 1
  5536                           
  5537                           ; BSR set to: 1
  5538  004840  51F0               	movf	___lwmod@divisor& (0+255),w,b
  5539  004842  5DEE               	subwf	___lwmod@dividend& (0+255),w,b
  5540  004844  51F1               	movf	(___lwmod@divisor+1)& (0+255),w,b
  5541  004846  59EF               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  5542  004848  A0D8               	btfss	status,0,c
  5543  00484A  D004               	goto	l1550
  5544                           
  5545                           ; BSR set to: 1
  5546  00484C  51F0               	movf	___lwmod@divisor& (0+255),w,b
  5547  00484E  5FEE               	subwf	___lwmod@dividend& (0+255),f,b
  5548  004850  51F1               	movf	(___lwmod@divisor+1)& (0+255),w,b
  5549  004852  5BEF               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  5550  004854                     l1550:
  5551                           
  5552                           ; BSR set to: 1
  5553                           
  5554                           ; BSR set to: 1
  5555  004854  90D8               	bcf	status,0,c
  5556  004856  33F1               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  5557  004858  33F0               	rrcf	___lwmod@divisor& (0+255),f,b
  5558                           
  5559                           ; BSR set to: 1
  5560  00485A  2FF2               	decfsz	___lwmod@counter& (0+255),f,b
  5561  00485C  D7F1               	goto	u9970
  5562  00485E                     l1551:
  5563                           
  5564                           ; BSR set to: 1
  5565                           
  5566                           ; BSR set to: 1
  5567  00485E  C1EE  F1EE         	movff	___lwmod@dividend,?___lwmod
  5568  004862  C1EF  F1EF         	movff	___lwmod@dividend+1,?___lwmod+1
  5569                           
  5570                           ; BSR set to: 1
  5571  004866  0012               	return		;funcret
  5572  004868                     __end_of___lwmod:
  5573                           	opt stack 0
  5574                           tblptru	equ	0xFF8
  5575                           tblptrh	equ	0xFF7
  5576                           tblptrl	equ	0xFF6
  5577                           tablat	equ	0xFF5
  5578                           prodh	equ	0xFF4
  5579                           prodl	equ	0xFF3
  5580                           intcon	equ	0xFF2
  5581                           postinc0	equ	0xFEE
  5582                           wreg	equ	0xFE8
  5583                           postdec1	equ	0xFE5
  5584                           fsr1h	equ	0xFE2
  5585                           fsr1l	equ	0xFE1
  5586                           postinc2	equ	0xFDE
  5587                           postdec2	equ	0xFDD
  5588                           fsr2h	equ	0xFDA
  5589                           fsr2l	equ	0xFD9
  5590                           status	equ	0xFD8
  5591                           
  5592 ;; *************** function ___lwdiv *****************
  5593 ;; Defined at:
  5594 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  5595 ;; Parameters:    Size  Location     Type
  5596 ;;  dividend        2   51[BANK0 ] unsigned int 
  5597 ;;  divisor         2   53[BANK0 ] unsigned int 
  5598 ;; Auto vars:     Size  Location     Type
  5599 ;;  quotient        2   56[BANK0 ] unsigned int 
  5600 ;;  counter         1   55[BANK0 ] unsigned char 
  5601 ;; Return value:  Size  Location     Type
  5602 ;;                  2   51[BANK0 ] unsigned int 
  5603 ;; Registers used:
  5604 ;;		wreg, status,2, status,0
  5605 ;; Tracked objects:
  5606 ;;		On entry : 0/0
  5607 ;;		On exit  : 0/0
  5608 ;;		Unchanged: 0/0
  5609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5610 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5611 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5612 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5613 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5614 ;;Total ram usage:        7 bytes
  5615 ;; Hardware stack levels used:    1
  5616 ;; Hardware stack levels required when called:    9
  5617 ;; This function calls:
  5618 ;;		Nothing
  5619 ;; This function is called by:
  5620 ;;		_printf
  5621 ;; This function uses a non-reentrant model
  5622 ;;
  5623                           
  5624                           	psect	text10
  5625  004454                     __ptext10:
  5626                           	opt stack 0
  5627  004454                     ___lwdiv:
  5628                           	opt stack 20
  5629                           
  5630                           ; BSR set to: 1
  5631                           ;incstack = 0
  5632  004454  0E00               	movlw	0
  5633  004456  0100               	movlb	0	; () banked
  5634  004458  6F99               	movwf	(___lwdiv@quotient+1)& (0+255),b
  5635  00445A  0E00               	movlw	0
  5636  00445C  6F98               	movwf	___lwdiv@quotient& (0+255),b
  5637                           
  5638                           ; BSR set to: 0
  5639  00445E  5195               	movf	___lwdiv@divisor& (0+255),w,b
  5640  004460  1196               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  5641  004462  B4D8               	btfsc	status,2,c
  5642  004464  D01C               	goto	l1541
  5643                           
  5644                           ; BSR set to: 0
  5645  004466  0E01               	movlw	1
  5646  004468  6F97               	movwf	___lwdiv@counter& (0+255),b
  5647  00446A  D004               	goto	l1536
  5648  00446C                     
  5649                           ; BSR set to: 0
  5650                           
  5651                           ; BSR set to: 0
  5652  00446C  90D8               	bcf	status,0,c
  5653  00446E  3795               	rlcf	___lwdiv@divisor& (0+255),f,b
  5654  004470  3796               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  5655  004472  2B97               	incf	___lwdiv@counter& (0+255),f,b
  5656  004474                     l1536:
  5657                           
  5658                           ; BSR set to: 0
  5659                           
  5660                           ; BSR set to: 0
  5661  004474  AF96               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  5662  004476  D7FA               	goto	l1537
  5663  004478                     u9940:
  5664                           
  5665                           ; BSR set to: 0
  5666                           
  5667                           ; BSR set to: 0
  5668                           
  5669                           ; BSR set to: 0
  5670  004478  90D8               	bcf	status,0,c
  5671  00447A  3798               	rlcf	___lwdiv@quotient& (0+255),f,b
  5672  00447C  3799               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  5673                           
  5674                           ; BSR set to: 0
  5675  00447E  5195               	movf	___lwdiv@divisor& (0+255),w,b
  5676  004480  5D93               	subwf	___lwdiv@dividend& (0+255),w,b
  5677  004482  5196               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  5678  004484  5994               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  5679  004486  A0D8               	btfss	status,0,c
  5680  004488  D005               	goto	l1540
  5681                           
  5682                           ; BSR set to: 0
  5683  00448A  5195               	movf	___lwdiv@divisor& (0+255),w,b
  5684  00448C  5F93               	subwf	___lwdiv@dividend& (0+255),f,b
  5685  00448E  5196               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  5686  004490  5B94               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  5687                           
  5688                           ; BSR set to: 0
  5689  004492  8198               	bsf	___lwdiv@quotient& (0+255),0,b
  5690  004494                     l1540:
  5691                           
  5692                           ; BSR set to: 0
  5693                           
  5694                           ; BSR set to: 0
  5695  004494  90D8               	bcf	status,0,c
  5696  004496  3396               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  5697  004498  3395               	rrcf	___lwdiv@divisor& (0+255),f,b
  5698                           
  5699                           ; BSR set to: 0
  5700  00449A  2F97               	decfsz	___lwdiv@counter& (0+255),f,b
  5701  00449C  D7ED               	goto	u9940
  5702  00449E                     l1541:
  5703                           
  5704                           ; BSR set to: 0
  5705                           
  5706                           ; BSR set to: 0
  5707  00449E  C098  F093         	movff	___lwdiv@quotient,?___lwdiv
  5708  0044A2  C099  F094         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5709                           
  5710                           ; BSR set to: 0
  5711  0044A6  0012               	return		;funcret
  5712  0044A8                     __end_of___lwdiv:
  5713                           	opt stack 0
  5714                           tblptru	equ	0xFF8
  5715                           tblptrh	equ	0xFF7
  5716                           tblptrl	equ	0xFF6
  5717                           tablat	equ	0xFF5
  5718                           prodh	equ	0xFF4
  5719                           prodl	equ	0xFF3
  5720                           intcon	equ	0xFF2
  5721                           postinc0	equ	0xFEE
  5722                           wreg	equ	0xFE8
  5723                           postdec1	equ	0xFE5
  5724                           fsr1h	equ	0xFE2
  5725                           fsr1l	equ	0xFE1
  5726                           postinc2	equ	0xFDE
  5727                           postdec2	equ	0xFDD
  5728                           fsr2h	equ	0xFDA
  5729                           fsr2l	equ	0xFD9
  5730                           status	equ	0xFD8
  5731                           
  5732 ;; *************** function _menu_init *****************
  5733 ;; Defined at:
  5734 ;;		line 76 in file "menu.c"
  5735 ;; Parameters:    Size  Location     Type
  5736 ;;		None
  5737 ;; Auto vars:     Size  Location     Type
  5738 ;;		None
  5739 ;; Return value:  Size  Location     Type
  5740 ;;                  1    wreg      void 
  5741 ;; Registers used:
  5742 ;;		wreg, status,2, cstack
  5743 ;; Tracked objects:
  5744 ;;		On entry : 0/0
  5745 ;;		On exit  : 0/0
  5746 ;;		Unchanged: 0/0
  5747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5749 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5750 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5751 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5752 ;;Total ram usage:        0 bytes
  5753 ;; Hardware stack levels used:    1
  5754 ;; Hardware stack levels required when called:   10
  5755 ;; This function calls:
  5756 ;;		_mem_read
  5757 ;;		_mem_write
  5758 ;; This function is called by:
  5759 ;;		_main
  5760 ;; This function uses a non-reentrant model
  5761 ;;
  5762                           
  5763                           	psect	text11
  5764  0043FC                     __ptext11:
  5765                           	opt stack 0
  5766  0043FC                     _menu_init:
  5767                           	opt stack 20
  5768                           
  5769                           ;menu.c: 77: if (mem_read(0x20) == 0xAA) {
  5770                           
  5771                           ; BSR set to: 0
  5772                           ;incstack = 0
  5773  0043FC  0E20               	movlw	32
  5774  0043FE  ECCA  F025         	call	_mem_read
  5775  004402  0AAA               	xorlw	170
  5776  004404  A4D8               	btfss	status,2,c
  5777  004406  D010               	goto	l631
  5778                           
  5779                           ;menu.c: 78: memDivision = mem_read(0x21);
  5780  004408  0E21               	movlw	33
  5781  00440A  ECCA  F025         	call	_mem_read
  5782  00440E  0100               	movlb	0	; () banked
  5783  004410  6FB8               	movwf	_memDivision& (0+255),b
  5784                           
  5785                           ;menu.c: 79: memFilter = mem_read(0x22);
  5786  004412  0E22               	movlw	34
  5787  004414  ECCA  F025         	call	_mem_read
  5788  004418  0100               	movlb	0	; () banked
  5789  00441A  6FB7               	movwf	_memFilter& (0+255),b
  5790                           
  5791                           ;menu.c: 80: memBaud = mem_read(0x23);
  5792  00441C  0E23               	movlw	35
  5793  00441E  ECCA  F025         	call	_mem_read
  5794  004422  0100               	movlb	0	; () banked
  5795  004424  6FB6               	movwf	_memBaud& (0+255),b
  5796                           
  5797                           ;menu.c: 81: }
  5798  004426  0012               	return	
  5799  004428                     l631:
  5800                           
  5801                           ;menu.c: 82: else {
  5802                           ;menu.c: 83: mem_write(0x21, memDivision);
  5803                           
  5804                           ; BSR set to: 0
  5805  004428  C0B8  F093         	movff	_memDivision,mem_write@data
  5806  00442C  0E21               	movlw	33
  5807  00442E  EC24  F025         	call	_mem_write
  5808                           
  5809                           ;menu.c: 84: mem_write(0x22, memFilter);
  5810  004432  C0B7  F093         	movff	_memFilter,mem_write@data
  5811  004436  0E22               	movlw	34
  5812  004438  EC24  F025         	call	_mem_write
  5813                           
  5814                           ;menu.c: 85: mem_write(0x23, memBaud);
  5815  00443C  C0B6  F093         	movff	_memBaud,mem_write@data
  5816  004440  0E23               	movlw	35
  5817  004442  EC24  F025         	call	_mem_write
  5818                           
  5819                           ;menu.c: 86: mem_write(0x20, 0xAA);
  5820  004446  0EAA               	movlw	170
  5821  004448  0100               	movlb	0	; () banked
  5822  00444A  6F93               	movwf	mem_write@data& (0+255),b
  5823  00444C  0E20               	movlw	32
  5824  00444E  EC24  F025         	call	_mem_write
  5825  004452  0012               	return	
  5826  004454                     __end_of_menu_init:
  5827                           	opt stack 0
  5828                           tblptru	equ	0xFF8
  5829                           tblptrh	equ	0xFF7
  5830                           tblptrl	equ	0xFF6
  5831                           tablat	equ	0xFF5
  5832                           prodh	equ	0xFF4
  5833                           prodl	equ	0xFF3
  5834                           intcon	equ	0xFF2
  5835                           postinc0	equ	0xFEE
  5836                           wreg	equ	0xFE8
  5837                           postdec1	equ	0xFE5
  5838                           fsr1h	equ	0xFE2
  5839                           fsr1l	equ	0xFE1
  5840                           postinc2	equ	0xFDE
  5841                           postdec2	equ	0xFDD
  5842                           fsr2h	equ	0xFDA
  5843                           fsr2l	equ	0xFD9
  5844                           status	equ	0xFD8
  5845                           
  5846 ;; *************** function _mem_write *****************
  5847 ;; Defined at:
  5848 ;;		line 5 in file "eeprom.c"
  5849 ;; Parameters:    Size  Location     Type
  5850 ;;  address         1    wreg     unsigned char 
  5851 ;;  data            1   51[BANK0 ] unsigned char 
  5852 ;; Auto vars:     Size  Location     Type
  5853 ;;  address         1   52[BANK0 ] unsigned char 
  5854 ;; Return value:  Size  Location     Type
  5855 ;;                  1    wreg      void 
  5856 ;; Registers used:
  5857 ;;		wreg, status,2
  5858 ;; Tracked objects:
  5859 ;;		On entry : 0/0
  5860 ;;		On exit  : 0/0
  5861 ;;		Unchanged: 0/0
  5862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5863 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5864 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5865 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5866 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5867 ;;Total ram usage:        2 bytes
  5868 ;; Hardware stack levels used:    1
  5869 ;; Hardware stack levels required when called:    9
  5870 ;; This function calls:
  5871 ;;		Nothing
  5872 ;; This function is called by:
  5873 ;;		_menu_init
  5874 ;; This function uses a non-reentrant model
  5875 ;;
  5876                           
  5877                           	psect	text12
  5878  004A48                     __ptext12:
  5879                           	opt stack 0
  5880  004A48                     _mem_write:
  5881                           	opt stack 20
  5882                           
  5883                           ;incstack = 0
  5884                           ;mem_write@address stored from wreg
  5885  004A48  0100               	movlb	0	; () banked
  5886  004A4A  6F94               	movwf	mem_write@address& (0+255),b
  5887                           
  5888                           ;eeprom.c: 6: EEADR = address;
  5889  004A4C  C094  FF74         	movff	mem_write@address,3956	;volatile
  5890                           
  5891                           ;eeprom.c: 7: EEADRH = 0;
  5892  004A50  0E00               	movlw	0
  5893  004A52  6E75               	movwf	3957,c	;volatile
  5894                           
  5895                           ;eeprom.c: 8: EEDATA = data;
  5896  004A54  C093  FF73         	movff	mem_write@data,3955	;volatile
  5897                           
  5898                           ;eeprom.c: 9: EECON1bits.EEPGD = 0;
  5899  004A58  9E7F               	bcf	3967,7,c	;volsfr
  5900                           
  5901                           ;eeprom.c: 10: EECON1bits.CFGS = 0;
  5902  004A5A  9C7F               	bcf	3967,6,c	;volsfr
  5903                           
  5904                           ;eeprom.c: 11: EECON1bits.WREN = 1;
  5905  004A5C  847F               	bsf	3967,2,c	;volsfr
  5906                           
  5907                           ;eeprom.c: 12: INTCONbits.GIE = 0;
  5908  004A5E  9EF2               	bcf	intcon,7,c	;volatile
  5909                           
  5910                           ;eeprom.c: 13: EECON2 = 0x55;
  5911  004A60  0E55               	movlw	85
  5912  004A62  6E7E               	movwf	3966,c	;volsfr
  5913                           
  5914                           ;eeprom.c: 14: EECON2 = 0xAA;
  5915  004A64  0EAA               	movlw	170
  5916  004A66  6E7E               	movwf	3966,c	;volsfr
  5917                           
  5918                           ;eeprom.c: 15: EECON1bits.WR = 1;
  5919  004A68  827F               	bsf	3967,1,c	;volsfr
  5920                           
  5921                           ;eeprom.c: 16: INTCONbits.GIE = 1;
  5922  004A6A  8EF2               	bsf	intcon,7,c	;volatile
  5923  004A6C  ACB7               	btfss	4023,6,c	;volatile
  5924  004A6E  D7FE               	goto	l1069
  5925                           
  5926                           ;eeprom.c: 18: PIR4bits.EEIF = 0;
  5927  004A70  9CB7               	bcf	4023,6,c	;volatile
  5928  004A72  0012               	return		;funcret
  5929  004A74                     __end_of_mem_write:
  5930                           	opt stack 0
  5931                           tblptru	equ	0xFF8
  5932                           tblptrh	equ	0xFF7
  5933                           tblptrl	equ	0xFF6
  5934                           tablat	equ	0xFF5
  5935                           prodh	equ	0xFF4
  5936                           prodl	equ	0xFF3
  5937                           intcon	equ	0xFF2
  5938                           postinc0	equ	0xFEE
  5939                           wreg	equ	0xFE8
  5940                           postdec1	equ	0xFE5
  5941                           fsr1h	equ	0xFE2
  5942                           fsr1l	equ	0xFE1
  5943                           postinc2	equ	0xFDE
  5944                           postdec2	equ	0xFDD
  5945                           fsr2h	equ	0xFDA
  5946                           fsr2l	equ	0xFD9
  5947                           status	equ	0xFD8
  5948                           
  5949 ;; *************** function _mem_read *****************
  5950 ;; Defined at:
  5951 ;;		line 21 in file "eeprom.c"
  5952 ;; Parameters:    Size  Location     Type
  5953 ;;  address         1    wreg     unsigned char 
  5954 ;; Auto vars:     Size  Location     Type
  5955 ;;  address         1   51[BANK0 ] unsigned char 
  5956 ;; Return value:  Size  Location     Type
  5957 ;;                  1    wreg      unsigned char 
  5958 ;; Registers used:
  5959 ;;		wreg, status,2
  5960 ;; Tracked objects:
  5961 ;;		On entry : 0/0
  5962 ;;		On exit  : 0/0
  5963 ;;		Unchanged: 0/0
  5964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5966 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5967 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5968 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5969 ;;Total ram usage:        1 bytes
  5970 ;; Hardware stack levels used:    1
  5971 ;; Hardware stack levels required when called:    9
  5972 ;; This function calls:
  5973 ;;		Nothing
  5974 ;; This function is called by:
  5975 ;;		_menu_init
  5976 ;; This function uses a non-reentrant model
  5977 ;;
  5978                           
  5979                           	psect	text13
  5980  004B94                     __ptext13:
  5981                           	opt stack 0
  5982  004B94                     _mem_read:
  5983                           	opt stack 20
  5984                           
  5985                           ;incstack = 0
  5986                           ;mem_read@address stored from wreg
  5987  004B94  0100               	movlb	0	; () banked
  5988  004B96  6F93               	movwf	mem_read@address& (0+255),b
  5989                           
  5990                           ;eeprom.c: 22: EEADR = address;
  5991  004B98  C093  FF74         	movff	mem_read@address,3956	;volatile
  5992                           
  5993                           ;eeprom.c: 23: EEADRH = 0;
  5994  004B9C  0E00               	movlw	0
  5995  004B9E  6E75               	movwf	3957,c	;volatile
  5996                           
  5997                           ;eeprom.c: 24: EECON1bits.EEPGD = 0;
  5998  004BA0  9E7F               	bcf	3967,7,c	;volsfr
  5999                           
  6000                           ;eeprom.c: 25: EECON1bits.CFGS = 0;
  6001  004BA2  9C7F               	bcf	3967,6,c	;volsfr
  6002                           
  6003                           ;eeprom.c: 26: EECON1bits.RD = 1;
  6004  004BA4  807F               	bsf	3967,0,c	;volsfr
  6005  004BA6  F000               	nop		;# 
  6006                           
  6007                           ;eeprom.c: 28: return EEDATA;
  6008  004BA8  5073               	movf	3955,w,c	;volatile
  6009  004BAA  0012               	return	
  6010  004BAC                     __end_of_mem_read:
  6011                           	opt stack 0
  6012                           tblptru	equ	0xFF8
  6013                           tblptrh	equ	0xFF7
  6014                           tblptrl	equ	0xFF6
  6015                           tablat	equ	0xFF5
  6016                           prodh	equ	0xFF4
  6017                           prodl	equ	0xFF3
  6018                           intcon	equ	0xFF2
  6019                           postinc0	equ	0xFEE
  6020                           wreg	equ	0xFE8
  6021                           postdec1	equ	0xFE5
  6022                           fsr1h	equ	0xFE2
  6023                           fsr1l	equ	0xFE1
  6024                           postinc2	equ	0xFDE
  6025                           postdec2	equ	0xFDD
  6026                           fsr2h	equ	0xFDA
  6027                           fsr2l	equ	0xFD9
  6028                           status	equ	0xFD8
  6029                           
  6030 ;; *************** function _lcd_set_background *****************
  6031 ;; Defined at:
  6032 ;;		line 104 in file "tft.c"
  6033 ;; Parameters:    Size  Location     Type
  6034 ;;  color           2   53[BANK0 ] unsigned int 
  6035 ;; Auto vars:     Size  Location     Type
  6036 ;;  j               2   10[BANK1 ] unsigned int 
  6037 ;;  i               2    8[BANK1 ] unsigned int 
  6038 ;; Return value:  Size  Location     Type
  6039 ;;                  1    wreg      void 
  6040 ;; Registers used:
  6041 ;;		wreg, status,2, status,0, cstack
  6042 ;; Tracked objects:
  6043 ;;		On entry : 0/0
  6044 ;;		On exit  : 0/0
  6045 ;;		Unchanged: 0/0
  6046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6047 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6048 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6049 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6050 ;;      Totals:         0       2       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6051 ;;Total ram usage:        6 bytes
  6052 ;; Hardware stack levels used:    1
  6053 ;; Hardware stack levels required when called:   12
  6054 ;; This function calls:
  6055 ;;		_lcd_memory_start
  6056 ;;		_lcd_set_address
  6057 ;;		_lcd_write_bus
  6058 ;; This function is called by:
  6059 ;;		_main
  6060 ;; This function uses a non-reentrant model
  6061 ;;
  6062                           
  6063                           	psect	text14
  6064  004242                     __ptext14:
  6065                           	opt stack 0
  6066  004242                     _lcd_set_background:
  6067                           	opt stack 18
  6068                           
  6069                           ;tft.c: 105: LATA1 = 0;
  6070                           
  6071                           ;incstack = 0
  6072  004242  9289               	bcf	3977,1,c	;volatile
  6073                           
  6074                           ;tft.c: 106: lcd_set_address(0,0,319,479);
  6075  004244  0E00               	movlw	0
  6076  004246  0101               	movlb	1	; () banked
  6077  004248  6FEF               	movwf	(lcd_set_address@x1+1)& (0+255),b
  6078  00424A  0E00               	movlw	0
  6079  00424C  6FEE               	movwf	lcd_set_address@x1& (0+255),b
  6080  00424E  0E00               	movlw	0
  6081  004250  6FF1               	movwf	(lcd_set_address@y1+1)& (0+255),b
  6082  004252  0E00               	movlw	0
  6083  004254  6FF0               	movwf	lcd_set_address@y1& (0+255),b
  6084  004256  0E01               	movlw	1
  6085  004258  6FF3               	movwf	(lcd_set_address@x2+1)& (0+255),b
  6086  00425A  0E3F               	movlw	63
  6087  00425C  6FF2               	movwf	lcd_set_address@x2& (0+255),b
  6088  00425E  0E01               	movlw	1
  6089  004260  6FF5               	movwf	(lcd_set_address@y2+1)& (0+255),b
  6090  004262  0EDF               	movlw	223
  6091  004264  6FF4               	movwf	lcd_set_address@y2& (0+255),b
  6092  004266  EC7D  F022         	call	_lcd_set_address	;wreg free
  6093                           
  6094                           ;tft.c: 107: lcd_memory_start();
  6095  00426A  EC24  F026         	call	_lcd_memory_start	;wreg free
  6096                           
  6097                           ;tft.c: 108: for (unsigned int i=0;i<320;i++) {
  6098  00426E  0E00               	movlw	0
  6099  004270  0101               	movlb	1	; () banked
  6100  004272  6FF7               	movwf	(lcd_set_background@i+1)& (0+255),b
  6101  004274  0E00               	movlw	0
  6102  004276  6FF6               	movwf	lcd_set_background@i& (0+255),b
  6103  004278  D018               	goto	l9776
  6104  00427A                     
  6105                           ; BSR set to: 1
  6106                           ;tft.c: 109: for (unsigned int j=0;j<480;j++) {
  6107                           
  6108                           ; BSR set to: 1
  6109  00427A  0E00               	movlw	0
  6110  00427C  6FF9               	movwf	(lcd_set_background@j+1)& (0+255),b
  6111  00427E  0E00               	movlw	0
  6112  004280  6FF8               	movwf	lcd_set_background@j& (0+255),b
  6113  004282                     l9764:
  6114                           
  6115                           ; BSR set to: 1
  6116  004282  0EE0               	movlw	224
  6117  004284  5DF8               	subwf	lcd_set_background@j& (0+255),w,b
  6118  004286  0E01               	movlw	1
  6119  004288  59F9               	subwfb	(lcd_set_background@j+1)& (0+255),w,b
  6120  00428A  B0D8               	btfsc	status,0,c
  6121  00428C  D00C               	goto	u10940
  6122                           
  6123                           ; BSR set to: 1
  6124                           ;tft.c: 110: lcd_write_bus(color >> 8);
  6125                           
  6126                           ; BSR set to: 1
  6127                           
  6128                           ; BSR set to: 1
  6129  00428E  0100               	movlb	0	; () banked
  6130  004290  5196               	movf	(lcd_set_background@color+1)& (0+255),w,b
  6131  004292  EC0B  F026         	call	_lcd_write_bus
  6132                           
  6133                           ;tft.c: 111: lcd_write_bus(color);
  6134  004296  0100               	movlb	0	; () banked
  6135  004298  5195               	movf	lcd_set_background@color& (0+255),w,b
  6136  00429A  EC0B  F026         	call	_lcd_write_bus
  6137  00429E  0101               	movlb	1	; () banked
  6138  0042A0  4BF8               	infsnz	lcd_set_background@j& (0+255),f,b
  6139  0042A2  2BF9               	incf	(lcd_set_background@j+1)& (0+255),f,b
  6140  0042A4  D7EE               	goto	l9764
  6141  0042A6                     u10940:
  6142                           
  6143                           ; BSR set to: 1
  6144                           
  6145                           ; BSR set to: 1
  6146  0042A6  4BF6               	infsnz	lcd_set_background@i& (0+255),f,b
  6147  0042A8  2BF7               	incf	(lcd_set_background@i+1)& (0+255),f,b
  6148  0042AA                     l9776:
  6149                           
  6150                           ; BSR set to: 1
  6151  0042AA  0E40               	movlw	64
  6152  0042AC  5DF6               	subwf	lcd_set_background@i& (0+255),w,b
  6153  0042AE  0E01               	movlw	1
  6154  0042B0  59F7               	subwfb	(lcd_set_background@i+1)& (0+255),w,b
  6155  0042B2  A0D8               	btfss	status,0,c
  6156  0042B4  D7E2               	goto	l403
  6157                           
  6158                           ; BSR set to: 1
  6159                           ;tft.c: 112: }
  6160                           ;tft.c: 113: }
  6161                           ;tft.c: 114: LATA1 = 1;
  6162  0042B6  8289               	bsf	3977,1,c	;volatile
  6163                           
  6164                           ; BSR set to: 1
  6165  0042B8  0012               	return		;funcret
  6166  0042BA                     __end_of_lcd_set_background:
  6167                           	opt stack 0
  6168                           tblptru	equ	0xFF8
  6169                           tblptrh	equ	0xFF7
  6170                           tblptrl	equ	0xFF6
  6171                           tablat	equ	0xFF5
  6172                           prodh	equ	0xFF4
  6173                           prodl	equ	0xFF3
  6174                           intcon	equ	0xFF2
  6175                           postinc0	equ	0xFEE
  6176                           wreg	equ	0xFE8
  6177                           postdec1	equ	0xFE5
  6178                           fsr1h	equ	0xFE2
  6179                           fsr1l	equ	0xFE1
  6180                           postinc2	equ	0xFDE
  6181                           postdec2	equ	0xFDD
  6182                           fsr2h	equ	0xFDA
  6183                           fsr2l	equ	0xFD9
  6184                           status	equ	0xFD8
  6185                           
  6186 ;; *************** function _lcd_legend *****************
  6187 ;; Defined at:
  6188 ;;		line 159 in file "hmiMain.c"
  6189 ;; Parameters:    Size  Location     Type
  6190 ;;  opt             1    wreg     unsigned char 
  6191 ;; Auto vars:     Size  Location     Type
  6192 ;;  opt             1   37[BANK5 ] unsigned char 
  6193 ;;  aux             2   38[BANK5 ] unsigned int 
  6194 ;; Return value:  Size  Location     Type
  6195 ;;                  1    wreg      void 
  6196 ;; Registers used:
  6197 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6198 ;; Tracked objects:
  6199 ;;		On entry : 0/0
  6200 ;;		On exit  : 0/0
  6201 ;;		Unchanged: 0/0
  6202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6204 ;;      Locals:         0       0       0       0       0       0       3       0       0       0       0       0       
      +0       0       0       0
  6205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6206 ;;      Totals:         0       0       0       0       0       0       3       0       0       0       0       0       
      +0       0       0       0
  6207 ;;Total ram usage:        3 bytes
  6208 ;; Hardware stack levels used:    1
  6209 ;; Hardware stack levels required when called:   14
  6210 ;; This function calls:
  6211 ;;		_lcd_text
  6212 ;;		_strcpy
  6213 ;; This function is called by:
  6214 ;;		_main
  6215 ;; This function uses a non-reentrant model
  6216 ;;
  6217                           
  6218                           	psect	text15
  6219  003658                     __ptext15:
  6220                           	opt stack 0
  6221  003658                     _lcd_legend:
  6222                           	opt stack 16
  6223                           
  6224                           ; BSR set to: 1
  6225                           ;incstack = 0
  6226                           ;lcd_legend@opt stored from wreg
  6227  003658  0105               	movlb	5	; () banked
  6228  00365A  6F95               	movwf	lcd_legend@opt& (0+255),b
  6229                           
  6230                           ;hmiMain.c: 160: uint16_t aux = 0;
  6231  00365C  0E00               	movlw	0
  6232  00365E  0105               	movlb	5	; () banked
  6233  003660  6F97               	movwf	(lcd_legend@aux+1)& (0+255),b
  6234  003662  0E00               	movlw	0
  6235  003664  6F96               	movwf	lcd_legend@aux& (0+255),b
  6236                           
  6237                           ;hmiMain.c: 162: switch (opt) {
  6238  003666  D06F               	goto	l211
  6239  003668                     
  6240                           ; BSR set to: 5
  6241                           ;hmiMain.c: 164: strcpy(lcdText, "TARE:           ");
  6242                           
  6243                           ; BSR set to: 5
  6244  003668  0EDE               	movlw	low _lcdText
  6245  00366A  0100               	movlb	0	; () banked
  6246  00366C  6F93               	movwf	strcpy@to& (0+255),b
  6247  00366E  0E01               	movlw	high _lcdText
  6248  003670  6F94               	movwf	(strcpy@to+1)& (0+255),b
  6249  003672  0EAA               	movlw	low STR_1
  6250  003674  6F95               	movwf	strcpy@from& (0+255),b
  6251  003676  0EFF               	movlw	high STR_1
  6252  003678  6F96               	movwf	(strcpy@from+1)& (0+255),b
  6253  00367A  ECF3  F024         	call	_strcpy	;wreg free
  6254                           
  6255                           ;hmiMain.c: 165: aux = tara;
  6256  00367E  C1DC  F596         	movff	_tara,lcd_legend@aux
  6257  003682  C1DD  F597         	movff	_tara+1,lcd_legend@aux+1
  6258                           
  6259                           ;hmiMain.c: 166: if (aux >= 10000) {
  6260  003686  0E10               	movlw	16
  6261  003688  0105               	movlb	5	; () banked
  6262  00368A  5D96               	subwf	lcd_legend@aux& (0+255),w,b
  6263  00368C  0E27               	movlw	39
  6264  00368E  5997               	subwfb	(lcd_legend@aux+1)& (0+255),w,b
  6265  003690  A0D8               	btfss	status,0,c
  6266  003692  D012               	goto	u10060
  6267                           
  6268                           ; BSR set to: 5
  6269                           ;hmiMain.c: 167: lcdText[6] = 48;
  6270  003694  0E30               	movlw	48
  6271  003696  0101               	movlb	1	; () banked
  6272  003698  6FE4               	movwf	(_lcdText+6)& (0+255),b
  6273                           
  6274                           ;hmiMain.c: 168: while (aux > 10000) {
  6275  00369A  D007               	goto	l214
  6276  00369C                     
  6277                           ;hmiMain.c: 169: lcdText[6]++;
  6278                           
  6279                           ; BSR set to: 1
  6280  00369C  0101               	movlb	1	; () banked
  6281  00369E  2BE4               	incf	(_lcdText+6)& (0+255),f,b
  6282                           
  6283                           ; BSR set to: 1
  6284                           ;hmiMain.c: 170: aux -= 10000;
  6285  0036A0  0105               	movlb	5	; () banked
  6286  0036A2  0E10               	movlw	16
  6287  0036A4  5F96               	subwf	lcd_legend@aux& (0+255),f,b
  6288  0036A6  0E27               	movlw	39
  6289  0036A8  5B97               	subwfb	(lcd_legend@aux+1)& (0+255),f,b
  6290  0036AA                     l214:
  6291                           
  6292                           ; BSR set to: 5
  6293  0036AA  0E11               	movlw	17
  6294  0036AC  0105               	movlb	5	; () banked
  6295  0036AE  5D96               	subwf	lcd_legend@aux& (0+255),w,b
  6296  0036B0  0E27               	movlw	39
  6297  0036B2  5997               	subwfb	(lcd_legend@aux+1)& (0+255),w,b
  6298  0036B4  B0D8               	btfsc	status,0,c
  6299  0036B6  D7F2               	goto	l215
  6300  0036B8                     u10060:
  6301                           
  6302                           ; BSR set to: 5
  6303                           ;hmiMain.c: 171: }
  6304                           ;hmiMain.c: 172: }
  6305                           ;hmiMain.c: 173: lcdText[7] = 48;
  6306                           
  6307                           ; BSR set to: 5
  6308                           
  6309                           ; BSR set to: 5
  6310  0036B8  0E30               	movlw	48
  6311  0036BA  0101               	movlb	1	; () banked
  6312  0036BC  6FE5               	movwf	(_lcdText+7)& (0+255),b
  6313                           
  6314                           ;hmiMain.c: 174: while (aux >= 1000) {
  6315  0036BE  D007               	goto	l217
  6316  0036C0                     
  6317                           ;hmiMain.c: 175: lcdText[7]++;
  6318                           
  6319                           ; BSR set to: 1
  6320  0036C0  0101               	movlb	1	; () banked
  6321  0036C2  2BE5               	incf	(_lcdText+7)& (0+255),f,b
  6322                           
  6323                           ; BSR set to: 1
  6324                           ;hmiMain.c: 176: aux -= 1000;
  6325  0036C4  0105               	movlb	5	; () banked
  6326  0036C6  0EE8               	movlw	232
  6327  0036C8  5F96               	subwf	lcd_legend@aux& (0+255),f,b
  6328  0036CA  0E03               	movlw	3
  6329  0036CC  5B97               	subwfb	(lcd_legend@aux+1)& (0+255),f,b
  6330  0036CE                     l217:
  6331                           
  6332                           ; BSR set to: 5
  6333  0036CE  0EE8               	movlw	232
  6334  0036D0  0105               	movlb	5	; () banked
  6335  0036D2  5D96               	subwf	lcd_legend@aux& (0+255),w,b
  6336  0036D4  0E03               	movlw	3
  6337  0036D6  5997               	subwfb	(lcd_legend@aux+1)& (0+255),w,b
  6338  0036D8  B0D8               	btfsc	status,0,c
  6339  0036DA  D7F2               	goto	l218
  6340                           
  6341                           ; BSR set to: 5
  6342                           ;hmiMain.c: 177: }
  6343                           ;hmiMain.c: 178: lcdText[8] = '.';
  6344                           
  6345                           ; BSR set to: 5
  6346  0036DC  0E2E               	movlw	46
  6347  0036DE  0101               	movlb	1	; () banked
  6348  0036E0  6FE6               	movwf	(_lcdText+8)& (0+255),b
  6349                           
  6350                           ;hmiMain.c: 179: lcdText[9] = 48;
  6351  0036E2  0E30               	movlw	48
  6352  0036E4  6FE7               	movwf	(_lcdText+9)& (0+255),b
  6353                           
  6354                           ;hmiMain.c: 180: while (aux >= 100) {
  6355  0036E6  D007               	goto	l220
  6356  0036E8                     l9072:
  6357                           
  6358                           ;hmiMain.c: 181: lcdText[9]++;
  6359  0036E8  0101               	movlb	1	; () banked
  6360  0036EA  2BE7               	incf	(_lcdText+9)& (0+255),f,b
  6361                           
  6362                           ; BSR set to: 1
  6363                           ;hmiMain.c: 182: aux -= 100;
  6364  0036EC  0E64               	movlw	100
  6365  0036EE  0105               	movlb	5	; () banked
  6366  0036F0  5F96               	subwf	lcd_legend@aux& (0+255),f,b
  6367  0036F2  0E00               	movlw	0
  6368  0036F4  5B97               	subwfb	(lcd_legend@aux+1)& (0+255),f,b
  6369  0036F6                     l220:
  6370                           
  6371                           ; BSR set to: 5
  6372  0036F6  0105               	movlb	5	; () banked
  6373  0036F8  5197               	movf	(lcd_legend@aux+1)& (0+255),w,b
  6374  0036FA  E1F6               	bnz	l9072
  6375  0036FC  0E64               	movlw	100
  6376  0036FE  5D96               	subwf	lcd_legend@aux& (0+255),w,b
  6377  003700  B0D8               	btfsc	status,0,c
  6378  003702  D7F2               	goto	l221
  6379                           
  6380                           ; BSR set to: 5
  6381                           ;hmiMain.c: 183: }
  6382                           ;hmiMain.c: 184: lcdText[10] = 48;
  6383                           
  6384                           ; BSR set to: 5
  6385  003704  0E30               	movlw	48
  6386  003706  0101               	movlb	1	; () banked
  6387  003708  6FE8               	movwf	(_lcdText+10)& (0+255),b
  6388                           
  6389                           ;hmiMain.c: 185: while (aux >= 10) {
  6390  00370A  D007               	goto	l223
  6391  00370C                     l9080:
  6392                           
  6393                           ;hmiMain.c: 186: lcdText[10]++;
  6394  00370C  0101               	movlb	1	; () banked
  6395  00370E  2BE8               	incf	(_lcdText+10)& (0+255),f,b
  6396                           
  6397                           ; BSR set to: 1
  6398                           ;hmiMain.c: 187: aux -= 10;
  6399  003710  0E0A               	movlw	10
  6400  003712  0105               	movlb	5	; () banked
  6401  003714  5F96               	subwf	lcd_legend@aux& (0+255),f,b
  6402  003716  0E00               	movlw	0
  6403  003718  5B97               	subwfb	(lcd_legend@aux+1)& (0+255),f,b
  6404  00371A                     l223:
  6405                           
  6406                           ; BSR set to: 5
  6407  00371A  0105               	movlb	5	; () banked
  6408  00371C  5197               	movf	(lcd_legend@aux+1)& (0+255),w,b
  6409  00371E  E1F6               	bnz	l9080
  6410  003720  0E0A               	movlw	10
  6411  003722  5D96               	subwf	lcd_legend@aux& (0+255),w,b
  6412  003724  B0D8               	btfsc	status,0,c
  6413  003726  D7F2               	goto	l224
  6414                           
  6415                           ; BSR set to: 5
  6416                           ;hmiMain.c: 188: }
  6417                           ;hmiMain.c: 189: lcdText[11] = 48 + aux;
  6418                           
  6419                           ; BSR set to: 5
  6420  003728  5196               	movf	lcd_legend@aux& (0+255),w,b
  6421  00372A  0F30               	addlw	48
  6422  00372C  0101               	movlb	1	; () banked
  6423  00372E  6FE9               	movwf	(_lcdText+11)& (0+255),b
  6424                           
  6425                           ; BSR set to: 1
  6426                           ;hmiMain.c: 190: lcd_text(1, lcdText, 0);
  6427  003730  0EDE               	movlw	low _lcdText
  6428  003732  0105               	movlb	5	; () banked
  6429  003734  6F73               	movwf	lcd_text@msjPtr& (0+255),b
  6430  003736  0E01               	movlw	high _lcdText
  6431  003738  6F74               	movwf	(lcd_text@msjPtr+1)& (0+255),b
  6432  00373A  0E00               	movlw	0
  6433  00373C  6F75               	movwf	lcd_text@color& (0+255),b
  6434  00373E  0E01               	movlw	1
  6435  003740  ECB7  F00A         	call	_lcd_text
  6436                           
  6437                           ;hmiMain.c: 196: }
  6438                           
  6439                           ;hmiMain.c: 195: break;
  6440                           
  6441                           ;hmiMain.c: 194: default:
  6442                           
  6443                           ;hmiMain.c: 193: break;
  6444                           
  6445                           ;hmiMain.c: 192: case 2:
  6446                           
  6447                           ;hmiMain.c: 191: break;
  6448  003744  0012               	return	
  6449  003746                     l211:
  6450  003746  0105               	movlb	5	; () banked
  6451  003748  5195               	movf	lcd_legend@opt& (0+255),w,b
  6452                           
  6453                           ; Switch size 1, requested type "space"
  6454                           ; Number of cases is 2, Range of values is 1 to 2
  6455                           ; switch strategies available:
  6456                           ; Name         Instructions Cycles
  6457                           ; simple_byte            7     4 (average)
  6458                           ;	Chosen strategy is simple_byte
  6459  00374A  0A01               	xorlw	1	; case 1
  6460  00374C  B4D8               	btfsc	status,2,c
  6461  00374E  D78C               	goto	l212
  6462  003750  0A03               	xorlw	3	; case 2
  6463  003752  0012               	return	
  6464  003754                     __end_of_lcd_legend:
  6465                           	opt stack 0
  6466                           tblptru	equ	0xFF8
  6467                           tblptrh	equ	0xFF7
  6468                           tblptrl	equ	0xFF6
  6469                           tablat	equ	0xFF5
  6470                           prodh	equ	0xFF4
  6471                           prodl	equ	0xFF3
  6472                           intcon	equ	0xFF2
  6473                           postinc0	equ	0xFEE
  6474                           wreg	equ	0xFE8
  6475                           postdec1	equ	0xFE5
  6476                           fsr1h	equ	0xFE2
  6477                           fsr1l	equ	0xFE1
  6478                           postinc2	equ	0xFDE
  6479                           postdec2	equ	0xFDD
  6480                           fsr2h	equ	0xFDA
  6481                           fsr2l	equ	0xFD9
  6482                           status	equ	0xFD8
  6483                           
  6484 ;; *************** function _strcpy *****************
  6485 ;; Defined at:
  6486 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcpy.c"
  6487 ;; Parameters:    Size  Location     Type
  6488 ;;  to              2   51[BANK0 ] PTR unsigned char 
  6489 ;;		 -> lcdText(16), 
  6490 ;;  from            2   53[BANK0 ] PTR const unsigned char 
  6491 ;;		 -> STR_1(17), 
  6492 ;; Auto vars:     Size  Location     Type
  6493 ;;  cp              2   55[BANK0 ] PTR unsigned char 
  6494 ;;		 -> lcdText(16), 
  6495 ;; Return value:  Size  Location     Type
  6496 ;;                  2   51[BANK0 ] PTR unsigned char 
  6497 ;; Registers used:
  6498 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  6499 ;; Tracked objects:
  6500 ;;		On entry : 0/0
  6501 ;;		On exit  : 0/0
  6502 ;;		Unchanged: 0/0
  6503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6504 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6505 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6507 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6508 ;;Total ram usage:        6 bytes
  6509 ;; Hardware stack levels used:    1
  6510 ;; Hardware stack levels required when called:    9
  6511 ;; This function calls:
  6512 ;;		Nothing
  6513 ;; This function is called by:
  6514 ;;		_lcd_legend
  6515 ;; This function uses a non-reentrant model
  6516 ;;
  6517                           
  6518                           	psect	text16
  6519  0049E6                     __ptext16:
  6520                           	opt stack 0
  6521  0049E6                     _strcpy:
  6522                           	opt stack 20
  6523                           
  6524                           ;incstack = 0
  6525  0049E6  C093  F097         	movff	strcpy@to,strcpy@cp
  6526  0049EA  C094  F098         	movff	strcpy@to+1,strcpy@cp+1
  6527  0049EE  D005               	goto	l1680
  6528  0049F0  0100               	movlb	0	; () banked
  6529  0049F2  4B97               	infsnz	strcpy@cp& (0+255),f,b
  6530  0049F4  2B98               	incf	(strcpy@cp+1)& (0+255),f,b
  6531  0049F6  4B95               	infsnz	strcpy@from& (0+255),f,b
  6532  0049F8  2B96               	incf	(strcpy@from+1)& (0+255),f,b
  6533  0049FA                     l1680:
  6534                           
  6535                           ; BSR set to: 0
  6536  0049FA  C095  FFF6         	movff	strcpy@from,tblptrl
  6537  0049FE  C096  FFF7         	movff	strcpy@from+1,tblptrh
  6538  004A02                     	if	0	;tblptru may be non-zero
  6539  004A02                     	endif
  6540  004A02                     	if	0	;tblptru may be non-zero
  6541  004A02                     	endif
  6542  004A02  C097  FFD9         	movff	strcpy@cp,fsr2l
  6543  004A06  C098  FFDA         	movff	strcpy@cp+1,fsr2h
  6544  004A0A  0008               	tblrd		*
  6545  004A0C  CFF5 FFDF          	movff	tablat,indf2
  6546  004A10  50DF               	movf	indf2,w,c
  6547  004A12  B4D8               	btfsc	status,2,c
  6548  004A14  0012               	return	
  6549  004A16  D7EC               	goto	l1681
  6550  004A18                     __end_of_strcpy:
  6551                           	opt stack 0
  6552                           tblptru	equ	0xFF8
  6553                           tblptrh	equ	0xFF7
  6554                           tblptrl	equ	0xFF6
  6555                           tablat	equ	0xFF5
  6556                           prodh	equ	0xFF4
  6557                           prodl	equ	0xFF3
  6558                           intcon	equ	0xFF2
  6559                           postinc0	equ	0xFEE
  6560                           wreg	equ	0xFE8
  6561                           postdec1	equ	0xFE5
  6562                           fsr1h	equ	0xFE2
  6563                           fsr1l	equ	0xFE1
  6564                           indf2	equ	0xFDF
  6565                           postinc2	equ	0xFDE
  6566                           postdec2	equ	0xFDD
  6567                           fsr2h	equ	0xFDA
  6568                           fsr2l	equ	0xFD9
  6569                           status	equ	0xFD8
  6570                           
  6571 ;; *************** function _lcd_text *****************
  6572 ;; Defined at:
  6573 ;;		line 254 in file "tft.c"
  6574 ;; Parameters:    Size  Location     Type
  6575 ;;  renglon         1    wreg     unsigned char 
  6576 ;;  msjPtr          2    3[BANK5 ] PTR unsigned char 
  6577 ;;		 -> memBuff1(16), msjCANCEL(16), msjCONFIRM(16), menu_6@mBlank(16), 
  6578 ;;		 -> msjCHANGE(16), menu_5@mBlank(16), memPort(16), menu_45@mBlank(16), 
  6579 ;;		 -> memIp(16), menu_44@mBlank(16), memMac(16), menu_43@mBlank(16), 
  6580 ;;		 -> memSubnet(16), menu_42@mBlank(16), memGateway(16), menu_41@mBlank(16), 
  6581 ;;		 -> msjPORT(16), msjIP(16), msjMAC(16), msjSUBNETMASK(16), 
  6582 ;;		 -> msjGATEWAY(16), msjBAUD4(16), msjBAUD3(16), msjBAUD2(16), 
  6583 ;;		 -> msjBAUD1(16), menu_31@mBlank(16), msjOFF(16), msjON(16), 
  6584 ;;		 -> msjBAUD(16), menu_3@mBlank(16), menu_27@mBlank(16), msjVALUEINGR(16), 
  6585 ;;		 -> menu_26@mBlank(16), msjTAREINGR(16), menu_25@mBlank(16), msjFILTER3(16), 
  6586 ;;		 -> msjFILTER2(16), msjFILTER1(16), menu_24@mBlank(16), msjWEIGHTINGR(16), 
  6587 ;;		 -> menu_23@mBlank(16), msjDIVISION3(16), msjDIVISION2(16), msjDIVISION1(16), 
  6588 ;;		 -> msjDIVISION0(16), menu_22@mBlank(16), msjWAIT(16), msjDONE(16), 
  6589 ;;		 -> menu_21@mBlank(16), msjRANGE(16), msjTHRESHOLD(16), msjSTEP(16), 
  6590 ;;		 -> msjFILTER(16), msjPATTERN(16), msjDIVISIONS(16), msjZERO(16), 
  6591 ;;		 -> msjFINISH(16), msjRESET(16), msjPASSWORD(16), msjETHERNET(16), 
  6592 ;;		 -> msjSERIAL(16), msjCALIBRATE(16), menu_1@mBlank(16), menu_text(16), 
  6593 ;;		 -> lcdText(16), 
  6594 ;;  color           1    5[BANK5 ] unsigned char 
  6595 ;; Auto vars:     Size  Location     Type
  6596 ;;  renglon         1   30[BANK5 ] unsigned char 
  6597 ;;  msjPtrCpy      15   15[BANK5 ] unsigned char [15]
  6598 ;;  k               2   35[BANK5 ] unsigned int 
  6599 ;;  j               2   33[BANK5 ] unsigned int 
  6600 ;;  i               2   31[BANK5 ] unsigned int 
  6601 ;; Return value:  Size  Location     Type
  6602 ;;                  1    wreg      void 
  6603 ;; Registers used:
  6604 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6605 ;; Tracked objects:
  6606 ;;		On entry : 0/0
  6607 ;;		On exit  : 0/0
  6608 ;;		Unchanged: 0/0
  6609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6610 ;;      Params:         0       0       0       0       0       0       3       0       0       0       0       0       
      +0       0       0       0
  6611 ;;      Locals:         0       0       0       0       0       0      26       0       0       0       0       0       
      +0       0       0       0
  6612 ;;      Temps:          0       0       0       0       0       0       5       0       0       0       0       0       
      +0       0       0       0
  6613 ;;      Totals:         0       0       0       0       0       0      34       0       0       0       0       0       
      +0       0       0       0
  6614 ;;Total ram usage:       34 bytes
  6615 ;; Hardware stack levels used:    1
  6616 ;; Hardware stack levels required when called:   13
  6617 ;; This function calls:
  6618 ;;		___wmul
  6619 ;;		_bitRead
  6620 ;;		_lcd_pix
  6621 ;;		_lcd_pix_color
  6622 ;; This function is called by:
  6623 ;;		_lcd_legend
  6624 ;; This function uses a non-reentrant model
  6625 ;;
  6626                           
  6627                           	psect	text17
  6628  00156E                     __ptext17:
  6629                           	opt stack 0
  6630  00156E                     _lcd_text:
  6631                           	opt stack 16
  6632                           
  6633                           ;incstack = 0
  6634                           ;lcd_text@renglon stored from wreg
  6635  00156E  0105               	movlb	5	; () banked
  6636  001570  6F8E               	movwf	lcd_text@renglon& (0+255),b
  6637                           
  6638                           ;tft.c: 255: unsigned int i,j,k;
  6639                           ;tft.c: 256: char msjPtrCpy[15];
  6640                           ;tft.c: 258: switch (color) {
  6641  001572  D222               	goto	l474
  6642  001574                     
  6643                           ;tft.c: 260: for (k=0;k<15;k++) {
  6644  001574  0E00               	movlw	0
  6645  001576  0105               	movlb	5	; () banked
  6646  001578  6F94               	movwf	(lcd_text@k+1)& (0+255),b
  6647  00157A  0E00               	movlw	0
  6648  00157C  6F93               	movwf	lcd_text@k& (0+255),b
  6649                           
  6650                           ; BSR set to: 5
  6651  00157E  5194               	movf	(lcd_text@k+1)& (0+255),w,b
  6652  001580  E105               	bnz	u9620
  6653  001582  0E0F               	movlw	15
  6654  001584  5D93               	subwf	lcd_text@k& (0+255),w,b
  6655  001586  B0D8               	btfsc	status,0,c
  6656  001588  0012               	return	
  6657  00158A  D001               	goto	l476
  6658  00158C                     u9620:
  6659                           
  6660                           ; BSR set to: 5
  6661  00158C  0012               	return	
  6662  00158E                     l476:
  6663                           
  6664                           ; BSR set to: 5
  6665                           ;tft.c: 261: if (*(msjPtr+k) == 32 || *(msjPtr+k) == 0) {
  6666                           
  6667                           ; BSR set to: 5
  6668  00158E  5193               	movf	lcd_text@k& (0+255),w,b
  6669  001590  2573               	addwf	lcd_text@msjPtr& (0+255),w,b
  6670  001592  6ED9               	movwf	fsr2l,c
  6671  001594  5194               	movf	(lcd_text@k+1)& (0+255),w,b
  6672  001596  2174               	addwfc	(lcd_text@msjPtr+1)& (0+255),w,b
  6673  001598  6EDA               	movwf	fsr2h,c
  6674  00159A  0E20               	movlw	32
  6675  00159C  18DE               	xorwf	postinc2,w,c
  6676  00159E  B4D8               	btfsc	status,2,c
  6677  0015A0  D009               	goto	u9640
  6678                           
  6679                           ; BSR set to: 5
  6680  0015A2  5193               	movf	lcd_text@k& (0+255),w,b
  6681  0015A4  2573               	addwf	lcd_text@msjPtr& (0+255),w,b
  6682  0015A6  6ED9               	movwf	fsr2l,c
  6683  0015A8  5194               	movf	(lcd_text@k+1)& (0+255),w,b
  6684  0015AA  2174               	addwfc	(lcd_text@msjPtr+1)& (0+255),w,b
  6685  0015AC  6EDA               	movwf	fsr2h,c
  6686  0015AE  50DF               	movf	indf2,w,c
  6687  0015B0  A4D8               	btfss	status,2,c
  6688  0015B2  D008               	goto	l478
  6689  0015B4                     u9640:
  6690                           
  6691                           ; BSR set to: 5
  6692                           ;tft.c: 263: *(msjPtrCpy+k) = 38;
  6693                           
  6694                           ; BSR set to: 5
  6695  0015B4  0E7F               	movlw	low lcd_text@msjPtrCpy
  6696  0015B6  2593               	addwf	lcd_text@k& (0+255),w,b
  6697  0015B8  6ED9               	movwf	fsr2l,c
  6698  0015BA  0E05               	movlw	high lcd_text@msjPtrCpy
  6699  0015BC  2194               	addwfc	(lcd_text@k+1)& (0+255),w,b
  6700  0015BE  6EDA               	movwf	fsr2h,c
  6701  0015C0  0E26               	movlw	38
  6702  0015C2  6EDF               	movwf	indf2,c
  6703  0015C4                     l478:
  6704                           
  6705                           ; BSR set to: 5
  6706                           ;tft.c: 264: }
  6707                           ;tft.c: 265: if (*(msjPtr+k) > 47 && *(msjPtr+k) < 58) {
  6708  0015C4  5193               	movf	lcd_text@k& (0+255),w,b
  6709  0015C6  2573               	addwf	lcd_text@msjPtr& (0+255),w,b
  6710  0015C8  6ED9               	movwf	fsr2l,c
  6711  0015CA  5194               	movf	(lcd_text@k+1)& (0+255),w,b
  6712  0015CC  2174               	addwfc	(lcd_text@msjPtr+1)& (0+255),w,b
  6713  0015CE  6EDA               	movwf	fsr2h,c
  6714  0015D0  0E2F               	movlw	47
  6715  0015D2  64DF               	cpfsgt	indf2,c
  6716  0015D4  D018               	goto	l481
  6717                           
  6718                           ; BSR set to: 5
  6719  0015D6  5193               	movf	lcd_text@k& (0+255),w,b
  6720  0015D8  2573               	addwf	lcd_text@msjPtr& (0+255),w,b
  6721  0015DA  6ED9               	movwf	fsr2l,c
  6722  0015DC  5194               	movf	(lcd_text@k+1)& (0+255),w,b
  6723  0015DE  2174               	addwfc	(lcd_text@msjPtr+1)& (0+255),w,b
  6724  0015E0  6EDA               	movwf	fsr2h,c
  6725  0015E2  0E3A               	movlw	58
  6726  0015E4  60DF               	cpfslt	indf2,c
  6727  0015E6  D00F               	goto	l481
  6728                           
  6729                           ; BSR set to: 5
  6730                           ;tft.c: 267: *(msjPtrCpy+k) = *(msjPtr+k) - 48;
  6731  0015E8  0E7F               	movlw	low lcd_text@msjPtrCpy
  6732  0015EA  2593               	addwf	lcd_text@k& (0+255),w,b
  6733  0015EC  6ED9               	movwf	fsr2l,c
  6734  0015EE  0E05               	movlw	high lcd_text@msjPtrCpy
  6735  0015F0  2194               	addwfc	(lcd_text@k+1)& (0+255),w,b
  6736  0015F2  6EDA               	movwf	fsr2h,c
  6737  0015F4  5193               	movf	lcd_text@k& (0+255),w,b
  6738  0015F6  2573               	addwf	lcd_text@msjPtr& (0+255),w,b
  6739  0015F8  6EE1               	movwf	fsr1l,c
  6740  0015FA  5194               	movf	(lcd_text@k+1)& (0+255),w,b
  6741  0015FC  2174               	addwfc	(lcd_text@msjPtr+1)& (0+255),w,b
  6742  0015FE  6EE2               	movwf	fsr1h,c
  6743  001600  50E7               	movf	indf1,w,c
  6744  001602  0FD0               	addlw	208
  6745  001604  6EDF               	movwf	indf2,c
  6746  001606                     l481:
  6747                           
  6748                           ; BSR set to: 5
  6749                           ;tft.c: 268: }
  6750                           ;tft.c: 269: if (*(msjPtr+k) == 58) {
  6751                           
  6752                           ; BSR set to: 5
  6753  001606  5193               	movf	lcd_text@k& (0+255),w,b
  6754  001608  2573               	addwf	lcd_text@msjPtr& (0+255),w,b
  6755  00160A  6ED9               	movwf	fsr2l,c
  6756  00160C  5194               	movf	(lcd_text@k+1)& (0+255),w,b
  6757  00160E  2174               	addwfc	(lcd_text@msjPtr+1)& (0+255),w,b
  6758  001610  6EDA               	movwf	fsr2h,c
  6759  001612  0E3A               	movlw	58
  6760  001614  18DE               	xorwf	postinc2,w,c
  6761  001616  A4D8               	btfss	status,2,c
  6762  001618  D008               	goto	l482
  6763                           
  6764                           ; BSR set to: 5
  6765                           ;tft.c: 270: *(msjPtrCpy+k) = 10;
  6766  00161A  0E7F               	movlw	low lcd_text@msjPtrCpy
  6767  00161C  2593               	addwf	lcd_text@k& (0+255),w,b
  6768  00161E  6ED9               	movwf	fsr2l,c
  6769  001620  0E05               	movlw	high lcd_text@msjPtrCpy
  6770  001622  2194               	addwfc	(lcd_text@k+1)& (0+255),w,b
  6771  001624  6EDA               	movwf	fsr2h,c
  6772  001626  0E0A               	movlw	10
  6773  001628  6EDF               	movwf	indf2,c
  6774  00162A                     l482:
  6775                           
  6776                           ; BSR set to: 5
  6777                           ;tft.c: 271: }
  6778                           ;tft.c: 272: if (*(msjPtr+k) > 64) {
  6779  00162A  5193               	movf	lcd_text@k& (0+255),w,b
  6780  00162C  2573               	addwf	lcd_text@msjPtr& (0+255),w,b
  6781  00162E  6ED9               	movwf	fsr2l,c
  6782  001630  5194               	movf	(lcd_text@k+1)& (0+255),w,b
  6783  001632  2174               	addwfc	(lcd_text@msjPtr+1)& (0+255),w,b
  6784  001634  6EDA               	movwf	fsr2h,c
  6785  001636  0E40               	movlw	64
  6786  001638  64DF               	cpfsgt	indf2,c
  6787  00163A  D00F               	goto	l483
  6788                           
  6789                           ; BSR set to: 5
  6790                           ;tft.c: 274: *(msjPtrCpy+k) = *(msjPtr+k) - 53;
  6791  00163C  0E7F               	movlw	low lcd_text@msjPtrCpy
  6792  00163E  2593               	addwf	lcd_text@k& (0+255),w,b
  6793  001640  6ED9               	movwf	fsr2l,c
  6794  001642  0E05               	movlw	high lcd_text@msjPtrCpy
  6795  001644  2194               	addwfc	(lcd_text@k+1)& (0+255),w,b
  6796  001646  6EDA               	movwf	fsr2h,c
  6797  001648  5193               	movf	lcd_text@k& (0+255),w,b
  6798  00164A  2573               	addwf	lcd_text@msjPtr& (0+255),w,b
  6799  00164C  6EE1               	movwf	fsr1l,c
  6800  00164E  5194               	movf	(lcd_text@k+1)& (0+255),w,b
  6801  001650  2174               	addwfc	(lcd_text@msjPtr+1)& (0+255),w,b
  6802  001652  6EE2               	movwf	fsr1h,c
  6803  001654  50E7               	movf	indf1,w,c
  6804  001656  0FCB               	addlw	203
  6805  001658  6EDF               	movwf	indf2,c
  6806  00165A                     l483:
  6807                           
  6808                           ; BSR set to: 5
  6809                           ;tft.c: 275: }
  6810                           ;tft.c: 277: if (*(msjPtr+k) == 46) {
  6811                           
  6812                           ; BSR set to: 5
  6813  00165A  5193               	movf	lcd_text@k& (0+255),w,b
  6814  00165C  2573               	addwf	lcd_text@msjPtr& (0+255),w,b
  6815  00165E  6ED9               	movwf	fsr2l,c
  6816  001660  5194               	movf	(lcd_text@k+1)& (0+255),w,b
  6817  001662  2174               	addwfc	(lcd_text@msjPtr+1)& (0+255),w,b
  6818  001664  6EDA               	movwf	fsr2h,c
  6819  001666  0E2E               	movlw	46
  6820  001668  18DE               	xorwf	postinc2,w,c
  6821  00166A  A4D8               	btfss	status,2,c
  6822  00166C  D008               	goto	l484
  6823                           
  6824                           ; BSR set to: 5
  6825                           ;tft.c: 278: *(msjPtrCpy+k) = 39;
  6826  00166E  0E7F               	movlw	low lcd_text@msjPtrCpy
  6827  001670  2593               	addwf	lcd_text@k& (0+255),w,b
  6828  001672  6ED9               	movwf	fsr2l,c
  6829  001674  0E05               	movlw	high lcd_text@msjPtrCpy
  6830  001676  2194               	addwfc	(lcd_text@k+1)& (0+255),w,b
  6831  001678  6EDA               	movwf	fsr2h,c
  6832  00167A  0E27               	movlw	39
  6833  00167C  6EDF               	movwf	indf2,c
  6834  00167E                     l484:
  6835                           
  6836                           ; BSR set to: 5
  6837                           ;tft.c: 279: }
  6838                           ;tft.c: 281: for (i=0;i<8;i++) {
  6839                           
  6840                           ; BSR set to: 5
  6841  00167E  0E00               	movlw	0
  6842  001680  6F90               	movwf	(lcd_text@i+1)& (0+255),b
  6843  001682  0E00               	movlw	0
  6844  001684  6F8F               	movwf	lcd_text@i& (0+255),b
  6845                           
  6846                           ; BSR set to: 5
  6847  001686  5190               	movf	(lcd_text@i+1)& (0+255),w,b
  6848  001688  E105               	bnz	u9700
  6849  00168A  0E08               	movlw	8
  6850  00168C  5D8F               	subwf	lcd_text@i& (0+255),w,b
  6851  00168E  B0D8               	btfsc	status,0,c
  6852  001690  D07D               	goto	u9730
  6853  001692  D001               	goto	l485
  6854  001694                     u9700:
  6855                           
  6856                           ; BSR set to: 5
  6857  001694  D07B               	goto	u9730
  6858  001696                     l485:
  6859                           
  6860                           ; BSR set to: 5
  6861                           ;tft.c: 282: for (j=0;j<8;j++) {
  6862                           
  6863                           ; BSR set to: 5
  6864  001696  0E00               	movlw	0
  6865  001698  6F92               	movwf	(lcd_text@j+1)& (0+255),b
  6866  00169A  0E00               	movlw	0
  6867  00169C  6F91               	movwf	lcd_text@j& (0+255),b
  6868  00169E                     l8764:
  6869                           
  6870                           ; BSR set to: 5
  6871  00169E  5192               	movf	(lcd_text@j+1)& (0+255),w,b
  6872  0016A0  E170               	bnz	l8776
  6873  0016A2  0E08               	movlw	8
  6874  0016A4  5D91               	subwf	lcd_text@j& (0+255),w,b
  6875  0016A6  B0D8               	btfsc	status,0,c
  6876  0016A8  D06C               	goto	u9720
  6877                           
  6878                           ; BSR set to: 5
  6879                           ;tft.c: 283: lcd_pix_color(1+j+(renglon-1)*10,1+i+k*8,bitRead(texto[*(msjPtrCpy+k)][i],j
      +                          ),4);
  6880                           
  6881                           ; BSR set to: 5
  6882                           
  6883                           ; BSR set to: 5
  6884  0016AA  0EFF               	movlw	255
  6885  0016AC  258E               	addwf	lcd_text@renglon& (0+255),w,b
  6886  0016AE  0100               	movlb	0	; () banked
  6887  0016B0  6F93               	movwf	___wmul@multiplier& (0+255),b
  6888  0016B2  6B94               	clrf	(___wmul@multiplier+1)& (0+255),b
  6889  0016B4  0EFF               	movlw	255
  6890  0016B6  2394               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
  6891  0016B8  0E00               	movlw	0
  6892  0016BA  6F96               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6893  0016BC  0E0A               	movlw	10
  6894  0016BE  6F95               	movwf	___wmul@multiplicand& (0+255),b
  6895  0016C0  EC64  F025         	call	___wmul	;wreg free
  6896  0016C4  0105               	movlb	5	; () banked
  6897  0016C6  5191               	movf	lcd_text@j& (0+255),w,b
  6898  0016C8  0100               	movlb	0	; () banked
  6899  0016CA  2793               	addwf	?___wmul& (0+255),f,b
  6900  0016CC  0105               	movlb	5	; () banked
  6901  0016CE  5192               	movf	(lcd_text@j+1)& (0+255),w,b
  6902  0016D0  0100               	movlb	0	; () banked
  6903  0016D2  2394               	addwfc	(?___wmul+1)& (0+255),f,b
  6904  0016D4  0E01               	movlw	1
  6905  0016D6  2593               	addwf	?___wmul& (0+255),w,b
  6906  0016D8  0105               	movlb	5	; () banked
  6907  0016DA  6F7B               	movwf	_lcd_text$2363& (0+255),b
  6908  0016DC  0E00               	movlw	0
  6909  0016DE  0100               	movlb	0	; () banked
  6910  0016E0  2194               	addwfc	(?___wmul+1)& (0+255),w,b
  6911  0016E2  0105               	movlb	5	; () banked
  6912  0016E4  6F7C               	movwf	(_lcd_text$2363+1)& (0+255),b
  6913                           
  6914                           ; BSR set to: 5
  6915                           ;tft.c: 283: lcd_pix_color(1+j+(renglon-1)*10,1+i+k*8,bitRead(texto[*(msjPtrCpy+k)][i],j
      +                          ),4);
  6916  0016E6  C57B  F1F6         	movff	_lcd_text$2363,lcd_pix_color@x
  6917  0016EA  C57C  F1F7         	movff	_lcd_text$2363+1,lcd_pix_color@x+1
  6918  0016EE  C593  F576         	movff	lcd_text@k,??_lcd_text
  6919  0016F2  C594  F577         	movff	lcd_text@k+1,??_lcd_text+1
  6920  0016F6  90D8               	bcf	status,0,c
  6921  0016F8  3776               	rlcf	??_lcd_text& (0+255),f,b
  6922  0016FA  3777               	rlcf	(??_lcd_text+1)& (0+255),f,b
  6923  0016FC  90D8               	bcf	status,0,c
  6924  0016FE  3776               	rlcf	??_lcd_text& (0+255),f,b
  6925  001700  3777               	rlcf	(??_lcd_text+1)& (0+255),f,b
  6926  001702  90D8               	bcf	status,0,c
  6927  001704  3776               	rlcf	??_lcd_text& (0+255),f,b
  6928  001706  3777               	rlcf	(??_lcd_text+1)& (0+255),f,b
  6929  001708  518F               	movf	lcd_text@i& (0+255),w,b
  6930  00170A  2776               	addwf	??_lcd_text& (0+255),f,b
  6931  00170C  5190               	movf	(lcd_text@i+1)& (0+255),w,b
  6932  00170E  2377               	addwfc	(??_lcd_text+1)& (0+255),f,b
  6933  001710  0E01               	movlw	1
  6934  001712  2576               	addwf	??_lcd_text& (0+255),w,b
  6935  001714  0101               	movlb	1	; () banked
  6936  001716  6FF8               	movwf	lcd_pix_color@y& (0+255),b
  6937  001718  0E00               	movlw	0
  6938  00171A  0105               	movlb	5	; () banked
  6939  00171C  2177               	addwfc	(??_lcd_text+1)& (0+255),w,b
  6940  00171E  0101               	movlb	1	; () banked
  6941  001720  6FF9               	movwf	(lcd_pix_color@y+1)& (0+255),b
  6942  001722  0E7F               	movlw	low lcd_text@msjPtrCpy
  6943  001724  0105               	movlb	5	; () banked
  6944  001726  2593               	addwf	lcd_text@k& (0+255),w,b
  6945  001728  6ED9               	movwf	fsr2l,c
  6946  00172A  0E05               	movlw	high lcd_text@msjPtrCpy
  6947  00172C  2194               	addwfc	(lcd_text@k+1)& (0+255),w,b
  6948  00172E  6EDA               	movwf	fsr2h,c
  6949  001730  50DF               	movf	indf2,w,c
  6950  001732  6F78               	movwf	(??_lcd_text+2)& (0+255),b
  6951  001734  5178               	movf	(??_lcd_text+2)& (0+255),w,b
  6952  001736  0D08               	mullw	8
  6953  001738  0E3F               	movlw	low _texto
  6954  00173A  6F79               	movwf	(??_lcd_text+3)& (0+255),b
  6955  00173C  0EFE               	movlw	high _texto
  6956  00173E  6F7A               	movwf	(??_lcd_text+4)& (0+255),b
  6957  001740  50F3               	movf	prodl,w,c
  6958  001742  2779               	addwf	(??_lcd_text+3)& (0+255),f,b
  6959  001744  50F4               	movf	prodh,w,c
  6960  001746  237A               	addwfc	(??_lcd_text+4)& (0+255),f,b
  6961  001748  518F               	movf	lcd_text@i& (0+255),w,b
  6962  00174A  2779               	addwf	(??_lcd_text+3)& (0+255),f,b
  6963  00174C  5190               	movf	(lcd_text@i+1)& (0+255),w,b
  6964  00174E  237A               	addwfc	(??_lcd_text+4)& (0+255),f,b
  6965  001750  C579  FFF6         	movff	??_lcd_text+3,tblptrl
  6966  001754  C57A  FFF7         	movff	??_lcd_text+4,tblptrh
  6967  001758                     	if	0	;tblptru may be non-zero
  6968  001758                     	endif
  6969  001758                     	if	0	;tblptru may be non-zero
  6970  001758                     	endif
  6971  001758  0008               	tblrd		*
  6972  00175A  50F5               	movf	tablat,w,c
  6973  00175C  0100               	movlb	0	; () banked
  6974  00175E  6F93               	movwf	bitRead@number& (0+255),b
  6975  001760  6B94               	clrf	(bitRead@number+1)& (0+255),b
  6976  001762  C591  F095         	movff	lcd_text@j,bitRead@position
  6977  001766  C592  F096         	movff	lcd_text@j+1,bitRead@position+1
  6978  00176A  EC56  F024         	call	_bitRead	;wreg free
  6979  00176E  0101               	movlb	1	; () banked
  6980  001770  6FFA               	movwf	lcd_pix_color@c& (0+255),b
  6981  001772  0E04               	movlw	4
  6982  001774  6FFB               	movwf	lcd_pix_color@size& (0+255),b
  6983  001776  EC0D  F018         	call	_lcd_pix_color	;wreg free
  6984  00177A  0105               	movlb	5	; () banked
  6985  00177C  4B91               	infsnz	lcd_text@j& (0+255),f,b
  6986  00177E  2B92               	incf	(lcd_text@j+1)& (0+255),f,b
  6987  001780  D78E               	goto	l8764
  6988  001782                     u9720:
  6989  001782                     l8776:
  6990                           
  6991                           ; BSR set to: 5
  6992  001782  4B8F               	infsnz	lcd_text@i& (0+255),f,b
  6993  001784  2B90               	incf	(lcd_text@i+1)& (0+255),f,b
  6994                           
  6995                           ; BSR set to: 5
  6996  001786  5190               	movf	(lcd_text@i+1)& (0+255),w,b
  6997  001788  E101               	bnz	l8780
  6998  00178A  D77F               	goto	L1
  6999  00178C                     u9730:
  7000  00178C                     l8780:
  7001                           
  7002                           ; BSR set to: 5
  7003  00178C  4B93               	infsnz	lcd_text@k& (0+255),f,b
  7004  00178E  2B94               	incf	(lcd_text@k+1)& (0+255),f,b
  7005                           
  7006                           ; BSR set to: 5
  7007  001790  5194               	movf	(lcd_text@k+1)& (0+255),w,b
  7008  001792  E101               	bnz	u9740
  7009  001794  D6F6               	goto	L2
  7010  001796                     u9740:
  7011                           
  7012                           ; BSR set to: 5
  7013                           ;tft.c: 284: }
  7014                           ;tft.c: 285: }
  7015                           ;tft.c: 286: }
  7016                           ;tft.c: 287: break;
  7017  001796  0012               	return	
  7018  001798                     
  7019                           ; BSR set to: 5
  7020                           ;tft.c: 289: for (k=0;k<15;k++) {
  7021                           
  7022                           ; BSR set to: 5
  7023  001798  0E00               	movlw	0
  7024  00179A  6F94               	movwf	(lcd_text@k+1)& (0+255),b
  7025  00179C  0E00               	movlw	0
  7026  00179E  6F93               	movwf	lcd_text@k& (0+255),b
  7027                           
  7028                           ; BSR set to: 5
  7029  0017A0  5194               	movf	(lcd_text@k+1)& (0+255),w,b
  7030  0017A2  E105               	bnz	u9750
  7031  0017A4  0E0F               	movlw	15
  7032  0017A6  5D93               	subwf	lcd_text@k& (0+255),w,b
  7033  0017A8  B0D8               	btfsc	status,0,c
  7034  0017AA  0012               	return	
  7035  0017AC  D001               	goto	l491
  7036  0017AE                     u9750:
  7037                           
  7038                           ; BSR set to: 5
  7039  0017AE  0012               	return	
  7040  0017B0                     l491:
  7041                           
  7042                           ; BSR set to: 5
  7043                           ;tft.c: 290: if (*(msjPtr+k) == 32 || *(msjPtr+k) == 0) {
  7044                           
  7045                           ; BSR set to: 5
  7046  0017B0  5193               	movf	lcd_text@k& (0+255),w,b
  7047  0017B2  2573               	addwf	lcd_text@msjPtr& (0+255),w,b
  7048  0017B4  6ED9               	movwf	fsr2l,c
  7049  0017B6  5194               	movf	(lcd_text@k+1)& (0+255),w,b
  7050  0017B8  2174               	addwfc	(lcd_text@msjPtr+1)& (0+255),w,b
  7051  0017BA  6EDA               	movwf	fsr2h,c
  7052  0017BC  0E20               	movlw	32
  7053  0017BE  18DE               	xorwf	postinc2,w,c
  7054  0017C0  B4D8               	btfsc	status,2,c
  7055  0017C2  D009               	goto	u9770
  7056                           
  7057                           ; BSR set to: 5
  7058  0017C4  5193               	movf	lcd_text@k& (0+255),w,b
  7059  0017C6  2573               	addwf	lcd_text@msjPtr& (0+255),w,b
  7060  0017C8  6ED9               	movwf	fsr2l,c
  7061  0017CA  5194               	movf	(lcd_text@k+1)& (0+255),w,b
  7062  0017CC  2174               	addwfc	(lcd_text@msjPtr+1)& (0+255),w,b
  7063  0017CE  6EDA               	movwf	fsr2h,c
  7064  0017D0  50DF               	movf	indf2,w,c
  7065  0017D2  A4D8               	btfss	status,2,c
  7066  0017D4  D008               	goto	l493
  7067  0017D6                     u9770:
  7068                           
  7069                           ; BSR set to: 5
  7070                           ;tft.c: 292: *(msjPtrCpy+k) = 38;
  7071                           
  7072                           ; BSR set to: 5
  7073  0017D6  0E7F               	movlw	low lcd_text@msjPtrCpy
  7074  0017D8  2593               	addwf	lcd_text@k& (0+255),w,b
  7075  0017DA  6ED9               	movwf	fsr2l,c
  7076  0017DC  0E05               	movlw	high lcd_text@msjPtrCpy
  7077  0017DE  2194               	addwfc	(lcd_text@k+1)& (0+255),w,b
  7078  0017E0  6EDA               	movwf	fsr2h,c
  7079  0017E2  0E26               	movlw	38
  7080  0017E4  6EDF               	movwf	indf2,c
  7081  0017E6                     l493:
  7082                           
  7083                           ; BSR set to: 5
  7084                           ;tft.c: 293: }
  7085                           ;tft.c: 294: if (*(msjPtr+k) > 47 && *(msjPtr+k) < 58) {
  7086  0017E6  5193               	movf	lcd_text@k& (0+255),w,b
  7087  0017E8  2573               	addwf	lcd_text@msjPtr& (0+255),w,b
  7088  0017EA  6ED9               	movwf	fsr2l,c
  7089  0017EC  5194               	movf	(lcd_text@k+1)& (0+255),w,b
  7090  0017EE  2174               	addwfc	(lcd_text@msjPtr+1)& (0+255),w,b
  7091  0017F0  6EDA               	movwf	fsr2h,c
  7092  0017F2  0E2F               	movlw	47
  7093  0017F4  64DF               	cpfsgt	indf2,c
  7094  0017F6  D018               	goto	l496
  7095                           
  7096                           ; BSR set to: 5
  7097  0017F8  5193               	movf	lcd_text@k& (0+255),w,b
  7098  0017FA  2573               	addwf	lcd_text@msjPtr& (0+255),w,b
  7099  0017FC  6ED9               	movwf	fsr2l,c
  7100  0017FE  5194               	movf	(lcd_text@k+1)& (0+255),w,b
  7101  001800  2174               	addwfc	(lcd_text@msjPtr+1)& (0+255),w,b
  7102  001802  6EDA               	movwf	fsr2h,c
  7103  001804  0E3A               	movlw	58
  7104  001806  60DF               	cpfslt	indf2,c
  7105  001808  D00F               	goto	l496
  7106                           
  7107                           ; BSR set to: 5
  7108                           ;tft.c: 296: *(msjPtrCpy+k) = *(msjPtr+k) - 48;
  7109  00180A  0E7F               	movlw	low lcd_text@msjPtrCpy
  7110  00180C  2593               	addwf	lcd_text@k& (0+255),w,b
  7111  00180E  6ED9               	movwf	fsr2l,c
  7112  001810  0E05               	movlw	high lcd_text@msjPtrCpy
  7113  001812  2194               	addwfc	(lcd_text@k+1)& (0+255),w,b
  7114  001814  6EDA               	movwf	fsr2h,c
  7115  001816  5193               	movf	lcd_text@k& (0+255),w,b
  7116  001818  2573               	addwf	lcd_text@msjPtr& (0+255),w,b
  7117  00181A  6EE1               	movwf	fsr1l,c
  7118  00181C  5194               	movf	(lcd_text@k+1)& (0+255),w,b
  7119  00181E  2174               	addwfc	(lcd_text@msjPtr+1)& (0+255),w,b
  7120  001820  6EE2               	movwf	fsr1h,c
  7121  001822  50E7               	movf	indf1,w,c
  7122  001824  0FD0               	addlw	208
  7123  001826  6EDF               	movwf	indf2,c
  7124  001828                     l496:
  7125                           
  7126                           ; BSR set to: 5
  7127                           ;tft.c: 297: }
  7128                           ;tft.c: 298: if (*(msjPtr+k) == 58) {
  7129                           
  7130                           ; BSR set to: 5
  7131  001828  5193               	movf	lcd_text@k& (0+255),w,b
  7132  00182A  2573               	addwf	lcd_text@msjPtr& (0+255),w,b
  7133  00182C  6ED9               	movwf	fsr2l,c
  7134  00182E  5194               	movf	(lcd_text@k+1)& (0+255),w,b
  7135  001830  2174               	addwfc	(lcd_text@msjPtr+1)& (0+255),w,b
  7136  001832  6EDA               	movwf	fsr2h,c
  7137  001834  0E3A               	movlw	58
  7138  001836  18DE               	xorwf	postinc2,w,c
  7139  001838  A4D8               	btfss	status,2,c
  7140  00183A  D008               	goto	l497
  7141                           
  7142                           ; BSR set to: 5
  7143                           ;tft.c: 299: *(msjPtrCpy+k) = 10;
  7144  00183C  0E7F               	movlw	low lcd_text@msjPtrCpy
  7145  00183E  2593               	addwf	lcd_text@k& (0+255),w,b
  7146  001840  6ED9               	movwf	fsr2l,c
  7147  001842  0E05               	movlw	high lcd_text@msjPtrCpy
  7148  001844  2194               	addwfc	(lcd_text@k+1)& (0+255),w,b
  7149  001846  6EDA               	movwf	fsr2h,c
  7150  001848  0E0A               	movlw	10
  7151  00184A  6EDF               	movwf	indf2,c
  7152  00184C                     l497:
  7153                           
  7154                           ; BSR set to: 5
  7155                           ;tft.c: 300: }
  7156                           ;tft.c: 301: if (*(msjPtr+k) > 64) {
  7157  00184C  5193               	movf	lcd_text@k& (0+255),w,b
  7158  00184E  2573               	addwf	lcd_text@msjPtr& (0+255),w,b
  7159  001850  6ED9               	movwf	fsr2l,c
  7160  001852  5194               	movf	(lcd_text@k+1)& (0+255),w,b
  7161  001854  2174               	addwfc	(lcd_text@msjPtr+1)& (0+255),w,b
  7162  001856  6EDA               	movwf	fsr2h,c
  7163  001858  0E40               	movlw	64
  7164  00185A  64DF               	cpfsgt	indf2,c
  7165  00185C  D00F               	goto	l498
  7166                           
  7167                           ; BSR set to: 5
  7168                           ;tft.c: 303: *(msjPtrCpy+k) = *(msjPtr+k) - 53;
  7169  00185E  0E7F               	movlw	low lcd_text@msjPtrCpy
  7170  001860  2593               	addwf	lcd_text@k& (0+255),w,b
  7171  001862  6ED9               	movwf	fsr2l,c
  7172  001864  0E05               	movlw	high lcd_text@msjPtrCpy
  7173  001866  2194               	addwfc	(lcd_text@k+1)& (0+255),w,b
  7174  001868  6EDA               	movwf	fsr2h,c
  7175  00186A  5193               	movf	lcd_text@k& (0+255),w,b
  7176  00186C  2573               	addwf	lcd_text@msjPtr& (0+255),w,b
  7177  00186E  6EE1               	movwf	fsr1l,c
  7178  001870  5194               	movf	(lcd_text@k+1)& (0+255),w,b
  7179  001872  2174               	addwfc	(lcd_text@msjPtr+1)& (0+255),w,b
  7180  001874  6EE2               	movwf	fsr1h,c
  7181  001876  50E7               	movf	indf1,w,c
  7182  001878  0FCB               	addlw	203
  7183  00187A  6EDF               	movwf	indf2,c
  7184  00187C                     l498:
  7185                           
  7186                           ; BSR set to: 5
  7187                           ;tft.c: 304: }
  7188                           ;tft.c: 306: if (*(msjPtr+k) == 46) {
  7189                           
  7190                           ; BSR set to: 5
  7191  00187C  5193               	movf	lcd_text@k& (0+255),w,b
  7192  00187E  2573               	addwf	lcd_text@msjPtr& (0+255),w,b
  7193  001880  6ED9               	movwf	fsr2l,c
  7194  001882  5194               	movf	(lcd_text@k+1)& (0+255),w,b
  7195  001884  2174               	addwfc	(lcd_text@msjPtr+1)& (0+255),w,b
  7196  001886  6EDA               	movwf	fsr2h,c
  7197  001888  0E2E               	movlw	46
  7198  00188A  18DE               	xorwf	postinc2,w,c
  7199  00188C  A4D8               	btfss	status,2,c
  7200  00188E  D008               	goto	l499
  7201                           
  7202                           ; BSR set to: 5
  7203                           ;tft.c: 307: *(msjPtrCpy+k) = 39;
  7204  001890  0E7F               	movlw	low lcd_text@msjPtrCpy
  7205  001892  2593               	addwf	lcd_text@k& (0+255),w,b
  7206  001894  6ED9               	movwf	fsr2l,c
  7207  001896  0E05               	movlw	high lcd_text@msjPtrCpy
  7208  001898  2194               	addwfc	(lcd_text@k+1)& (0+255),w,b
  7209  00189A  6EDA               	movwf	fsr2h,c
  7210  00189C  0E27               	movlw	39
  7211  00189E  6EDF               	movwf	indf2,c
  7212  0018A0                     l499:
  7213                           
  7214                           ; BSR set to: 5
  7215                           ;tft.c: 308: }
  7216                           ;tft.c: 310: for (i=0;i<8;i++) {
  7217                           
  7218                           ; BSR set to: 5
  7219  0018A0  0E00               	movlw	0
  7220  0018A2  6F90               	movwf	(lcd_text@i+1)& (0+255),b
  7221  0018A4  0E00               	movlw	0
  7222  0018A6  6F8F               	movwf	lcd_text@i& (0+255),b
  7223                           
  7224                           ; BSR set to: 5
  7225  0018A8  5190               	movf	(lcd_text@i+1)& (0+255),w,b
  7226  0018AA  E105               	bnz	u9830
  7227  0018AC  0E08               	movlw	8
  7228  0018AE  5D8F               	subwf	lcd_text@i& (0+255),w,b
  7229  0018B0  B0D8               	btfsc	status,0,c
  7230  0018B2  D07D               	goto	u9860
  7231  0018B4  D001               	goto	l500
  7232  0018B6                     u9830:
  7233                           
  7234                           ; BSR set to: 5
  7235  0018B6  D07B               	goto	u9860
  7236  0018B8                     l500:
  7237                           
  7238                           ; BSR set to: 5
  7239                           ;tft.c: 311: for (j=0;j<8;j++) {
  7240                           
  7241                           ; BSR set to: 5
  7242  0018B8  0E00               	movlw	0
  7243  0018BA  6F92               	movwf	(lcd_text@j+1)& (0+255),b
  7244  0018BC  0E00               	movlw	0
  7245  0018BE  6F91               	movwf	lcd_text@j& (0+255),b
  7246  0018C0                     l8818:
  7247                           
  7248                           ; BSR set to: 5
  7249  0018C0  5192               	movf	(lcd_text@j+1)& (0+255),w,b
  7250  0018C2  E170               	bnz	l8830
  7251  0018C4  0E08               	movlw	8
  7252  0018C6  5D91               	subwf	lcd_text@j& (0+255),w,b
  7253  0018C8  B0D8               	btfsc	status,0,c
  7254  0018CA  D06C               	goto	u9850
  7255                           
  7256                           ; BSR set to: 5
  7257                           ;tft.c: 312: lcd_pix(1+j+(renglon-1)*10,1+i+k*8,bitRead(texto[*(msjPtrCpy+k)][i],j),4);
  7258                           
  7259                           ; BSR set to: 5
  7260                           
  7261                           ; BSR set to: 5
  7262  0018CC  0EFF               	movlw	255
  7263  0018CE  258E               	addwf	lcd_text@renglon& (0+255),w,b
  7264  0018D0  0100               	movlb	0	; () banked
  7265  0018D2  6F93               	movwf	___wmul@multiplier& (0+255),b
  7266  0018D4  6B94               	clrf	(___wmul@multiplier+1)& (0+255),b
  7267  0018D6  0EFF               	movlw	255
  7268  0018D8  2394               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
  7269  0018DA  0E00               	movlw	0
  7270  0018DC  6F96               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7271  0018DE  0E0A               	movlw	10
  7272  0018E0  6F95               	movwf	___wmul@multiplicand& (0+255),b
  7273  0018E2  EC64  F025         	call	___wmul	;wreg free
  7274  0018E6  0105               	movlb	5	; () banked
  7275  0018E8  5191               	movf	lcd_text@j& (0+255),w,b
  7276  0018EA  0100               	movlb	0	; () banked
  7277  0018EC  2793               	addwf	?___wmul& (0+255),f,b
  7278  0018EE  0105               	movlb	5	; () banked
  7279  0018F0  5192               	movf	(lcd_text@j+1)& (0+255),w,b
  7280  0018F2  0100               	movlb	0	; () banked
  7281  0018F4  2394               	addwfc	(?___wmul+1)& (0+255),f,b
  7282  0018F6  0E01               	movlw	1
  7283  0018F8  2593               	addwf	?___wmul& (0+255),w,b
  7284  0018FA  0105               	movlb	5	; () banked
  7285  0018FC  6F7D               	movwf	_lcd_text$2364& (0+255),b
  7286  0018FE  0E00               	movlw	0
  7287  001900  0100               	movlb	0	; () banked
  7288  001902  2194               	addwfc	(?___wmul+1)& (0+255),w,b
  7289  001904  0105               	movlb	5	; () banked
  7290  001906  6F7E               	movwf	(_lcd_text$2364+1)& (0+255),b
  7291                           
  7292                           ; BSR set to: 5
  7293                           ;tft.c: 312: lcd_pix(1+j+(renglon-1)*10,1+i+k*8,bitRead(texto[*(msjPtrCpy+k)][i],j),4);
  7294  001908  C57D  F1F6         	movff	_lcd_text$2364,lcd_pix@x
  7295  00190C  C57E  F1F7         	movff	_lcd_text$2364+1,lcd_pix@x+1
  7296  001910  C593  F576         	movff	lcd_text@k,??_lcd_text
  7297  001914  C594  F577         	movff	lcd_text@k+1,??_lcd_text+1
  7298  001918  90D8               	bcf	status,0,c
  7299  00191A  3776               	rlcf	??_lcd_text& (0+255),f,b
  7300  00191C  3777               	rlcf	(??_lcd_text+1)& (0+255),f,b
  7301  00191E  90D8               	bcf	status,0,c
  7302  001920  3776               	rlcf	??_lcd_text& (0+255),f,b
  7303  001922  3777               	rlcf	(??_lcd_text+1)& (0+255),f,b
  7304  001924  90D8               	bcf	status,0,c
  7305  001926  3776               	rlcf	??_lcd_text& (0+255),f,b
  7306  001928  3777               	rlcf	(??_lcd_text+1)& (0+255),f,b
  7307  00192A  518F               	movf	lcd_text@i& (0+255),w,b
  7308  00192C  2776               	addwf	??_lcd_text& (0+255),f,b
  7309  00192E  5190               	movf	(lcd_text@i+1)& (0+255),w,b
  7310  001930  2377               	addwfc	(??_lcd_text+1)& (0+255),f,b
  7311  001932  0E01               	movlw	1
  7312  001934  2576               	addwf	??_lcd_text& (0+255),w,b
  7313  001936  0101               	movlb	1	; () banked
  7314  001938  6FF8               	movwf	lcd_pix@y& (0+255),b
  7315  00193A  0E00               	movlw	0
  7316  00193C  0105               	movlb	5	; () banked
  7317  00193E  2177               	addwfc	(??_lcd_text+1)& (0+255),w,b
  7318  001940  0101               	movlb	1	; () banked
  7319  001942  6FF9               	movwf	(lcd_pix@y+1)& (0+255),b
  7320  001944  0E7F               	movlw	low lcd_text@msjPtrCpy
  7321  001946  0105               	movlb	5	; () banked
  7322  001948  2593               	addwf	lcd_text@k& (0+255),w,b
  7323  00194A  6ED9               	movwf	fsr2l,c
  7324  00194C  0E05               	movlw	high lcd_text@msjPtrCpy
  7325  00194E  2194               	addwfc	(lcd_text@k+1)& (0+255),w,b
  7326  001950  6EDA               	movwf	fsr2h,c
  7327  001952  50DF               	movf	indf2,w,c
  7328  001954  6F78               	movwf	(??_lcd_text+2)& (0+255),b
  7329  001956  5178               	movf	(??_lcd_text+2)& (0+255),w,b
  7330  001958  0D08               	mullw	8
  7331  00195A  0E3F               	movlw	low _texto
  7332  00195C  6F79               	movwf	(??_lcd_text+3)& (0+255),b
  7333  00195E  0EFE               	movlw	high _texto
  7334  001960  6F7A               	movwf	(??_lcd_text+4)& (0+255),b
  7335  001962  50F3               	movf	prodl,w,c
  7336  001964  2779               	addwf	(??_lcd_text+3)& (0+255),f,b
  7337  001966  50F4               	movf	prodh,w,c
  7338  001968  237A               	addwfc	(??_lcd_text+4)& (0+255),f,b
  7339  00196A  518F               	movf	lcd_text@i& (0+255),w,b
  7340  00196C  2779               	addwf	(??_lcd_text+3)& (0+255),f,b
  7341  00196E  5190               	movf	(lcd_text@i+1)& (0+255),w,b
  7342  001970  237A               	addwfc	(??_lcd_text+4)& (0+255),f,b
  7343  001972  C579  FFF6         	movff	??_lcd_text+3,tblptrl
  7344  001976  C57A  FFF7         	movff	??_lcd_text+4,tblptrh
  7345  00197A                     	if	0	;tblptru may be non-zero
  7346  00197A                     	endif
  7347  00197A                     	if	0	;tblptru may be non-zero
  7348  00197A                     	endif
  7349  00197A  0008               	tblrd		*
  7350  00197C  50F5               	movf	tablat,w,c
  7351  00197E  0100               	movlb	0	; () banked
  7352  001980  6F93               	movwf	bitRead@number& (0+255),b
  7353  001982  6B94               	clrf	(bitRead@number+1)& (0+255),b
  7354  001984  C591  F095         	movff	lcd_text@j,bitRead@position
  7355  001988  C592  F096         	movff	lcd_text@j+1,bitRead@position+1
  7356  00198C  EC56  F024         	call	_bitRead	;wreg free
  7357  001990  0101               	movlb	1	; () banked
  7358  001992  6FFA               	movwf	lcd_pix@c& (0+255),b
  7359  001994  0E04               	movlw	4
  7360  001996  6FFB               	movwf	lcd_pix@size& (0+255),b
  7361  001998  EC98  F018         	call	_lcd_pix	;wreg free
  7362  00199C  0105               	movlb	5	; () banked
  7363  00199E  4B91               	infsnz	lcd_text@j& (0+255),f,b
  7364  0019A0  2B92               	incf	(lcd_text@j+1)& (0+255),f,b
  7365  0019A2  D78E               	goto	l8818
  7366  0019A4                     u9850:
  7367  0019A4                     l8830:
  7368                           
  7369                           ; BSR set to: 5
  7370  0019A4  4B8F               	infsnz	lcd_text@i& (0+255),f,b
  7371  0019A6  2B90               	incf	(lcd_text@i+1)& (0+255),f,b
  7372                           
  7373                           ; BSR set to: 5
  7374  0019A8  5190               	movf	(lcd_text@i+1)& (0+255),w,b
  7375  0019AA  E101               	bnz	l8834
  7376  0019AC  D77F               	goto	L3
  7377  0019AE                     u9860:
  7378  0019AE                     l8834:
  7379                           
  7380                           ; BSR set to: 5
  7381  0019AE  4B93               	infsnz	lcd_text@k& (0+255),f,b
  7382  0019B0  2B94               	incf	(lcd_text@k+1)& (0+255),f,b
  7383                           
  7384                           ; BSR set to: 5
  7385  0019B2  5194               	movf	(lcd_text@k+1)& (0+255),w,b
  7386  0019B4  E10A               	bnz	l504
  7387  0019B6  D6F6               	goto	L4
  7388  0019B8                     l474:
  7389                           
  7390                           ; BSR set to: 5
  7391  0019B8  0105               	movlb	5	; () banked
  7392  0019BA  5175               	movf	lcd_text@color& (0+255),w,b
  7393                           
  7394                           ; Switch size 1, requested type "space"
  7395                           ; Number of cases is 2, Range of values is 0 to 1
  7396                           ; switch strategies available:
  7397                           ; Name         Instructions Cycles
  7398                           ; simple_byte            7     4 (average)
  7399                           ;	Chosen strategy is simple_byte
  7400  0019BC  0A00               	xorlw	0	; case 0
  7401  0019BE  B4D8               	btfsc	status,2,c
  7402  0019C0  D6EB               	goto	l490
  7403  0019C2  0A01               	xorlw	1	; case 1
  7404  0019C4  A4D8               	btfss	status,2,c
  7405  0019C6  0012               	return	
  7406  0019C8  D5D5               	goto	l475
  7407  0019CA                     l504:
  7408                           
  7409                           ; BSR set to: 5
  7410  0019CA  0012               	return		;funcret
  7411  0019CC                     __end_of_lcd_text:
  7412                           	opt stack 0
  7413                           tblptru	equ	0xFF8
  7414                           tblptrh	equ	0xFF7
  7415                           tblptrl	equ	0xFF6
  7416                           tablat	equ	0xFF5
  7417                           prodh	equ	0xFF4
  7418                           prodl	equ	0xFF3
  7419                           intcon	equ	0xFF2
  7420                           postinc0	equ	0xFEE
  7421                           wreg	equ	0xFE8
  7422                           indf1	equ	0xFE7
  7423                           postdec1	equ	0xFE5
  7424                           fsr1h	equ	0xFE2
  7425                           fsr1l	equ	0xFE1
  7426                           indf2	equ	0xFDF
  7427                           postinc2	equ	0xFDE
  7428                           postdec2	equ	0xFDD
  7429                           fsr2h	equ	0xFDA
  7430                           fsr2l	equ	0xFD9
  7431                           status	equ	0xFD8
  7432                           
  7433 ;; *************** function _lcd_pix_color *****************
  7434 ;; Defined at:
  7435 ;;		line 146 in file "tft.c"
  7436 ;; Parameters:    Size  Location     Type
  7437 ;;  x               2    8[BANK1 ] unsigned int 
  7438 ;;  y               2   10[BANK1 ] unsigned int 
  7439 ;;  c               1   12[BANK1 ] unsigned char 
  7440 ;;  size            1   13[BANK1 ] unsigned char 
  7441 ;; Auto vars:     Size  Location     Type
  7442 ;;  i               2    1[BANK5 ] unsigned int 
  7443 ;;  n1              1    0[BANK5 ] unsigned char 
  7444 ;; Return value:  Size  Location     Type
  7445 ;;                  1    wreg      void 
  7446 ;; Registers used:
  7447 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7448 ;; Tracked objects:
  7449 ;;		On entry : 0/0
  7450 ;;		On exit  : 0/0
  7451 ;;		Unchanged: 0/0
  7452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7453 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7454 ;;      Locals:         0       0       0       0       0       0       3       0       0       0       0       0       
      +0       0       0       0
  7455 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7456 ;;      Totals:         0       0      10       0       0       0       3       0       0       0       0       0       
      +0       0       0       0
  7457 ;;Total ram usage:       13 bytes
  7458 ;; Hardware stack levels used:    1
  7459 ;; Hardware stack levels required when called:   12
  7460 ;; This function calls:
  7461 ;;		___wmul
  7462 ;;		_lcd_memory_start
  7463 ;;		_lcd_set_address
  7464 ;;		_lcd_write_bus
  7465 ;; This function is called by:
  7466 ;;		_lcd_text
  7467 ;; This function uses a non-reentrant model
  7468 ;;
  7469                           
  7470                           	psect	text18
  7471  00301A                     __ptext18:
  7472                           	opt stack 0
  7473  00301A                     _lcd_pix_color:
  7474                           	opt stack 16
  7475                           
  7476                           ;tft.c: 147: unsigned int i;
  7477                           ;tft.c: 148: char n1;
  7478                           ;tft.c: 150: x *= size;
  7479                           
  7480                           ; BSR set to: 5
  7481                           ;incstack = 0
  7482  00301A  C1F6  F093         	movff	lcd_pix_color@x,___wmul@multiplier
  7483  00301E  C1F7  F094         	movff	lcd_pix_color@x+1,___wmul@multiplier+1
  7484  003022  C1FB  F095         	movff	lcd_pix_color@size,___wmul@multiplicand
  7485  003026  0100               	movlb	0	; () banked
  7486  003028  6B96               	clrf	(___wmul@multiplicand+1)& (0+255),b
  7487  00302A  EC64  F025         	call	___wmul	;wreg free
  7488  00302E  C093  F1F6         	movff	?___wmul,lcd_pix_color@x
  7489  003032  C094  F1F7         	movff	?___wmul+1,lcd_pix_color@x+1
  7490                           
  7491                           ;tft.c: 151: y *= size;
  7492  003036  C1F8  F093         	movff	lcd_pix_color@y,___wmul@multiplier
  7493  00303A  C1F9  F094         	movff	lcd_pix_color@y+1,___wmul@multiplier+1
  7494  00303E  C1FB  F095         	movff	lcd_pix_color@size,___wmul@multiplicand
  7495  003042  0100               	movlb	0	; () banked
  7496  003044  6B96               	clrf	(___wmul@multiplicand+1)& (0+255),b
  7497  003046  EC64  F025         	call	___wmul	;wreg free
  7498  00304A  C093  F1F8         	movff	?___wmul,lcd_pix_color@y
  7499  00304E  C094  F1F9         	movff	?___wmul+1,lcd_pix_color@y+1
  7500                           
  7501                           ;tft.c: 152: n1 = size * size;
  7502  003052  0101               	movlb	1	; () banked
  7503  003054  51FB               	movf	lcd_pix_color@size& (0+255),w,b
  7504  003056  03FB               	mulwf	lcd_pix_color@size& (0+255),b
  7505  003058  CFF3 F570          	movff	prodl,lcd_pix_color@n1
  7506                           
  7507                           ; BSR set to: 1
  7508                           ;tft.c: 153: LATA1 = 0;
  7509  00305C  9289               	bcf	3977,1,c	;volatile
  7510                           
  7511                           ; BSR set to: 1
  7512                           ;tft.c: 154: lcd_set_address(x,y,x+size-1,y+size-1);
  7513  00305E  C1F6  F1EE         	movff	lcd_pix_color@x,lcd_set_address@x1
  7514  003062  C1F7  F1EF         	movff	lcd_pix_color@x+1,lcd_set_address@x1+1
  7515  003066  C1F8  F1F0         	movff	lcd_pix_color@y,lcd_set_address@y1
  7516  00306A  C1F9  F1F1         	movff	lcd_pix_color@y+1,lcd_set_address@y1+1
  7517  00306E  51FB               	movf	lcd_pix_color@size& (0+255),w,b
  7518  003070  25F6               	addwf	lcd_pix_color@x& (0+255),w,b
  7519  003072  6FFC               	movwf	??_lcd_pix_color& (0+255),b
  7520  003074  0E00               	movlw	0
  7521  003076  21F7               	addwfc	(lcd_pix_color@x+1)& (0+255),w,b
  7522  003078  6FFD               	movwf	(??_lcd_pix_color+1)& (0+255),b
  7523  00307A  0EFF               	movlw	255
  7524  00307C  25FC               	addwf	??_lcd_pix_color& (0+255),w,b
  7525  00307E  6FF2               	movwf	lcd_set_address@x2& (0+255),b
  7526  003080  0EFF               	movlw	255
  7527  003082  21FD               	addwfc	(??_lcd_pix_color+1)& (0+255),w,b
  7528  003084  6FF3               	movwf	(lcd_set_address@x2+1)& (0+255),b
  7529  003086  51FB               	movf	lcd_pix_color@size& (0+255),w,b
  7530  003088  25F8               	addwf	lcd_pix_color@y& (0+255),w,b
  7531  00308A  6FFE               	movwf	(??_lcd_pix_color+2)& (0+255),b
  7532  00308C  0E00               	movlw	0
  7533  00308E  21F9               	addwfc	(lcd_pix_color@y+1)& (0+255),w,b
  7534  003090  6FFF               	movwf	(??_lcd_pix_color+3)& (0+255),b
  7535  003092  0EFF               	movlw	255
  7536  003094  25FE               	addwf	(??_lcd_pix_color+2)& (0+255),w,b
  7537  003096  6FF4               	movwf	lcd_set_address@y2& (0+255),b
  7538  003098  0EFF               	movlw	255
  7539  00309A  21FF               	addwfc	(??_lcd_pix_color+3)& (0+255),w,b
  7540  00309C  6FF5               	movwf	(lcd_set_address@y2+1)& (0+255),b
  7541  00309E  EC7D  F022         	call	_lcd_set_address	;wreg free
  7542                           
  7543                           ;tft.c: 155: lcd_memory_start();
  7544  0030A2  EC24  F026         	call	_lcd_memory_start	;wreg free
  7545                           
  7546                           ;tft.c: 157: switch (c) {
  7547  0030A6  D03A               	goto	l423
  7548  0030A8                     
  7549                           ;tft.c: 159: for(i=0;i<n1;i++) {
  7550  0030A8  0E00               	movlw	0
  7551  0030AA  0105               	movlb	5	; () banked
  7552  0030AC  6F72               	movwf	(lcd_pix_color@i+1)& (0+255),b
  7553  0030AE  0E00               	movlw	0
  7554  0030B0  6F71               	movwf	lcd_pix_color@i& (0+255),b
  7555  0030B2  D009               	goto	l425
  7556  0030B4                     
  7557                           ; BSR set to: 5
  7558                           ;tft.c: 160: lcd_write_bus(0xF8);
  7559                           
  7560                           ; BSR set to: 5
  7561  0030B4  0EF8               	movlw	248
  7562  0030B6  EC0B  F026         	call	_lcd_write_bus
  7563                           
  7564                           ;tft.c: 161: lcd_write_bus(0x00);
  7565  0030BA  0E00               	movlw	0
  7566  0030BC  EC0B  F026         	call	_lcd_write_bus
  7567  0030C0  0105               	movlb	5	; () banked
  7568  0030C2  4B71               	infsnz	lcd_pix_color@i& (0+255),f,b
  7569  0030C4  2B72               	incf	(lcd_pix_color@i+1)& (0+255),f,b
  7570  0030C6                     l425:
  7571                           
  7572                           ; BSR set to: 5
  7573                           
  7574                           ; BSR set to: 5
  7575  0030C6  5170               	movf	lcd_pix_color@n1& (0+255),w,b
  7576  0030C8  0101               	movlb	1	; () banked
  7577  0030CA  6FFC               	movwf	??_lcd_pix_color& (0+255),b
  7578  0030CC  6BFD               	clrf	(??_lcd_pix_color+1)& (0+255),b
  7579  0030CE  51FC               	movf	??_lcd_pix_color& (0+255),w,b
  7580  0030D0  0105               	movlb	5	; () banked
  7581  0030D2  5D71               	subwf	lcd_pix_color@i& (0+255),w,b
  7582  0030D4  0101               	movlb	1	; () banked
  7583  0030D6  51FD               	movf	(??_lcd_pix_color+1)& (0+255),w,b
  7584  0030D8  0105               	movlb	5	; () banked
  7585  0030DA  5972               	subwfb	(lcd_pix_color@i+1)& (0+255),w,b
  7586  0030DC  B0D8               	btfsc	status,0,c
  7587  0030DE  D026               	goto	l428
  7588  0030E0  D7E9               	goto	l426
  7589  0030E2                     
  7590                           ;tft.c: 165: for(i=0;i<n1;i++) {
  7591                           
  7592                           ; BSR set to: 5
  7593  0030E2  0E00               	movlw	0
  7594  0030E4  0105               	movlb	5	; () banked
  7595  0030E6  6F72               	movwf	(lcd_pix_color@i+1)& (0+255),b
  7596  0030E8  0E00               	movlw	0
  7597  0030EA  6F71               	movwf	lcd_pix_color@i& (0+255),b
  7598  0030EC  D009               	goto	l430
  7599  0030EE                     
  7600                           ; BSR set to: 5
  7601                           ;tft.c: 166: lcd_write_bus(0xFF);
  7602                           
  7603                           ; BSR set to: 5
  7604  0030EE  0EFF               	movlw	255
  7605  0030F0  EC0B  F026         	call	_lcd_write_bus
  7606                           
  7607                           ;tft.c: 167: lcd_write_bus(0xFF);
  7608  0030F4  0EFF               	movlw	255
  7609  0030F6  EC0B  F026         	call	_lcd_write_bus
  7610  0030FA  0105               	movlb	5	; () banked
  7611  0030FC  4B71               	infsnz	lcd_pix_color@i& (0+255),f,b
  7612  0030FE  2B72               	incf	(lcd_pix_color@i+1)& (0+255),f,b
  7613  003100                     l430:
  7614                           
  7615                           ; BSR set to: 5
  7616                           
  7617                           ; BSR set to: 5
  7618  003100  5170               	movf	lcd_pix_color@n1& (0+255),w,b
  7619  003102  0101               	movlb	1	; () banked
  7620  003104  6FFC               	movwf	??_lcd_pix_color& (0+255),b
  7621  003106  6BFD               	clrf	(??_lcd_pix_color+1)& (0+255),b
  7622  003108  51FC               	movf	??_lcd_pix_color& (0+255),w,b
  7623  00310A  0105               	movlb	5	; () banked
  7624  00310C  5D71               	subwf	lcd_pix_color@i& (0+255),w,b
  7625  00310E  0101               	movlb	1	; () banked
  7626  003110  51FD               	movf	(??_lcd_pix_color+1)& (0+255),w,b
  7627  003112  0105               	movlb	5	; () banked
  7628  003114  5972               	subwfb	(lcd_pix_color@i+1)& (0+255),w,b
  7629  003116  B0D8               	btfsc	status,0,c
  7630  003118  D009               	goto	l428
  7631  00311A  D7E9               	goto	l431
  7632  00311C                     l423:
  7633                           
  7634                           ; BSR set to: 5
  7635  00311C  0101               	movlb	1	; () banked
  7636  00311E  51FA               	movf	lcd_pix_color@c& (0+255),w,b
  7637                           
  7638                           ; Switch size 1, requested type "space"
  7639                           ; Number of cases is 2, Range of values is 0 to 1
  7640                           ; switch strategies available:
  7641                           ; Name         Instructions Cycles
  7642                           ; simple_byte            7     4 (average)
  7643                           ;	Chosen strategy is simple_byte
  7644  003120  0A00               	xorlw	0	; case 0
  7645  003122  B4D8               	btfsc	status,2,c
  7646  003124  D7DE               	goto	l429
  7647  003126  0A01               	xorlw	1	; case 1
  7648  003128  B4D8               	btfsc	status,2,c
  7649  00312A  D7BE               	goto	l424
  7650  00312C                     l428:
  7651                           
  7652                           ;tft.c: 172: LATA1 = 1;
  7653  00312C  8289               	bsf	3977,1,c	;volatile
  7654  00312E  0012               	return		;funcret
  7655  003130                     __end_of_lcd_pix_color:
  7656                           	opt stack 0
  7657                           tblptru	equ	0xFF8
  7658                           tblptrh	equ	0xFF7
  7659                           tblptrl	equ	0xFF6
  7660                           tablat	equ	0xFF5
  7661                           prodh	equ	0xFF4
  7662                           prodl	equ	0xFF3
  7663                           intcon	equ	0xFF2
  7664                           postinc0	equ	0xFEE
  7665                           wreg	equ	0xFE8
  7666                           indf1	equ	0xFE7
  7667                           postdec1	equ	0xFE5
  7668                           fsr1h	equ	0xFE2
  7669                           fsr1l	equ	0xFE1
  7670                           indf2	equ	0xFDF
  7671                           postinc2	equ	0xFDE
  7672                           postdec2	equ	0xFDD
  7673                           fsr2h	equ	0xFDA
  7674                           fsr2l	equ	0xFD9
  7675                           status	equ	0xFD8
  7676                           
  7677 ;; *************** function _lcd_pix *****************
  7678 ;; Defined at:
  7679 ;;		line 117 in file "tft.c"
  7680 ;; Parameters:    Size  Location     Type
  7681 ;;  x               2    8[BANK1 ] unsigned int 
  7682 ;;  y               2   10[BANK1 ] unsigned int 
  7683 ;;  c               1   12[BANK1 ] unsigned char 
  7684 ;;  size            1   13[BANK1 ] unsigned char 
  7685 ;; Auto vars:     Size  Location     Type
  7686 ;;  i               2    1[BANK5 ] unsigned int 
  7687 ;;  n1              1    0[BANK5 ] unsigned char 
  7688 ;; Return value:  Size  Location     Type
  7689 ;;                  1    wreg      void 
  7690 ;; Registers used:
  7691 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7692 ;; Tracked objects:
  7693 ;;		On entry : 0/0
  7694 ;;		On exit  : 0/0
  7695 ;;		Unchanged: 0/0
  7696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7697 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7698 ;;      Locals:         0       0       0       0       0       0       3       0       0       0       0       0       
      +0       0       0       0
  7699 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7700 ;;      Totals:         0       0      10       0       0       0       3       0       0       0       0       0       
      +0       0       0       0
  7701 ;;Total ram usage:       13 bytes
  7702 ;; Hardware stack levels used:    1
  7703 ;; Hardware stack levels required when called:   12
  7704 ;; This function calls:
  7705 ;;		___wmul
  7706 ;;		_lcd_memory_start
  7707 ;;		_lcd_set_address
  7708 ;;		_lcd_write_bus
  7709 ;; This function is called by:
  7710 ;;		_lcd_text
  7711 ;; This function uses a non-reentrant model
  7712 ;;
  7713                           
  7714                           	psect	text19
  7715  003130                     __ptext19:
  7716                           	opt stack 0
  7717  003130                     _lcd_pix:
  7718                           	opt stack 16
  7719                           
  7720                           ;tft.c: 118: unsigned int i;
  7721                           ;tft.c: 119: char n1;
  7722                           ;tft.c: 121: x *= size;
  7723                           
  7724                           ;incstack = 0
  7725  003130  C1F6  F093         	movff	lcd_pix@x,___wmul@multiplier
  7726  003134  C1F7  F094         	movff	lcd_pix@x+1,___wmul@multiplier+1
  7727  003138  C1FB  F095         	movff	lcd_pix@size,___wmul@multiplicand
  7728  00313C  0100               	movlb	0	; () banked
  7729  00313E  6B96               	clrf	(___wmul@multiplicand+1)& (0+255),b
  7730  003140  EC64  F025         	call	___wmul	;wreg free
  7731  003144  C093  F1F6         	movff	?___wmul,lcd_pix@x
  7732  003148  C094  F1F7         	movff	?___wmul+1,lcd_pix@x+1
  7733                           
  7734                           ;tft.c: 122: y *= size;
  7735  00314C  C1F8  F093         	movff	lcd_pix@y,___wmul@multiplier
  7736  003150  C1F9  F094         	movff	lcd_pix@y+1,___wmul@multiplier+1
  7737  003154  C1FB  F095         	movff	lcd_pix@size,___wmul@multiplicand
  7738  003158  0100               	movlb	0	; () banked
  7739  00315A  6B96               	clrf	(___wmul@multiplicand+1)& (0+255),b
  7740  00315C  EC64  F025         	call	___wmul	;wreg free
  7741  003160  C093  F1F8         	movff	?___wmul,lcd_pix@y
  7742  003164  C094  F1F9         	movff	?___wmul+1,lcd_pix@y+1
  7743                           
  7744                           ;tft.c: 123: n1 = size * size;
  7745  003168  0101               	movlb	1	; () banked
  7746  00316A  51FB               	movf	lcd_pix@size& (0+255),w,b
  7747  00316C  03FB               	mulwf	lcd_pix@size& (0+255),b
  7748  00316E  CFF3 F570          	movff	prodl,lcd_pix@n1
  7749                           
  7750                           ; BSR set to: 1
  7751                           ;tft.c: 124: LATA1 = 0;
  7752  003172  9289               	bcf	3977,1,c	;volatile
  7753                           
  7754                           ; BSR set to: 1
  7755                           ;tft.c: 125: lcd_set_address(x,y,x+size-1,y+size-1);
  7756  003174  C1F6  F1EE         	movff	lcd_pix@x,lcd_set_address@x1
  7757  003178  C1F7  F1EF         	movff	lcd_pix@x+1,lcd_set_address@x1+1
  7758  00317C  C1F8  F1F0         	movff	lcd_pix@y,lcd_set_address@y1
  7759  003180  C1F9  F1F1         	movff	lcd_pix@y+1,lcd_set_address@y1+1
  7760  003184  51FB               	movf	lcd_pix@size& (0+255),w,b
  7761  003186  25F6               	addwf	lcd_pix@x& (0+255),w,b
  7762  003188  6FFC               	movwf	??_lcd_pix& (0+255),b
  7763  00318A  0E00               	movlw	0
  7764  00318C  21F7               	addwfc	(lcd_pix@x+1)& (0+255),w,b
  7765  00318E  6FFD               	movwf	(??_lcd_pix+1)& (0+255),b
  7766  003190  0EFF               	movlw	255
  7767  003192  25FC               	addwf	??_lcd_pix& (0+255),w,b
  7768  003194  6FF2               	movwf	lcd_set_address@x2& (0+255),b
  7769  003196  0EFF               	movlw	255
  7770  003198  21FD               	addwfc	(??_lcd_pix+1)& (0+255),w,b
  7771  00319A  6FF3               	movwf	(lcd_set_address@x2+1)& (0+255),b
  7772  00319C  51FB               	movf	lcd_pix@size& (0+255),w,b
  7773  00319E  25F8               	addwf	lcd_pix@y& (0+255),w,b
  7774  0031A0  6FFE               	movwf	(??_lcd_pix+2)& (0+255),b
  7775  0031A2  0E00               	movlw	0
  7776  0031A4  21F9               	addwfc	(lcd_pix@y+1)& (0+255),w,b
  7777  0031A6  6FFF               	movwf	(??_lcd_pix+3)& (0+255),b
  7778  0031A8  0EFF               	movlw	255
  7779  0031AA  25FE               	addwf	(??_lcd_pix+2)& (0+255),w,b
  7780  0031AC  6FF4               	movwf	lcd_set_address@y2& (0+255),b
  7781  0031AE  0EFF               	movlw	255
  7782  0031B0  21FF               	addwfc	(??_lcd_pix+3)& (0+255),w,b
  7783  0031B2  6FF5               	movwf	(lcd_set_address@y2+1)& (0+255),b
  7784  0031B4  EC7D  F022         	call	_lcd_set_address	;wreg free
  7785                           
  7786                           ;tft.c: 126: lcd_memory_start();
  7787  0031B8  EC24  F026         	call	_lcd_memory_start	;wreg free
  7788                           
  7789                           ;tft.c: 128: switch (c) {
  7790  0031BC  D03A               	goto	l410
  7791  0031BE                     
  7792                           ;tft.c: 130: for(i=0;i<n1;i++) {
  7793  0031BE  0E00               	movlw	0
  7794  0031C0  0105               	movlb	5	; () banked
  7795  0031C2  6F72               	movwf	(lcd_pix@i+1)& (0+255),b
  7796  0031C4  0E00               	movlw	0
  7797  0031C6  6F71               	movwf	lcd_pix@i& (0+255),b
  7798  0031C8  D009               	goto	l412
  7799  0031CA                     
  7800                           ; BSR set to: 5
  7801                           ;tft.c: 131: lcd_write_bus(0x00);
  7802                           
  7803                           ; BSR set to: 5
  7804  0031CA  0E00               	movlw	0
  7805  0031CC  EC0B  F026         	call	_lcd_write_bus
  7806                           
  7807                           ;tft.c: 132: lcd_write_bus(0x00);
  7808  0031D0  0E00               	movlw	0
  7809  0031D2  EC0B  F026         	call	_lcd_write_bus
  7810  0031D6  0105               	movlb	5	; () banked
  7811  0031D8  4B71               	infsnz	lcd_pix@i& (0+255),f,b
  7812  0031DA  2B72               	incf	(lcd_pix@i+1)& (0+255),f,b
  7813  0031DC                     l412:
  7814                           
  7815                           ; BSR set to: 5
  7816                           
  7817                           ; BSR set to: 5
  7818  0031DC  5170               	movf	lcd_pix@n1& (0+255),w,b
  7819  0031DE  0101               	movlb	1	; () banked
  7820  0031E0  6FFC               	movwf	??_lcd_pix& (0+255),b
  7821  0031E2  6BFD               	clrf	(??_lcd_pix+1)& (0+255),b
  7822  0031E4  51FC               	movf	??_lcd_pix& (0+255),w,b
  7823  0031E6  0105               	movlb	5	; () banked
  7824  0031E8  5D71               	subwf	lcd_pix@i& (0+255),w,b
  7825  0031EA  0101               	movlb	1	; () banked
  7826  0031EC  51FD               	movf	(??_lcd_pix+1)& (0+255),w,b
  7827  0031EE  0105               	movlb	5	; () banked
  7828  0031F0  5972               	subwfb	(lcd_pix@i+1)& (0+255),w,b
  7829  0031F2  B0D8               	btfsc	status,0,c
  7830  0031F4  D026               	goto	l415
  7831  0031F6  D7E9               	goto	l413
  7832  0031F8                     
  7833                           ;tft.c: 136: for(i=0;i<n1;i++) {
  7834                           
  7835                           ; BSR set to: 5
  7836  0031F8  0E00               	movlw	0
  7837  0031FA  0105               	movlb	5	; () banked
  7838  0031FC  6F72               	movwf	(lcd_pix@i+1)& (0+255),b
  7839  0031FE  0E00               	movlw	0
  7840  003200  6F71               	movwf	lcd_pix@i& (0+255),b
  7841  003202  D009               	goto	l417
  7842  003204                     
  7843                           ; BSR set to: 5
  7844                           ;tft.c: 137: lcd_write_bus(0xFF);
  7845                           
  7846                           ; BSR set to: 5
  7847  003204  0EFF               	movlw	255
  7848  003206  EC0B  F026         	call	_lcd_write_bus
  7849                           
  7850                           ;tft.c: 138: lcd_write_bus(0xFF);
  7851  00320A  0EFF               	movlw	255
  7852  00320C  EC0B  F026         	call	_lcd_write_bus
  7853  003210  0105               	movlb	5	; () banked
  7854  003212  4B71               	infsnz	lcd_pix@i& (0+255),f,b
  7855  003214  2B72               	incf	(lcd_pix@i+1)& (0+255),f,b
  7856  003216                     l417:
  7857                           
  7858                           ; BSR set to: 5
  7859                           
  7860                           ; BSR set to: 5
  7861  003216  5170               	movf	lcd_pix@n1& (0+255),w,b
  7862  003218  0101               	movlb	1	; () banked
  7863  00321A  6FFC               	movwf	??_lcd_pix& (0+255),b
  7864  00321C  6BFD               	clrf	(??_lcd_pix+1)& (0+255),b
  7865  00321E  51FC               	movf	??_lcd_pix& (0+255),w,b
  7866  003220  0105               	movlb	5	; () banked
  7867  003222  5D71               	subwf	lcd_pix@i& (0+255),w,b
  7868  003224  0101               	movlb	1	; () banked
  7869  003226  51FD               	movf	(??_lcd_pix+1)& (0+255),w,b
  7870  003228  0105               	movlb	5	; () banked
  7871  00322A  5972               	subwfb	(lcd_pix@i+1)& (0+255),w,b
  7872  00322C  B0D8               	btfsc	status,0,c
  7873  00322E  D009               	goto	l415
  7874  003230  D7E9               	goto	l418
  7875  003232                     l410:
  7876                           
  7877                           ; BSR set to: 5
  7878  003232  0101               	movlb	1	; () banked
  7879  003234  51FA               	movf	lcd_pix@c& (0+255),w,b
  7880                           
  7881                           ; Switch size 1, requested type "space"
  7882                           ; Number of cases is 2, Range of values is 0 to 1
  7883                           ; switch strategies available:
  7884                           ; Name         Instructions Cycles
  7885                           ; simple_byte            7     4 (average)
  7886                           ;	Chosen strategy is simple_byte
  7887  003236  0A00               	xorlw	0	; case 0
  7888  003238  B4D8               	btfsc	status,2,c
  7889  00323A  D7DE               	goto	l416
  7890  00323C  0A01               	xorlw	1	; case 1
  7891  00323E  B4D8               	btfsc	status,2,c
  7892  003240  D7BE               	goto	l411
  7893  003242                     l415:
  7894                           
  7895                           ;tft.c: 143: LATA1 = 1;
  7896  003242  8289               	bsf	3977,1,c	;volatile
  7897  003244  0012               	return		;funcret
  7898  003246                     __end_of_lcd_pix:
  7899                           	opt stack 0
  7900                           tblptru	equ	0xFF8
  7901                           tblptrh	equ	0xFF7
  7902                           tblptrl	equ	0xFF6
  7903                           tablat	equ	0xFF5
  7904                           prodh	equ	0xFF4
  7905                           prodl	equ	0xFF3
  7906                           intcon	equ	0xFF2
  7907                           postinc0	equ	0xFEE
  7908                           wreg	equ	0xFE8
  7909                           indf1	equ	0xFE7
  7910                           postdec1	equ	0xFE5
  7911                           fsr1h	equ	0xFE2
  7912                           fsr1l	equ	0xFE1
  7913                           indf2	equ	0xFDF
  7914                           postinc2	equ	0xFDE
  7915                           postdec2	equ	0xFDD
  7916                           fsr2h	equ	0xFDA
  7917                           fsr2l	equ	0xFD9
  7918                           status	equ	0xFD8
  7919                           
  7920 ;; *************** function _lcd_set_address *****************
  7921 ;; Defined at:
  7922 ;;		line 27 in file "tft.c"
  7923 ;; Parameters:    Size  Location     Type
  7924 ;;  x1              2    0[BANK1 ] unsigned int 
  7925 ;;  y1              2    2[BANK1 ] unsigned int 
  7926 ;;  x2              2    4[BANK1 ] unsigned int 
  7927 ;;  y2              2    6[BANK1 ] unsigned int 
  7928 ;; Auto vars:     Size  Location     Type
  7929 ;;		None
  7930 ;; Return value:  Size  Location     Type
  7931 ;;                  1    wreg      void 
  7932 ;; Registers used:
  7933 ;;		wreg, status,2, cstack
  7934 ;; Tracked objects:
  7935 ;;		On entry : 0/0
  7936 ;;		On exit  : 0/0
  7937 ;;		Unchanged: 0/0
  7938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7939 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7940 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7941 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7942 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7943 ;;Total ram usage:        8 bytes
  7944 ;; Hardware stack levels used:    1
  7945 ;; Hardware stack levels required when called:   11
  7946 ;; This function calls:
  7947 ;;		_lcd_write_bus
  7948 ;;		_lcd_write_command
  7949 ;; This function is called by:
  7950 ;;		_lcd_set_background
  7951 ;;		_lcd_pix
  7952 ;;		_lcd_pix_color
  7953 ;; This function uses a non-reentrant model
  7954 ;;
  7955                           
  7956                           	psect	text20
  7957  0044FA                     __ptext20:
  7958                           	opt stack 0
  7959  0044FA                     _lcd_set_address:
  7960                           	opt stack 18
  7961                           
  7962                           ;tft.c: 28: lcd_write_command(0x2A);
  7963                           
  7964                           ;incstack = 0
  7965  0044FA  0E2A               	movlw	42
  7966  0044FC  EC02  F026         	call	_lcd_write_command
  7967                           
  7968                           ;tft.c: 29: lcd_write_bus(x1>>8);
  7969  004500  0101               	movlb	1	; () banked
  7970  004502  51EF               	movf	(lcd_set_address@x1+1)& (0+255),w,b
  7971  004504  EC0B  F026         	call	_lcd_write_bus
  7972                           
  7973                           ;tft.c: 30: lcd_write_bus(x1);
  7974  004508  0101               	movlb	1	; () banked
  7975  00450A  51EE               	movf	lcd_set_address@x1& (0+255),w,b
  7976  00450C  EC0B  F026         	call	_lcd_write_bus
  7977                           
  7978                           ;tft.c: 31: lcd_write_bus(x2>>8);
  7979  004510  0101               	movlb	1	; () banked
  7980  004512  51F3               	movf	(lcd_set_address@x2+1)& (0+255),w,b
  7981  004514  EC0B  F026         	call	_lcd_write_bus
  7982                           
  7983                           ;tft.c: 32: lcd_write_bus(x2);
  7984  004518  0101               	movlb	1	; () banked
  7985  00451A  51F2               	movf	lcd_set_address@x2& (0+255),w,b
  7986  00451C  EC0B  F026         	call	_lcd_write_bus
  7987                           
  7988                           ;tft.c: 34: lcd_write_command(0x2B);
  7989  004520  0E2B               	movlw	43
  7990  004522  EC02  F026         	call	_lcd_write_command
  7991                           
  7992                           ;tft.c: 35: lcd_write_bus(y1>>8);
  7993  004526  0101               	movlb	1	; () banked
  7994  004528  51F1               	movf	(lcd_set_address@y1+1)& (0+255),w,b
  7995  00452A  EC0B  F026         	call	_lcd_write_bus
  7996                           
  7997                           ;tft.c: 36: lcd_write_bus(y1);
  7998  00452E  0101               	movlb	1	; () banked
  7999  004530  51F0               	movf	lcd_set_address@y1& (0+255),w,b
  8000  004532  EC0B  F026         	call	_lcd_write_bus
  8001                           
  8002                           ;tft.c: 37: lcd_write_bus(y2>>8);
  8003  004536  0101               	movlb	1	; () banked
  8004  004538  51F5               	movf	(lcd_set_address@y2+1)& (0+255),w,b
  8005  00453A  EC0B  F026         	call	_lcd_write_bus
  8006                           
  8007                           ;tft.c: 38: lcd_write_bus(y2);
  8008  00453E  0101               	movlb	1	; () banked
  8009  004540  51F4               	movf	lcd_set_address@y2& (0+255),w,b
  8010  004542  EC0B  F026         	call	_lcd_write_bus
  8011  004546  0012               	return		;funcret
  8012  004548                     __end_of_lcd_set_address:
  8013                           	opt stack 0
  8014                           tblptru	equ	0xFF8
  8015                           tblptrh	equ	0xFF7
  8016                           tblptrl	equ	0xFF6
  8017                           tablat	equ	0xFF5
  8018                           prodh	equ	0xFF4
  8019                           prodl	equ	0xFF3
  8020                           intcon	equ	0xFF2
  8021                           postinc0	equ	0xFEE
  8022                           wreg	equ	0xFE8
  8023                           indf1	equ	0xFE7
  8024                           postdec1	equ	0xFE5
  8025                           fsr1h	equ	0xFE2
  8026                           fsr1l	equ	0xFE1
  8027                           indf2	equ	0xFDF
  8028                           postinc2	equ	0xFDE
  8029                           postdec2	equ	0xFDD
  8030                           fsr2h	equ	0xFDA
  8031                           fsr2l	equ	0xFD9
  8032                           status	equ	0xFD8
  8033                           
  8034 ;; *************** function _lcd_memory_start *****************
  8035 ;; Defined at:
  8036 ;;		line 41 in file "tft.c"
  8037 ;; Parameters:    Size  Location     Type
  8038 ;;		None
  8039 ;; Auto vars:     Size  Location     Type
  8040 ;;		None
  8041 ;; Return value:  Size  Location     Type
  8042 ;;                  1    wreg      void 
  8043 ;; Registers used:
  8044 ;;		wreg, status,2, cstack
  8045 ;; Tracked objects:
  8046 ;;		On entry : 0/0
  8047 ;;		On exit  : 0/0
  8048 ;;		Unchanged: 0/0
  8049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8050 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8051 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8052 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8053 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8054 ;;Total ram usage:        0 bytes
  8055 ;; Hardware stack levels used:    1
  8056 ;; Hardware stack levels required when called:   11
  8057 ;; This function calls:
  8058 ;;		_lcd_write_command
  8059 ;; This function is called by:
  8060 ;;		_lcd_set_background
  8061 ;;		_lcd_pix
  8062 ;;		_lcd_pix_color
  8063 ;; This function uses a non-reentrant model
  8064 ;;
  8065                           
  8066                           	psect	text21
  8067  004C48                     __ptext21:
  8068                           	opt stack 0
  8069  004C48                     _lcd_memory_start:
  8070                           	opt stack 18
  8071                           
  8072                           ;tft.c: 42: lcd_write_command(0x2C);
  8073                           
  8074                           ;incstack = 0
  8075  004C48  0E2C               	movlw	44
  8076  004C4A  EC02  F026         	call	_lcd_write_command
  8077  004C4E  0012               	return		;funcret
  8078  004C50                     __end_of_lcd_memory_start:
  8079                           	opt stack 0
  8080                           tblptru	equ	0xFF8
  8081                           tblptrh	equ	0xFF7
  8082                           tblptrl	equ	0xFF6
  8083                           tablat	equ	0xFF5
  8084                           prodh	equ	0xFF4
  8085                           prodl	equ	0xFF3
  8086                           intcon	equ	0xFF2
  8087                           postinc0	equ	0xFEE
  8088                           wreg	equ	0xFE8
  8089                           indf1	equ	0xFE7
  8090                           postdec1	equ	0xFE5
  8091                           fsr1h	equ	0xFE2
  8092                           fsr1l	equ	0xFE1
  8093                           indf2	equ	0xFDF
  8094                           postinc2	equ	0xFDE
  8095                           postdec2	equ	0xFDD
  8096                           fsr2h	equ	0xFDA
  8097                           fsr2l	equ	0xFD9
  8098                           status	equ	0xFD8
  8099                           
  8100 ;; *************** function ___wmul *****************
  8101 ;; Defined at:
  8102 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  8103 ;; Parameters:    Size  Location     Type
  8104 ;;  multiplier      2   51[BANK0 ] unsigned int 
  8105 ;;  multiplicand    2   53[BANK0 ] unsigned int 
  8106 ;; Auto vars:     Size  Location     Type
  8107 ;;  product         2   55[BANK0 ] unsigned int 
  8108 ;; Return value:  Size  Location     Type
  8109 ;;                  2   51[BANK0 ] unsigned int 
  8110 ;; Registers used:
  8111 ;;		wreg, status,2, status,0, prodl, prodh
  8112 ;; Tracked objects:
  8113 ;;		On entry : 0/0
  8114 ;;		On exit  : 0/0
  8115 ;;		Unchanged: 0/0
  8116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8117 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8118 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8119 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8120 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8121 ;;Total ram usage:        6 bytes
  8122 ;; Hardware stack levels used:    1
  8123 ;; Hardware stack levels required when called:    9
  8124 ;; This function calls:
  8125 ;;		Nothing
  8126 ;; This function is called by:
  8127 ;;		_lcd_pix
  8128 ;;		_lcd_pix_color
  8129 ;;		_lcd_text
  8130 ;;		_printf
  8131 ;; This function uses a non-reentrant model
  8132 ;;
  8133                           
  8134                           	psect	text22
  8135  004AC8                     __ptext22:
  8136                           	opt stack 0
  8137  004AC8                     ___wmul:
  8138                           	opt stack 20
  8139                           
  8140                           ;incstack = 0
  8141  004AC8  0100               	movlb	0	; () banked
  8142  004ACA  5193               	movf	___wmul@multiplier& (0+255),w,b
  8143  004ACC  0395               	mulwf	___wmul@multiplicand& (0+255),b
  8144  004ACE  CFF3 F097          	movff	prodl,___wmul@product
  8145  004AD2  CFF4 F098          	movff	prodh,___wmul@product+1
  8146  004AD6  5193               	movf	___wmul@multiplier& (0+255),w,b
  8147  004AD8  0396               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  8148  004ADA  50F3               	movf	prodl,w,c
  8149  004ADC  2798               	addwf	(___wmul@product+1)& (0+255),f,b
  8150  004ADE  5194               	movf	(___wmul@multiplier+1)& (0+255),w,b
  8151  004AE0  0395               	mulwf	___wmul@multiplicand& (0+255),b
  8152  004AE2  50F3               	movf	prodl,w,c
  8153  004AE4  2798               	addwf	(___wmul@product+1)& (0+255),f,b
  8154                           
  8155                           ; BSR set to: 0
  8156  004AE6  C097  F093         	movff	___wmul@product,?___wmul
  8157  004AEA  C098  F094         	movff	___wmul@product+1,?___wmul+1
  8158  004AEE  0012               	return	
  8159  004AF0                     __end_of___wmul:
  8160                           	opt stack 0
  8161                           tblptru	equ	0xFF8
  8162                           tblptrh	equ	0xFF7
  8163                           tblptrl	equ	0xFF6
  8164                           tablat	equ	0xFF5
  8165                           prodh	equ	0xFF4
  8166                           prodl	equ	0xFF3
  8167                           intcon	equ	0xFF2
  8168                           postinc0	equ	0xFEE
  8169                           wreg	equ	0xFE8
  8170                           indf1	equ	0xFE7
  8171                           postdec1	equ	0xFE5
  8172                           fsr1h	equ	0xFE2
  8173                           fsr1l	equ	0xFE1
  8174                           indf2	equ	0xFDF
  8175                           postinc2	equ	0xFDE
  8176                           postdec2	equ	0xFDD
  8177                           fsr2h	equ	0xFDA
  8178                           fsr2l	equ	0xFD9
  8179                           status	equ	0xFD8
  8180                           
  8181 ;; *************** function _bitRead *****************
  8182 ;; Defined at:
  8183 ;;		line 5 in file "tft.c"
  8184 ;; Parameters:    Size  Location     Type
  8185 ;;  number          2   51[BANK0 ] unsigned int 
  8186 ;;  position        2   53[BANK0 ] unsigned int 
  8187 ;; Auto vars:     Size  Location     Type
  8188 ;;		None
  8189 ;; Return value:  Size  Location     Type
  8190 ;;                  1    wreg      unsigned char 
  8191 ;; Registers used:
  8192 ;;		wreg, status,2, status,0
  8193 ;; Tracked objects:
  8194 ;;		On entry : 0/0
  8195 ;;		On exit  : 0/0
  8196 ;;		Unchanged: 0/0
  8197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8198 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8199 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8200 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8201 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8202 ;;Total ram usage:        7 bytes
  8203 ;; Hardware stack levels used:    1
  8204 ;; Hardware stack levels required when called:    9
  8205 ;; This function calls:
  8206 ;;		Nothing
  8207 ;; This function is called by:
  8208 ;;		_lcd_text
  8209 ;; This function uses a non-reentrant model
  8210 ;;
  8211                           
  8212                           	psect	text23
  8213  0048AC                     __ptext23:
  8214                           	opt stack 0
  8215  0048AC                     _bitRead:
  8216                           	opt stack 19
  8217                           
  8218                           ;tft.c: 6: position = 1 << position;
  8219                           
  8220                           ; BSR set to: 0
  8221                           ;incstack = 0
  8222  0048AC  C095  F097         	movff	bitRead@position,??_bitRead
  8223  0048B0  0E01               	movlw	1
  8224  0048B2  0100               	movlb	0	; () banked
  8225  0048B4  6F98               	movwf	(??_bitRead+1)& (0+255),b
  8226  0048B6  0E00               	movlw	0
  8227  0048B8  6F99               	movwf	(??_bitRead+2)& (0+255),b
  8228  0048BA  2B97               	incf	??_bitRead& (0+255),f,b
  8229  0048BC  D003               	goto	u8614
  8230  0048BE                     u8615:
  8231  0048BE  90D8               	bcf	status,0,c
  8232  0048C0  3798               	rlcf	(??_bitRead+1)& (0+255),f,b
  8233  0048C2  3799               	rlcf	(??_bitRead+2)& (0+255),f,b
  8234  0048C4                     u8614:
  8235  0048C4  2F97               	decfsz	??_bitRead& (0+255),f,b
  8236  0048C6  D7FB               	goto	u8615
  8237  0048C8  C098  F095         	movff	??_bitRead+1,bitRead@position
  8238  0048CC  C099  F096         	movff	??_bitRead+2,bitRead@position+1
  8239                           
  8240                           ;tft.c: 7: if (number & position) {
  8241  0048D0  0100               	movlb	0	; () banked
  8242  0048D2  5195               	movf	bitRead@position& (0+255),w,b
  8243  0048D4  1593               	andwf	bitRead@number& (0+255),w,b
  8244  0048D6  6F97               	movwf	??_bitRead& (0+255),b
  8245  0048D8  5196               	movf	(bitRead@position+1)& (0+255),w,b
  8246  0048DA  1594               	andwf	(bitRead@number+1)& (0+255),w,b
  8247  0048DC  6F98               	movwf	(??_bitRead+1)& (0+255),b
  8248  0048DE  5197               	movf	??_bitRead& (0+255),w,b
  8249  0048E0  1198               	iorwf	(??_bitRead+1)& (0+255),w,b
  8250  0048E2  B4D8               	btfsc	status,2,c
  8251  0048E4  D002               	goto	l383
  8252                           
  8253                           ; BSR set to: 0
  8254                           ;tft.c: 8: return 1;
  8255  0048E6  0E01               	movlw	1
  8256                           
  8257                           ; BSR set to: 0
  8258                           ;tft.c: 9: } else {
  8259                           
  8260                           ; BSR set to: 0
  8261  0048E8  0012               	return	
  8262  0048EA                     l383:
  8263                           
  8264                           ; BSR set to: 0
  8265                           ;tft.c: 10: return 0;
  8266                           
  8267                           ; BSR set to: 0
  8268  0048EA  0E00               	movlw	0
  8269                           
  8270                           ; BSR set to: 0
  8271  0048EC  0012               	return	
  8272  0048EE                     __end_of_bitRead:
  8273                           	opt stack 0
  8274                           tblptru	equ	0xFF8
  8275                           tblptrh	equ	0xFF7
  8276                           tblptrl	equ	0xFF6
  8277                           tablat	equ	0xFF5
  8278                           prodh	equ	0xFF4
  8279                           prodl	equ	0xFF3
  8280                           intcon	equ	0xFF2
  8281                           postinc0	equ	0xFEE
  8282                           wreg	equ	0xFE8
  8283                           indf1	equ	0xFE7
  8284                           postdec1	equ	0xFE5
  8285                           fsr1h	equ	0xFE2
  8286                           fsr1l	equ	0xFE1
  8287                           indf2	equ	0xFDF
  8288                           postinc2	equ	0xFDE
  8289                           postdec2	equ	0xFDD
  8290                           fsr2h	equ	0xFDA
  8291                           fsr2l	equ	0xFD9
  8292                           status	equ	0xFD8
  8293                           
  8294 ;; *************** function _lcd_init *****************
  8295 ;; Defined at:
  8296 ;;		line 45 in file "tft.c"
  8297 ;; Parameters:    Size  Location     Type
  8298 ;;		None
  8299 ;; Auto vars:     Size  Location     Type
  8300 ;;		None
  8301 ;; Return value:  Size  Location     Type
  8302 ;;                  1    wreg      void 
  8303 ;; Registers used:
  8304 ;;		wreg, status,2, cstack
  8305 ;; Tracked objects:
  8306 ;;		On entry : 0/0
  8307 ;;		On exit  : 0/0
  8308 ;;		Unchanged: 0/0
  8309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8311 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8312 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8313 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8314 ;;Total ram usage:        2 bytes
  8315 ;; Hardware stack levels used:    1
  8316 ;; Hardware stack levels required when called:   11
  8317 ;; This function calls:
  8318 ;;		_lcd_write_bus
  8319 ;;		_lcd_write_command
  8320 ;; This function is called by:
  8321 ;;		_main
  8322 ;; This function uses a non-reentrant model
  8323 ;;
  8324                           
  8325                           	psect	text24
  8326  002A3C                     __ptext24:
  8327                           	opt stack 0
  8328  002A3C                     _lcd_init:
  8329                           	opt stack 19
  8330                           
  8331                           ;tft.c: 46: LATA = 0xFF;
  8332                           
  8333                           ; BSR set to: 0
  8334                           ;incstack = 0
  8335  002A3C  6889               	setf	3977,c	;volatile
  8336                           
  8337                           ;tft.c: 47: _delay((unsigned long)((5)*(64000000/4000.0)));
  8338  002A3E  0E68               	movlw	104
  8339  002A40  0100               	movlb	0	; () banked
  8340  002A42  6F95               	movwf	??_lcd_init& (0+255),b
  8341  002A44  0EE4               	movlw	228
  8342  002A46                     u11947:
  8343  002A46  2EE8               	decfsz	wreg,f,c
  8344  002A48  D7FE               	bra	u11947
  8345  002A4A  2F95               	decfsz	??_lcd_init& (0+255),f,b
  8346  002A4C  D7FC               	bra	u11947
  8347  002A4E  F000               	nop	
  8348                           
  8349                           ;tft.c: 48: LATA0 = 0;
  8350  002A50  9089               	bcf	3977,0,c	;volatile
  8351                           
  8352                           ;tft.c: 49: _delay((unsigned long)((15)*(64000000/4000.0)));
  8353  002A52  0E02               	movlw	2
  8354  002A54  0100               	movlb	0	; () banked
  8355  002A56  6F96               	movwf	(??_lcd_init+1)& (0+255),b
  8356  002A58  0E38               	movlw	56
  8357  002A5A  6F95               	movwf	??_lcd_init& (0+255),b
  8358  002A5C  0EAD               	movlw	173
  8359  002A5E                     u11957:
  8360  002A5E  2EE8               	decfsz	wreg,f,c
  8361  002A60  D7FE               	bra	u11957
  8362  002A62  2F95               	decfsz	??_lcd_init& (0+255),f,b
  8363  002A64  D7FC               	bra	u11957
  8364  002A66  2F96               	decfsz	(??_lcd_init+1)& (0+255),f,b
  8365  002A68  D7FA               	bra	u11957
  8366                           
  8367                           ;tft.c: 50: LATA0 = 1;
  8368  002A6A  8089               	bsf	3977,0,c	;volatile
  8369                           
  8370                           ;tft.c: 51: _delay((unsigned long)((15)*(64000000/4000.0)));
  8371  002A6C  0E02               	movlw	2
  8372  002A6E  0100               	movlb	0	; () banked
  8373  002A70  6F96               	movwf	(??_lcd_init+1)& (0+255),b
  8374  002A72  0E38               	movlw	56
  8375  002A74  6F95               	movwf	??_lcd_init& (0+255),b
  8376  002A76  0EAD               	movlw	173
  8377  002A78                     u11967:
  8378  002A78  2EE8               	decfsz	wreg,f,c
  8379  002A7A  D7FE               	bra	u11967
  8380  002A7C  2F95               	decfsz	??_lcd_init& (0+255),f,b
  8381  002A7E  D7FC               	bra	u11967
  8382  002A80  2F96               	decfsz	(??_lcd_init+1)& (0+255),f,b
  8383  002A82  D7FA               	bra	u11967
  8384                           
  8385                           ;tft.c: 53: LATA1 = 0;
  8386  002A84  9289               	bcf	3977,1,c	;volatile
  8387                           
  8388                           ;tft.c: 55: lcd_write_command(0x11);
  8389  002A86  0E11               	movlw	17
  8390  002A88  EC02  F026         	call	_lcd_write_command
  8391                           
  8392                           ;tft.c: 56: _delay((unsigned long)((20)*(64000000/4000.0)));
  8393  002A8C  0E02               	movlw	2
  8394  002A8E  0100               	movlb	0	; () banked
  8395  002A90  6F96               	movwf	(??_lcd_init+1)& (0+255),b
  8396  002A92  0EA0               	movlw	160
  8397  002A94  6F95               	movwf	??_lcd_init& (0+255),b
  8398  002A96  0E92               	movlw	146
  8399  002A98                     u11977:
  8400  002A98  2EE8               	decfsz	wreg,f,c
  8401  002A9A  D7FE               	bra	u11977
  8402  002A9C  2F95               	decfsz	??_lcd_init& (0+255),f,b
  8403  002A9E  D7FC               	bra	u11977
  8404  002AA0  2F96               	decfsz	(??_lcd_init+1)& (0+255),f,b
  8405  002AA2  D7FA               	bra	u11977
  8406  002AA4  F000               	nop	
  8407                           
  8408                           ;tft.c: 57: lcd_write_command(0xD0);
  8409  002AA6  0ED0               	movlw	208
  8410  002AA8  EC02  F026         	call	_lcd_write_command
  8411                           
  8412                           ;tft.c: 58: lcd_write_bus(0x07);
  8413  002AAC  0E07               	movlw	7
  8414  002AAE  EC0B  F026         	call	_lcd_write_bus
  8415                           
  8416                           ;tft.c: 59: lcd_write_bus(0x42);
  8417  002AB2  0E42               	movlw	66
  8418  002AB4  EC0B  F026         	call	_lcd_write_bus
  8419                           
  8420                           ;tft.c: 60: lcd_write_bus(0x18);
  8421  002AB8  0E18               	movlw	24
  8422  002ABA  EC0B  F026         	call	_lcd_write_bus
  8423                           
  8424                           ;tft.c: 62: lcd_write_command(0xD1);
  8425  002ABE  0ED1               	movlw	209
  8426  002AC0  EC02  F026         	call	_lcd_write_command
  8427                           
  8428                           ;tft.c: 63: lcd_write_bus(0x00);
  8429  002AC4  0E00               	movlw	0
  8430  002AC6  EC0B  F026         	call	_lcd_write_bus
  8431                           
  8432                           ;tft.c: 64: lcd_write_bus(0x07);
  8433  002ACA  0E07               	movlw	7
  8434  002ACC  EC0B  F026         	call	_lcd_write_bus
  8435                           
  8436                           ;tft.c: 65: lcd_write_bus(0x10);
  8437  002AD0  0E10               	movlw	16
  8438  002AD2  EC0B  F026         	call	_lcd_write_bus
  8439                           
  8440                           ;tft.c: 67: lcd_write_command(0xD2);
  8441  002AD6  0ED2               	movlw	210
  8442  002AD8  EC02  F026         	call	_lcd_write_command
  8443                           
  8444                           ;tft.c: 68: lcd_write_bus(0x01);
  8445  002ADC  0E01               	movlw	1
  8446  002ADE  EC0B  F026         	call	_lcd_write_bus
  8447                           
  8448                           ;tft.c: 69: lcd_write_bus(0x00);
  8449  002AE2  0E00               	movlw	0
  8450  002AE4  EC0B  F026         	call	_lcd_write_bus
  8451                           
  8452                           ;tft.c: 71: lcd_write_command(0xC0);
  8453  002AE8  0EC0               	movlw	192
  8454  002AEA  EC02  F026         	call	_lcd_write_command
  8455                           
  8456                           ;tft.c: 72: lcd_write_bus(0x10);
  8457  002AEE  0E10               	movlw	16
  8458  002AF0  EC0B  F026         	call	_lcd_write_bus
  8459                           
  8460                           ;tft.c: 73: lcd_write_bus(0x3B);
  8461  002AF4  0E3B               	movlw	59
  8462  002AF6  EC0B  F026         	call	_lcd_write_bus
  8463                           
  8464                           ;tft.c: 74: lcd_write_bus(0x00);
  8465  002AFA  0E00               	movlw	0
  8466  002AFC  EC0B  F026         	call	_lcd_write_bus
  8467                           
  8468                           ;tft.c: 75: lcd_write_bus(0x02);
  8469  002B00  0E02               	movlw	2
  8470  002B02  EC0B  F026         	call	_lcd_write_bus
  8471                           
  8472                           ;tft.c: 76: lcd_write_bus(0x11);
  8473  002B06  0E11               	movlw	17
  8474  002B08  EC0B  F026         	call	_lcd_write_bus
  8475                           
  8476                           ;tft.c: 78: lcd_write_command(0xC5);
  8477  002B0C  0EC5               	movlw	197
  8478  002B0E  EC02  F026         	call	_lcd_write_command
  8479                           
  8480                           ;tft.c: 79: lcd_write_bus(0x03);
  8481  002B12  0E03               	movlw	3
  8482  002B14  EC0B  F026         	call	_lcd_write_bus
  8483                           
  8484                           ;tft.c: 81: lcd_write_command(0x36);
  8485  002B18  0E36               	movlw	54
  8486  002B1A  EC02  F026         	call	_lcd_write_command
  8487                           
  8488                           ;tft.c: 82: lcd_write_bus(0x0A);
  8489  002B1E  0E0A               	movlw	10
  8490  002B20  EC0B  F026         	call	_lcd_write_bus
  8491                           
  8492                           ;tft.c: 84: lcd_write_command(0x3A);
  8493  002B24  0E3A               	movlw	58
  8494  002B26  EC02  F026         	call	_lcd_write_command
  8495                           
  8496                           ;tft.c: 85: lcd_write_bus(0x55);
  8497  002B2A  0E55               	movlw	85
  8498  002B2C  EC0B  F026         	call	_lcd_write_bus
  8499                           
  8500                           ;tft.c: 87: lcd_write_command(0x2A);
  8501  002B30  0E2A               	movlw	42
  8502  002B32  EC02  F026         	call	_lcd_write_command
  8503                           
  8504                           ;tft.c: 88: lcd_write_bus(0x00);
  8505  002B36  0E00               	movlw	0
  8506  002B38  EC0B  F026         	call	_lcd_write_bus
  8507                           
  8508                           ;tft.c: 89: lcd_write_bus(0x00);
  8509  002B3C  0E00               	movlw	0
  8510  002B3E  EC0B  F026         	call	_lcd_write_bus
  8511                           
  8512                           ;tft.c: 90: lcd_write_bus(0x01);
  8513  002B42  0E01               	movlw	1
  8514  002B44  EC0B  F026         	call	_lcd_write_bus
  8515                           
  8516                           ;tft.c: 91: lcd_write_bus(0x3F);
  8517  002B48  0E3F               	movlw	63
  8518  002B4A  EC0B  F026         	call	_lcd_write_bus
  8519                           
  8520                           ;tft.c: 93: lcd_write_command(0x2B);
  8521  002B4E  0E2B               	movlw	43
  8522  002B50  EC02  F026         	call	_lcd_write_command
  8523                           
  8524                           ;tft.c: 94: lcd_write_bus(0x00);
  8525  002B54  0E00               	movlw	0
  8526  002B56  EC0B  F026         	call	_lcd_write_bus
  8527                           
  8528                           ;tft.c: 95: lcd_write_bus(0x00);
  8529  002B5A  0E00               	movlw	0
  8530  002B5C  EC0B  F026         	call	_lcd_write_bus
  8531                           
  8532                           ;tft.c: 96: lcd_write_bus(0x01);
  8533  002B60  0E01               	movlw	1
  8534  002B62  EC0B  F026         	call	_lcd_write_bus
  8535                           
  8536                           ;tft.c: 97: lcd_write_bus(0xE0);
  8537  002B66  0EE0               	movlw	224
  8538  002B68  EC0B  F026         	call	_lcd_write_bus
  8539                           
  8540                           ;tft.c: 98: _delay((unsigned long)((120)*(64000000/4000.0)));
  8541  002B6C  0E0A               	movlw	10
  8542  002B6E  0100               	movlb	0	; () banked
  8543  002B70  6F96               	movwf	(??_lcd_init+1)& (0+255),b
  8544  002B72  0EBE               	movlw	190
  8545  002B74  6F95               	movwf	??_lcd_init& (0+255),b
  8546  002B76  0E79               	movlw	121
  8547  002B78                     u11987:
  8548  002B78  2EE8               	decfsz	wreg,f,c
  8549  002B7A  D7FE               	bra	u11987
  8550  002B7C  2F95               	decfsz	??_lcd_init& (0+255),f,b
  8551  002B7E  D7FC               	bra	u11987
  8552  002B80  2F96               	decfsz	(??_lcd_init+1)& (0+255),f,b
  8553  002B82  D7FA               	bra	u11987
  8554                           
  8555                           ;tft.c: 99: lcd_write_command(0x29);
  8556  002B84  0E29               	movlw	41
  8557  002B86  EC02  F026         	call	_lcd_write_command
  8558                           
  8559                           ;tft.c: 101: LATA1 = 1;
  8560  002B8A  8289               	bsf	3977,1,c	;volatile
  8561  002B8C  0012               	return		;funcret
  8562  002B8E                     __end_of_lcd_init:
  8563                           	opt stack 0
  8564                           tblptru	equ	0xFF8
  8565                           tblptrh	equ	0xFF7
  8566                           tblptrl	equ	0xFF6
  8567                           tablat	equ	0xFF5
  8568                           prodh	equ	0xFF4
  8569                           prodl	equ	0xFF3
  8570                           intcon	equ	0xFF2
  8571                           postinc0	equ	0xFEE
  8572                           wreg	equ	0xFE8
  8573                           indf1	equ	0xFE7
  8574                           postdec1	equ	0xFE5
  8575                           fsr1h	equ	0xFE2
  8576                           fsr1l	equ	0xFE1
  8577                           indf2	equ	0xFDF
  8578                           postinc2	equ	0xFDE
  8579                           postdec2	equ	0xFDD
  8580                           fsr2h	equ	0xFDA
  8581                           fsr2l	equ	0xFD9
  8582                           status	equ	0xFD8
  8583                           
  8584 ;; *************** function _lcd_write_command *****************
  8585 ;; Defined at:
  8586 ;;		line 21 in file "tft.c"
  8587 ;; Parameters:    Size  Location     Type
  8588 ;;  cmd             1    wreg     unsigned char 
  8589 ;; Auto vars:     Size  Location     Type
  8590 ;;  cmd             1   52[BANK0 ] unsigned char 
  8591 ;; Return value:  Size  Location     Type
  8592 ;;                  1    wreg      void 
  8593 ;; Registers used:
  8594 ;;		wreg, status,2, cstack
  8595 ;; Tracked objects:
  8596 ;;		On entry : 0/0
  8597 ;;		On exit  : 0/0
  8598 ;;		Unchanged: 0/0
  8599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8601 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8603 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8604 ;;Total ram usage:        1 bytes
  8605 ;; Hardware stack levels used:    1
  8606 ;; Hardware stack levels required when called:   10
  8607 ;; This function calls:
  8608 ;;		_lcd_write_bus
  8609 ;; This function is called by:
  8610 ;;		_lcd_set_address
  8611 ;;		_lcd_memory_start
  8612 ;;		_lcd_init
  8613 ;; This function uses a non-reentrant model
  8614 ;;
  8615                           
  8616                           	psect	text25
  8617  004C04                     __ptext25:
  8618                           	opt stack 0
  8619  004C04                     _lcd_write_command:
  8620                           	opt stack 18
  8621                           
  8622                           ;incstack = 0
  8623                           ;lcd_write_command@cmd stored from wreg
  8624  004C04  0100               	movlb	0	; () banked
  8625  004C06  6F94               	movwf	lcd_write_command@cmd& (0+255),b
  8626                           
  8627                           ;tft.c: 22: LATA2 = 0;
  8628  004C08  9489               	bcf	3977,2,c	;volatile
  8629                           
  8630                           ;tft.c: 23: lcd_write_bus(cmd);
  8631  004C0A  0100               	movlb	0	; () banked
  8632  004C0C  5194               	movf	lcd_write_command@cmd& (0+255),w,b
  8633  004C0E  EC0B  F026         	call	_lcd_write_bus
  8634                           
  8635                           ;tft.c: 24: LATA2 = 1;
  8636  004C12  8489               	bsf	3977,2,c	;volatile
  8637  004C14  0012               	return		;funcret
  8638  004C16                     __end_of_lcd_write_command:
  8639                           	opt stack 0
  8640                           tblptru	equ	0xFF8
  8641                           tblptrh	equ	0xFF7
  8642                           tblptrl	equ	0xFF6
  8643                           tablat	equ	0xFF5
  8644                           prodh	equ	0xFF4
  8645                           prodl	equ	0xFF3
  8646                           intcon	equ	0xFF2
  8647                           postinc0	equ	0xFEE
  8648                           wreg	equ	0xFE8
  8649                           indf1	equ	0xFE7
  8650                           postdec1	equ	0xFE5
  8651                           fsr1h	equ	0xFE2
  8652                           fsr1l	equ	0xFE1
  8653                           indf2	equ	0xFDF
  8654                           postinc2	equ	0xFDE
  8655                           postdec2	equ	0xFDD
  8656                           fsr2h	equ	0xFDA
  8657                           fsr2l	equ	0xFD9
  8658                           status	equ	0xFD8
  8659                           
  8660 ;; *************** function _lcd_write_bus *****************
  8661 ;; Defined at:
  8662 ;;		line 14 in file "tft.c"
  8663 ;; Parameters:    Size  Location     Type
  8664 ;;  data            1    wreg     unsigned char 
  8665 ;; Auto vars:     Size  Location     Type
  8666 ;;  data            1   51[BANK0 ] unsigned char 
  8667 ;; Return value:  Size  Location     Type
  8668 ;;                  1    wreg      void 
  8669 ;; Registers used:
  8670 ;;		wreg
  8671 ;; Tracked objects:
  8672 ;;		On entry : 0/0
  8673 ;;		On exit  : 0/0
  8674 ;;		Unchanged: 0/0
  8675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8676 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8677 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8679 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8680 ;;Total ram usage:        1 bytes
  8681 ;; Hardware stack levels used:    1
  8682 ;; Hardware stack levels required when called:    9
  8683 ;; This function calls:
  8684 ;;		Nothing
  8685 ;; This function is called by:
  8686 ;;		_lcd_write_command
  8687 ;;		_lcd_set_address
  8688 ;;		_lcd_init
  8689 ;;		_lcd_set_background
  8690 ;;		_lcd_pix
  8691 ;;		_lcd_pix_color
  8692 ;; This function uses a non-reentrant model
  8693 ;;
  8694                           
  8695                           	psect	text26
  8696  004C16                     __ptext26:
  8697                           	opt stack 0
  8698  004C16                     _lcd_write_bus:
  8699                           	opt stack 20
  8700                           
  8701                           ;incstack = 0
  8702                           ;lcd_write_bus@data stored from wreg
  8703  004C16  0100               	movlb	0	; () banked
  8704  004C18  6F93               	movwf	lcd_write_bus@data& (0+255),b
  8705                           
  8706                           ;tft.c: 15: LATB = data;
  8707  004C1A  C093  FF8A         	movff	lcd_write_bus@data,3978	;volatile
  8708                           
  8709                           ;tft.c: 16: LATA3 = 0;
  8710  004C1E  9689               	bcf	3977,3,c	;volatile
  8711                           
  8712                           ;tft.c: 18: LATA3 = 1;
  8713  004C20  8689               	bsf	3977,3,c	;volatile
  8714  004C22  0012               	return		;funcret
  8715  004C24                     __end_of_lcd_write_bus:
  8716                           	opt stack 0
  8717                           tblptru	equ	0xFF8
  8718                           tblptrh	equ	0xFF7
  8719                           tblptrl	equ	0xFF6
  8720                           tablat	equ	0xFF5
  8721                           prodh	equ	0xFF4
  8722                           prodl	equ	0xFF3
  8723                           intcon	equ	0xFF2
  8724                           postinc0	equ	0xFEE
  8725                           wreg	equ	0xFE8
  8726                           indf1	equ	0xFE7
  8727                           postdec1	equ	0xFE5
  8728                           fsr1h	equ	0xFE2
  8729                           fsr1l	equ	0xFE1
  8730                           indf2	equ	0xFDF
  8731                           postinc2	equ	0xFDE
  8732                           postdec2	equ	0xFDD
  8733                           fsr2h	equ	0xFDA
  8734                           fsr2l	equ	0xFD9
  8735                           status	equ	0xFD8
  8736                           
  8737 ;; *************** function _keyboard_init *****************
  8738 ;; Defined at:
  8739 ;;		line 3 in file "keyboard.c"
  8740 ;; Parameters:    Size  Location     Type
  8741 ;;		None
  8742 ;; Auto vars:     Size  Location     Type
  8743 ;;		None
  8744 ;; Return value:  Size  Location     Type
  8745 ;;                  1    wreg      void 
  8746 ;; Registers used:
  8747 ;;		None
  8748 ;; Tracked objects:
  8749 ;;		On entry : 0/0
  8750 ;;		On exit  : 0/0
  8751 ;;		Unchanged: 0/0
  8752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8754 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8756 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8757 ;;Total ram usage:        0 bytes
  8758 ;; Hardware stack levels used:    1
  8759 ;; Hardware stack levels required when called:    9
  8760 ;; This function calls:
  8761 ;;		Nothing
  8762 ;; This function is called by:
  8763 ;;		_main
  8764 ;; This function uses a non-reentrant model
  8765 ;;
  8766                           
  8767                           	psect	text27
  8768  004C3E                     __ptext27:
  8769                           	opt stack 0
  8770  004C3E                     _keyboard_init:
  8771                           	opt stack 21
  8772                           
  8773                           ;keyboard.c: 4: LATDbits.LATD3 = 1;
  8774                           
  8775                           ;incstack = 0
  8776  004C3E  868C               	bsf	3980,3,c	;volatile
  8777                           
  8778                           ;keyboard.c: 5: LATDbits.LATD2 = 1;
  8779  004C40  848C               	bsf	3980,2,c	;volatile
  8780                           
  8781                           ;keyboard.c: 6: LATDbits.LATD1 = 1;
  8782  004C42  828C               	bsf	3980,1,c	;volatile
  8783                           
  8784                           ;keyboard.c: 7: LATDbits.LATD0 = 1;
  8785  004C44  808C               	bsf	3980,0,c	;volatile
  8786  004C46  0012               	return		;funcret
  8787  004C48                     __end_of_keyboard_init:
  8788                           	opt stack 0
  8789                           tblptru	equ	0xFF8
  8790                           tblptrh	equ	0xFF7
  8791                           tblptrl	equ	0xFF6
  8792                           tablat	equ	0xFF5
  8793                           prodh	equ	0xFF4
  8794                           prodl	equ	0xFF3
  8795                           intcon	equ	0xFF2
  8796                           postinc0	equ	0xFEE
  8797                           wreg	equ	0xFE8
  8798                           indf1	equ	0xFE7
  8799                           postdec1	equ	0xFE5
  8800                           fsr1h	equ	0xFE2
  8801                           fsr1l	equ	0xFE1
  8802                           indf2	equ	0xFDF
  8803                           postinc2	equ	0xFDE
  8804                           postdec2	equ	0xFDD
  8805                           fsr2h	equ	0xFDA
  8806                           fsr2l	equ	0xFD9
  8807                           status	equ	0xFD8
  8808                           
  8809 ;; *************** function _gpio_init *****************
  8810 ;; Defined at:
  8811 ;;		line 3 in file "gpio.c"
  8812 ;; Parameters:    Size  Location     Type
  8813 ;;		None
  8814 ;; Auto vars:     Size  Location     Type
  8815 ;;		None
  8816 ;; Return value:  Size  Location     Type
  8817 ;;                  1    wreg      void 
  8818 ;; Registers used:
  8819 ;;		None
  8820 ;; Tracked objects:
  8821 ;;		On entry : 0/0
  8822 ;;		On exit  : 0/0
  8823 ;;		Unchanged: 0/0
  8824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8825 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8826 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8827 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8828 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8829 ;;Total ram usage:        0 bytes
  8830 ;; Hardware stack levels used:    1
  8831 ;; Hardware stack levels required when called:    9
  8832 ;; This function calls:
  8833 ;;		Nothing
  8834 ;; This function is called by:
  8835 ;;		_main
  8836 ;; This function uses a non-reentrant model
  8837 ;;
  8838                           
  8839                           	psect	text28
  8840  004BF0                     __ptext28:
  8841                           	opt stack 0
  8842  004BF0                     _gpio_init:
  8843                           	opt stack 21
  8844                           
  8845                           ;gpio.c: 4: TRISAbits.TRISA6 = 0;
  8846                           
  8847                           ;incstack = 0
  8848  004BF0  9C92               	bcf	3986,6,c	;volatile
  8849                           
  8850                           ;gpio.c: 5: TRISCbits.TRISC4 = 0;
  8851  004BF2  9894               	bcf	3988,4,c	;volatile
  8852                           
  8853                           ;gpio.c: 6: TRISCbits.TRISC5 = 0;
  8854  004BF4  9A94               	bcf	3988,5,c	;volatile
  8855                           
  8856                           ;gpio.c: 7: TRISAbits.TRISA7 = 1;
  8857  004BF6  8E92               	bsf	3986,7,c	;volatile
  8858                           
  8859                           ;gpio.c: 8: TRISDbits.TRISD4 = 1;
  8860  004BF8  8895               	bsf	3989,4,c	;volatile
  8861                           
  8862                           ;gpio.c: 9: TRISDbits.TRISD5 = 1;
  8863  004BFA  8A95               	bsf	3989,5,c	;volatile
  8864                           
  8865                           ;gpio.c: 10: LATCbits.LATC4 = 0;
  8866  004BFC  988B               	bcf	3979,4,c	;volatile
  8867                           
  8868                           ;gpio.c: 11: LATCbits.LATC5 = 0;
  8869  004BFE  9A8B               	bcf	3979,5,c	;volatile
  8870                           
  8871                           ;gpio.c: 12: LATAbits.LATA6 = 0;
  8872  004C00  9C89               	bcf	3977,6,c	;volatile
  8873  004C02  0012               	return		;funcret
  8874  004C04                     __end_of_gpio_init:
  8875                           	opt stack 0
  8876                           tblptru	equ	0xFF8
  8877                           tblptrh	equ	0xFF7
  8878                           tblptrl	equ	0xFF6
  8879                           tablat	equ	0xFF5
  8880                           prodh	equ	0xFF4
  8881                           prodl	equ	0xFF3
  8882                           intcon	equ	0xFF2
  8883                           postinc0	equ	0xFEE
  8884                           wreg	equ	0xFE8
  8885                           indf1	equ	0xFE7
  8886                           postdec1	equ	0xFE5
  8887                           fsr1h	equ	0xFE2
  8888                           fsr1l	equ	0xFE1
  8889                           indf2	equ	0xFDF
  8890                           postinc2	equ	0xFDE
  8891                           postdec2	equ	0xFDD
  8892                           fsr2h	equ	0xFDA
  8893                           fsr2l	equ	0xFD9
  8894                           status	equ	0xFD8
  8895                           
  8896 ;; *************** function _isr *****************
  8897 ;; Defined at:
  8898 ;;		line 199 in file "hmiMain.c"
  8899 ;; Parameters:    Size  Location     Type
  8900 ;;		None
  8901 ;; Auto vars:     Size  Location     Type
  8902 ;;  j               1   26[BANK0 ] unsigned char 
  8903 ;;  j               1   25[BANK0 ] unsigned char 
  8904 ;;  i               1   27[BANK0 ] unsigned char 
  8905 ;;  i               1   44[BANK0 ] unsigned char 
  8906 ;;  i               1   43[BANK0 ] unsigned char 
  8907 ;;  i               1   42[BANK0 ] unsigned char 
  8908 ;;  i               1   32[BANK0 ] unsigned char 
  8909 ;;  i               1   41[BANK0 ] unsigned char 
  8910 ;;  i               1   31[BANK0 ] unsigned char 
  8911 ;;  i               1   40[BANK0 ] unsigned char 
  8912 ;;  i               1   30[BANK0 ] unsigned char 
  8913 ;;  i               1   29[BANK0 ] unsigned char 
  8914 ;;  i               1   39[BANK0 ] unsigned char 
  8915 ;;  i               1   28[BANK0 ] unsigned char 
  8916 ;;  i               1   38[BANK0 ] unsigned char 
  8917 ;;  i               1   37[BANK0 ] unsigned char 
  8918 ;;  peso            2   49[BANK0 ] int 
  8919 ;;  multiplicado    2   47[BANK0 ] int 
  8920 ;;  tara_resta      2   34[BANK0 ] unsigned int 
  8921 ;;  peso_cpy        2   23[BANK0 ] int 
  8922 ;;  eoc             1   33[BANK0 ] unsigned char 
  8923 ;;  aux2            2   45[BANK0 ] unsigned int 
  8924 ;;  aux1            1   36[BANK0 ] unsigned char 
  8925 ;; Return value:  Size  Location     Type
  8926 ;;                  1    wreg      void 
  8927 ;; Registers used:
  8928 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8929 ;; Tracked objects:
  8930 ;;		On entry : 0/0
  8931 ;;		On exit  : 0/0
  8932 ;;		Unchanged: 0/0
  8933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8934 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8935 ;;      Locals:         0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8936 ;;      Temps:          0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8937 ;;      Totals:         0      51       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8938 ;;Total ram usage:       51 bytes
  8939 ;; Hardware stack levels used:    1
  8940 ;; Hardware stack levels required when called:    8
  8941 ;; This function calls:
  8942 ;;		___awdiv
  8943 ;;		_key_pressed
  8944 ;;		_key_trigger
  8945 ;;		_lcd_number
  8946 ;;		_lcd_point
  8947 ;;		_menu_navigate
  8948 ;;		_menu_next
  8949 ;;		i2___lwdiv
  8950 ;;		i2___wmul
  8951 ;;		i2_lcd_legend
  8952 ;;		i2_printf
  8953 ;;		i2_putch
  8954 ;;		i2_rw_eeprom
  8955 ;; This function is called by:
  8956 ;;		Interrupt level 2
  8957 ;; This function uses a non-reentrant model
  8958 ;;
  8959                           
  8960                           	psect	intcode
  8961  000008                     __pintcode:
  8962                           	opt stack 0
  8963  000008                     _isr:
  8964                           	opt stack 16
  8965                           
  8966                           ;incstack = 0
  8967  000008  825F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8968  00000A  CFFA F065          	movff	pclath,??_isr+5
  8969  00000E  CFFB F066          	movff	pclatu,??_isr+6
  8970  000012  CFE9 F067          	movff	fsr0l,??_isr+7
  8971  000016  CFEA F068          	movff	fsr0h,??_isr+8
  8972  00001A  CFE1 F069          	movff	fsr1l,??_isr+9
  8973  00001E  CFE2 F06A          	movff	fsr1h,??_isr+10
  8974  000022  CFD9 F06B          	movff	fsr2l,??_isr+11
  8975  000026  CFDA F06C          	movff	fsr2h,??_isr+12
  8976  00002A  CFF3 F06D          	movff	prodl,??_isr+13
  8977  00002E  CFF4 F06E          	movff	prodh,??_isr+14
  8978  000032  CFF6 F06F          	movff	tblptrl,??_isr+15
  8979  000036  CFF7 F070          	movff	tblptrh,??_isr+16
  8980  00003A  CFF8 F071          	movff	tblptru,??_isr+17
  8981  00003E  CFF5 F072          	movff	tablat,??_isr+18
  8982  000042  C05F  F073         	movff	btemp,??_isr+19
  8983  000046  C060  F074         	movff	btemp+1,??_isr+20
  8984  00004A  C061  F075         	movff	btemp+2,??_isr+21
  8985  00004E  C062  F076         	movff	btemp+3,??_isr+22
  8986                           
  8987                           ;hmiMain.c: 200: if (PIR1bits.TMR2IF) {
  8988  000052  A29E               	btfss	3998,1,c	;volatile
  8989  000054  D265               	goto	i2l287
  8990                           
  8991                           ;hmiMain.c: 201: PIR1bits.TMR2IF = 0;
  8992  000056  929E               	bcf	3998,1,c	;volatile
  8993                           
  8994                           ;hmiMain.c: 203: char aux1 = 0;
  8995  000058  0E00               	movlw	0
  8996  00005A  0100               	movlb	0	; () banked
  8997  00005C  6F84               	movwf	isr@aux1& (0+255),b
  8998                           
  8999                           ;hmiMain.c: 204: unsigned int aux2 = 0;
  9000  00005E  0E00               	movlw	0
  9001  000060  6F8E               	movwf	(isr@aux2+1)& (0+255),b
  9002  000062  0E00               	movlw	0
  9003  000064  6F8D               	movwf	isr@aux2& (0+255),b
  9004                           
  9005                           ; BSR set to: 0
  9006                           ;hmiMain.c: 206: if(divisor < 499) {
  9007  000066  0EF3               	movlw	243
  9008  000068  5DAB               	subwf	_divisor& (0+255),w,b
  9009  00006A  0E01               	movlw	1
  9010  00006C  59AC               	subwfb	(_divisor+1)& (0+255),w,b
  9011  00006E  B0D8               	btfsc	status,0,c
  9012  000070  D003               	goto	i2l235
  9013                           
  9014                           ; BSR set to: 0
  9015                           ;hmiMain.c: 207: divisor++;
  9016  000072  4BAB               	infsnz	_divisor& (0+255),f,b
  9017  000074  2BAC               	incf	(_divisor+1)& (0+255),f,b
  9018                           
  9019                           ;hmiMain.c: 208: } else {
  9020  000076  D004               	goto	i2l236
  9021  000078                     i2l235:
  9022                           
  9023                           ; BSR set to: 0
  9024                           ;hmiMain.c: 209: divisor = 0;
  9025                           
  9026                           ; BSR set to: 0
  9027  000078  0E00               	movlw	0
  9028  00007A  6FAC               	movwf	(_divisor+1)& (0+255),b
  9029  00007C  0E00               	movlw	0
  9030  00007E  6FAB               	movwf	_divisor& (0+255),b
  9031  000080                     i2l236:
  9032                           
  9033                           ; BSR set to: 0
  9034                           ;hmiMain.c: 210: }
  9035                           ;hmiMain.c: 212: if (key_trigger()) {
  9036                           
  9037                           ; BSR set to: 0
  9038  000080  ECED  F025         	call	_key_trigger	;wreg free
  9039  000084  0900               	iorlw	0
  9040  000086  B4D8               	btfsc	status,2,c
  9041  000088  D015               	goto	i2l237
  9042                           
  9043                           ;hmiMain.c: 213: if (debounceCounter < debounceTime) {
  9044  00008A  0EA9               	movlw	low _debounceTime
  9045  00008C  6EF6               	movwf	tblptrl,c
  9046  00008E                     	if	1	;There is more than 1 active tblptr byte
  9047  00008E  0EFF               	movlw	high _debounceTime
  9048  000090  6EF7               	movwf	tblptrh,c
  9049  000092                     	endif
  9050  000092                     	if	0	;There are less than 3 active tblptr bytes
  9051  000092                     	endif
  9052  000092  0008               	tblrd		*
  9053  000094  50F5               	movf	tablat,w,c
  9054  000096  0100               	movlb	0	; () banked
  9055  000098  61B1               	cpfslt	_debounceCounter& (0+255),b
  9056  00009A  D002               	goto	i2l238
  9057                           
  9058                           ; BSR set to: 0
  9059                           ;hmiMain.c: 214: debounceCounter++;
  9060  00009C  2BB1               	incf	_debounceCounter& (0+255),f,b
  9061                           
  9062                           ;hmiMain.c: 215: } else {
  9063  00009E  D239               	goto	i2l242
  9064  0000A0                     i2l238:
  9065                           
  9066                           ; BSR set to: 0
  9067                           ;hmiMain.c: 216: if (keyEnable) {
  9068                           
  9069                           ; BSR set to: 0
  9070  0000A0  51B9               	movf	_keyEnable& (0+255),w,b
  9071  0000A2  B4D8               	btfsc	status,2,c
  9072  0000A4  D236               	goto	i2l242
  9073                           
  9074                           ; BSR set to: 0
  9075                           ;hmiMain.c: 217: keyEnable = 0;
  9076  0000A6  0E00               	movlw	0
  9077  0000A8  6FB9               	movwf	_keyEnable& (0+255),b
  9078                           
  9079                           ; BSR set to: 0
  9080                           ;hmiMain.c: 218: lastKey = key_pressed();
  9081  0000AA  ECF0  F00E         	call	_key_pressed	;wreg free
  9082  0000AE  0100               	movlb	0	; () banked
  9083  0000B0  6FBA               	movwf	_lastKey& (0+255),b
  9084                           
  9085                           ; BSR set to: 0
  9086                           ;hmiMain.c: 219: }
  9087                           ;hmiMain.c: 220: }
  9088                           ;hmiMain.c: 221: } else {
  9089                           
  9090                           ; BSR set to: 0
  9091  0000B2  D22F               	goto	i2l242
  9092  0000B4                     i2l237:
  9093                           
  9094                           ;hmiMain.c: 222: debounceCounter = 0;
  9095                           
  9096                           ; BSR set to: 0
  9097  0000B4  0E00               	movlw	0
  9098  0000B6  0100               	movlb	0	; () banked
  9099  0000B8  6FB1               	movwf	_debounceCounter& (0+255),b
  9100                           
  9101                           ;hmiMain.c: 223: if (keyEnable == 0) {
  9102  0000BA  51B9               	movf	_keyEnable& (0+255),w,b
  9103  0000BC  A4D8               	btfss	status,2,c
  9104  0000BE  D229               	goto	i2l242
  9105                           
  9106                           ; BSR set to: 0
  9107                           ;hmiMain.c: 224: if (lastKey < 58 && lastKey > 47) {
  9108  0000C0  0E3A               	movlw	58
  9109  0000C2  61BA               	cpfslt	_lastKey& (0+255),b
  9110  0000C4  D00E               	goto	i2l243
  9111                           
  9112                           ; BSR set to: 0
  9113  0000C6  0E2F               	movlw	47
  9114  0000C8  65BA               	cpfsgt	_lastKey& (0+255),b
  9115  0000CA  D00B               	goto	i2l243
  9116                           
  9117                           ; BSR set to: 0
  9118                           ;hmiMain.c: 225: menu_text[g1] = lastKey;
  9119  0000CC  51AE               	movf	_g1& (0+255),w,b
  9120  0000CE  0D01               	mullw	1
  9121  0000D0  0EA5               	movlw	low _menu_text
  9122  0000D2  24F3               	addwf	prodl,w,c
  9123  0000D4  6ED9               	movwf	fsr2l,c
  9124  0000D6  0E01               	movlw	high _menu_text
  9125  0000D8  20F4               	addwfc	prodh,w,c
  9126  0000DA  6EDA               	movwf	fsr2h,c
  9127  0000DC  C0BA  FFDF         	movff	_lastKey,indf2
  9128                           
  9129                           ; BSR set to: 0
  9130                           ;hmiMain.c: 226: g1++;
  9131  0000E0  2BAE               	incf	_g1& (0+255),f,b
  9132  0000E2                     i2l243:
  9133                           
  9134                           ; BSR set to: 0
  9135                           ;hmiMain.c: 227: }
  9136                           ;hmiMain.c: 229: if (lastKey == '*') {
  9137                           
  9138                           ; BSR set to: 0
  9139  0000E2  0E2A               	movlw	42
  9140  0000E4  19BA               	xorwf	_lastKey& (0+255),w,b
  9141  0000E6  A4D8               	btfss	status,2,c
  9142  0000E8  D014               	goto	i2l244
  9143                           
  9144                           ; BSR set to: 0
  9145                           ;hmiMain.c: 230: for (char i=0;i<15;i++) {
  9146  0000EA  0E00               	movlw	0
  9147  0000EC  6F85               	movwf	isr@i& (0+255),b
  9148  0000EE                     i2l9962:
  9149                           
  9150                           ; BSR set to: 0
  9151  0000EE  0E0E               	movlw	14
  9152  0000F0  6585               	cpfsgt	isr@i& (0+255),b
  9153  0000F2  D001               	goto	i2l245
  9154  0000F4  D00C               	goto	i2u1130_40
  9155  0000F6                     i2l245:
  9156                           
  9157                           ; BSR set to: 0
  9158                           ;hmiMain.c: 231: menu_text[i] = ' ';
  9159                           
  9160                           ; BSR set to: 0
  9161  0000F6  5185               	movf	isr@i& (0+255),w,b
  9162  0000F8  0D01               	mullw	1
  9163  0000FA  0EA5               	movlw	low _menu_text
  9164  0000FC  24F3               	addwf	prodl,w,c
  9165  0000FE  6ED9               	movwf	fsr2l,c
  9166  000100  0E01               	movlw	high _menu_text
  9167  000102  20F4               	addwfc	prodh,w,c
  9168  000104  6EDA               	movwf	fsr2h,c
  9169  000106  0E20               	movlw	32
  9170  000108  6EDF               	movwf	indf2,c
  9171                           
  9172                           ; BSR set to: 0
  9173  00010A  2B85               	incf	isr@i& (0+255),f,b
  9174  00010C  D7F0               	goto	i2l9962
  9175  00010E                     i2u1130_40:
  9176                           
  9177                           ; BSR set to: 0
  9178                           ;hmiMain.c: 232: }
  9179                           ;hmiMain.c: 233: g1 = 0;
  9180                           
  9181                           ; BSR set to: 0
  9182  00010E  0E00               	movlw	0
  9183  000110  6FAE               	movwf	_g1& (0+255),b
  9184  000112                     i2l244:
  9185                           
  9186                           ; BSR set to: 0
  9187                           ;hmiMain.c: 234: }
  9188                           ;hmiMain.c: 236: if (menu_shown == 0 && lastKey != 'C') {
  9189  000112  51B5               	movf	_menu_shown& (0+255),w,b
  9190  000114  A4D8               	btfss	status,2,c
  9191  000116  D018               	goto	i2l247
  9192                           
  9193                           ; BSR set to: 0
  9194  000118  0E43               	movlw	67
  9195  00011A  19BA               	xorwf	_lastKey& (0+255),w,b
  9196  00011C  B4D8               	btfsc	status,2,c
  9197  00011E  D014               	goto	i2l247
  9198                           
  9199                           ; BSR set to: 0
  9200                           ;hmiMain.c: 237: for (char i=0;i<15;i++) {
  9201  000120  0E00               	movlw	0
  9202  000122  6F86               	movwf	isr@i_1003& (0+255),b
  9203  000124                     i2l9978:
  9204                           
  9205                           ; BSR set to: 0
  9206  000124  0E0E               	movlw	14
  9207  000126  6586               	cpfsgt	isr@i_1003& (0+255),b
  9208  000128  D001               	goto	i2l248
  9209  00012A  D00C               	goto	i2u1134_40
  9210  00012C                     i2l248:
  9211                           
  9212                           ; BSR set to: 0
  9213                           ;hmiMain.c: 238: menu_text[i] = ' ';
  9214                           
  9215                           ; BSR set to: 0
  9216  00012C  5186               	movf	isr@i_1003& (0+255),w,b
  9217  00012E  0D01               	mullw	1
  9218  000130  0EA5               	movlw	low _menu_text
  9219  000132  24F3               	addwf	prodl,w,c
  9220  000134  6ED9               	movwf	fsr2l,c
  9221  000136  0E01               	movlw	high _menu_text
  9222  000138  20F4               	addwfc	prodh,w,c
  9223  00013A  6EDA               	movwf	fsr2h,c
  9224  00013C  0E20               	movlw	32
  9225  00013E  6EDF               	movwf	indf2,c
  9226                           
  9227                           ; BSR set to: 0
  9228  000140  2B86               	incf	isr@i_1003& (0+255),f,b
  9229  000142  D7F0               	goto	i2l9978
  9230  000144                     i2u1134_40:
  9231                           
  9232                           ; BSR set to: 0
  9233                           ;hmiMain.c: 239: }
  9234                           ;hmiMain.c: 240: g1 = 0;
  9235                           
  9236                           ; BSR set to: 0
  9237  000144  0E00               	movlw	0
  9238  000146  6FAE               	movwf	_g1& (0+255),b
  9239  000148                     i2l247:
  9240                           
  9241                           ; BSR set to: 0
  9242                           ;hmiMain.c: 241: }
  9243                           ;hmiMain.c: 244: if (lastKey == 'C') {
  9244                           
  9245                           ; BSR set to: 0
  9246  000148  0E43               	movlw	67
  9247  00014A  19BA               	xorwf	_lastKey& (0+255),w,b
  9248  00014C  A4D8               	btfss	status,2,c
  9249  00014E  D009               	goto	i2l250
  9250                           
  9251                           ; BSR set to: 0
  9252                           ;hmiMain.c: 245: putch(2);
  9253  000150  0E02               	movlw	2
  9254  000152  ECAC  F025         	call	i2_putch
  9255                           
  9256                           ;hmiMain.c: 246: printf("W\n");
  9257  000156  0EE6               	movlw	low STR_2
  9258  000158  6E0D               	movwf	i2printf@f,c
  9259  00015A  0EFF               	movlw	high STR_2
  9260  00015C  6E0E               	movwf	i2printf@f+1,c
  9261  00015E  ECC5  F011         	call	i2_printf	;wreg free
  9262  000162                     i2l250:
  9263                           
  9264                           ;hmiMain.c: 247: }
  9265                           ;hmiMain.c: 249: keyConfirm = menu_next(&menu_shown,&menu_rowColor,lastKey,menu_text);
  9266  000162  0EB5               	movlw	low _menu_shown
  9267  000164  6E4E               	movwf	menu_next@menuShown,c
  9268  000166  0E00               	movlw	high _menu_shown
  9269  000168  6E4F               	movwf	menu_next@menuShown+1,c
  9270  00016A  0ECC               	movlw	low _menu_rowColor
  9271  00016C  6E50               	movwf	menu_next@menuRow,c
  9272  00016E  0E00               	movlw	high _menu_rowColor
  9273  000170  6E51               	movwf	menu_next@menuRow+1,c
  9274  000172  C0BA  F052         	movff	_lastKey,menu_next@command
  9275  000176  0EA5               	movlw	low _menu_text
  9276  000178  6E53               	movwf	menu_next@menuText,c
  9277  00017A  0E01               	movlw	high _menu_text
  9278  00017C  6E54               	movwf	menu_next@menuText+1,c
  9279  00017E  EC98  F004         	call	_menu_next	;wreg free
  9280  000182  0100               	movlb	0	; () banked
  9281  000184  6FB0               	movwf	_keyConfirm& (0+255),b
  9282                           
  9283                           ; BSR set to: 0
  9284                           ;hmiMain.c: 251: if (keyConfirm == 21) {
  9285  000186  0E15               	movlw	21
  9286  000188  19B0               	xorwf	_keyConfirm& (0+255),w,b
  9287  00018A  A4D8               	btfss	status,2,c
  9288  00018C  D009               	goto	i2l251
  9289                           
  9290                           ; BSR set to: 0
  9291                           ;hmiMain.c: 252: putch(2);
  9292  00018E  0E02               	movlw	2
  9293  000190  ECAC  F025         	call	i2_putch
  9294                           
  9295                           ;hmiMain.c: 253: printf("CZ\n");
  9296  000194  0EDC               	movlw	low STR_3
  9297  000196  6E0D               	movwf	i2printf@f,c
  9298  000198  0EFF               	movlw	high STR_3
  9299  00019A  6E0E               	movwf	i2printf@f+1,c
  9300  00019C  ECC5  F011         	call	i2_printf	;wreg free
  9301  0001A0                     i2l251:
  9302                           
  9303                           ;hmiMain.c: 254: }
  9304                           ;hmiMain.c: 256: if (keyConfirm == 22) {
  9305  0001A0  0E16               	movlw	22
  9306  0001A2  0100               	movlb	0	; () banked
  9307  0001A4  19B0               	xorwf	_keyConfirm& (0+255),w,b
  9308  0001A6  A4D8               	btfss	status,2,c
  9309  0001A8  D00E               	goto	i2l252
  9310                           
  9311                           ; BSR set to: 0
  9312                           ;hmiMain.c: 257: decimal_point = menu_rowColor - 1;
  9313  0001AA  05CC               	decf	_menu_rowColor& (0+255),w,b
  9314  0001AC  6FB2               	movwf	_decimal_point& (0+255),b
  9315                           
  9316                           ; BSR set to: 0
  9317                           ;hmiMain.c: 258: putch(2);
  9318  0001AE  0E02               	movlw	2
  9319  0001B0  ECAC  F025         	call	i2_putch
  9320                           
  9321                           ;hmiMain.c: 259: printf("CD%d\n", decimal_point);
  9322  0001B4  0EBB               	movlw	low STR_4
  9323  0001B6  6E0D               	movwf	i2printf@f,c
  9324  0001B8  0EFF               	movlw	high STR_4
  9325  0001BA  6E0E               	movwf	i2printf@f+1,c
  9326  0001BC  C0B2  F00F         	movff	_decimal_point,?i2_printf+2
  9327  0001C0  6A10               	clrf	?i2_printf+3,c
  9328  0001C2  ECC5  F011         	call	i2_printf	;wreg free
  9329  0001C6                     i2l252:
  9330                           
  9331                           ;hmiMain.c: 260: }
  9332                           ;hmiMain.c: 262: if (keyConfirm == 23) {
  9333  0001C6  0E17               	movlw	23
  9334  0001C8  0100               	movlb	0	; () banked
  9335  0001CA  19B0               	xorwf	_keyConfirm& (0+255),w,b
  9336  0001CC  A4D8               	btfss	status,2,c
  9337  0001CE  D036               	goto	i2l253
  9338                           
  9339                           ; BSR set to: 0
  9340                           ;hmiMain.c: 263: putch(2);
  9341  0001D0  0E02               	movlw	2
  9342  0001D2  ECAC  F025         	call	i2_putch
  9343                           
  9344                           ;hmiMain.c: 264: printf("CP");
  9345  0001D6  0EF5               	movlw	low STR_5
  9346  0001D8  6E0D               	movwf	i2printf@f,c
  9347  0001DA  0EFF               	movlw	high STR_5
  9348  0001DC  6E0E               	movwf	i2printf@f+1,c
  9349  0001DE  ECC5  F011         	call	i2_printf	;wreg free
  9350                           
  9351                           ;hmiMain.c: 265: for (char i=0;i<g1;i++) {
  9352  0001E2  0E00               	movlw	0
  9353  0001E4  0100               	movlb	0	; () banked
  9354  0001E6  6F7C               	movwf	isr@i_1009& (0+255),b
  9355  0001E8  D00D               	goto	i2l254
  9356  0001EA                     
  9357                           ; BSR set to: 0
  9358                           ;hmiMain.c: 266: putch(menu_text[i]);
  9359                           
  9360                           ; BSR set to: 0
  9361  0001EA  517C               	movf	isr@i_1009& (0+255),w,b
  9362  0001EC  0D01               	mullw	1
  9363  0001EE  0EA5               	movlw	low _menu_text
  9364  0001F0  24F3               	addwf	prodl,w,c
  9365  0001F2  6ED9               	movwf	fsr2l,c
  9366  0001F4  0E01               	movlw	high _menu_text
  9367  0001F6  20F4               	addwfc	prodh,w,c
  9368  0001F8  6EDA               	movwf	fsr2h,c
  9369  0001FA  50DF               	movf	indf2,w,c
  9370  0001FC  ECAC  F025         	call	i2_putch
  9371  000200  0100               	movlb	0	; () banked
  9372  000202  2B7C               	incf	isr@i_1009& (0+255),f,b
  9373  000204                     i2l254:
  9374                           
  9375                           ; BSR set to: 0
  9376                           
  9377                           ; BSR set to: 0
  9378  000204  51AE               	movf	_g1& (0+255),w,b
  9379  000206  5D7C               	subwf	isr@i_1009& (0+255),w,b
  9380  000208  A0D8               	btfss	status,0,c
  9381  00020A  D7EF               	goto	i2l255
  9382                           
  9383                           ; BSR set to: 0
  9384                           ;hmiMain.c: 267: }
  9385                           ;hmiMain.c: 268: putch('\n');
  9386                           
  9387                           ; BSR set to: 0
  9388  00020C  0E0A               	movlw	10
  9389  00020E  ECAC  F025         	call	i2_putch
  9390                           
  9391                           ;hmiMain.c: 269: for (char i=0;i<15;i++) {
  9392  000212  0E00               	movlw	0
  9393  000214  0100               	movlb	0	; () banked
  9394  000216  6F87               	movwf	isr@i_1010& (0+255),b
  9395  000218                     i2l10030:
  9396                           
  9397                           ; BSR set to: 0
  9398  000218  0E0E               	movlw	14
  9399  00021A  6587               	cpfsgt	isr@i_1010& (0+255),b
  9400  00021C  D001               	goto	i2l257
  9401  00021E  D00C               	goto	i2u1141_40
  9402  000220                     i2l257:
  9403                           
  9404                           ; BSR set to: 0
  9405                           ;hmiMain.c: 270: menu_text[i] = ' ';
  9406                           
  9407                           ; BSR set to: 0
  9408  000220  5187               	movf	isr@i_1010& (0+255),w,b
  9409  000222  0D01               	mullw	1
  9410  000224  0EA5               	movlw	low _menu_text
  9411  000226  24F3               	addwf	prodl,w,c
  9412  000228  6ED9               	movwf	fsr2l,c
  9413  00022A  0E01               	movlw	high _menu_text
  9414  00022C  20F4               	addwfc	prodh,w,c
  9415  00022E  6EDA               	movwf	fsr2h,c
  9416  000230  0E20               	movlw	32
  9417  000232  6EDF               	movwf	indf2,c
  9418                           
  9419                           ; BSR set to: 0
  9420  000234  2B87               	incf	isr@i_1010& (0+255),f,b
  9421  000236  D7F0               	goto	i2l10030
  9422  000238                     i2u1141_40:
  9423                           
  9424                           ; BSR set to: 0
  9425                           ;hmiMain.c: 271: }
  9426                           ;hmiMain.c: 272: g1 = 0;
  9427                           
  9428                           ; BSR set to: 0
  9429  000238  0E00               	movlw	0
  9430  00023A  6FAE               	movwf	_g1& (0+255),b
  9431  00023C                     i2l253:
  9432                           
  9433                           ; BSR set to: 0
  9434                           ;hmiMain.c: 273: }
  9435                           ;hmiMain.c: 275: if (keyConfirm == 24) {
  9436                           
  9437                           ; BSR set to: 0
  9438  00023C  0E18               	movlw	24
  9439  00023E  19B0               	xorwf	_keyConfirm& (0+255),w,b
  9440  000240  A4D8               	btfss	status,2,c
  9441  000242  D00C               	goto	i2l259
  9442                           
  9443                           ; BSR set to: 0
  9444                           ;hmiMain.c: 276: putch(2);
  9445  000244  0E02               	movlw	2
  9446  000246  ECAC  F025         	call	i2_putch
  9447                           
  9448                           ;hmiMain.c: 277: printf("CF%d\n", menu_rowColor);
  9449  00024A  0EC1               	movlw	low STR_6
  9450  00024C  6E0D               	movwf	i2printf@f,c
  9451  00024E  0EFF               	movlw	high STR_6
  9452  000250  6E0E               	movwf	i2printf@f+1,c
  9453  000252  C0CC  F00F         	movff	_menu_rowColor,?i2_printf+2
  9454  000256  6A10               	clrf	?i2_printf+3,c
  9455  000258  ECC5  F011         	call	i2_printf	;wreg free
  9456  00025C                     i2l259:
  9457                           
  9458                           ;hmiMain.c: 278: }
  9459                           ;hmiMain.c: 280: if (keyConfirm == 25) {
  9460  00025C  0E19               	movlw	25
  9461  00025E  0100               	movlb	0	; () banked
  9462  000260  19B0               	xorwf	_keyConfirm& (0+255),w,b
  9463  000262  A4D8               	btfss	status,2,c
  9464  000264  D08F               	goto	i2l260
  9465                           
  9466                           ; BSR set to: 0
  9467                           ;hmiMain.c: 281: putch(2);
  9468  000266  0E02               	movlw	2
  9469  000268  ECAC  F025         	call	i2_putch
  9470                           
  9471                           ;hmiMain.c: 282: printf("CE");
  9472  00026C  0EF2               	movlw	low STR_7
  9473  00026E  6E0D               	movwf	i2printf@f,c
  9474  000270  0EFF               	movlw	high STR_7
  9475  000272  6E0E               	movwf	i2printf@f+1,c
  9476  000274  ECC5  F011         	call	i2_printf	;wreg free
  9477                           
  9478                           ;hmiMain.c: 283: for (char i=0;i<g1;i++) {
  9479  000278  0E00               	movlw	0
  9480  00027A  0100               	movlb	0	; () banked
  9481  00027C  6F7D               	movwf	isr@i_1013& (0+255),b
  9482  00027E  D00D               	goto	i2l261
  9483  000280                     
  9484                           ; BSR set to: 0
  9485                           ;hmiMain.c: 284: putch(menu_text[i]);
  9486                           
  9487                           ; BSR set to: 0
  9488  000280  517D               	movf	isr@i_1013& (0+255),w,b
  9489  000282  0D01               	mullw	1
  9490  000284  0EA5               	movlw	low _menu_text
  9491  000286  24F3               	addwf	prodl,w,c
  9492  000288  6ED9               	movwf	fsr2l,c
  9493  00028A  0E01               	movlw	high _menu_text
  9494  00028C  20F4               	addwfc	prodh,w,c
  9495  00028E  6EDA               	movwf	fsr2h,c
  9496  000290  50DF               	movf	indf2,w,c
  9497  000292  ECAC  F025         	call	i2_putch
  9498  000296  0100               	movlb	0	; () banked
  9499  000298  2B7D               	incf	isr@i_1013& (0+255),f,b
  9500  00029A                     i2l261:
  9501                           
  9502                           ; BSR set to: 0
  9503                           
  9504                           ; BSR set to: 0
  9505  00029A  51AE               	movf	_g1& (0+255),w,b
  9506  00029C  5D7D               	subwf	isr@i_1013& (0+255),w,b
  9507  00029E  A0D8               	btfss	status,0,c
  9508  0002A0  D7EF               	goto	i2l262
  9509                           
  9510                           ; BSR set to: 0
  9511                           ;hmiMain.c: 285: }
  9512                           ;hmiMain.c: 286: putch('\n');
  9513                           
  9514                           ; BSR set to: 0
  9515  0002A2  0E0A               	movlw	10
  9516  0002A4  ECAC  F025         	call	i2_putch
  9517                           
  9518                           ;hmiMain.c: 288: tara = 0;
  9519  0002A8  0E00               	movlw	0
  9520  0002AA  0101               	movlb	1	; () banked
  9521  0002AC  6FDD               	movwf	(_tara+1)& (0+255),b
  9522  0002AE  0E00               	movlw	0
  9523  0002B0  6FDC               	movwf	_tara& (0+255),b
  9524                           
  9525                           ; BSR set to: 1
  9526                           ;hmiMain.c: 289: for (char i=0;i<g1;i++) {
  9527  0002B2  0E00               	movlw	0
  9528  0002B4  0100               	movlb	0	; () banked
  9529  0002B6  6F7E               	movwf	isr@i_1014& (0+255),b
  9530  0002B8  D02B               	goto	i2l264
  9531  0002BA                     
  9532                           ; BSR set to: 0
  9533                           ;hmiMain.c: 290: tara *= 10;
  9534                           
  9535                           ; BSR set to: 0
  9536  0002BA  C1DC  F001         	movff	_tara,i2___wmul@multiplier
  9537  0002BE  C1DD  F002         	movff	_tara+1,i2___wmul@multiplier+1
  9538  0002C2  0E00               	movlw	0
  9539  0002C4  6E04               	movwf	i2___wmul@multiplicand+1,c
  9540  0002C6  0E0A               	movlw	10
  9541  0002C8  6E03               	movwf	i2___wmul@multiplicand,c
  9542  0002CA  EC78  F025         	call	i2___wmul	;wreg free
  9543  0002CE  C001  F1DC         	movff	?i2___wmul,_tara
  9544  0002D2  C002  F1DD         	movff	?i2___wmul+1,_tara+1
  9545                           
  9546                           ;hmiMain.c: 291: tara += menu_text[i] - 48;
  9547  0002D6  0ED0               	movlw	208
  9548  0002D8  0100               	movlb	0	; () banked
  9549  0002DA  6F60               	movwf	??_isr& (0+255),b
  9550  0002DC  0EFF               	movlw	255
  9551  0002DE  6F61               	movwf	(??_isr+1)& (0+255),b
  9552  0002E0  517E               	movf	isr@i_1014& (0+255),w,b
  9553  0002E2  0D01               	mullw	1
  9554  0002E4  0EA5               	movlw	low _menu_text
  9555  0002E6  24F3               	addwf	prodl,w,c
  9556  0002E8  6ED9               	movwf	fsr2l,c
  9557  0002EA  0E01               	movlw	high _menu_text
  9558  0002EC  20F4               	addwfc	prodh,w,c
  9559  0002EE  6EDA               	movwf	fsr2h,c
  9560  0002F0  50DF               	movf	indf2,w,c
  9561  0002F2  6F62               	movwf	(??_isr+2)& (0+255),b
  9562  0002F4  6B63               	clrf	(??_isr+3)& (0+255),b
  9563  0002F6  5160               	movf	??_isr& (0+255),w,b
  9564  0002F8  2762               	addwf	(??_isr+2)& (0+255),f,b
  9565  0002FA  5161               	movf	(??_isr+1)& (0+255),w,b
  9566  0002FC  2363               	addwfc	(??_isr+3)& (0+255),f,b
  9567  0002FE  5162               	movf	(??_isr+2)& (0+255),w,b
  9568  000300  0101               	movlb	1	; () banked
  9569  000302  27DC               	addwf	_tara& (0+255),f,b
  9570  000304  0100               	movlb	0	; () banked
  9571  000306  5163               	movf	(??_isr+3)& (0+255),w,b
  9572  000308  0101               	movlb	1	; () banked
  9573  00030A  23DD               	addwfc	(_tara+1)& (0+255),f,b
  9574                           
  9575                           ; BSR set to: 1
  9576  00030C  0100               	movlb	0	; () banked
  9577  00030E  2B7E               	incf	isr@i_1014& (0+255),f,b
  9578  000310                     i2l264:
  9579                           
  9580                           ; BSR set to: 0
  9581                           
  9582                           ; BSR set to: 0
  9583  000310  51AE               	movf	_g1& (0+255),w,b
  9584  000312  5D7E               	subwf	isr@i_1014& (0+255),w,b
  9585  000314  A0D8               	btfss	status,0,c
  9586  000316  D7D1               	goto	i2l265
  9587                           
  9588                           ; BSR set to: 0
  9589                           ;hmiMain.c: 292: }
  9590                           ;hmiMain.c: 293: aux2 = tara;
  9591  000318  C1DC  F08D         	movff	_tara,isr@aux2
  9592  00031C  C1DD  F08E         	movff	_tara+1,isr@aux2+1
  9593                           
  9594                           ;hmiMain.c: 294: aux1 = aux2 & 0x00FF;
  9595  000320  C08D  F084         	movff	isr@aux2,isr@aux1
  9596                           
  9597                           ; BSR set to: 0
  9598                           ;hmiMain.c: 295: rw_eeprom(0x02,aux1,1);
  9599  000324  C084  F001         	movff	isr@aux1,i2rw_eeprom@data
  9600  000328  0E01               	movlw	1
  9601  00032A  6E02               	movwf	i2rw_eeprom@rw,c
  9602  00032C  0E02               	movlw	2
  9603  00032E  EC34  F024         	call	i2_rw_eeprom
  9604                           
  9605                           ;hmiMain.c: 296: aux2 = aux2 >> 8;
  9606  000332  0100               	movlb	0	; () banked
  9607  000334  518E               	movf	(isr@aux2+1)& (0+255),w,b
  9608  000336  6F8D               	movwf	isr@aux2& (0+255),b
  9609  000338  6B8E               	clrf	(isr@aux2+1)& (0+255),b
  9610                           
  9611                           ; BSR set to: 0
  9612                           ;hmiMain.c: 297: aux1 = aux2 & 0x00FF;
  9613  00033A  C08D  F084         	movff	isr@aux2,isr@aux1
  9614                           
  9615                           ; BSR set to: 0
  9616                           ;hmiMain.c: 298: rw_eeprom(0x01,aux1,1);
  9617  00033E  C084  F001         	movff	isr@aux1,i2rw_eeprom@data
  9618  000342  0E01               	movlw	1
  9619  000344  6E02               	movwf	i2rw_eeprom@rw,c
  9620  000346  0E01               	movlw	1
  9621  000348  EC34  F024         	call	i2_rw_eeprom
  9622                           
  9623                           ;hmiMain.c: 299: rw_eeprom(0x00,0xAA,1);
  9624  00034C  0EAA               	movlw	170
  9625  00034E  6E01               	movwf	i2rw_eeprom@data,c
  9626  000350  0E01               	movlw	1
  9627  000352  6E02               	movwf	i2rw_eeprom@rw,c
  9628  000354  0E00               	movlw	0
  9629  000356  EC34  F024         	call	i2_rw_eeprom
  9630                           
  9631                           ;hmiMain.c: 301: for (char i=0;i<15;i++) {
  9632  00035A  0E00               	movlw	0
  9633  00035C  0100               	movlb	0	; () banked
  9634  00035E  6F88               	movwf	isr@i_1016& (0+255),b
  9635  000360                     i2l10088:
  9636                           
  9637                           ; BSR set to: 0
  9638  000360  0E0E               	movlw	14
  9639  000362  6588               	cpfsgt	isr@i_1016& (0+255),b
  9640  000364  D001               	goto	i2l267
  9641  000366  D00C               	goto	i2u1147_40
  9642  000368                     i2l267:
  9643                           
  9644                           ; BSR set to: 0
  9645                           ;hmiMain.c: 302: menu_text[i] = ' ';
  9646                           
  9647                           ; BSR set to: 0
  9648  000368  5188               	movf	isr@i_1016& (0+255),w,b
  9649  00036A  0D01               	mullw	1
  9650  00036C  0EA5               	movlw	low _menu_text
  9651  00036E  24F3               	addwf	prodl,w,c
  9652  000370  6ED9               	movwf	fsr2l,c
  9653  000372  0E01               	movlw	high _menu_text
  9654  000374  20F4               	addwfc	prodh,w,c
  9655  000376  6EDA               	movwf	fsr2h,c
  9656  000378  0E20               	movlw	32
  9657  00037A  6EDF               	movwf	indf2,c
  9658                           
  9659                           ; BSR set to: 0
  9660  00037C  2B88               	incf	isr@i_1016& (0+255),f,b
  9661  00037E  D7F0               	goto	i2l10088
  9662  000380                     i2u1147_40:
  9663                           
  9664                           ; BSR set to: 0
  9665                           ;hmiMain.c: 303: }
  9666                           ;hmiMain.c: 304: g1 = 0;
  9667                           
  9668                           ; BSR set to: 0
  9669  000380  0E00               	movlw	0
  9670  000382  6FAE               	movwf	_g1& (0+255),b
  9671  000384                     i2l260:
  9672                           
  9673                           ; BSR set to: 0
  9674                           ;hmiMain.c: 305: }
  9675                           ;hmiMain.c: 307: if (keyConfirm == 26) {
  9676                           
  9677                           ; BSR set to: 0
  9678  000384  0E1A               	movlw	26
  9679  000386  19B0               	xorwf	_keyConfirm& (0+255),w,b
  9680  000388  A4D8               	btfss	status,2,c
  9681  00038A  D036               	goto	i2l269
  9682                           
  9683                           ; BSR set to: 0
  9684                           ;hmiMain.c: 308: putch(2);
  9685  00038C  0E02               	movlw	2
  9686  00038E  ECAC  F025         	call	i2_putch
  9687                           
  9688                           ;hmiMain.c: 309: printf("CT");
  9689  000392  0EFB               	movlw	low STR_8
  9690  000394  6E0D               	movwf	i2printf@f,c
  9691  000396  0EFF               	movlw	high STR_8
  9692  000398  6E0E               	movwf	i2printf@f+1,c
  9693  00039A  ECC5  F011         	call	i2_printf	;wreg free
  9694                           
  9695                           ;hmiMain.c: 310: for (char i=0;i<g1;i++) {
  9696  00039E  0E00               	movlw	0
  9697  0003A0  0100               	movlb	0	; () banked
  9698  0003A2  6F7F               	movwf	isr@i_1018& (0+255),b
  9699  0003A4  D00D               	goto	i2l270
  9700  0003A6                     
  9701                           ; BSR set to: 0
  9702                           ;hmiMain.c: 311: putch(menu_text[i]);
  9703                           
  9704                           ; BSR set to: 0
  9705  0003A6  517F               	movf	isr@i_1018& (0+255),w,b
  9706  0003A8  0D01               	mullw	1
  9707  0003AA  0EA5               	movlw	low _menu_text
  9708  0003AC  24F3               	addwf	prodl,w,c
  9709  0003AE  6ED9               	movwf	fsr2l,c
  9710  0003B0  0E01               	movlw	high _menu_text
  9711  0003B2  20F4               	addwfc	prodh,w,c
  9712  0003B4  6EDA               	movwf	fsr2h,c
  9713  0003B6  50DF               	movf	indf2,w,c
  9714  0003B8  ECAC  F025         	call	i2_putch
  9715  0003BC  0100               	movlb	0	; () banked
  9716  0003BE  2B7F               	incf	isr@i_1018& (0+255),f,b
  9717  0003C0                     i2l270:
  9718                           
  9719                           ; BSR set to: 0
  9720                           
  9721                           ; BSR set to: 0
  9722  0003C0  51AE               	movf	_g1& (0+255),w,b
  9723  0003C2  5D7F               	subwf	isr@i_1018& (0+255),w,b
  9724  0003C4  A0D8               	btfss	status,0,c
  9725  0003C6  D7EF               	goto	i2l271
  9726                           
  9727                           ; BSR set to: 0
  9728                           ;hmiMain.c: 312: }
  9729                           ;hmiMain.c: 313: putch('\n');
  9730                           
  9731                           ; BSR set to: 0
  9732  0003C8  0E0A               	movlw	10
  9733  0003CA  ECAC  F025         	call	i2_putch
  9734                           
  9735                           ;hmiMain.c: 315: for (char i=0;i<15;i++) {
  9736  0003CE  0E00               	movlw	0
  9737  0003D0  0100               	movlb	0	; () banked
  9738  0003D2  6F89               	movwf	isr@i_1019& (0+255),b
  9739  0003D4                     i2l10118:
  9740                           
  9741                           ; BSR set to: 0
  9742  0003D4  0E0E               	movlw	14
  9743  0003D6  6589               	cpfsgt	isr@i_1019& (0+255),b
  9744  0003D8  D001               	goto	i2l273
  9745  0003DA  D00C               	goto	i2u1151_40
  9746  0003DC                     i2l273:
  9747                           
  9748                           ; BSR set to: 0
  9749                           ;hmiMain.c: 316: menu_text[i] = ' ';
  9750                           
  9751                           ; BSR set to: 0
  9752  0003DC  5189               	movf	isr@i_1019& (0+255),w,b
  9753  0003DE  0D01               	mullw	1
  9754  0003E0  0EA5               	movlw	low _menu_text
  9755  0003E2  24F3               	addwf	prodl,w,c
  9756  0003E4  6ED9               	movwf	fsr2l,c
  9757  0003E6  0E01               	movlw	high _menu_text
  9758  0003E8  20F4               	addwfc	prodh,w,c
  9759  0003EA  6EDA               	movwf	fsr2h,c
  9760  0003EC  0E20               	movlw	32
  9761  0003EE  6EDF               	movwf	indf2,c
  9762                           
  9763                           ; BSR set to: 0
  9764  0003F0  2B89               	incf	isr@i_1019& (0+255),f,b
  9765  0003F2  D7F0               	goto	i2l10118
  9766  0003F4                     i2u1151_40:
  9767                           
  9768                           ; BSR set to: 0
  9769                           ;hmiMain.c: 317: }
  9770                           ;hmiMain.c: 318: g1 = 0;
  9771                           
  9772                           ; BSR set to: 0
  9773  0003F4  0E00               	movlw	0
  9774  0003F6  6FAE               	movwf	_g1& (0+255),b
  9775  0003F8                     i2l269:
  9776                           
  9777                           ; BSR set to: 0
  9778                           ;hmiMain.c: 319: }
  9779                           ;hmiMain.c: 321: if (keyConfirm == 27) {
  9780                           
  9781                           ; BSR set to: 0
  9782  0003F8  0E1B               	movlw	27
  9783  0003FA  19B0               	xorwf	_keyConfirm& (0+255),w,b
  9784  0003FC  A4D8               	btfss	status,2,c
  9785  0003FE  D036               	goto	i2l275
  9786                           
  9787                           ; BSR set to: 0
  9788                           ;hmiMain.c: 322: putch(2);
  9789  000400  0E02               	movlw	2
  9790  000402  ECAC  F025         	call	i2_putch
  9791                           
  9792                           ;hmiMain.c: 323: printf("CR");
  9793  000406  0EF8               	movlw	low STR_9
  9794  000408  6E0D               	movwf	i2printf@f,c
  9795  00040A  0EFF               	movlw	high STR_9
  9796  00040C  6E0E               	movwf	i2printf@f+1,c
  9797  00040E  ECC5  F011         	call	i2_printf	;wreg free
  9798                           
  9799                           ;hmiMain.c: 324: for (char i=0;i<g1;i++) {
  9800  000412  0E00               	movlw	0
  9801  000414  0100               	movlb	0	; () banked
  9802  000416  6F80               	movwf	isr@i_1021& (0+255),b
  9803  000418  D00D               	goto	i2l276
  9804  00041A                     
  9805                           ; BSR set to: 0
  9806                           ;hmiMain.c: 325: putch(menu_text[i]);
  9807                           
  9808                           ; BSR set to: 0
  9809  00041A  5180               	movf	isr@i_1021& (0+255),w,b
  9810  00041C  0D01               	mullw	1
  9811  00041E  0EA5               	movlw	low _menu_text
  9812  000420  24F3               	addwf	prodl,w,c
  9813  000422  6ED9               	movwf	fsr2l,c
  9814  000424  0E01               	movlw	high _menu_text
  9815  000426  20F4               	addwfc	prodh,w,c
  9816  000428  6EDA               	movwf	fsr2h,c
  9817  00042A  50DF               	movf	indf2,w,c
  9818  00042C  ECAC  F025         	call	i2_putch
  9819  000430  0100               	movlb	0	; () banked
  9820  000432  2B80               	incf	isr@i_1021& (0+255),f,b
  9821  000434                     i2l276:
  9822                           
  9823                           ; BSR set to: 0
  9824                           
  9825                           ; BSR set to: 0
  9826  000434  51AE               	movf	_g1& (0+255),w,b
  9827  000436  5D80               	subwf	isr@i_1021& (0+255),w,b
  9828  000438  A0D8               	btfss	status,0,c
  9829  00043A  D7EF               	goto	i2l277
  9830                           
  9831                           ; BSR set to: 0
  9832                           ;hmiMain.c: 326: }
  9833                           ;hmiMain.c: 327: putch('\n');
  9834                           
  9835                           ; BSR set to: 0
  9836  00043C  0E0A               	movlw	10
  9837  00043E  ECAC  F025         	call	i2_putch
  9838                           
  9839                           ;hmiMain.c: 329: for (char i=0;i<15;i++) {
  9840  000442  0E00               	movlw	0
  9841  000444  0100               	movlb	0	; () banked
  9842  000446  6F8A               	movwf	isr@i_1022& (0+255),b
  9843  000448                     i2l10148:
  9844                           
  9845                           ; BSR set to: 0
  9846  000448  0E0E               	movlw	14
  9847  00044A  658A               	cpfsgt	isr@i_1022& (0+255),b
  9848  00044C  D001               	goto	i2l279
  9849  00044E  D00C               	goto	i2u1155_40
  9850  000450                     i2l279:
  9851                           
  9852                           ; BSR set to: 0
  9853                           ;hmiMain.c: 330: menu_text[i] = ' ';
  9854                           
  9855                           ; BSR set to: 0
  9856  000450  518A               	movf	isr@i_1022& (0+255),w,b
  9857  000452  0D01               	mullw	1
  9858  000454  0EA5               	movlw	low _menu_text
  9859  000456  24F3               	addwf	prodl,w,c
  9860  000458  6ED9               	movwf	fsr2l,c
  9861  00045A  0E01               	movlw	high _menu_text
  9862  00045C  20F4               	addwfc	prodh,w,c
  9863  00045E  6EDA               	movwf	fsr2h,c
  9864  000460  0E20               	movlw	32
  9865  000462  6EDF               	movwf	indf2,c
  9866                           
  9867                           ; BSR set to: 0
  9868  000464  2B8A               	incf	isr@i_1022& (0+255),f,b
  9869  000466  D7F0               	goto	i2l10148
  9870  000468                     i2u1155_40:
  9871                           
  9872                           ; BSR set to: 0
  9873                           ;hmiMain.c: 331: }
  9874                           ;hmiMain.c: 332: g1 = 0;
  9875                           
  9876                           ; BSR set to: 0
  9877  000468  0E00               	movlw	0
  9878  00046A  6FAE               	movwf	_g1& (0+255),b
  9879  00046C                     i2l275:
  9880                           
  9881                           ; BSR set to: 0
  9882                           ;hmiMain.c: 333: }
  9883                           ;hmiMain.c: 335: if (menu_shown == 31 && keyConfirm) {
  9884                           
  9885                           ; BSR set to: 0
  9886  00046C  0E1F               	movlw	31
  9887  00046E  19B5               	xorwf	_menu_shown& (0+255),w,b
  9888  000470  A4D8               	btfss	status,2,c
  9889  000472  D00F               	goto	i2l281
  9890                           
  9891                           ; BSR set to: 0
  9892  000474  51B0               	movf	_keyConfirm& (0+255),w,b
  9893  000476  B4D8               	btfsc	status,2,c
  9894  000478  D00C               	goto	i2l281
  9895                           
  9896                           ; BSR set to: 0
  9897                           ;hmiMain.c: 336: putch(2);
  9898  00047A  0E02               	movlw	2
  9899  00047C  ECAC  F025         	call	i2_putch
  9900                           
  9901                           ;hmiMain.c: 337: printf("B%d\n",menu_rowColor);
  9902  000480  0ED7               	movlw	low STR_10
  9903  000482  6E0D               	movwf	i2printf@f,c
  9904  000484  0EFF               	movlw	high STR_10
  9905  000486  6E0E               	movwf	i2printf@f+1,c
  9906  000488  C0CC  F00F         	movff	_menu_rowColor,?i2_printf+2
  9907  00048C  6A10               	clrf	?i2_printf+3,c
  9908  00048E  ECC5  F011         	call	i2_printf	;wreg free
  9909  000492                     i2l281:
  9910                           
  9911                           ;hmiMain.c: 338: }
  9912                           ;hmiMain.c: 340: if ((menu_shown/10) == 3 && keyConfirm) {
  9913  000492  C0B5  F001         	movff	_menu_shown,___awdiv@dividend
  9914  000496  6A02               	clrf	___awdiv@dividend+1,c
  9915  000498  0E00               	movlw	0
  9916  00049A  6E04               	movwf	___awdiv@divisor+1,c
  9917  00049C  0E0A               	movlw	10
  9918  00049E  6E03               	movwf	___awdiv@divisor,c
  9919  0004A0  EC63  F020         	call	___awdiv	;wreg free
  9920  0004A4  0E03               	movlw	3
  9921  0004A6  1801               	xorwf	?___awdiv,w,c
  9922  0004A8  1002               	iorwf	?___awdiv+1,w,c
  9923  0004AA  A4D8               	btfss	status,2,c
  9924  0004AC  D01F               	goto	i2l284
  9925  0004AE  0100               	movlb	0	; () banked
  9926  0004B0  51B0               	movf	_keyConfirm& (0+255),w,b
  9927  0004B2  B4D8               	btfsc	status,2,c
  9928  0004B4  D01B               	goto	i2l284
  9929                           
  9930                           ; BSR set to: 0
  9931                           ;hmiMain.c: 341: if (menu_rowColor == 2) {
  9932  0004B6  0E02               	movlw	2
  9933  0004B8  19CC               	xorwf	_menu_rowColor& (0+255),w,b
  9934  0004BA  A4D8               	btfss	status,2,c
  9935  0004BC  D009               	goto	i2l283
  9936                           
  9937                           ; BSR set to: 0
  9938                           ;hmiMain.c: 342: putch(2);
  9939  0004BE  0E02               	movlw	2
  9940  0004C0  ECAC  F025         	call	i2_putch
  9941                           
  9942                           ;hmiMain.c: 343: printf("BE1\n");
  9943  0004C4  0ED2               	movlw	low STR_11
  9944  0004C6  6E0D               	movwf	i2printf@f,c
  9945  0004C8  0EFF               	movlw	high STR_11
  9946  0004CA  6E0E               	movwf	i2printf@f+1,c
  9947  0004CC  ECC5  F011         	call	i2_printf	;wreg free
  9948  0004D0                     i2l283:
  9949                           
  9950                           ;hmiMain.c: 344: }
  9951                           ;hmiMain.c: 345: if (menu_rowColor == 3) {
  9952  0004D0  0E03               	movlw	3
  9953  0004D2  0100               	movlb	0	; () banked
  9954  0004D4  19CC               	xorwf	_menu_rowColor& (0+255),w,b
  9955  0004D6  A4D8               	btfss	status,2,c
  9956  0004D8  D009               	goto	i2l284
  9957                           
  9958                           ; BSR set to: 0
  9959                           ;hmiMain.c: 346: putch(2);
  9960  0004DA  0E02               	movlw	2
  9961  0004DC  ECAC  F025         	call	i2_putch
  9962                           
  9963                           ;hmiMain.c: 347: printf("BE0\n");
  9964  0004E0  0ECD               	movlw	low STR_12
  9965  0004E2  6E0D               	movwf	i2printf@f,c
  9966  0004E4  0EFF               	movlw	high STR_12
  9967  0004E6  6E0E               	movwf	i2printf@f+1,c
  9968  0004E8  ECC5  F011         	call	i2_printf	;wreg free
  9969  0004EC                     i2l284:
  9970                           
  9971                           ;hmiMain.c: 348: }
  9972                           ;hmiMain.c: 349: }
  9973                           ;hmiMain.c: 351: if (menu_shown == 0) {
  9974  0004EC  0100               	movlb	0	; () banked
  9975  0004EE  51B5               	movf	_menu_shown& (0+255),w,b
  9976  0004F0  A4D8               	btfss	status,2,c
  9977  0004F2  D00C               	goto	i2l285
  9978                           
  9979                           ; BSR set to: 0
  9980                           ;hmiMain.c: 352: putch(2);
  9981  0004F4  0E02               	movlw	2
  9982  0004F6  ECAC  F025         	call	i2_putch
  9983                           
  9984                           ;hmiMain.c: 353: printf("F\n");
  9985  0004FA  0EE0               	movlw	low STR_13
  9986  0004FC  6E0D               	movwf	i2printf@f,c
  9987  0004FE  0EFF               	movlw	high STR_13
  9988  000500  6E0E               	movwf	i2printf@f+1,c
  9989  000502  ECC5  F011         	call	i2_printf	;wreg free
  9990                           
  9991                           ;hmiMain.c: 354: lcd_legend(1);
  9992  000506  0E01               	movlw	1
  9993  000508  EC8E  F01D         	call	i2_lcd_legend
  9994  00050C                     i2l285:
  9995                           
  9996                           ;hmiMain.c: 355: }
  9997                           ;hmiMain.c: 357: keyEnable = 1;
  9998  00050C  0E01               	movlw	1
  9999  00050E  0100               	movlb	0	; () banked
 10000  000510  6FB9               	movwf	_keyEnable& (0+255),b
 10001  000512                     i2l242:
 10002                           
 10003                           ; BSR set to: 0
 10004                           ;hmiMain.c: 358: }
 10005                           ;hmiMain.c: 359: }
 10006                           ;hmiMain.c: 361: if (menu_shown) {
 10007                           
 10008                           ; BSR set to: 0
 10009                           
 10010                           ; BSR set to: 0
 10011  000512  51B5               	movf	_menu_shown& (0+255),w,b
 10012  000514  B4D8               	btfsc	status,2,c
 10013  000516  D002               	goto	i2l286
 10014                           
 10015                           ; BSR set to: 0
 10016                           ;hmiMain.c: 362: printEnable = 0;
 10017  000518  0E00               	movlw	0
 10018  00051A  D001               	goto	L5
 10019  00051C                     i2l286:
 10020                           
 10021                           ; BSR set to: 0
 10022                           ;hmiMain.c: 364: printEnable = 1;
 10023                           
 10024                           ; BSR set to: 0
 10025  00051C  0E01               	movlw	1
 10026  00051E                     L5:
 10027  00051E  6FAF               	movwf	_printEnable& (0+255),b
 10028  000520                     i2l287:
 10029                           
 10030                           ;hmiMain.c: 365: }
 10031                           ;hmiMain.c: 366: }
 10032                           ;hmiMain.c: 368: if (PIR1bits.RC1IF) {
 10033                           
 10034                           ; BSR set to: 0
 10035                           
 10036                           ; BSR set to: 0
 10037  000520  AA9E               	btfss	3998,5,c	;volatile
 10038  000522  D025               	goto	i2l293
 10039                           
 10040                           ;hmiMain.c: 369: if (RCSTA1bits.OERR) {
 10041  000524  A2AB               	btfss	4011,1,c	;volatile
 10042  000526  D004               	goto	i2l289
 10043                           
 10044                           ;hmiMain.c: 370: RCSTA1bits.CREN = 0;
 10045  000528  98AB               	bcf	4011,4,c	;volatile
 10046  00052A  F000               	nop		;# 
 10047                           
 10048                           ;hmiMain.c: 372: RCSTA1bits.CREN = 1;
 10049  00052C  88AB               	bsf	4011,4,c	;volatile
 10050                           
 10051                           ;hmiMain.c: 373: } else {
 10052  00052E  D01F               	goto	i2l293
 10053  000530                     i2l289:
 10054                           
 10055                           ;hmiMain.c: 374: if (RCSTA1bits.FERR) {
 10056  000530  A4AB               	btfss	4011,2,c	;volatile
 10057  000532  D006               	goto	i2l291
 10058                           
 10059                           ;hmiMain.c: 375: k1 = RCREG1;
 10060  000534  CFAE F0B4          	movff	4014,_k1	;volatile
 10061                           
 10062                           ;hmiMain.c: 376: k1 = 0;
 10063  000538  0E00               	movlw	0
 10064  00053A  0100               	movlb	0	; () banked
 10065  00053C  6FB4               	movwf	_k1& (0+255),b	;volatile
 10066                           
 10067                           ;hmiMain.c: 378: } else {
 10068  00053E  D017               	goto	i2l293
 10069  000540                     i2l291:
 10070                           
 10071                           ;hmiMain.c: 379: *(buff1 + k1) = RCREG1;
 10072                           
 10073                           ; BSR set to: 0
 10074  000540  0100               	movlb	0	; () banked
 10075  000542  51B4               	movf	_k1& (0+255),w,b	;volatile
 10076  000544  0D01               	mullw	1
 10077  000546  0EB5               	movlw	low _buff1
 10078  000548  24F3               	addwf	prodl,w,c
 10079  00054A  6ED9               	movwf	fsr2l,c
 10080  00054C  0E01               	movlw	high _buff1
 10081  00054E  20F4               	addwfc	prodh,w,c
 10082  000550  6EDA               	movwf	fsr2h,c
 10083  000552  CFAE FFDF          	movff	4014,indf2	;volatile
 10084                           
 10085                           ;hmiMain.c: 380: if (*(buff1 + k1) != '\n') {
 10086  000556  51B4               	movf	_k1& (0+255),w,b	;volatile
 10087  000558  0D01               	mullw	1
 10088  00055A  0EB5               	movlw	low _buff1
 10089  00055C  24F3               	addwf	prodl,w,c
 10090  00055E  6ED9               	movwf	fsr2l,c
 10091  000560  0E01               	movlw	high _buff1
 10092  000562  20F4               	addwfc	prodh,w,c
 10093  000564  6EDA               	movwf	fsr2h,c
 10094  000566  0E0A               	movlw	10
 10095  000568  18DE               	xorwf	postinc2,w,c
 10096  00056A  A4D8               	btfss	status,2,c
 10097                           
 10098                           ; BSR set to: 0
 10099                           ;hmiMain.c: 381: k1++;
 10100  00056C  2BB4               	incf	_k1& (0+255),f,b	;volatile
 10101  00056E                     i2l293:
 10102                           
 10103                           ;hmiMain.c: 382: }
 10104                           ;hmiMain.c: 383: }
 10105                           ;hmiMain.c: 384: }
 10106                           ;hmiMain.c: 385: }
 10107                           ;hmiMain.c: 387: if (PIR3bits.RC2IF) {
 10108                           
 10109                           ; BSR set to: 0
 10110                           
 10111                           ; BSR set to: 0
 10112                           
 10113                           ; BSR set to: 0
 10114                           
 10115                           ; BSR set to: 0
 10116  00056E  AAA4               	btfss	4004,5,c	;volatile
 10117  000570  D1B7               	goto	i2l299
 10118                           
 10119                           ;hmiMain.c: 388: char eoc;
 10120                           ;hmiMain.c: 389: signed int peso = 0, multiplicador = 10000, peso_cpy = 0;
 10121  000572  0E00               	movlw	0
 10122  000574  0100               	movlb	0	; () banked
 10123  000576  6F92               	movwf	(isr@peso+1)& (0+255),b
 10124  000578  0E00               	movlw	0
 10125  00057A  6F91               	movwf	isr@peso& (0+255),b
 10126  00057C  0E27               	movlw	39
 10127  00057E  6F90               	movwf	(isr@multiplicador+1)& (0+255),b
 10128  000580  0E10               	movlw	16
 10129  000582  6F8F               	movwf	isr@multiplicador& (0+255),b
 10130  000584  0E00               	movlw	0
 10131  000586  6F78               	movwf	(isr@peso_cpy+1)& (0+255),b
 10132  000588  0E00               	movlw	0
 10133  00058A  6F77               	movwf	isr@peso_cpy& (0+255),b
 10134                           
 10135                           ;hmiMain.c: 390: unsigned int tara_resta = 0;
 10136  00058C  0E00               	movlw	0
 10137  00058E  6F83               	movwf	(isr@tara_resta+1)& (0+255),b
 10138  000590  0E00               	movlw	0
 10139  000592  6F82               	movwf	isr@tara_resta& (0+255),b
 10140                           
 10141                           ; BSR set to: 0
 10142                           ;hmiMain.c: 392: if (RCSTA2bits.OERR) {
 10143  000594  A2A6               	btfss	4006,1,c	;volatile
 10144  000596  D004               	goto	i2l295
 10145                           
 10146                           ; BSR set to: 0
 10147                           ;hmiMain.c: 393: RCSTA2bits.CREN = 0;
 10148  000598  98A6               	bcf	4006,4,c	;volatile
 10149  00059A  F000               	nop		;# 
 10150                           
 10151                           ;hmiMain.c: 395: RCSTA2bits.CREN = 1;
 10152  00059C  88A6               	bsf	4006,4,c	;volatile
 10153                           
 10154                           ;hmiMain.c: 396: } else {
 10155  00059E  D012               	goto	i2l298
 10156  0005A0                     i2l295:
 10157                           
 10158                           ; BSR set to: 0
 10159                           ;hmiMain.c: 397: if (RCSTA2bits.FERR) {
 10160  0005A0  A4A6               	btfss	4006,2,c	;volatile
 10161  0005A2  D005               	goto	i2l297
 10162                           
 10163                           ; BSR set to: 0
 10164                           ;hmiMain.c: 398: k2 = RCREG2;
 10165  0005A4  CF7A F0B3          	movff	3962,_k2	;volatile
 10166                           
 10167                           ; BSR set to: 0
 10168                           ;hmiMain.c: 399: k2 = 0;
 10169  0005A8  0E00               	movlw	0
 10170  0005AA  6FB3               	movwf	_k2& (0+255),b	;volatile
 10171                           
 10172                           ;hmiMain.c: 401: } else {
 10173  0005AC  D00B               	goto	i2l298
 10174  0005AE                     i2l297:
 10175                           
 10176                           ; BSR set to: 0
 10177                           ;hmiMain.c: 402: *(buff2 + k2) = RCREG2;
 10178                           
 10179                           ; BSR set to: 0
 10180  0005AE  51B3               	movf	_k2& (0+255),w,b	;volatile
 10181  0005B0  0D01               	mullw	1
 10182  0005B2  0E9A               	movlw	low _buff2
 10183  0005B4  24F3               	addwf	prodl,w,c
 10184  0005B6  6ED9               	movwf	fsr2l,c
 10185  0005B8  0E00               	movlw	high _buff2
 10186  0005BA  20F4               	addwfc	prodh,w,c
 10187  0005BC  6EDA               	movwf	fsr2h,c
 10188  0005BE  CF7A FFDF          	movff	3962,indf2	;volatile
 10189                           
 10190                           ; BSR set to: 0
 10191                           ;hmiMain.c: 403: k2++;
 10192  0005C2  2BB3               	incf	_k2& (0+255),f,b	;volatile
 10193  0005C4                     i2l298:
 10194                           
 10195                           ;hmiMain.c: 404: }
 10196                           ;hmiMain.c: 405: }
 10197                           ;hmiMain.c: 408: if (buff2[k2-1] == '\n') {
 10198                           
 10199                           ; BSR set to: 0
 10200                           
 10201                           ; BSR set to: 0
 10202  0005C4  0EFF               	movlw	255
 10203  0005C6  0100               	movlb	0	; () banked
 10204  0005C8  6F60               	movwf	??_isr& (0+255),b
 10205  0005CA  0EFF               	movlw	255
 10206  0005CC  6F61               	movwf	(??_isr+1)& (0+255),b
 10207  0005CE  51B3               	movf	_k2& (0+255),w,b	;volatile
 10208  0005D0  6F62               	movwf	(??_isr+2)& (0+255),b
 10209  0005D2  6B63               	clrf	(??_isr+3)& (0+255),b
 10210  0005D4  5160               	movf	??_isr& (0+255),w,b
 10211  0005D6  2762               	addwf	(??_isr+2)& (0+255),f,b
 10212  0005D8  5161               	movf	(??_isr+1)& (0+255),w,b
 10213  0005DA  2363               	addwfc	(??_isr+3)& (0+255),f,b
 10214  0005DC  0E9A               	movlw	low _buff2
 10215  0005DE  2562               	addwf	(??_isr+2)& (0+255),w,b
 10216  0005E0  6ED9               	movwf	fsr2l,c
 10217  0005E2  0E00               	movlw	high _buff2
 10218  0005E4  2163               	addwfc	(??_isr+3)& (0+255),w,b
 10219  0005E6  6EDA               	movwf	fsr2h,c
 10220  0005E8  0E0A               	movlw	10
 10221  0005EA  18DE               	xorwf	postinc2,w,c
 10222  0005EC  B4D8               	btfsc	status,2,c
 10223  0005EE  D168               	goto	i2l300
 10224  0005F0  D177               	goto	i2l299
 10225  0005F2                     
 10226                           ; BSR set to: 0
 10227                           ;hmiMain.c: 415: menu_navigate(menu_shown,1);
 10228                           
 10229                           ; BSR set to: 0
 10230  0005F2  0E01               	movlw	1
 10231  0005F4  6E4C               	movwf	menu_navigate@rowColor,c
 10232  0005F6  51B5               	movf	_menu_shown& (0+255),w,b
 10233  0005F8  EC23  F019         	call	_menu_navigate
 10234                           
 10235                           ;hmiMain.c: 416: break;
 10236  0005FC  D16E               	goto	i2l302
 10237  0005FE                     
 10238                           ;hmiMain.c: 418: decimal_point = buff2[3] - 48;
 10239  0005FE  0100               	movlb	0	; () banked
 10240  000600  519D               	movf	(_buff2+3)& (0+255),w,b	;volatile
 10241  000602  0FD0               	addlw	208
 10242  000604  6FB2               	movwf	_decimal_point& (0+255),b
 10243                           
 10244                           ; BSR set to: 0
 10245                           ;hmiMain.c: 420: }
 10246                           
 10247                           ;hmiMain.c: 419: break;
 10248  000606  D169               	goto	i2l302
 10249  000608                     
 10250                           ; BSR set to: 0
 10251                           
 10252                           ; BSR set to: 0
 10253  000608  519B               	movf	(_buff2+1)& (0+255),w,b	;volatile
 10254                           
 10255                           ; Switch size 1, requested type "space"
 10256                           ; Number of cases is 2, Range of values is 58 to 75
 10257                           ; switch strategies available:
 10258                           ; Name         Instructions Cycles
 10259                           ; simple_byte            7     4 (average)
 10260                           ;	Chosen strategy is simple_byte
 10261  00060A  0A3A               	xorlw	58	; case 58
 10262  00060C  B4D8               	btfsc	status,2,c
 10263  00060E  D7F7               	goto	i2l307
 10264  000610  0A71               	xorlw	113	; case 75
 10265  000612  B4D8               	btfsc	status,2,c
 10266  000614  D7EE               	goto	i2l305
 10267                           
 10268                           ; BSR set to: 0
 10269                           ;hmiMain.c: 421: break;
 10270  000616  D161               	goto	i2l302
 10271  000618                     
 10272                           ; BSR set to: 0
 10273                           ;hmiMain.c: 425: if (buff2[2] == 'H')
 10274                           
 10275                           ; BSR set to: 0
 10276  000618  0E48               	movlw	72
 10277  00061A  199C               	xorwf	(_buff2+2)& (0+255),w,b	;volatile
 10278  00061C  A4D8               	btfss	status,2,c
 10279  00061E  D002               	goto	i2l311
 10280                           
 10281                           ; BSR set to: 0
 10282                           ;hmiMain.c: 426: LATCbits.LATC4 = 1;
 10283  000620  888B               	bsf	3979,4,c	;volatile
 10284  000622  D15B               	goto	i2l302
 10285  000624                     i2l311:
 10286                           
 10287                           ; BSR set to: 0
 10288                           ;hmiMain.c: 427: else
 10289                           ;hmiMain.c: 428: LATCbits.LATC4 = 0;
 10290  000624  988B               	bcf	3979,4,c	;volatile
 10291                           
 10292                           ; BSR set to: 0
 10293                           ;hmiMain.c: 429: break;
 10294  000626  D159               	goto	i2l302
 10295  000628                     
 10296                           ; BSR set to: 0
 10297                           ;hmiMain.c: 431: if (buff2[2] == 'H')
 10298                           
 10299                           ; BSR set to: 0
 10300  000628  0E48               	movlw	72
 10301  00062A  199C               	xorwf	(_buff2+2)& (0+255),w,b	;volatile
 10302  00062C  A4D8               	btfss	status,2,c
 10303  00062E  D002               	goto	i2l315
 10304                           
 10305                           ; BSR set to: 0
 10306                           ;hmiMain.c: 432: LATCbits.LATC5 = 1;
 10307  000630  8A8B               	bsf	3979,5,c	;volatile
 10308  000632  D153               	goto	i2l302
 10309  000634                     i2l315:
 10310                           
 10311                           ; BSR set to: 0
 10312                           ;hmiMain.c: 433: else
 10313                           ;hmiMain.c: 434: LATCbits.LATC5 = 0;
 10314  000634  9A8B               	bcf	3979,5,c	;volatile
 10315                           
 10316                           ; BSR set to: 0
 10317                           ;hmiMain.c: 435: break;
 10318  000636  D151               	goto	i2l302
 10319  000638                     
 10320                           ; BSR set to: 0
 10321                           ;hmiMain.c: 437: if (buff2[2] == 'H')
 10322                           
 10323                           ; BSR set to: 0
 10324  000638  0E48               	movlw	72
 10325  00063A  199C               	xorwf	(_buff2+2)& (0+255),w,b	;volatile
 10326  00063C  A4D8               	btfss	status,2,c
 10327  00063E  D002               	goto	i2l318
 10328                           
 10329                           ; BSR set to: 0
 10330                           ;hmiMain.c: 438: LATAbits.LATA6 = 1;
 10331  000640  8C89               	bsf	3977,6,c	;volatile
 10332  000642  D14B               	goto	i2l302
 10333  000644                     i2l318:
 10334                           
 10335                           ; BSR set to: 0
 10336                           ;hmiMain.c: 439: else
 10337                           ;hmiMain.c: 440: LATAbits.LATA6 = 0;
 10338  000644  9C89               	bcf	3977,6,c	;volatile
 10339                           
 10340                           ; BSR set to: 0
 10341                           ;hmiMain.c: 441: break;
 10342  000646  D149               	goto	i2l302
 10343  000648                     
 10344                           ; BSR set to: 0
 10345                           ;hmiMain.c: 443: putch(2);
 10346                           
 10347                           ; BSR set to: 0
 10348  000648  0E02               	movlw	2
 10349  00064A  ECAC  F025         	call	i2_putch
 10350                           
 10351                           ;hmiMain.c: 444: printf("I1");
 10352  00064E  0EE9               	movlw	low STR_14
 10353  000650  6E0D               	movwf	i2printf@f,c
 10354  000652  0EFF               	movlw	high STR_14
 10355  000654  6E0E               	movwf	i2printf@f+1,c
 10356  000656  ECC5  F011         	call	i2_printf	;wreg free
 10357                           
 10358                           ;hmiMain.c: 445: if (PORTDbits.RD4)
 10359  00065A  A883               	btfss	3971,4,c	;volatile
 10360  00065C  D004               	goto	i2l321
 10361                           
 10362                           ;hmiMain.c: 446: putch('H');
 10363  00065E  0E48               	movlw	72
 10364  000660  ECAC  F025         	call	i2_putch
 10365  000664  D003               	goto	i2l322
 10366  000666                     i2l321:
 10367                           
 10368                           ;hmiMain.c: 447: else
 10369                           ;hmiMain.c: 448: putch('L');
 10370  000666  0E4C               	movlw	76
 10371  000668  ECAC  F025         	call	i2_putch
 10372  00066C                     i2l322:
 10373                           
 10374                           ;hmiMain.c: 449: putch('\n');
 10375  00066C  0E0A               	movlw	10
 10376  00066E  ECAC  F025         	call	i2_putch
 10377                           
 10378                           ;hmiMain.c: 450: break;
 10379  000672  D133               	goto	i2l302
 10380  000674                     
 10381                           ;hmiMain.c: 452: putch(2);
 10382  000674  0E02               	movlw	2
 10383  000676  ECAC  F025         	call	i2_putch
 10384                           
 10385                           ;hmiMain.c: 453: printf("I2");
 10386  00067A  0EEC               	movlw	low STR_15
 10387  00067C  6E0D               	movwf	i2printf@f,c
 10388  00067E  0EFF               	movlw	high STR_15
 10389  000680  6E0E               	movwf	i2printf@f+1,c
 10390  000682  ECC5  F011         	call	i2_printf	;wreg free
 10391                           
 10392                           ;hmiMain.c: 454: if (PORTDbits.RD5)
 10393  000686  AA83               	btfss	3971,5,c	;volatile
 10394  000688  D004               	goto	i2l324
 10395                           
 10396                           ;hmiMain.c: 455: putch('H');
 10397  00068A  0E48               	movlw	72
 10398  00068C  ECAC  F025         	call	i2_putch
 10399  000690  D003               	goto	i2l325
 10400  000692                     i2l324:
 10401                           
 10402                           ;hmiMain.c: 456: else
 10403                           ;hmiMain.c: 457: putch('L');
 10404  000692  0E4C               	movlw	76
 10405  000694  ECAC  F025         	call	i2_putch
 10406  000698                     i2l325:
 10407                           
 10408                           ;hmiMain.c: 458: putch('\n');
 10409  000698  0E0A               	movlw	10
 10410  00069A  ECAC  F025         	call	i2_putch
 10411                           
 10412                           ;hmiMain.c: 459: break;
 10413  00069E  D11D               	goto	i2l302
 10414  0006A0                     
 10415                           ;hmiMain.c: 461: putch(2);
 10416  0006A0  0E02               	movlw	2
 10417  0006A2  ECAC  F025         	call	i2_putch
 10418                           
 10419                           ;hmiMain.c: 462: printf("I3");
 10420  0006A6  0EEF               	movlw	low STR_16
 10421  0006A8  6E0D               	movwf	i2printf@f,c
 10422  0006AA  0EFF               	movlw	high STR_16
 10423  0006AC  6E0E               	movwf	i2printf@f+1,c
 10424  0006AE  ECC5  F011         	call	i2_printf	;wreg free
 10425                           
 10426                           ;hmiMain.c: 463: if (PORTAbits.RA7)
 10427  0006B2  AE80               	btfss	3968,7,c	;volatile
 10428  0006B4  D004               	goto	i2l327
 10429                           
 10430                           ;hmiMain.c: 464: putch('H');
 10431  0006B6  0E48               	movlw	72
 10432  0006B8  ECAC  F025         	call	i2_putch
 10433  0006BC  D003               	goto	i2l328
 10434  0006BE                     i2l327:
 10435                           
 10436                           ;hmiMain.c: 465: else
 10437                           ;hmiMain.c: 466: putch('L');
 10438  0006BE  0E4C               	movlw	76
 10439  0006C0  ECAC  F025         	call	i2_putch
 10440  0006C4                     i2l328:
 10441                           
 10442                           ;hmiMain.c: 467: putch('\n');
 10443  0006C4  0E0A               	movlw	10
 10444  0006C6  ECAC  F025         	call	i2_putch
 10445                           
 10446                           ;hmiMain.c: 469: }
 10447                           
 10448                           ;hmiMain.c: 468: break;
 10449  0006CA  D107               	goto	i2l302
 10450  0006CC  0100               	movlb	0	; () banked
 10451  0006CE  519B               	movf	(_buff2+1)& (0+255),w,b	;volatile
 10452                           
 10453                           ; Switch size 1, requested type "space"
 10454                           ; Number of cases is 6, Range of values is 49 to 54
 10455                           ; switch strategies available:
 10456                           ; Name         Instructions Cycles
 10457                           ; simple_byte           19    10 (average)
 10458                           ;	Chosen strategy is simple_byte
 10459  0006D0  0A31               	xorlw	49	; case 49
 10460  0006D2  B4D8               	btfsc	status,2,c
 10461  0006D4  D7A1               	goto	i2l310
 10462  0006D6  0A03               	xorlw	3	; case 50
 10463  0006D8  B4D8               	btfsc	status,2,c
 10464  0006DA  D7A6               	goto	i2l314
 10465  0006DC  0A01               	xorlw	1	; case 51
 10466  0006DE  B4D8               	btfsc	status,2,c
 10467  0006E0  D7AB               	goto	i2l317
 10468  0006E2  0A07               	xorlw	7	; case 52
 10469  0006E4  B4D8               	btfsc	status,2,c
 10470  0006E6  D7B0               	goto	i2l320
 10471  0006E8  0A01               	xorlw	1	; case 53
 10472  0006EA  B4D8               	btfsc	status,2,c
 10473  0006EC  D7C3               	goto	i2l323
 10474  0006EE  0A03               	xorlw	3	; case 54
 10475  0006F0  B4D8               	btfsc	status,2,c
 10476  0006F2  D7D6               	goto	i2l326
 10477                           
 10478                           ; BSR set to: 0
 10479                           ;hmiMain.c: 470: break;
 10480  0006F4  D0F2               	goto	i2l302
 10481  0006F6                     
 10482                           ; BSR set to: 0
 10483                           ;hmiMain.c: 473: if (buff2[3] == '-') {
 10484                           
 10485                           ; BSR set to: 0
 10486  0006F6  0E2D               	movlw	45
 10487  0006F8  199D               	xorwf	(_buff2+3)& (0+255),w,b	;volatile
 10488  0006FA  A4D8               	btfss	status,2,c
 10489  0006FC  D038               	goto	i2l330
 10490                           
 10491                           ; BSR set to: 0
 10492                           ;hmiMain.c: 475: for (char i=0;i<5;i++) {
 10493  0006FE  0E00               	movlw	0
 10494  000700  6F8B               	movwf	isr@i_1084& (0+255),b
 10495  000702                     i2l10292:
 10496                           
 10497                           ; BSR set to: 0
 10498  000702  0E04               	movlw	4
 10499  000704  658B               	cpfsgt	isr@i_1084& (0+255),b
 10500  000706  D001               	goto	i2l331
 10501  000708  D02D               	goto	i2u1181_40
 10502  00070A                     i2l331:
 10503                           
 10504                           ; BSR set to: 0
 10505                           ;hmiMain.c: 477: eoc = buff2[4+i]-48;
 10506                           
 10507                           ; BSR set to: 0
 10508  00070A  518B               	movf	isr@i_1084& (0+255),w,b
 10509  00070C  6F60               	movwf	??_isr& (0+255),b
 10510  00070E  6B61               	clrf	(??_isr+1)& (0+255),b
 10511  000710  0E04               	movlw	4
 10512  000712  2760               	addwf	??_isr& (0+255),f,b
 10513  000714  0E00               	movlw	0
 10514  000716  2361               	addwfc	(??_isr+1)& (0+255),f,b
 10515  000718  0E9A               	movlw	low _buff2
 10516  00071A  2560               	addwf	??_isr& (0+255),w,b
 10517  00071C  6ED9               	movwf	fsr2l,c
 10518  00071E  0E00               	movlw	high _buff2
 10519  000720  2161               	addwfc	(??_isr+1)& (0+255),w,b
 10520  000722  6EDA               	movwf	fsr2h,c
 10521  000724  50DF               	movf	indf2,w,c
 10522  000726  0FD0               	addlw	208
 10523  000728  6F81               	movwf	isr@eoc& (0+255),b
 10524                           
 10525                           ; BSR set to: 0
 10526                           ;hmiMain.c: 478: for (char j=0;j<eoc;j++) {
 10527  00072A  0E00               	movlw	0
 10528  00072C  6F79               	movwf	isr@j& (0+255),b
 10529  00072E  D005               	goto	i2l333
 10530  000730                     
 10531                           ; BSR set to: 0
 10532                           ;hmiMain.c: 479: peso += multiplicador;
 10533                           
 10534                           ; BSR set to: 0
 10535  000730  518F               	movf	isr@multiplicador& (0+255),w,b
 10536  000732  2791               	addwf	isr@peso& (0+255),f,b
 10537  000734  5190               	movf	(isr@multiplicador+1)& (0+255),w,b
 10538  000736  2392               	addwfc	(isr@peso+1)& (0+255),f,b
 10539                           
 10540                           ; BSR set to: 0
 10541  000738  2B79               	incf	isr@j& (0+255),f,b
 10542  00073A                     i2l333:
 10543                           
 10544                           ; BSR set to: 0
 10545                           
 10546                           ; BSR set to: 0
 10547  00073A  5181               	movf	isr@eoc& (0+255),w,b
 10548  00073C  5D79               	subwf	isr@j& (0+255),w,b
 10549  00073E  A0D8               	btfss	status,0,c
 10550  000740  D7F7               	goto	i2l334
 10551                           
 10552                           ; BSR set to: 0
 10553                           ;hmiMain.c: 480: }
 10554                           ;hmiMain.c: 481: multiplicador /= 10;
 10555                           
 10556                           ; BSR set to: 0
 10557  000742  C08F  F001         	movff	isr@multiplicador,___awdiv@dividend
 10558  000746  C090  F002         	movff	isr@multiplicador+1,___awdiv@dividend+1
 10559  00074A  0E00               	movlw	0
 10560  00074C  6E04               	movwf	___awdiv@divisor+1,c
 10561  00074E  0E0A               	movlw	10
 10562  000750  6E03               	movwf	___awdiv@divisor,c
 10563  000752  EC63  F020         	call	___awdiv	;wreg free
 10564  000756  C001  F08F         	movff	?___awdiv,isr@multiplicador
 10565  00075A  C002  F090         	movff	?___awdiv+1,isr@multiplicador+1
 10566  00075E  0100               	movlb	0	; () banked
 10567  000760  2B8B               	incf	isr@i_1084& (0+255),f,b
 10568  000762  D7CF               	goto	i2l10292
 10569  000764                     i2u1181_40:
 10570                           
 10571                           ; BSR set to: 0
 10572                           ;hmiMain.c: 482: }
 10573                           ;hmiMain.c: 483: peso = 0 - peso;
 10574                           
 10575                           ; BSR set to: 0
 10576  000764  6D91               	negf	isr@peso& (0+255),b
 10577  000766  1F92               	comf	(isr@peso+1)& (0+255),f,b
 10578  000768  B0D8               	btfsc	status,0,c
 10579  00076A  2B92               	incf	(isr@peso+1)& (0+255),f,b
 10580                           
 10581                           ;hmiMain.c: 484: } else {
 10582  00076C  D033               	goto	i2u1184_40
 10583  00076E                     i2l330:
 10584                           
 10585                           ; BSR set to: 0
 10586                           ;hmiMain.c: 485: for (char i=0;i<5;i++) {
 10587                           
 10588                           ; BSR set to: 0
 10589  00076E  0E00               	movlw	0
 10590  000770  6F8C               	movwf	isr@i_1086& (0+255),b
 10591  000772                     i2l10316:
 10592                           
 10593                           ; BSR set to: 0
 10594  000772  0E04               	movlw	4
 10595  000774  658C               	cpfsgt	isr@i_1086& (0+255),b
 10596  000776  D001               	goto	i2l337
 10597  000778  D02D               	goto	i2u1184_40
 10598  00077A                     i2l337:
 10599                           
 10600                           ; BSR set to: 0
 10601                           ;hmiMain.c: 487: eoc = buff2[3+i]-48;
 10602                           
 10603                           ; BSR set to: 0
 10604  00077A  518C               	movf	isr@i_1086& (0+255),w,b
 10605  00077C  6F60               	movwf	??_isr& (0+255),b
 10606  00077E  6B61               	clrf	(??_isr+1)& (0+255),b
 10607  000780  0E03               	movlw	3
 10608  000782  2760               	addwf	??_isr& (0+255),f,b
 10609  000784  0E00               	movlw	0
 10610  000786  2361               	addwfc	(??_isr+1)& (0+255),f,b
 10611  000788  0E9A               	movlw	low _buff2
 10612  00078A  2560               	addwf	??_isr& (0+255),w,b
 10613  00078C  6ED9               	movwf	fsr2l,c
 10614  00078E  0E00               	movlw	high _buff2
 10615  000790  2161               	addwfc	(??_isr+1)& (0+255),w,b
 10616  000792  6EDA               	movwf	fsr2h,c
 10617  000794  50DF               	movf	indf2,w,c
 10618  000796  0FD0               	addlw	208
 10619  000798  6F81               	movwf	isr@eoc& (0+255),b
 10620                           
 10621                           ; BSR set to: 0
 10622                           ;hmiMain.c: 488: for (char j=0;j<eoc;j++) {
 10623  00079A  0E00               	movlw	0
 10624  00079C  6F7A               	movwf	isr@j_1087& (0+255),b
 10625  00079E  D005               	goto	i2l339
 10626  0007A0                     
 10627                           ; BSR set to: 0
 10628                           ;hmiMain.c: 489: peso += multiplicador;
 10629                           
 10630                           ; BSR set to: 0
 10631  0007A0  518F               	movf	isr@multiplicador& (0+255),w,b
 10632  0007A2  2791               	addwf	isr@peso& (0+255),f,b
 10633  0007A4  5190               	movf	(isr@multiplicador+1)& (0+255),w,b
 10634  0007A6  2392               	addwfc	(isr@peso+1)& (0+255),f,b
 10635                           
 10636                           ; BSR set to: 0
 10637  0007A8  2B7A               	incf	isr@j_1087& (0+255),f,b
 10638  0007AA                     i2l339:
 10639                           
 10640                           ; BSR set to: 0
 10641                           
 10642                           ; BSR set to: 0
 10643  0007AA  5181               	movf	isr@eoc& (0+255),w,b
 10644  0007AC  5D7A               	subwf	isr@j_1087& (0+255),w,b
 10645  0007AE  A0D8               	btfss	status,0,c
 10646  0007B0  D7F7               	goto	i2l340
 10647                           
 10648                           ; BSR set to: 0
 10649                           ;hmiMain.c: 490: }
 10650                           ;hmiMain.c: 491: multiplicador /= 10;
 10651                           
 10652                           ; BSR set to: 0
 10653  0007B2  C08F  F001         	movff	isr@multiplicador,___awdiv@dividend
 10654  0007B6  C090  F002         	movff	isr@multiplicador+1,___awdiv@dividend+1
 10655  0007BA  0E00               	movlw	0
 10656  0007BC  6E04               	movwf	___awdiv@divisor+1,c
 10657  0007BE  0E0A               	movlw	10
 10658  0007C0  6E03               	movwf	___awdiv@divisor,c
 10659  0007C2  EC63  F020         	call	___awdiv	;wreg free
 10660  0007C6  C001  F08F         	movff	?___awdiv,isr@multiplicador
 10661  0007CA  C002  F090         	movff	?___awdiv+1,isr@multiplicador+1
 10662  0007CE  0100               	movlb	0	; () banked
 10663  0007D0  2B8C               	incf	isr@i_1086& (0+255),f,b
 10664  0007D2  D7CF               	goto	i2l10316
 10665  0007D4                     i2u1184_40:
 10666                           
 10667                           ; BSR set to: 0
 10668                           ;hmiMain.c: 492: }
 10669                           ;hmiMain.c: 493: }
 10670                           ;hmiMain.c: 494: peso_cpy = peso;
 10671                           
 10672                           ; BSR set to: 0
 10673  0007D4  C091  F077         	movff	isr@peso,isr@peso_cpy
 10674  0007D8  C092  F078         	movff	isr@peso+1,isr@peso_cpy+1
 10675                           
 10676                           ; BSR set to: 0
 10677                           ;hmiMain.c: 497: if (printEnable) {
 10678  0007DC  51AF               	movf	_printEnable& (0+255),w,b
 10679  0007DE  B4D8               	btfsc	status,2,c
 10680  0007E0  D04B               	goto	i2l342
 10681                           
 10682                           ; BSR set to: 0
 10683                           ;hmiMain.c: 498: printEnable = 0;
 10684  0007E2  0E00               	movlw	0
 10685  0007E4  6FAF               	movwf	_printEnable& (0+255),b
 10686                           
 10687                           ; BSR set to: 0
 10688                           ;hmiMain.c: 499: lcd_point(decimal_point);
 10689  0007E6  51B2               	movf	_decimal_point& (0+255),w,b
 10690  0007E8  EC17  F01F         	call	_lcd_point
 10691                           
 10692                           ;hmiMain.c: 500: tara_resta = tara;
 10693  0007EC  C1DC  F082         	movff	_tara,isr@tara_resta
 10694  0007F0  C1DD  F083         	movff	_tara+1,isr@tara_resta+1
 10695                           
 10696                           ;hmiMain.c: 501: for (char i=0;i<(3-decimal_point);i++) {
 10697  0007F4  0E00               	movlw	0
 10698  0007F6  0100               	movlb	0	; () banked
 10699  0007F8  6F7B               	movwf	isr@i_1088& (0+255),b
 10700  0007FA  D010               	goto	i2l343
 10701  0007FC                     
 10702                           ; BSR set to: 0
 10703                           ;hmiMain.c: 502: tara_resta /= 10;
 10704                           
 10705                           ; BSR set to: 0
 10706  0007FC  C082  F001         	movff	isr@tara_resta,i2___lwdiv@dividend
 10707  000800  C083  F002         	movff	isr@tara_resta+1,i2___lwdiv@dividend+1
 10708  000804  0E00               	movlw	0
 10709  000806  6E04               	movwf	i2___lwdiv@divisor+1,c
 10710  000808  0E0A               	movlw	10
 10711  00080A  6E03               	movwf	i2___lwdiv@divisor,c
 10712  00080C  EC54  F022         	call	i2___lwdiv	;wreg free
 10713  000810  C001  F082         	movff	?i2___lwdiv,isr@tara_resta
 10714  000814  C002  F083         	movff	?i2___lwdiv+1,isr@tara_resta+1
 10715  000818  0100               	movlb	0	; () banked
 10716  00081A  2B7B               	incf	isr@i_1088& (0+255),f,b
 10717  00081C                     i2l343:
 10718                           
 10719                           ; BSR set to: 0
 10720                           
 10721                           ; BSR set to: 0
 10722  00081C  51B2               	movf	_decimal_point& (0+255),w,b
 10723  00081E  6F60               	movwf	??_isr& (0+255),b
 10724  000820  6B61               	clrf	(??_isr+1)& (0+255),b
 10725  000822  1F60               	comf	??_isr& (0+255),f,b
 10726  000824  1F61               	comf	(??_isr+1)& (0+255),f,b
 10727  000826  4B60               	infsnz	??_isr& (0+255),f,b
 10728  000828  2B61               	incf	(??_isr+1)& (0+255),f,b
 10729  00082A  0E03               	movlw	3
 10730  00082C  2760               	addwf	??_isr& (0+255),f,b
 10731  00082E  0E00               	movlw	0
 10732  000830  2361               	addwfc	(??_isr+1)& (0+255),f,b
 10733  000832  517B               	movf	isr@i_1088& (0+255),w,b
 10734  000834  6F62               	movwf	(??_isr+2)& (0+255),b
 10735  000836  6B63               	clrf	(??_isr+3)& (0+255),b
 10736  000838  5160               	movf	??_isr& (0+255),w,b
 10737  00083A  5D62               	subwf	(??_isr+2)& (0+255),w,b
 10738  00083C  5163               	movf	(??_isr+3)& (0+255),w,b
 10739  00083E  0A80               	xorlw	128
 10740  000840  6F64               	movwf	(??_isr+4)& (0+255),b
 10741  000842  5161               	movf	(??_isr+1)& (0+255),w,b
 10742  000844  0A80               	xorlw	128
 10743  000846  5964               	subwfb	(??_isr+4)& (0+255),w,b
 10744  000848  A0D8               	btfss	status,0,c
 10745  00084A  D7D8               	goto	i2l344
 10746                           
 10747                           ; BSR set to: 0
 10748                           ;hmiMain.c: 503: }
 10749                           ;hmiMain.c: 504: peso -= tara_resta;
 10750                           
 10751                           ; BSR set to: 0
 10752  00084C  5182               	movf	isr@tara_resta& (0+255),w,b
 10753  00084E  5F91               	subwf	isr@peso& (0+255),f,b
 10754  000850  5183               	movf	(isr@tara_resta+1)& (0+255),w,b
 10755  000852  5B92               	subwfb	(isr@peso+1)& (0+255),f,b
 10756                           
 10757                           ; BSR set to: 0
 10758                           ;hmiMain.c: 505: lcd_number(peso);
 10759  000854  C091  F019         	movff	isr@peso,lcd_number@number
 10760  000858  C092  F01A         	movff	isr@peso+1,lcd_number@number+1
 10761  00085C  ECE8  F012         	call	_lcd_number	;wreg free
 10762                           
 10763                           ;hmiMain.c: 506: putch(2);
 10764  000860  0E02               	movlw	2
 10765  000862  ECAC  F025         	call	i2_putch
 10766                           
 10767                           ;hmiMain.c: 507: putch('A');
 10768  000866  0E41               	movlw	65
 10769  000868  ECAC  F025         	call	i2_putch
 10770                           
 10771                           ;hmiMain.c: 508: putch('\n');
 10772  00086C  0E0A               	movlw	10
 10773  00086E  ECAC  F025         	call	i2_putch
 10774                           
 10775                           ;hmiMain.c: 509: printEnable = 1;
 10776  000872  0E01               	movlw	1
 10777  000874  0100               	movlb	0	; () banked
 10778  000876  6FAF               	movwf	_printEnable& (0+255),b
 10779  000878                     i2l342:
 10780                           
 10781                           ; BSR set to: 0
 10782                           ;hmiMain.c: 510: }
 10783                           ;hmiMain.c: 513: if ((peso_cpy == 0) || LATCbits.LATC5) {
 10784                           
 10785                           ; BSR set to: 0
 10786  000878  5177               	movf	isr@peso_cpy& (0+255),w,b
 10787  00087A  1178               	iorwf	(isr@peso_cpy+1)& (0+255),w,b
 10788  00087C  B4D8               	btfsc	status,2,c
 10789  00087E  D002               	goto	i2u1188_40
 10790                           
 10791                           ; BSR set to: 0
 10792  000880  AA8B               	btfss	3979,5,c	;volatile
 10793  000882  D02B               	goto	i2l302
 10794  000884                     i2u1188_40:
 10795                           
 10796                           ; BSR set to: 0
 10797                           ;hmiMain.c: 514: mux = 0;
 10798                           
 10799                           ; BSR set to: 0
 10800  000884  0E00               	movlw	0
 10801  000886  6FBB               	movwf	_mux& (0+255),b	;volatile
 10802                           
 10803                           ; BSR set to: 0
 10804                           ;hmiMain.c: 515: if (peso >= 0) {
 10805  000888  BF92               	btfsc	(isr@peso+1)& (0+255),7,b
 10806  00088A  D004               	goto	i2l349
 10807                           
 10808                           ; BSR set to: 0
 10809                           ;hmiMain.c: 516: putch('+');
 10810  00088C  0E2B               	movlw	43
 10811  00088E  ECAC  F025         	call	i2_putch
 10812                           
 10813                           ;hmiMain.c: 517: } else {
 10814  000892  D008               	goto	i2l350
 10815  000894                     i2l349:
 10816                           
 10817                           ;hmiMain.c: 518: peso = 0 - peso;
 10818  000894  0100               	movlb	0	; () banked
 10819  000896  6D91               	negf	isr@peso& (0+255),b
 10820  000898  1F92               	comf	(isr@peso+1)& (0+255),f,b
 10821  00089A  B0D8               	btfsc	status,0,c
 10822  00089C  2B92               	incf	(isr@peso+1)& (0+255),f,b
 10823                           
 10824                           ; BSR set to: 0
 10825                           ;hmiMain.c: 519: putch('-');
 10826  00089E  0E2D               	movlw	45
 10827  0008A0  ECAC  F025         	call	i2_putch
 10828  0008A4                     i2l350:
 10829                           
 10830                           ;hmiMain.c: 520: }
 10831                           ;hmiMain.c: 521: printf("%05d\n", peso);
 10832  0008A4  0EC7               	movlw	low STR_17
 10833  0008A6  6E0D               	movwf	i2printf@f,c
 10834  0008A8  0EFF               	movlw	high STR_17
 10835  0008AA  6E0E               	movwf	i2printf@f+1,c
 10836  0008AC  C091  F00F         	movff	isr@peso,?i2_printf+2
 10837  0008B0  C092  F010         	movff	isr@peso+1,?i2_printf+3
 10838  0008B4  ECC5  F011         	call	i2_printf	;wreg free
 10839                           
 10840                           ;hmiMain.c: 522: mux = 1;
 10841  0008B8  0E01               	movlw	1
 10842  0008BA  0100               	movlb	0	; () banked
 10843  0008BC  6FBB               	movwf	_mux& (0+255),b	;volatile
 10844                           
 10845                           ; BSR set to: 0
 10846                           ;hmiMain.c: 526: }
 10847                           
 10848                           ; BSR set to: 0
 10849                           ;hmiMain.c: 523: }
 10850                           ;hmiMain.c: 525: break;
 10851  0008BE  D00D               	goto	i2l302
 10852  0008C0                     i2l300:
 10853                           
 10854                           ; BSR set to: 0
 10855                           
 10856                           ; BSR set to: 0
 10857  0008C0  519A               	movf	_buff2& (0+255),w,b	;volatile
 10858                           
 10859                           ; Switch size 1, requested type "space"
 10860                           ; Number of cases is 4, Range of values is 67 to 80
 10861                           ; switch strategies available:
 10862                           ; Name         Instructions Cycles
 10863                           ; simple_byte           13     7 (average)
 10864                           ;	Chosen strategy is simple_byte
 10865  0008C2  0A43               	xorlw	67	; case 67
 10866  0008C4  B4D8               	btfsc	status,2,c
 10867  0008C6  D009               	goto	i2l302
 10868  0008C8  0A07               	xorlw	7	; case 68
 10869  0008CA  B4D8               	btfsc	status,2,c
 10870  0008CC  D69D               	goto	i2l304
 10871  0008CE  0A0D               	xorlw	13	; case 73
 10872  0008D0  B4D8               	btfsc	status,2,c
 10873  0008D2  D6FC               	goto	i2l309
 10874  0008D4  0A19               	xorlw	25	; case 80
 10875  0008D6  B4D8               	btfsc	status,2,c
 10876  0008D8  D70E               	goto	i2l329
 10877  0008DA                     i2l302:
 10878                           
 10879                           ;hmiMain.c: 527: k2 = 0;
 10880                           
 10881                           ; BSR set to: 0
 10882  0008DA  0E00               	movlw	0
 10883  0008DC  0100               	movlb	0	; () banked
 10884  0008DE  6FB3               	movwf	_k2& (0+255),b	;volatile
 10885  0008E0                     i2l299:
 10886                           
 10887                           ; BSR set to: 0
 10888                           
 10889                           ; BSR set to: 0
 10890  0008E0  C076  F062         	movff	??_isr+22,btemp+3
 10891  0008E4  C075  F061         	movff	??_isr+21,btemp+2
 10892  0008E8  C074  F060         	movff	??_isr+20,btemp+1
 10893  0008EC  C073  F05F         	movff	??_isr+19,btemp
 10894  0008F0  C072  FFF5         	movff	??_isr+18,tablat
 10895  0008F4  C071  FFF8         	movff	??_isr+17,tblptru
 10896  0008F8  C070  FFF7         	movff	??_isr+16,tblptrh
 10897  0008FC  C06F  FFF6         	movff	??_isr+15,tblptrl
 10898  000900  C06E  FFF4         	movff	??_isr+14,prodh
 10899  000904  C06D  FFF3         	movff	??_isr+13,prodl
 10900  000908  C06C  FFDA         	movff	??_isr+12,fsr2h
 10901  00090C  C06B  FFD9         	movff	??_isr+11,fsr2l
 10902  000910  C06A  FFE2         	movff	??_isr+10,fsr1h
 10903  000914  C069  FFE1         	movff	??_isr+9,fsr1l
 10904  000918  C068  FFEA         	movff	??_isr+8,fsr0h
 10905  00091C  C067  FFE9         	movff	??_isr+7,fsr0l
 10906  000920  C066  FFFB         	movff	??_isr+6,pclatu
 10907  000924  C065  FFFA         	movff	??_isr+5,pclath
 10908  000928  925F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 10909  00092A  0011               	retfie		f
 10910  00092C                     __end_of_isr:
 10911                           	opt stack 0
 10912                           pclatu	equ	0xFFB
 10913                           pclath	equ	0xFFA
 10914                           tblptru	equ	0xFF8
 10915                           tblptrh	equ	0xFF7
 10916                           tblptrl	equ	0xFF6
 10917                           tablat	equ	0xFF5
 10918                           prodh	equ	0xFF4
 10919                           prodl	equ	0xFF3
 10920                           intcon	equ	0xFF2
 10921                           postinc0	equ	0xFEE
 10922                           fsr0h	equ	0xFEA
 10923                           fsr0l	equ	0xFE9
 10924                           wreg	equ	0xFE8
 10925                           indf1	equ	0xFE7
 10926                           postdec1	equ	0xFE5
 10927                           fsr1h	equ	0xFE2
 10928                           fsr1l	equ	0xFE1
 10929                           indf2	equ	0xFDF
 10930                           postinc2	equ	0xFDE
 10931                           postdec2	equ	0xFDD
 10932                           fsr2h	equ	0xFDA
 10933                           fsr2l	equ	0xFD9
 10934                           status	equ	0xFD8
 10935                           
 10936 ;; *************** function i2_rw_eeprom *****************
 10937 ;; Defined at:
 10938 ;;		line 64 in file "hmiMain.c"
 10939 ;; Parameters:    Size  Location     Type
 10940 ;;  addr            1    wreg     unsigned char 
 10941 ;;  data            1    0[COMRAM] unsigned char 
 10942 ;;  rw              1    1[COMRAM] unsigned char 
 10943 ;; Auto vars:     Size  Location     Type
 10944 ;;  addr            1    2[COMRAM] unsigned char 
 10945 ;; Return value:  Size  Location     Type
 10946 ;;                  1    wreg      unsigned char 
 10947 ;; Registers used:
 10948 ;;		wreg, status,2
 10949 ;; Tracked objects:
 10950 ;;		On entry : 0/0
 10951 ;;		On exit  : 0/0
 10952 ;;		Unchanged: 0/0
 10953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10954 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10955 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10957 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10958 ;;Total ram usage:        3 bytes
 10959 ;; Hardware stack levels used:    1
 10960 ;; This function calls:
 10961 ;;		Nothing
 10962 ;; This function is called by:
 10963 ;;		_isr
 10964 ;; This function uses a non-reentrant model
 10965 ;;
 10966                           
 10967                           	psect	text30
 10968  004868                     __ptext30:
 10969                           	opt stack 0
 10970  004868                     i2_rw_eeprom:
 10971                           	opt stack 23
 10972                           
 10973                           ;incstack = 0
 10974                           ;i2rw_eeprom@addr stored from wreg
 10975  004868  6E03               	movwf	i2rw_eeprom@addr,c
 10976                           
 10977                           ;hmiMain.c: 66: if (rw) {
 10978  00486A  5002               	movf	i2rw_eeprom@rw,w,c
 10979  00486C  B4D8               	btfsc	status,2,c
 10980  00486E  D014               	goto	i2l194
 10981                           
 10982                           ;hmiMain.c: 67: EEADR = addr;
 10983  004870  C003  FF74         	movff	i2rw_eeprom@addr,3956	;volatile
 10984                           
 10985                           ;hmiMain.c: 68: EEADRH = 0;
 10986  004874  0E00               	movlw	0
 10987  004876  6E75               	movwf	3957,c	;volatile
 10988                           
 10989                           ;hmiMain.c: 69: EEDATA = data;
 10990  004878  C001  FF73         	movff	i2rw_eeprom@data,3955	;volatile
 10991                           
 10992                           ;hmiMain.c: 70: EECON1bits.EEPGD = 0;
 10993  00487C  9E7F               	bcf	3967,7,c	;volsfr
 10994                           
 10995                           ;hmiMain.c: 71: EECON1bits.CFGS = 0;
 10996  00487E  9C7F               	bcf	3967,6,c	;volsfr
 10997                           
 10998                           ;hmiMain.c: 72: EECON1bits.WREN = 1;
 10999  004880  847F               	bsf	3967,2,c	;volsfr
 11000                           
 11001                           ;hmiMain.c: 73: INTCONbits.GIE = 0;
 11002  004882  9EF2               	bcf	intcon,7,c	;volatile
 11003                           
 11004                           ;hmiMain.c: 74: EECON2 = 0x55;
 11005  004884  0E55               	movlw	85
 11006  004886  6E7E               	movwf	3966,c	;volsfr
 11007                           
 11008                           ;hmiMain.c: 75: EECON2 = 0xAA;
 11009  004888  0EAA               	movlw	170
 11010  00488A  6E7E               	movwf	3966,c	;volsfr
 11011                           
 11012                           ;hmiMain.c: 76: EECON1bits.WR = 1;
 11013  00488C  827F               	bsf	3967,1,c	;volsfr
 11014                           
 11015                           ;hmiMain.c: 77: INTCONbits.GIE = 1;
 11016  00488E  8EF2               	bsf	intcon,7,c	;volatile
 11017  004890  ACB7               	btfss	4023,6,c	;volatile
 11018  004892  D7FE               	goto	i2l196
 11019                           
 11020                           ;hmiMain.c: 79: PIR4bits.EEIF = 0;
 11021  004894  9CB7               	bcf	4023,6,c	;volatile
 11022                           
 11023                           ;hmiMain.c: 81: }
 11024                           
 11025                           ;hmiMain.c: 80: return 0;
 11026                           ;	Return value of i2_rw_eeprom is never used
 11027  004896  0012               	return	
 11028  004898                     i2l194:
 11029                           
 11030                           ;hmiMain.c: 82: else {
 11031                           ;hmiMain.c: 83: EEADR = addr;
 11032  004898  C003  FF74         	movff	i2rw_eeprom@addr,3956	;volatile
 11033                           
 11034                           ;hmiMain.c: 84: EEADRH = 0;
 11035  00489C  0E00               	movlw	0
 11036  00489E  6E75               	movwf	3957,c	;volatile
 11037                           
 11038                           ;hmiMain.c: 85: EECON1bits.EEPGD = 0;
 11039  0048A0  9E7F               	bcf	3967,7,c	;volsfr
 11040                           
 11041                           ;hmiMain.c: 86: EECON1bits.CFGS = 0;
 11042  0048A2  9C7F               	bcf	3967,6,c	;volsfr
 11043                           
 11044                           ;hmiMain.c: 87: EECON1bits.RD = 1;
 11045  0048A4  807F               	bsf	3967,0,c	;volsfr
 11046  0048A6  F000               	nop		;# 
 11047                           
 11048                           ;hmiMain.c: 89: return EEDATA;
 11049                           ;	Return value of i2_rw_eeprom is never used
 11050  0048A8  5073               	movf	3955,w,c	;volatile
 11051  0048AA  0012               	return	
 11052  0048AC                     __end_ofi2_rw_eeprom:
 11053                           	opt stack 0
 11054                           pclatu	equ	0xFFB
 11055                           pclath	equ	0xFFA
 11056                           tblptru	equ	0xFF8
 11057                           tblptrh	equ	0xFF7
 11058                           tblptrl	equ	0xFF6
 11059                           tablat	equ	0xFF5
 11060                           prodh	equ	0xFF4
 11061                           prodl	equ	0xFF3
 11062                           intcon	equ	0xFF2
 11063                           postinc0	equ	0xFEE
 11064                           fsr0h	equ	0xFEA
 11065                           fsr0l	equ	0xFE9
 11066                           wreg	equ	0xFE8
 11067                           indf1	equ	0xFE7
 11068                           postdec1	equ	0xFE5
 11069                           fsr1h	equ	0xFE2
 11070                           fsr1l	equ	0xFE1
 11071                           indf2	equ	0xFDF
 11072                           postinc2	equ	0xFDE
 11073                           postdec2	equ	0xFDD
 11074                           fsr2h	equ	0xFDA
 11075                           fsr2l	equ	0xFD9
 11076                           status	equ	0xFD8
 11077                           
 11078 ;; *************** function i2_printf *****************
 11079 ;; Defined at:
 11080 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
 11081 ;; Parameters:    Size  Location     Type
 11082 ;;  f               2   12[COMRAM] PTR const unsigned char 
 11083 ;;		 -> STR_18(3), STR_17(6), STR_16(3), STR_15(3), 
 11084 ;;		 -> STR_14(3), STR_13(3), STR_12(5), STR_11(5), 
 11085 ;;		 -> STR_10(5), STR_9(3), STR_8(3), STR_7(3), 
 11086 ;;		 -> STR_6(6), STR_5(3), STR_4(6), STR_3(4), 
 11087 ;;		 -> STR_2(3), 
 11088 ;; Auto vars:     Size  Location     Type
 11089 ;;  printf          4    0        struct .
 11090 ;;  printf          3    0        PTR const unsigned char 
 11091 ;;  printf          2   26[COMRAM] int 
 11092 ;;  printf          2   23[COMRAM] unsigned int 
 11093 ;;  printf          2   20[COMRAM] PTR void [1]
 11094 ;;		 -> ?i2_printf(2), ?_printf(2), 
 11095 ;;  printf          2    0        unsigned int 
 11096 ;;  printf          1   28[COMRAM] char 
 11097 ;;  printf          1   25[COMRAM] unsigned char 
 11098 ;;  printf          1   22[COMRAM] char 
 11099 ;; Return value:  Size  Location     Type
 11100 ;;                  2   12[COMRAM] int 
 11101 ;; Registers used:
 11102 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11103 ;; Tracked objects:
 11104 ;;		On entry : 0/0
 11105 ;;		On exit  : 0/0
 11106 ;;		Unchanged: 0/0
 11107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11108 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11109 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11110 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11111 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11112 ;;Total ram usage:       17 bytes
 11113 ;; Hardware stack levels used:    1
 11114 ;; Hardware stack levels required when called:    1
 11115 ;; This function calls:
 11116 ;;		i2___lwdiv
 11117 ;;		i2___lwmod
 11118 ;;		i2___wmul
 11119 ;;		i2_isdigit
 11120 ;;		i2_putch
 11121 ;; This function is called by:
 11122 ;;		_isr
 11123 ;; This function uses a non-reentrant model
 11124 ;;
 11125                           
 11126                           	psect	text31
 11127  00238A                     __ptext31:
 11128                           	opt stack 0
 11129  00238A                     i2_printf:
 11130                           	opt stack 22
 11131                           
 11132                           ;doprnt.c: 466: va_list ap;
 11133                           ;doprnt.c: 499: signed char c;
 11134                           ;doprnt.c: 501: int width;
 11135                           ;doprnt.c: 506: signed char prec;
 11136                           ;doprnt.c: 508: unsigned char flag;
 11137                           ;doprnt.c: 523: union {
 11138                           ;doprnt.c: 524: unsigned long vd;
 11139                           ;doprnt.c: 525: double integ;
 11140                           ;doprnt.c: 526: } tmpval;
 11141                           ;doprnt.c: 528: unsigned int val;
 11142                           ;doprnt.c: 529: unsigned len;
 11143                           ;doprnt.c: 530: const char * cp;
 11144                           ;doprnt.c: 533: *ap = __va_start();
 11145                           
 11146                           ;incstack = 0
 11147  00238A  0E0F               	movlw	low (?i2_printf+2)
 11148  00238C  6E15               	movwf	i2printf@ap,c
 11149  00238E  0E00               	movlw	high (?i2_printf+2)
 11150  002390  6E16               	movwf	i2printf@ap+1,c
 11151                           
 11152                           ;doprnt.c: 536: while(c = *f++) {
 11153  002392  D111               	goto	i2u1118_40
 11154  002394                     
 11155                           ;doprnt.c: 538: if(c != '%')
 11156  002394  0E25               	movlw	37
 11157  002396  181D               	xorwf	i2printf@c,w,c
 11158  002398  B4D8               	btfsc	status,2,c
 11159  00239A  D004               	goto	i2l1089
 11160                           
 11161                           ;doprnt.c: 540: {
 11162                           ;doprnt.c: 541: (putch(c) );
 11163  00239C  501D               	movf	i2printf@c,w,c
 11164  00239E  ECAC  F025         	call	i2_putch
 11165                           
 11166                           ;doprnt.c: 542: continue;
 11167  0023A2  D109               	goto	i2u1118_40
 11168  0023A4                     i2l1089:
 11169                           
 11170                           ;doprnt.c: 543: }
 11171                           ;doprnt.c: 546: width = 0;
 11172  0023A4  0E00               	movlw	0
 11173  0023A6  6E1C               	movwf	i2printf@width+1,c
 11174  0023A8  0E00               	movlw	0
 11175  0023AA  6E1B               	movwf	i2printf@width,c
 11176                           
 11177                           ;doprnt.c: 548: flag = 0;
 11178  0023AC  0E00               	movlw	0
 11179  0023AE  6E1A               	movwf	i2printf@flag,c
 11180                           
 11181                           ;doprnt.c: 551: switch(*f) {
 11182                           
 11183                           ;doprnt.c: 550: for(;;) {
 11184  0023B0  D003               	goto	i2l1091
 11185  0023B2                     
 11186                           ;doprnt.c: 580: flag |= 0x04;
 11187  0023B2  841A               	bsf	i2printf@flag,2,c
 11188                           
 11189                           ;doprnt.c: 581: f++;
 11190  0023B4  4A0D               	infsnz	i2printf@f,f,c
 11191  0023B6  2A0E               	incf	i2printf@f+1,f,c
 11192  0023B8                     i2l1091:
 11193  0023B8  C00D  FFF6         	movff	i2printf@f,tblptrl
 11194  0023BC  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11195  0023C0                     	if	0	;tblptru may be non-zero
 11196  0023C0                     	endif
 11197  0023C0                     	if	0	;tblptru may be non-zero
 11198  0023C0                     	endif
 11199  0023C0  0008               	tblrd		*
 11200  0023C2  50F5               	movf	tablat,w,c
 11201                           
 11202                           ; Switch size 1, requested type "space"
 11203                           ; Number of cases is 1, Range of values is 48 to 48
 11204                           ; switch strategies available:
 11205                           ; Name         Instructions Cycles
 11206                           ; simple_byte            4     3 (average)
 11207                           ;	Chosen strategy is simple_byte
 11208  0023C4  0A30               	xorlw	48	; case 48
 11209  0023C6  B4D8               	btfsc	status,2,c
 11210  0023C8  D7F4               	goto	i2l1092
 11211                           
 11212                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 11213                           
 11214                           ;doprnt.c: 586: }
 11215                           
 11216                           ;doprnt.c: 585: break;
 11217  0023CA  C00D  FFF6         	movff	i2printf@f,tblptrl
 11218  0023CE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11219  0023D2                     	if	0	;tblptru may be non-zero
 11220  0023D2                     	endif
 11221  0023D2                     	if	0	;tblptru may be non-zero
 11222  0023D2                     	endif
 11223  0023D2  0008               	tblrd		*
 11224  0023D4  50F5               	movf	tablat,w,c
 11225  0023D6  ECBB  F025         	call	i2_isdigit
 11226  0023DA  A0D8               	btfss	status,0,c
 11227  0023DC  D032               	goto	i2l1099
 11228                           
 11229                           ;doprnt.c: 598: width = 0;
 11230  0023DE  0E00               	movlw	0
 11231  0023E0  6E1C               	movwf	i2printf@width+1,c
 11232  0023E2  0E00               	movlw	0
 11233  0023E4  6E1B               	movwf	i2printf@width,c
 11234  0023E6                     
 11235                           ;doprnt.c: 600: width *= 10;
 11236  0023E6  C01B  F001         	movff	i2printf@width,i2___wmul@multiplier
 11237  0023EA  C01C  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 11238  0023EE  0E00               	movlw	0
 11239  0023F0  6E04               	movwf	i2___wmul@multiplicand+1,c
 11240  0023F2  0E0A               	movlw	10
 11241  0023F4  6E03               	movwf	i2___wmul@multiplicand,c
 11242  0023F6  EC78  F025         	call	i2___wmul	;wreg free
 11243  0023FA  C001  F01B         	movff	?i2___wmul,i2printf@width
 11244  0023FE  C002  F01C         	movff	?i2___wmul+1,i2printf@width+1
 11245                           
 11246                           ;doprnt.c: 601: width += *f++ - '0';
 11247  002402  0ED0               	movlw	208
 11248  002404  6E11               	movwf	??i2_printf& (0+255),c
 11249  002406  0EFF               	movlw	255
 11250  002408  6E12               	movwf	(??i2_printf+1)& (0+255),c
 11251  00240A  C00D  FFF6         	movff	i2printf@f,tblptrl
 11252  00240E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11253  002412                     	if	0	;tblptru may be non-zero
 11254  002412                     	endif
 11255  002412                     	if	0	;tblptru may be non-zero
 11256  002412                     	endif
 11257  002412  0008               	tblrd		*
 11258  002414  50F5               	movf	tablat,w,c
 11259  002416  6E13               	movwf	(??i2_printf+2)& (0+255),c
 11260  002418  6A14               	clrf	(??i2_printf+3)& (0+255),c
 11261  00241A  5011               	movf	??i2_printf,w,c
 11262  00241C  2613               	addwf	??i2_printf+2,f,c
 11263  00241E  5012               	movf	??i2_printf+1,w,c
 11264  002420  2214               	addwfc	??i2_printf+3,f,c
 11265  002422  5013               	movf	??i2_printf+2,w,c
 11266  002424  261B               	addwf	i2printf@width,f,c
 11267  002426  5014               	movf	??i2_printf+3,w,c
 11268  002428  221C               	addwfc	i2printf@width+1,f,c
 11269  00242A  4A0D               	infsnz	i2printf@f,f,c
 11270  00242C  2A0E               	incf	i2printf@f+1,f,c
 11271                           
 11272                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 11273  00242E  C00D  FFF6         	movff	i2printf@f,tblptrl
 11274  002432  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11275  002436                     	if	0	;tblptru may be non-zero
 11276  002436                     	endif
 11277  002436                     	if	0	;tblptru may be non-zero
 11278  002436                     	endif
 11279  002436  0008               	tblrd		*
 11280  002438  50F5               	movf	tablat,w,c
 11281  00243A  ECBB  F025         	call	i2_isdigit
 11282  00243E  B0D8               	btfsc	status,0,c
 11283  002440  D7D2               	goto	i2l1097
 11284  002442                     i2l1099:
 11285  002442  C00D  FFF6         	movff	i2printf@f,tblptrl
 11286  002446  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11287  00244A  4A0D               	infsnz	i2printf@f,f,c
 11288  00244C  2A0E               	incf	i2printf@f+1,f,c
 11289  00244E                     	if	0	;tblptru may be non-zero
 11290  00244E                     	endif
 11291  00244E                     	if	0	;tblptru may be non-zero
 11292  00244E                     	endif
 11293  00244E  0008               	tblrd		*
 11294  002450  CFF5 F01D          	movff	tablat,i2printf@c
 11295  002454  501D               	movf	i2printf@c,w,c
 11296                           
 11297                           ; Switch size 1, requested type "space"
 11298                           ; Number of cases is 3, Range of values is 0 to 105
 11299                           ; switch strategies available:
 11300                           ; Name         Instructions Cycles
 11301                           ; simple_byte           10     6 (average)
 11302                           ;	Chosen strategy is simple_byte
 11303  002456  0A00               	xorlw	0	; case 0
 11304  002458  B4D8               	btfsc	status,2,c
 11305  00245A  0012               	return	
 11306  00245C  0A64               	xorlw	100	; case 100
 11307  00245E  B4D8               	btfsc	status,2,c
 11308  002460  D003               	goto	i2l1104
 11309  002462  0A0D               	xorlw	13	; case 105
 11310  002464  A4D8               	btfss	status,2,c
 11311  002466  D0A7               	goto	i2u1118_40
 11312  002468                     i2l1104:
 11313                           
 11314                           ;doprnt.c: 1253: {
 11315                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 11316  002468  C015  FFD9         	movff	i2printf@ap,fsr2l
 11317  00246C  C016  FFDA         	movff	i2printf@ap+1,fsr2h
 11318  002470  CFDE F018          	movff	postinc2,i2printf@val
 11319  002474  CFDD F019          	movff	postdec2,i2printf@val+1
 11320  002478  0E02               	movlw	2
 11321  00247A  2615               	addwf	i2printf@ap,f,c
 11322  00247C  0E00               	movlw	0
 11323  00247E  2216               	addwfc	i2printf@ap+1,f,c
 11324                           
 11325                           ;doprnt.c: 1261: if((int)val < 0) {
 11326  002480  AE19               	btfss	i2printf@val+1,7,c
 11327  002482  D006               	goto	i2l1106
 11328                           
 11329                           ;doprnt.c: 1262: flag |= 0x03;
 11330  002484  0E03               	movlw	3
 11331  002486  121A               	iorwf	i2printf@flag,f,c
 11332                           
 11333                           ;doprnt.c: 1263: val = -val;
 11334  002488  6C18               	negf	i2printf@val,c
 11335  00248A  1E19               	comf	i2printf@val+1,f,c
 11336  00248C  B0D8               	btfsc	status,0,c
 11337  00248E  2A19               	incf	i2printf@val+1,f,c
 11338  002490                     i2l1106:
 11339                           
 11340                           ;doprnt.c: 1264: }
 11341                           ;doprnt.c: 1266: }
 11342                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 11343  002490  0E01               	movlw	1
 11344  002492  6E1D               	movwf	i2printf@c,c
 11345  002494                     i2l9868:
 11346  002494  0E05               	movlw	5
 11347  002496  181D               	xorwf	i2printf@c,w,c
 11348  002498  B4D8               	btfsc	status,2,c
 11349  00249A  D012               	goto	i2u1107_40
 11350                           
 11351                           ;doprnt.c: 1306: if(val < dpowers[c])
 11352  00249C  501D               	movf	i2printf@c,w,c
 11353  00249E  0D02               	mullw	2
 11354  0024A0  0E9F               	movlw	low _dpowers
 11355  0024A2  24F3               	addwf	prodl,w,c
 11356  0024A4  6EF6               	movwf	tblptrl,c
 11357  0024A6  0EFF               	movlw	high _dpowers
 11358  0024A8  20F4               	addwfc	prodh,w,c
 11359  0024AA  6EF7               	movwf	tblptrh,c
 11360  0024AC                     	if	0	;There are less than 3 active tblptr bytes
 11361  0024AC                     	endif
 11362  0024AC  0009               	tblrd		*+
 11363  0024AE  50F5               	movf	tablat,w,c
 11364  0024B0  5C18               	subwf	i2printf@val,w,c
 11365  0024B2  0009               	tblrd		*+
 11366  0024B4  50F5               	movf	tablat,w,c
 11367  0024B6  5819               	subwfb	i2printf@val+1,w,c
 11368  0024B8  A0D8               	btfss	status,0,c
 11369  0024BA  D002               	goto	i2u1107_40
 11370                           
 11371                           ;doprnt.c: 1307: break;
 11372  0024BC  2A1D               	incf	i2printf@c,f,c
 11373  0024BE  D7EA               	goto	i2l9868
 11374  0024C0                     i2u1107_40:
 11375                           
 11376                           ;doprnt.c: 1345: if(width && flag & 0x03)
 11377  0024C0  501B               	movf	i2printf@width,w,c
 11378  0024C2  101C               	iorwf	i2printf@width+1,w,c
 11379  0024C4  B4D8               	btfsc	status,2,c
 11380  0024C6  D009               	goto	i2l1110
 11381  0024C8  C01A  F011         	movff	i2printf@flag,??i2_printf
 11382  0024CC  0E03               	movlw	3
 11383  0024CE  1611               	andwf	??i2_printf,f,c
 11384  0024D0  B4D8               	btfsc	status,2,c
 11385  0024D2  D003               	goto	i2l1110
 11386                           
 11387                           ;doprnt.c: 1346: width--;
 11388  0024D4  061B               	decf	i2printf@width,f,c
 11389  0024D6  A0D8               	btfss	status,0,c
 11390  0024D8  061C               	decf	i2printf@width+1,f,c
 11391  0024DA                     i2l1110:
 11392                           
 11393                           ;doprnt.c: 1381: if(width > c)
 11394  0024DA  0E80               	movlw	128
 11395  0024DC  BE1D               	btfsc	i2printf@c,7,c
 11396  0024DE  0E7F               	movlw	127
 11397  0024E0  6E11               	movwf	??i2_printf& (0+255),c
 11398  0024E2  501B               	movf	i2printf@width,w,c
 11399  0024E4  5C1D               	subwf	i2printf@c,w,c
 11400  0024E6  501C               	movf	i2printf@width+1,w,c
 11401  0024E8  0A80               	xorlw	128
 11402  0024EA  5811               	subwfb	??i2_printf& (0+255),w,c
 11403  0024EC  B0D8               	btfsc	status,0,c
 11404  0024EE  D007               	goto	i2l1111
 11405                           
 11406                           ;doprnt.c: 1382: width -= c;
 11407  0024F0  501D               	movf	i2printf@c,w,c
 11408  0024F2  5E1B               	subwf	i2printf@width,f,c
 11409  0024F4  0E00               	movlw	0
 11410  0024F6  BE1D               	btfsc	i2printf@c,7,c
 11411  0024F8  0EFF               	movlw	255
 11412  0024FA  5A1C               	subwfb	i2printf@width+1,f,c
 11413  0024FC  D004               	goto	i2l1112
 11414  0024FE                     i2l1111:
 11415                           
 11416                           ;doprnt.c: 1383: else
 11417                           ;doprnt.c: 1384: width = 0;
 11418  0024FE  0E00               	movlw	0
 11419  002500  6E1C               	movwf	i2printf@width+1,c
 11420  002502  0E00               	movlw	0
 11421  002504  6E1B               	movwf	i2printf@width,c
 11422  002506                     i2l1112:
 11423                           
 11424                           ;doprnt.c: 1387: if(flag & 0x04) {
 11425  002506  A41A               	btfss	i2printf@flag,2,c
 11426  002508  D014               	goto	i2l1113
 11427                           
 11428                           ;doprnt.c: 1392: if(flag & 0x03)
 11429  00250A  C01A  F011         	movff	i2printf@flag,??i2_printf
 11430  00250E  0E03               	movlw	3
 11431  002510  1611               	andwf	??i2_printf,f,c
 11432  002512  B4D8               	btfsc	status,2,c
 11433  002514  D003               	goto	i2l1114
 11434                           
 11435                           ;doprnt.c: 1393: (putch('-') );
 11436  002516  0E2D               	movlw	45
 11437  002518  ECAC  F025         	call	i2_putch
 11438  00251C                     i2l1114:
 11439                           
 11440                           ;doprnt.c: 1415: if(width)
 11441  00251C  501B               	movf	i2printf@width,w,c
 11442  00251E  101C               	iorwf	i2printf@width+1,w,c
 11443  002520  B4D8               	btfsc	status,2,c
 11444  002522  D01E               	goto	i2l1122
 11445                           
 11446                           ;doprnt.c: 1417: (putch('0') );
 11447                           
 11448                           ;doprnt.c: 1416: do
 11449  002524  0E30               	movlw	48
 11450  002526  ECAC  F025         	call	i2_putch
 11451                           
 11452                           ;doprnt.c: 1418: while(--width);
 11453  00252A  061B               	decf	i2printf@width,f,c
 11454  00252C  A0D8               	btfss	status,0,c
 11455  00252E  061C               	decf	i2printf@width+1,f,c
 11456  002530  D7F5               	goto	i2l1114
 11457  002532                     i2l1113:
 11458                           
 11459                           ;doprnt.c: 1422: {
 11460                           ;doprnt.c: 1424: if(width
 11461                           ;doprnt.c: 1428: )
 11462  002532  501B               	movf	i2printf@width,w,c
 11463  002534  101C               	iorwf	i2printf@width+1,w,c
 11464  002536  B4D8               	btfsc	status,2,c
 11465  002538  D00A               	goto	i2u1116_40
 11466  00253A                     i2u1115_40:
 11467                           
 11468                           ;doprnt.c: 1430: (putch(' ') );
 11469                           
 11470                           ;doprnt.c: 1429: do
 11471  00253A  0E20               	movlw	32
 11472  00253C  ECAC  F025         	call	i2_putch
 11473                           
 11474                           ;doprnt.c: 1431: while(--width);
 11475  002540  061B               	decf	i2printf@width,f,c
 11476  002542  A0D8               	btfss	status,0,c
 11477  002544  061C               	decf	i2printf@width+1,f,c
 11478  002546  501B               	movf	i2printf@width,w,c
 11479  002548  101C               	iorwf	i2printf@width+1,w,c
 11480  00254A  A4D8               	btfss	status,2,c
 11481  00254C  D7F6               	goto	i2u1115_40
 11482  00254E                     i2u1116_40:
 11483                           
 11484                           ;doprnt.c: 1438: if(flag & 0x03)
 11485  00254E  C01A  F011         	movff	i2printf@flag,??i2_printf
 11486  002552  0E03               	movlw	3
 11487  002554  1611               	andwf	??i2_printf,f,c
 11488  002556  B4D8               	btfsc	status,2,c
 11489  002558  D003               	goto	i2l1122
 11490                           
 11491                           ;doprnt.c: 1439: (putch('-') );
 11492  00255A  0E2D               	movlw	45
 11493  00255C  ECAC  F025         	call	i2_putch
 11494  002560                     i2l1122:
 11495                           
 11496                           ;doprnt.c: 1469: }
 11497                           ;doprnt.c: 1472: prec = c;
 11498  002560  C01D  F017         	movff	i2printf@c,i2printf@prec
 11499                           
 11500                           ;doprnt.c: 1474: while(prec--) {
 11501  002564  D024               	goto	i2l1123
 11502  002566                     
 11503                           ;doprnt.c: 1478: {
 11504                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 11505  002566  5017               	movf	i2printf@prec,w,c
 11506  002568  0D02               	mullw	2
 11507  00256A  0E9F               	movlw	low _dpowers
 11508  00256C  24F3               	addwf	prodl,w,c
 11509  00256E  6EF6               	movwf	tblptrl,c
 11510  002570  0EFF               	movlw	high _dpowers
 11511  002572  20F4               	addwfc	prodh,w,c
 11512  002574  6EF7               	movwf	tblptrh,c
 11513  002576                     	if	0	;There are less than 3 active tblptr bytes
 11514  002576                     	endif
 11515  002576  0009               	tblrd		*+
 11516  002578  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 11517  00257C  000A               	tblrd		*-
 11518  00257E  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 11519  002582  C018  F001         	movff	i2printf@val,i2___lwdiv@dividend
 11520  002586  C019  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 11521  00258A  EC54  F022         	call	i2___lwdiv	;wreg free
 11522  00258E  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
 11523  002592  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 11524  002596  0E00               	movlw	0
 11525  002598  6E0B               	movwf	i2___lwmod@divisor+1,c
 11526  00259A  0E0A               	movlw	10
 11527  00259C  6E0A               	movwf	i2___lwmod@divisor,c
 11528  00259E  EC77  F024         	call	i2___lwmod	;wreg free
 11529  0025A2  5008               	movf	?i2___lwmod,w,c
 11530  0025A4  0F30               	addlw	48
 11531  0025A6  6E1D               	movwf	i2printf@c,c
 11532                           
 11533                           ;doprnt.c: 1523: }
 11534                           ;doprnt.c: 1524: (putch(c) );
 11535  0025A8  501D               	movf	i2printf@c,w,c
 11536  0025AA  ECAC  F025         	call	i2_putch
 11537  0025AE                     i2l1123:
 11538  0025AE  0617               	decf	i2printf@prec,f,c
 11539  0025B0  2817               	incf	i2printf@prec,w,c
 11540  0025B2  A4D8               	btfss	status,2,c
 11541  0025B4  D7D8               	goto	i2l1124
 11542  0025B6                     i2u1118_40:
 11543  0025B6  C00D  FFF6         	movff	i2printf@f,tblptrl
 11544  0025BA  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11545  0025BE  4A0D               	infsnz	i2printf@f,f,c
 11546  0025C0  2A0E               	incf	i2printf@f+1,f,c
 11547  0025C2                     	if	0	;tblptru may be non-zero
 11548  0025C2                     	endif
 11549  0025C2                     	if	0	;tblptru may be non-zero
 11550  0025C2                     	endif
 11551  0025C2  0008               	tblrd		*
 11552  0025C4  CFF5 F01D          	movff	tablat,i2printf@c
 11553  0025C8  501D               	movf	i2printf@c,w,c
 11554  0025CA  B4D8               	btfsc	status,2,c
 11555  0025CC  0012               	return	
 11556  0025CE  D6E2               	goto	i2l1088
 11557  0025D0                     __end_ofi2_printf:
 11558                           	opt stack 0
 11559                           pclatu	equ	0xFFB
 11560                           pclath	equ	0xFFA
 11561                           tblptru	equ	0xFF8
 11562                           tblptrh	equ	0xFF7
 11563                           tblptrl	equ	0xFF6
 11564                           tablat	equ	0xFF5
 11565                           prodh	equ	0xFF4
 11566                           prodl	equ	0xFF3
 11567                           intcon	equ	0xFF2
 11568                           postinc0	equ	0xFEE
 11569                           fsr0h	equ	0xFEA
 11570                           fsr0l	equ	0xFE9
 11571                           wreg	equ	0xFE8
 11572                           indf1	equ	0xFE7
 11573                           postdec1	equ	0xFE5
 11574                           fsr1h	equ	0xFE2
 11575                           fsr1l	equ	0xFE1
 11576                           indf2	equ	0xFDF
 11577                           postinc2	equ	0xFDE
 11578                           postdec2	equ	0xFDD
 11579                           fsr2h	equ	0xFDA
 11580                           fsr2l	equ	0xFD9
 11581                           status	equ	0xFD8
 11582                           
 11583 ;; *************** function i2_putch *****************
 11584 ;; Defined at:
 11585 ;;		line 52 in file "hmiMain.c"
 11586 ;; Parameters:    Size  Location     Type
 11587 ;;  data            1    wreg     unsigned char 
 11588 ;; Auto vars:     Size  Location     Type
 11589 ;;  data            1    0[COMRAM] unsigned char 
 11590 ;; Return value:  Size  Location     Type
 11591 ;;                  1    wreg      void 
 11592 ;; Registers used:
 11593 ;;		wreg, status,2
 11594 ;; Tracked objects:
 11595 ;;		On entry : 0/0
 11596 ;;		On exit  : 0/0
 11597 ;;		Unchanged: 0/0
 11598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11600 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11601 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11602 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11603 ;;Total ram usage:        1 bytes
 11604 ;; Hardware stack levels used:    1
 11605 ;; This function calls:
 11606 ;;		Nothing
 11607 ;; This function is called by:
 11608 ;;		_isr
 11609 ;;		i2_printf
 11610 ;; This function uses a non-reentrant model
 11611 ;;
 11612                           
 11613                           	psect	text32
 11614  004B58                     __ptext32:
 11615                           	opt stack 0
 11616  004B58                     i2_putch:
 11617                           	opt stack 23
 11618                           
 11619                           ;incstack = 0
 11620                           ;i2putch@data stored from wreg
 11621  004B58  6E01               	movwf	i2putch@data,c
 11622                           
 11623                           ;hmiMain.c: 53: if (mux) {
 11624  004B5A  0100               	movlb	0	; () banked
 11625  004B5C  51BB               	movf	_mux& (0+255),w,b	;volatile
 11626  004B5E  B4D8               	btfsc	status,2,c
 11627  004B60  D005               	goto	i2l183
 11628  004B62                     i2u593_40:
 11629                           
 11630                           ; BSR set to: 0
 11631                           ;hmiMain.c: 55: continue;
 11632                           
 11633                           ; BSR set to: 0
 11634                           ;hmiMain.c: 54: while(!PIR3bits.TX2IF)
 11635  004B62  A8A4               	btfss	4004,4,c	;volatile
 11636  004B64  D7FE               	goto	i2u593_40
 11637                           
 11638                           ;hmiMain.c: 56: TXREG2 = data;
 11639  004B66  C001  FF79         	movff	i2putch@data,3961	;volatile
 11640                           
 11641                           ;hmiMain.c: 57: } else {
 11642  004B6A  0012               	return	
 11643  004B6C                     i2l183:
 11644                           
 11645                           ;hmiMain.c: 59: continue;
 11646                           
 11647                           ;hmiMain.c: 58: while(!PIR1bits.TX1IF)
 11648  004B6C  A89E               	btfss	3998,4,c	;volatile
 11649  004B6E  D7FE               	goto	i2l183
 11650                           
 11651                           ;hmiMain.c: 60: TXREG1 = data;
 11652  004B70  C001  FFAD         	movff	i2putch@data,4013	;volatile
 11653  004B74  0012               	return	
 11654  004B76                     __end_ofi2_putch:
 11655                           	opt stack 0
 11656                           pclatu	equ	0xFFB
 11657                           pclath	equ	0xFFA
 11658                           tblptru	equ	0xFF8
 11659                           tblptrh	equ	0xFF7
 11660                           tblptrl	equ	0xFF6
 11661                           tablat	equ	0xFF5
 11662                           prodh	equ	0xFF4
 11663                           prodl	equ	0xFF3
 11664                           intcon	equ	0xFF2
 11665                           postinc0	equ	0xFEE
 11666                           fsr0h	equ	0xFEA
 11667                           fsr0l	equ	0xFE9
 11668                           wreg	equ	0xFE8
 11669                           indf1	equ	0xFE7
 11670                           postdec1	equ	0xFE5
 11671                           fsr1h	equ	0xFE2
 11672                           fsr1l	equ	0xFE1
 11673                           indf2	equ	0xFDF
 11674                           postinc2	equ	0xFDE
 11675                           postdec2	equ	0xFDD
 11676                           fsr2h	equ	0xFDA
 11677                           fsr2l	equ	0xFD9
 11678                           status	equ	0xFD8
 11679                           
 11680 ;; *************** function i2_isdigit *****************
 11681 ;; Defined at:
 11682 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
 11683 ;; Parameters:    Size  Location     Type
 11684 ;;  c               1    wreg     unsigned char 
 11685 ;; Auto vars:     Size  Location     Type
 11686 ;;  c               1    2[COMRAM] unsigned char 
 11687 ;; Return value:  Size  Location     Type
 11688 ;;		None               void
 11689 ;; Registers used:
 11690 ;;		wreg, status,2, status,0
 11691 ;; Tracked objects:
 11692 ;;		On entry : 0/0
 11693 ;;		On exit  : 0/0
 11694 ;;		Unchanged: 0/0
 11695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11697 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11698 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11699 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11700 ;;Total ram usage:        3 bytes
 11701 ;; Hardware stack levels used:    1
 11702 ;; This function calls:
 11703 ;;		Nothing
 11704 ;; This function is called by:
 11705 ;;		i2_printf
 11706 ;; This function uses a non-reentrant model
 11707 ;;
 11708                           
 11709                           	psect	text33
 11710  004B76                     __ptext33:
 11711                           	opt stack 0
 11712  004B76                     i2_isdigit:
 11713                           	opt stack 22
 11714                           
 11715                           ;incstack = 0
 11716                           ;i2isdigit@c stored from wreg
 11717  004B76  6E03               	movwf	i2isdigit@c,c
 11718  004B78  0E00               	movlw	0
 11719  004B7A  6E02               	movwf	i2_isdigit$1963,c
 11720  004B7C  0E3A               	movlw	58
 11721  004B7E  6003               	cpfslt	i2isdigit@c,c
 11722  004B80  D005               	goto	i2l1457
 11723  004B82  0E2F               	movlw	47
 11724  004B84  6403               	cpfsgt	i2isdigit@c,c
 11725  004B86  D002               	goto	i2l1457
 11726  004B88  0E01               	movlw	1
 11727  004B8A  6E02               	movwf	i2_isdigit$1963,c
 11728  004B8C                     i2l1457:
 11729  004B8C  C002  F001         	movff	i2_isdigit$1963,??i2_isdigit
 11730  004B90  3001               	rrcf	??i2_isdigit,w,c
 11731  004B92  0012               	return	
 11732  004B94                     __end_ofi2_isdigit:
 11733                           	opt stack 0
 11734                           pclatu	equ	0xFFB
 11735                           pclath	equ	0xFFA
 11736                           tblptru	equ	0xFF8
 11737                           tblptrh	equ	0xFF7
 11738                           tblptrl	equ	0xFF6
 11739                           tablat	equ	0xFF5
 11740                           prodh	equ	0xFF4
 11741                           prodl	equ	0xFF3
 11742                           intcon	equ	0xFF2
 11743                           postinc0	equ	0xFEE
 11744                           fsr0h	equ	0xFEA
 11745                           fsr0l	equ	0xFE9
 11746                           wreg	equ	0xFE8
 11747                           indf1	equ	0xFE7
 11748                           postdec1	equ	0xFE5
 11749                           fsr1h	equ	0xFE2
 11750                           fsr1l	equ	0xFE1
 11751                           indf2	equ	0xFDF
 11752                           postinc2	equ	0xFDE
 11753                           postdec2	equ	0xFDD
 11754                           fsr2h	equ	0xFDA
 11755                           fsr2l	equ	0xFD9
 11756                           status	equ	0xFD8
 11757                           
 11758 ;; *************** function i2___lwmod *****************
 11759 ;; Defined at:
 11760 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 11761 ;; Parameters:    Size  Location     Type
 11762 ;;  dividend        2    7[COMRAM] unsigned int 
 11763 ;;  divisor         2    9[COMRAM] unsigned int 
 11764 ;; Auto vars:     Size  Location     Type
 11765 ;;  __lwmod         1   11[COMRAM] unsigned char 
 11766 ;; Return value:  Size  Location     Type
 11767 ;;                  2    7[COMRAM] unsigned int 
 11768 ;; Registers used:
 11769 ;;		wreg, status,2, status,0
 11770 ;; Tracked objects:
 11771 ;;		On entry : 0/0
 11772 ;;		On exit  : 0/0
 11773 ;;		Unchanged: 0/0
 11774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11775 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11776 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11777 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11778 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11779 ;;Total ram usage:        5 bytes
 11780 ;; Hardware stack levels used:    1
 11781 ;; This function calls:
 11782 ;;		Nothing
 11783 ;; This function is called by:
 11784 ;;		i2_printf
 11785 ;; This function uses a non-reentrant model
 11786 ;;
 11787                           
 11788                           	psect	text34
 11789  0048EE                     __ptext34:
 11790                           	opt stack 0
 11791  0048EE                     i2___lwmod:
 11792                           	opt stack 22
 11793                           
 11794                           ;incstack = 0
 11795  0048EE  500A               	movf	i2___lwmod@divisor,w,c
 11796  0048F0  100B               	iorwf	i2___lwmod@divisor+1,w,c
 11797  0048F2  B4D8               	btfsc	status,2,c
 11798  0048F4  D018               	goto	i2l1551
 11799  0048F6  0E01               	movlw	1
 11800  0048F8  6E0C               	movwf	i2___lwmod@counter,c
 11801  0048FA  D004               	goto	i2l1546
 11802  0048FC  90D8               	bcf	status,0,c
 11803  0048FE  360A               	rlcf	i2___lwmod@divisor,f,c
 11804  004900  360B               	rlcf	i2___lwmod@divisor+1,f,c
 11805  004902  2A0C               	incf	i2___lwmod@counter,f,c
 11806  004904                     i2l1546:
 11807  004904  AE0B               	btfss	i2___lwmod@divisor+1,7,c
 11808  004906  D7FA               	goto	i2l1547
 11809  004908                     i2u607_40:
 11810  004908  500A               	movf	i2___lwmod@divisor,w,c
 11811  00490A  5C08               	subwf	i2___lwmod@dividend,w,c
 11812  00490C  500B               	movf	i2___lwmod@divisor+1,w,c
 11813  00490E  5809               	subwfb	i2___lwmod@dividend+1,w,c
 11814  004910  A0D8               	btfss	status,0,c
 11815  004912  D004               	goto	i2l1550
 11816  004914  500A               	movf	i2___lwmod@divisor,w,c
 11817  004916  5E08               	subwf	i2___lwmod@dividend,f,c
 11818  004918  500B               	movf	i2___lwmod@divisor+1,w,c
 11819  00491A  5A09               	subwfb	i2___lwmod@dividend+1,f,c
 11820  00491C                     i2l1550:
 11821  00491C  90D8               	bcf	status,0,c
 11822  00491E  320B               	rrcf	i2___lwmod@divisor+1,f,c
 11823  004920  320A               	rrcf	i2___lwmod@divisor,f,c
 11824  004922  2E0C               	decfsz	i2___lwmod@counter,f,c
 11825  004924  D7F1               	goto	i2u607_40
 11826  004926                     i2l1551:
 11827  004926  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
 11828  00492A  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 11829  00492E  0012               	return		;funcret
 11830  004930                     __end_ofi2___lwmod:
 11831                           	opt stack 0
 11832                           pclatu	equ	0xFFB
 11833                           pclath	equ	0xFFA
 11834                           tblptru	equ	0xFF8
 11835                           tblptrh	equ	0xFF7
 11836                           tblptrl	equ	0xFF6
 11837                           tablat	equ	0xFF5
 11838                           prodh	equ	0xFF4
 11839                           prodl	equ	0xFF3
 11840                           intcon	equ	0xFF2
 11841                           postinc0	equ	0xFEE
 11842                           fsr0h	equ	0xFEA
 11843                           fsr0l	equ	0xFE9
 11844                           wreg	equ	0xFE8
 11845                           indf1	equ	0xFE7
 11846                           postdec1	equ	0xFE5
 11847                           fsr1h	equ	0xFE2
 11848                           fsr1l	equ	0xFE1
 11849                           indf2	equ	0xFDF
 11850                           postinc2	equ	0xFDE
 11851                           postdec2	equ	0xFDD
 11852                           fsr2h	equ	0xFDA
 11853                           fsr2l	equ	0xFD9
 11854                           status	equ	0xFD8
 11855                           
 11856 ;; *************** function i2___lwdiv *****************
 11857 ;; Defined at:
 11858 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 11859 ;; Parameters:    Size  Location     Type
 11860 ;;  dividend        2    0[COMRAM] unsigned int 
 11861 ;;  divisor         2    2[COMRAM] unsigned int 
 11862 ;; Auto vars:     Size  Location     Type
 11863 ;;  __lwdiv         2    4[COMRAM] unsigned int 
 11864 ;;  __lwdiv         1    6[COMRAM] unsigned char 
 11865 ;; Return value:  Size  Location     Type
 11866 ;;                  2    0[COMRAM] unsigned int 
 11867 ;; Registers used:
 11868 ;;		wreg, status,2, status,0
 11869 ;; Tracked objects:
 11870 ;;		On entry : 0/0
 11871 ;;		On exit  : 0/0
 11872 ;;		Unchanged: 0/0
 11873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11874 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11875 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11876 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11877 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11878 ;;Total ram usage:        7 bytes
 11879 ;; Hardware stack levels used:    1
 11880 ;; This function calls:
 11881 ;;		Nothing
 11882 ;; This function is called by:
 11883 ;;		_isr
 11884 ;;		i2_printf
 11885 ;; This function uses a non-reentrant model
 11886 ;;
 11887                           
 11888                           	psect	text35
 11889  0044A8                     __ptext35:
 11890                           	opt stack 0
 11891  0044A8                     i2___lwdiv:
 11892                           	opt stack 22
 11893                           
 11894                           ;incstack = 0
 11895  0044A8  0E00               	movlw	0
 11896  0044AA  6E06               	movwf	i2___lwdiv@quotient+1,c
 11897  0044AC  0E00               	movlw	0
 11898  0044AE  6E05               	movwf	i2___lwdiv@quotient,c
 11899  0044B0  5003               	movf	i2___lwdiv@divisor,w,c
 11900  0044B2  1004               	iorwf	i2___lwdiv@divisor+1,w,c
 11901  0044B4  B4D8               	btfsc	status,2,c
 11902  0044B6  D01C               	goto	i2l1541
 11903  0044B8  0E01               	movlw	1
 11904  0044BA  6E07               	movwf	i2___lwdiv@counter,c
 11905  0044BC  D004               	goto	i2l1536
 11906  0044BE  90D8               	bcf	status,0,c
 11907  0044C0  3603               	rlcf	i2___lwdiv@divisor,f,c
 11908  0044C2  3604               	rlcf	i2___lwdiv@divisor+1,f,c
 11909  0044C4  2A07               	incf	i2___lwdiv@counter,f,c
 11910  0044C6                     i2l1536:
 11911  0044C6  AE04               	btfss	i2___lwdiv@divisor+1,7,c
 11912  0044C8  D7FA               	goto	i2l1537
 11913  0044CA                     i2u604_40:
 11914  0044CA  90D8               	bcf	status,0,c
 11915  0044CC  3605               	rlcf	i2___lwdiv@quotient,f,c
 11916  0044CE  3606               	rlcf	i2___lwdiv@quotient+1,f,c
 11917  0044D0  5003               	movf	i2___lwdiv@divisor,w,c
 11918  0044D2  5C01               	subwf	i2___lwdiv@dividend,w,c
 11919  0044D4  5004               	movf	i2___lwdiv@divisor+1,w,c
 11920  0044D6  5802               	subwfb	i2___lwdiv@dividend+1,w,c
 11921  0044D8  A0D8               	btfss	status,0,c
 11922  0044DA  D005               	goto	i2l1540
 11923  0044DC  5003               	movf	i2___lwdiv@divisor,w,c
 11924  0044DE  5E01               	subwf	i2___lwdiv@dividend,f,c
 11925  0044E0  5004               	movf	i2___lwdiv@divisor+1,w,c
 11926  0044E2  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
 11927  0044E4  8005               	bsf	i2___lwdiv@quotient,0,c
 11928  0044E6                     i2l1540:
 11929  0044E6  90D8               	bcf	status,0,c
 11930  0044E8  3204               	rrcf	i2___lwdiv@divisor+1,f,c
 11931  0044EA  3203               	rrcf	i2___lwdiv@divisor,f,c
 11932  0044EC  2E07               	decfsz	i2___lwdiv@counter,f,c
 11933  0044EE  D7ED               	goto	i2u604_40
 11934  0044F0                     i2l1541:
 11935  0044F0  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
 11936  0044F4  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 11937  0044F8  0012               	return		;funcret
 11938  0044FA                     __end_ofi2___lwdiv:
 11939                           	opt stack 0
 11940                           pclatu	equ	0xFFB
 11941                           pclath	equ	0xFFA
 11942                           tblptru	equ	0xFF8
 11943                           tblptrh	equ	0xFF7
 11944                           tblptrl	equ	0xFF6
 11945                           tablat	equ	0xFF5
 11946                           prodh	equ	0xFF4
 11947                           prodl	equ	0xFF3
 11948                           intcon	equ	0xFF2
 11949                           postinc0	equ	0xFEE
 11950                           fsr0h	equ	0xFEA
 11951                           fsr0l	equ	0xFE9
 11952                           wreg	equ	0xFE8
 11953                           indf1	equ	0xFE7
 11954                           postdec1	equ	0xFE5
 11955                           fsr1h	equ	0xFE2
 11956                           fsr1l	equ	0xFE1
 11957                           indf2	equ	0xFDF
 11958                           postinc2	equ	0xFDE
 11959                           postdec2	equ	0xFDD
 11960                           fsr2h	equ	0xFDA
 11961                           fsr2l	equ	0xFD9
 11962                           status	equ	0xFD8
 11963                           
 11964 ;; *************** function i2_lcd_legend *****************
 11965 ;; Defined at:
 11966 ;;		line 159 in file "hmiMain.c"
 11967 ;; Parameters:    Size  Location     Type
 11968 ;;  opt             1    wreg     unsigned char 
 11969 ;; Auto vars:     Size  Location     Type
 11970 ;;  opt             1   57[COMRAM] unsigned char 
 11971 ;;  lcd_legend      2   58[COMRAM] unsigned int 
 11972 ;; Return value:  Size  Location     Type
 11973 ;;                  1    wreg      void 
 11974 ;; Registers used:
 11975 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11976 ;; Tracked objects:
 11977 ;;		On entry : 0/0
 11978 ;;		On exit  : 0/0
 11979 ;;		Unchanged: 0/0
 11980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11981 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11982 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11984 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11985 ;;Total ram usage:        3 bytes
 11986 ;; Hardware stack levels used:    1
 11987 ;; Hardware stack levels required when called:    5
 11988 ;; This function calls:
 11989 ;;		i2_lcd_text
 11990 ;;		i2_strcpy
 11991 ;; This function is called by:
 11992 ;;		_isr
 11993 ;; This function uses a non-reentrant model
 11994 ;;
 11995                           
 11996                           	psect	text36
 11997  003B1C                     __ptext36:
 11998                           	opt stack 0
 11999  003B1C                     i2_lcd_legend:
 12000                           	opt stack 18
 12001                           
 12002                           ;incstack = 0
 12003                           ;i2lcd_legend@opt stored from wreg
 12004  003B1C  6E3A               	movwf	i2lcd_legend@opt,c
 12005                           
 12006                           ;hmiMain.c: 160: uint16_t aux = 0;
 12007  003B1E  0E00               	movlw	0
 12008  003B20  6E3C               	movwf	i2lcd_legend@aux+1,c
 12009  003B22  0E00               	movlw	0
 12010  003B24  6E3B               	movwf	i2lcd_legend@aux,c
 12011                           
 12012                           ;hmiMain.c: 162: switch (opt) {
 12013  003B26  D05D               	goto	i2l211
 12014  003B28                     
 12015                           ;hmiMain.c: 164: strcpy(lcdText, "TARE:           ");
 12016  003B28  0EDE               	movlw	low _lcdText
 12017  003B2A  6E01               	movwf	i2strcpy@to,c
 12018  003B2C  0E01               	movlw	high _lcdText
 12019  003B2E  6E02               	movwf	i2strcpy@to+1,c
 12020  003B30  0EAA               	movlw	low STR_1
 12021  003B32  6E03               	movwf	i2strcpy@from,c
 12022  003B34  0EFF               	movlw	high STR_1
 12023  003B36  6E04               	movwf	i2strcpy@from+1,c
 12024  003B38  EC0C  F025         	call	i2_strcpy	;wreg free
 12025                           
 12026                           ;hmiMain.c: 165: aux = tara;
 12027  003B3C  C1DC  F03B         	movff	_tara,i2lcd_legend@aux
 12028  003B40  C1DD  F03C         	movff	_tara+1,i2lcd_legend@aux+1
 12029                           
 12030                           ;hmiMain.c: 166: if (aux >= 10000) {
 12031  003B44  0E10               	movlw	16
 12032  003B46  5C3B               	subwf	i2lcd_legend@aux,w,c
 12033  003B48  0E27               	movlw	39
 12034  003B4A  583C               	subwfb	i2lcd_legend@aux+1,w,c
 12035  003B4C  A0D8               	btfss	status,0,c
 12036  003B4E  D00F               	goto	i2u1097_40
 12037                           
 12038                           ;hmiMain.c: 167: lcdText[6] = 48;
 12039  003B50  0E30               	movlw	48
 12040  003B52  0101               	movlb	1	; () banked
 12041  003B54  6FE4               	movwf	(_lcdText+6)& (0+255),b
 12042                           
 12043                           ;hmiMain.c: 168: while (aux > 10000) {
 12044  003B56  D005               	goto	i2l214
 12045  003B58                     
 12046                           ; BSR set to: 1
 12047                           ;hmiMain.c: 169: lcdText[6]++;
 12048                           
 12049                           ; BSR set to: 1
 12050  003B58  2BE4               	incf	(_lcdText+6)& (0+255),f,b
 12051                           
 12052                           ; BSR set to: 1
 12053                           ;hmiMain.c: 170: aux -= 10000;
 12054  003B5A  0E10               	movlw	16
 12055  003B5C  5E3B               	subwf	i2lcd_legend@aux,f,c
 12056  003B5E  0E27               	movlw	39
 12057  003B60  5A3C               	subwfb	i2lcd_legend@aux+1,f,c
 12058  003B62                     i2l214:
 12059                           
 12060                           ; BSR set to: 1
 12061                           
 12062                           ; BSR set to: 1
 12063  003B62  0E11               	movlw	17
 12064  003B64  5C3B               	subwf	i2lcd_legend@aux,w,c
 12065  003B66  0E27               	movlw	39
 12066  003B68  583C               	subwfb	i2lcd_legend@aux+1,w,c
 12067  003B6A  B0D8               	btfsc	status,0,c
 12068  003B6C  D7F5               	goto	i2l215
 12069  003B6E                     i2u1097_40:
 12070                           
 12071                           ;hmiMain.c: 171: }
 12072                           ;hmiMain.c: 172: }
 12073                           ;hmiMain.c: 173: lcdText[7] = 48;
 12074                           
 12075                           ; BSR set to: 1
 12076                           
 12077                           ; BSR set to: 1
 12078  003B6E  0E30               	movlw	48
 12079  003B70  0101               	movlb	1	; () banked
 12080  003B72  6FE5               	movwf	(_lcdText+7)& (0+255),b
 12081                           
 12082                           ;hmiMain.c: 174: while (aux >= 1000) {
 12083  003B74  D005               	goto	i2l217
 12084  003B76                     
 12085                           ; BSR set to: 1
 12086                           ;hmiMain.c: 175: lcdText[7]++;
 12087                           
 12088                           ; BSR set to: 1
 12089  003B76  2BE5               	incf	(_lcdText+7)& (0+255),f,b
 12090                           
 12091                           ; BSR set to: 1
 12092                           ;hmiMain.c: 176: aux -= 1000;
 12093  003B78  0EE8               	movlw	232
 12094  003B7A  5E3B               	subwf	i2lcd_legend@aux,f,c
 12095  003B7C  0E03               	movlw	3
 12096  003B7E  5A3C               	subwfb	i2lcd_legend@aux+1,f,c
 12097  003B80                     i2l217:
 12098                           
 12099                           ; BSR set to: 1
 12100                           
 12101                           ; BSR set to: 1
 12102  003B80  0EE8               	movlw	232
 12103  003B82  5C3B               	subwf	i2lcd_legend@aux,w,c
 12104  003B84  0E03               	movlw	3
 12105  003B86  583C               	subwfb	i2lcd_legend@aux+1,w,c
 12106  003B88  B0D8               	btfsc	status,0,c
 12107  003B8A  D7F5               	goto	i2l218
 12108                           
 12109                           ; BSR set to: 1
 12110                           ;hmiMain.c: 177: }
 12111                           ;hmiMain.c: 178: lcdText[8] = '.';
 12112                           
 12113                           ; BSR set to: 1
 12114  003B8C  0E2E               	movlw	46
 12115  003B8E  6FE6               	movwf	(_lcdText+8)& (0+255),b
 12116                           
 12117                           ;hmiMain.c: 179: lcdText[9] = 48;
 12118  003B90  0E30               	movlw	48
 12119  003B92  6FE7               	movwf	(_lcdText+9)& (0+255),b
 12120                           
 12121                           ;hmiMain.c: 180: while (aux >= 100) {
 12122  003B94  D005               	goto	i2l220
 12123  003B96                     i2l9804:
 12124                           
 12125                           ; BSR set to: 1
 12126                           ;hmiMain.c: 181: lcdText[9]++;
 12127  003B96  2BE7               	incf	(_lcdText+9)& (0+255),f,b
 12128                           
 12129                           ; BSR set to: 1
 12130                           ;hmiMain.c: 182: aux -= 100;
 12131  003B98  0E64               	movlw	100
 12132  003B9A  5E3B               	subwf	i2lcd_legend@aux,f,c
 12133  003B9C  0E00               	movlw	0
 12134  003B9E  5A3C               	subwfb	i2lcd_legend@aux+1,f,c
 12135  003BA0                     i2l220:
 12136                           
 12137                           ; BSR set to: 1
 12138                           
 12139                           ; BSR set to: 1
 12140  003BA0  503C               	movf	i2lcd_legend@aux+1,w,c
 12141  003BA2  E1F9               	bnz	i2l9804
 12142  003BA4  0E64               	movlw	100
 12143  003BA6  5C3B               	subwf	i2lcd_legend@aux,w,c
 12144  003BA8  B0D8               	btfsc	status,0,c
 12145  003BAA  D7F5               	goto	i2l221
 12146                           
 12147                           ; BSR set to: 1
 12148                           ;hmiMain.c: 183: }
 12149                           ;hmiMain.c: 184: lcdText[10] = 48;
 12150                           
 12151                           ; BSR set to: 1
 12152  003BAC  0E30               	movlw	48
 12153  003BAE  6FE8               	movwf	(_lcdText+10)& (0+255),b
 12154                           
 12155                           ;hmiMain.c: 185: while (aux >= 10) {
 12156  003BB0  D005               	goto	i2l223
 12157  003BB2                     i2l9812:
 12158                           
 12159                           ; BSR set to: 1
 12160                           ;hmiMain.c: 186: lcdText[10]++;
 12161  003BB2  2BE8               	incf	(_lcdText+10)& (0+255),f,b
 12162                           
 12163                           ; BSR set to: 1
 12164                           ;hmiMain.c: 187: aux -= 10;
 12165  003BB4  0E0A               	movlw	10
 12166  003BB6  5E3B               	subwf	i2lcd_legend@aux,f,c
 12167  003BB8  0E00               	movlw	0
 12168  003BBA  5A3C               	subwfb	i2lcd_legend@aux+1,f,c
 12169  003BBC                     i2l223:
 12170                           
 12171                           ; BSR set to: 1
 12172                           
 12173                           ; BSR set to: 1
 12174  003BBC  503C               	movf	i2lcd_legend@aux+1,w,c
 12175  003BBE  E1F9               	bnz	i2l9812
 12176  003BC0  0E0A               	movlw	10
 12177  003BC2  5C3B               	subwf	i2lcd_legend@aux,w,c
 12178  003BC4  B0D8               	btfsc	status,0,c
 12179  003BC6  D7F5               	goto	i2l224
 12180                           
 12181                           ; BSR set to: 1
 12182                           ;hmiMain.c: 188: }
 12183                           ;hmiMain.c: 189: lcdText[11] = 48 + aux;
 12184                           
 12185                           ; BSR set to: 1
 12186  003BC8  503B               	movf	i2lcd_legend@aux,w,c
 12187  003BCA  0F30               	addlw	48
 12188  003BCC  6FE9               	movwf	(_lcdText+11)& (0+255),b
 12189                           
 12190                           ; BSR set to: 1
 12191                           ;hmiMain.c: 190: lcd_text(1, lcdText, 0);
 12192  003BCE  0EDE               	movlw	low _lcdText
 12193  003BD0  6E18               	movwf	i2lcd_text@msjPtr,c
 12194  003BD2  0E01               	movlw	high _lcdText
 12195  003BD4  6E19               	movwf	i2lcd_text@msjPtr+1,c
 12196  003BD6  0E00               	movlw	0
 12197  003BD8  6E1A               	movwf	i2lcd_text@color,c
 12198  003BDA  0E01               	movlw	1
 12199  003BDC  ECE6  F00C         	call	i2_lcd_text
 12200                           
 12201                           ;hmiMain.c: 196: }
 12202                           
 12203                           ;hmiMain.c: 195: break;
 12204                           
 12205                           ;hmiMain.c: 194: default:
 12206                           
 12207                           ;hmiMain.c: 193: break;
 12208                           
 12209                           ;hmiMain.c: 192: case 2:
 12210                           
 12211                           ;hmiMain.c: 191: break;
 12212  003BE0  0012               	return	
 12213  003BE2                     i2l211:
 12214  003BE2  503A               	movf	i2lcd_legend@opt,w,c
 12215                           
 12216                           ; Switch size 1, requested type "space"
 12217                           ; Number of cases is 2, Range of values is 1 to 2
 12218                           ; switch strategies available:
 12219                           ; Name         Instructions Cycles
 12220                           ; simple_byte            7     4 (average)
 12221                           ;	Chosen strategy is simple_byte
 12222  003BE4  0A01               	xorlw	1	; case 1
 12223  003BE6  B4D8               	btfsc	status,2,c
 12224  003BE8  D79F               	goto	i2l212
 12225  003BEA  0A03               	xorlw	3	; case 2
 12226  003BEC  0012               	return	
 12227  003BEE                     __end_ofi2_lcd_legend:
 12228                           	opt stack 0
 12229                           pclatu	equ	0xFFB
 12230                           pclath	equ	0xFFA
 12231                           tblptru	equ	0xFF8
 12232                           tblptrh	equ	0xFF7
 12233                           tblptrl	equ	0xFF6
 12234                           tablat	equ	0xFF5
 12235                           prodh	equ	0xFF4
 12236                           prodl	equ	0xFF3
 12237                           intcon	equ	0xFF2
 12238                           postinc0	equ	0xFEE
 12239                           fsr0h	equ	0xFEA
 12240                           fsr0l	equ	0xFE9
 12241                           wreg	equ	0xFE8
 12242                           indf1	equ	0xFE7
 12243                           postdec1	equ	0xFE5
 12244                           fsr1h	equ	0xFE2
 12245                           fsr1l	equ	0xFE1
 12246                           indf2	equ	0xFDF
 12247                           postinc2	equ	0xFDE
 12248                           postdec2	equ	0xFDD
 12249                           fsr2h	equ	0xFDA
 12250                           fsr2l	equ	0xFD9
 12251                           status	equ	0xFD8
 12252                           
 12253 ;; *************** function i2_strcpy *****************
 12254 ;; Defined at:
 12255 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcpy.c"
 12256 ;; Parameters:    Size  Location     Type
 12257 ;;  to              2    0[COMRAM] PTR unsigned char 
 12258 ;;		 -> lcdText(16), 
 12259 ;;  from            2    2[COMRAM] PTR const unsigned char 
 12260 ;;		 -> STR_1(17), 
 12261 ;; Auto vars:     Size  Location     Type
 12262 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 12263 ;;		 -> lcdText(16), 
 12264 ;; Return value:  Size  Location     Type
 12265 ;;                  2    0[COMRAM] PTR unsigned char 
 12266 ;; Registers used:
 12267 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 12268 ;; Tracked objects:
 12269 ;;		On entry : 0/0
 12270 ;;		On exit  : 0/0
 12271 ;;		Unchanged: 0/0
 12272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12273 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12274 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12275 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12276 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12277 ;;Total ram usage:        6 bytes
 12278 ;; Hardware stack levels used:    1
 12279 ;; This function calls:
 12280 ;;		Nothing
 12281 ;; This function is called by:
 12282 ;;		i2_lcd_legend
 12283 ;; This function uses a non-reentrant model
 12284 ;;
 12285                           
 12286                           	psect	text37
 12287  004A18                     __ptext37:
 12288                           	opt stack 0
 12289  004A18                     i2_strcpy:
 12290                           	opt stack 22
 12291                           
 12292                           ;incstack = 0
 12293  004A18  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 12294  004A1C  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 12295  004A20  D004               	goto	i2l1680
 12296  004A22  4A05               	infsnz	i2strcpy@cp,f,c
 12297  004A24  2A06               	incf	i2strcpy@cp+1,f,c
 12298  004A26  4A03               	infsnz	i2strcpy@from,f,c
 12299  004A28  2A04               	incf	i2strcpy@from+1,f,c
 12300  004A2A                     i2l1680:
 12301  004A2A  C003  FFF6         	movff	i2strcpy@from,tblptrl
 12302  004A2E  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 12303  004A32                     	if	0	;tblptru may be non-zero
 12304  004A32                     	endif
 12305  004A32                     	if	0	;tblptru may be non-zero
 12306  004A32                     	endif
 12307  004A32  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 12308  004A36  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 12309  004A3A  0008               	tblrd		*
 12310  004A3C  CFF5 FFDF          	movff	tablat,indf2
 12311  004A40  50DF               	movf	indf2,w,c
 12312  004A42  B4D8               	btfsc	status,2,c
 12313  004A44  0012               	return	
 12314  004A46  D7ED               	goto	i2l1681
 12315  004A48                     __end_ofi2_strcpy:
 12316                           	opt stack 0
 12317                           pclatu	equ	0xFFB
 12318                           pclath	equ	0xFFA
 12319                           tblptru	equ	0xFF8
 12320                           tblptrh	equ	0xFF7
 12321                           tblptrl	equ	0xFF6
 12322                           tablat	equ	0xFF5
 12323                           prodh	equ	0xFF4
 12324                           prodl	equ	0xFF3
 12325                           intcon	equ	0xFF2
 12326                           postinc0	equ	0xFEE
 12327                           fsr0h	equ	0xFEA
 12328                           fsr0l	equ	0xFE9
 12329                           wreg	equ	0xFE8
 12330                           indf1	equ	0xFE7
 12331                           postdec1	equ	0xFE5
 12332                           fsr1h	equ	0xFE2
 12333                           fsr1l	equ	0xFE1
 12334                           indf2	equ	0xFDF
 12335                           postinc2	equ	0xFDE
 12336                           postdec2	equ	0xFDD
 12337                           fsr2h	equ	0xFDA
 12338                           fsr2l	equ	0xFD9
 12339                           status	equ	0xFD8
 12340                           
 12341 ;; *************** function _menu_next *****************
 12342 ;; Defined at:
 12343 ;;		line 501 in file "menu.c"
 12344 ;; Parameters:    Size  Location     Type
 12345 ;;  menuShown       2   77[COMRAM] PTR unsigned char 
 12346 ;;		 -> menu_shown(1), 
 12347 ;;  menuRow         2   79[COMRAM] PTR unsigned char 
 12348 ;;		 -> menu_rowColor(1), 
 12349 ;;  command         1   81[COMRAM] unsigned char 
 12350 ;;  menuText        2   82[COMRAM] PTR unsigned char 
 12351 ;;		 -> menu_text(16), 
 12352 ;; Auto vars:     Size  Location     Type
 12353 ;;  i               1   87[COMRAM] unsigned char 
 12354 ;;  i               1   86[COMRAM] unsigned char 
 12355 ;;  rta             1   88[COMRAM] unsigned char 
 12356 ;;  aux1            1   85[COMRAM] unsigned char 
 12357 ;; Return value:  Size  Location     Type
 12358 ;;                  1    wreg      unsigned char 
 12359 ;; Registers used:
 12360 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12361 ;; Tracked objects:
 12362 ;;		On entry : 0/0
 12363 ;;		On exit  : 0/0
 12364 ;;		Unchanged: 0/0
 12365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12366 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12367 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12368 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12369 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12370 ;;Total ram usage:       12 bytes
 12371 ;; Hardware stack levels used:    1
 12372 ;; Hardware stack levels required when called:    7
 12373 ;; This function calls:
 12374 ;;		___lbdiv
 12375 ;;		_menu_21
 12376 ;;		_menu_navigate
 12377 ;;		i2_lcd_set_background
 12378 ;;		i2_lcd_text
 12379 ;;		i2_mem_read
 12380 ;;		i2_mem_write
 12381 ;; This function is called by:
 12382 ;;		_isr
 12383 ;; This function uses a non-reentrant model
 12384 ;;
 12385                           
 12386                           	psect	text38
 12387  000930                     __ptext38:
 12388                           	opt stack 0
 12389  000930                     _menu_next:
 12390                           	opt stack 16
 12391                           
 12392                           ;menu.c: 502: char aux1 = 0;
 12393                           
 12394                           ;incstack = 0
 12395  000930  0E00               	movlw	0
 12396  000932  6E56               	movwf	menu_next@aux1,c
 12397                           
 12398                           ;menu.c: 503: char rta = 0;
 12399  000934  0E00               	movlw	0
 12400  000936  6E59               	movwf	menu_next@rta,c
 12401                           
 12402                           ;menu.c: 505: switch (command) {
 12403  000938  EF9F  F00A         	goto	i2l867
 12404  00093C                     
 12405                           ;menu.c: 509: }
 12406                           ;menu.c: 510: if (*(menuRow) > 1 && *(menuShown) > 0) {
 12407  00093C  C050  FFD9         	movff	menu_next@menuRow,fsr2l
 12408  000940  C051  FFDA         	movff	menu_next@menuRow+1,fsr2h
 12409  000944  0E01               	movlw	1
 12410  000946  64DF               	cpfsgt	indf2,c
 12411  000948  D00D               	goto	i2l870
 12412  00094A  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 12413  00094E  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 12414  000952  50DF               	movf	indf2,w,c
 12415  000954  B4D8               	btfsc	status,2,c
 12416  000956  D006               	goto	i2l870
 12417                           
 12418                           ;menu.c: 511: (*(menuRow))--;
 12419  000958  C050  FFD9         	movff	menu_next@menuRow,fsr2l
 12420  00095C  C051  FFDA         	movff	menu_next@menuRow+1,fsr2h
 12421  000960  06DF               	decf	indf2,f,c
 12422                           
 12423                           ;menu.c: 512: } else {
 12424  000962  D014               	goto	i2l872
 12425  000964                     i2l870:
 12426                           
 12427                           ;menu.c: 513: if (*(menuShown) == 1 && *(menuRow) == 1) {
 12428  000964  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 12429  000968  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 12430  00096C  04DE               	decf	postinc2,w,c
 12431  00096E  A4D8               	btfss	status,2,c
 12432  000970  D00D               	goto	i2l872
 12433  000972  C050  FFD9         	movff	menu_next@menuRow,fsr2l
 12434  000976  C051  FFDA         	movff	menu_next@menuRow+1,fsr2h
 12435  00097A  04DE               	decf	postinc2,w,c
 12436  00097C  A4D8               	btfss	status,2,c
 12437  00097E  D006               	goto	i2l872
 12438                           
 12439                           ;menu.c: 514: *(menuRow) = 6;
 12440  000980  C050  FFD9         	movff	menu_next@menuRow,fsr2l
 12441  000984  C051  FFDA         	movff	menu_next@menuRow+1,fsr2h
 12442  000988  0E06               	movlw	6
 12443  00098A  6EDF               	movwf	indf2,c
 12444  00098C                     i2l872:
 12445                           
 12446                           ;menu.c: 515: }
 12447                           ;menu.c: 516: }
 12448                           ;menu.c: 518: menu_navigate(*(menuShown),*(menuRow));
 12449  00098C  C050  FFD9         	movff	menu_next@menuRow,fsr2l
 12450  000990  C051  FFDA         	movff	menu_next@menuRow+1,fsr2h
 12451  000994  50DF               	movf	indf2,w,c
 12452  000996  6E4C               	movwf	menu_navigate@rowColor,c
 12453  000998  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 12454  00099C  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 12455  0009A0  50DF               	movf	indf2,w,c
 12456  0009A2  EC23  F019         	call	_menu_navigate
 12457                           
 12458                           ;menu.c: 519: break;
 12459  0009A6  EFB5  F00A         	goto	i2l873
 12460  0009AA                     
 12461                           ;menu.c: 525: if (*(menuRow) < 6) {
 12462  0009AA  C050  FFD9         	movff	menu_next@menuRow,fsr2l
 12463  0009AE  C051  FFDA         	movff	menu_next@menuRow+1,fsr2h
 12464  0009B2  0E06               	movlw	6
 12465  0009B4  D017               	goto	L31
 12466  0009B6                     i2l884:
 12467                           
 12468                           ;menu.c: 540: if (*(menuRow) < 7) {
 12469  0009B6  C050  FFD9         	movff	menu_next@menuRow,fsr2l
 12470  0009BA  C051  FFDA         	movff	menu_next@menuRow+1,fsr2h
 12471  0009BE  0E07               	movlw	7
 12472  0009C0  D011               	goto	L31
 12473  0009C2                     
 12474                           ;menu.c: 550: if (*(menuRow) < 2) {
 12475  0009C2  C050  FFD9         	movff	menu_next@menuRow,fsr2l
 12476  0009C6  C051  FFDA         	movff	menu_next@menuRow+1,fsr2h
 12477  0009CA  0E02               	movlw	2
 12478  0009CC  D00B               	goto	L31
 12479  0009CE                     
 12480                           ;menu.c: 557: if (*(menuRow) < 4) {
 12481  0009CE  C050  FFD9         	movff	menu_next@menuRow,fsr2l
 12482  0009D2  C051  FFDA         	movff	menu_next@menuRow+1,fsr2h
 12483  0009D6  0E04               	movlw	4
 12484  0009D8  D005               	goto	L31
 12485  0009DA                     i2l893:
 12486                           
 12487                           ;menu.c: 562: if (*(menuRow) < 3) {
 12488  0009DA  C050  FFD9         	movff	menu_next@menuRow,fsr2l
 12489  0009DE  C051  FFDA         	movff	menu_next@menuRow+1,fsr2h
 12490  0009E2  0E03               	movlw	3
 12491  0009E4                     L31:
 12492  0009E4  60DF               	cpfslt	indf2,c
 12493  0009E6  D041               	goto	i2l877
 12494                           
 12495                           ;menu.c: 563: (*(menuRow))++;
 12496  0009E8  C050  FFD9         	movff	menu_next@menuRow,fsr2l
 12497  0009EC  C051  FFDA         	movff	menu_next@menuRow+1,fsr2h
 12498  0009F0  2ADF               	incf	indf2,f,c
 12499                           
 12500                           ;menu.c: 564: }
 12501                           ;menu.c: 565: break;
 12502  0009F2  D03B               	goto	i2l877
 12503  0009F4                     
 12504                           ;menu.c: 567: if (*(menuRow) < 4) {
 12505  0009F4  C050  FFD9         	movff	menu_next@menuRow,fsr2l
 12506  0009F8  C051  FFDA         	movff	menu_next@menuRow+1,fsr2h
 12507  0009FC  0E04               	movlw	4
 12508  0009FE  60DF               	cpfslt	indf2,c
 12509  000A00  D034               	goto	i2l877
 12510                           
 12511                           ;menu.c: 568: (*(menuRow))++;
 12512  000A02  C050  FFD9         	movff	menu_next@menuRow,fsr2l
 12513  000A06  C051  FFDA         	movff	menu_next@menuRow+1,fsr2h
 12514  000A0A  2ADF               	incf	indf2,f,c
 12515                           
 12516                           ;menu.c: 569: memBaud = *(menuRow);
 12517  000A0C  C050  FFD9         	movff	menu_next@menuRow,fsr2l
 12518  000A10  C051  FFDA         	movff	menu_next@menuRow+1,fsr2h
 12519  000A14  50DF               	movf	indf2,w,c
 12520  000A16  0100               	movlb	0	; () banked
 12521  000A18  6FB6               	movwf	_memBaud& (0+255),b
 12522                           
 12523                           ; BSR set to: 0
 12524                           ;menu.c: 575: }
 12525                           
 12526                           ; BSR set to: 0
 12527                           ;menu.c: 574: break;
 12528                           
 12529                           ;menu.c: 572: case 43:
 12530                           
 12531                           ; BSR set to: 0
 12532                           ;menu.c: 570: }
 12533                           ;menu.c: 571: break;
 12534  000A1A  D027               	goto	i2l877
 12535  000A1C                     
 12536                           ; BSR set to: 0
 12537  000A1C  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 12538  000A20  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 12539  000A24  50DF               	movf	indf2,w,c
 12540                           
 12541                           ; Switch size 1, requested type "space"
 12542                           ; Number of cases is 12, Range of values is 0 to 43
 12543                           ; switch strategies available:
 12544                           ; Name         Instructions Cycles
 12545                           ; simple_byte           37    19 (average)
 12546                           ;	Chosen strategy is simple_byte
 12547  000A26  0A00               	xorlw	0	; case 0
 12548  000A28  B4D8               	btfsc	status,2,c
 12549  000A2A  D01F               	goto	i2l877
 12550  000A2C  0A01               	xorlw	1	; case 1
 12551  000A2E  B4D8               	btfsc	status,2,c
 12552  000A30  D7BC               	goto	i2l878
 12553  000A32  0A03               	xorlw	3	; case 2
 12554  000A34  B4D8               	btfsc	status,2,c
 12555  000A36  D7BF               	goto	i2l884
 12556  000A38  0A01               	xorlw	1	; case 3
 12557  000A3A  B4D8               	btfsc	status,2,c
 12558  000A3C  D7CE               	goto	i2l893
 12559  000A3E  0A07               	xorlw	7	; case 4
 12560  000A40  B4D8               	btfsc	status,2,c
 12561  000A42  D7B9               	goto	i2l884
 12562  000A44  0A01               	xorlw	1	; case 5
 12563  000A46  B4D8               	btfsc	status,2,c
 12564  000A48  D7C8               	goto	i2l893
 12565  000A4A  0A03               	xorlw	3	; case 6
 12566  000A4C  B4D8               	btfsc	status,2,c
 12567  000A4E  D7B9               	goto	i2l888
 12568  000A50  0A13               	xorlw	19	; case 21
 12569  000A52  B4D8               	btfsc	status,2,c
 12570  000A54  D00A               	goto	i2l877
 12571  000A56  0A03               	xorlw	3	; case 22
 12572  000A58  B4D8               	btfsc	status,2,c
 12573  000A5A  D7B9               	goto	i2l891
 12574  000A5C  0A0E               	xorlw	14	; case 24
 12575  000A5E  B4D8               	btfsc	status,2,c
 12576  000A60  D7BC               	goto	i2l893
 12577  000A62  0A07               	xorlw	7	; case 31
 12578  000A64  B4D8               	btfsc	status,2,c
 12579  000A66  D7C6               	goto	i2l895
 12580  000A68  0A34               	xorlw	52	; case 43
 12581  000A6A                     i2l877:
 12582                           
 12583                           ;menu.c: 576: menu_navigate(*(menuShown),*(menuRow));
 12584  000A6A  C050  FFD9         	movff	menu_next@menuRow,fsr2l
 12585  000A6E  C051  FFDA         	movff	menu_next@menuRow+1,fsr2h
 12586  000A72  50DF               	movf	indf2,w,c
 12587  000A74  6E4C               	movwf	menu_navigate@rowColor,c
 12588  000A76  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 12589  000A7A  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 12590  000A7E  50DF               	movf	indf2,w,c
 12591  000A80  EC23  F019         	call	_menu_navigate
 12592                           
 12593                           ;menu.c: 577: break;
 12594  000A84  EFB5  F00A         	goto	i2l873
 12595  000A88                     
 12596                           ;menu.c: 583: *(menuShown) = 2;
 12597  000A88  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 12598  000A8C  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 12599  000A90  0E02               	movlw	2
 12600  000A92  6EDF               	movwf	indf2,c
 12601                           
 12602                           ;menu.c: 584: *(menuRow) = 1;
 12603  000A94  C050  FFD9         	movff	menu_next@menuRow,fsr2l
 12604  000A98  C051  FFDA         	movff	menu_next@menuRow+1,fsr2h
 12605  000A9C  0E01               	movlw	1
 12606  000A9E  6EDF               	movwf	indf2,c
 12607                           
 12608                           ;menu.c: 585: menu_navigate(*(menuShown),1);
 12609  000AA0  0E01               	movlw	1
 12610  000AA2  6E4C               	movwf	menu_navigate@rowColor,c
 12611  000AA4  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 12612  000AA8  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 12613  000AAC  50DF               	movf	indf2,w,c
 12614  000AAE  EC23  F019         	call	_menu_navigate
 12615                           
 12616                           ;menu.c: 586: break;
 12617  000AB2  D2FF               	goto	i2l909
 12618  000AB4                     
 12619                           ;menu.c: 588: *(menuShown) = 3;
 12620  000AB4  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 12621  000AB8  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 12622  000ABC  0E03               	movlw	3
 12623  000ABE  6EDF               	movwf	indf2,c
 12624                           
 12625                           ;menu.c: 589: *(menuRow) = 1;
 12626  000AC0  C050  FFD9         	movff	menu_next@menuRow,fsr2l
 12627  000AC4  C051  FFDA         	movff	menu_next@menuRow+1,fsr2h
 12628  000AC8  0E01               	movlw	1
 12629  000ACA  6EDF               	movwf	indf2,c
 12630                           
 12631                           ;menu.c: 590: menu_navigate(*(menuShown),1);
 12632  000ACC  0E01               	movlw	1
 12633  000ACE  6E4C               	movwf	menu_navigate@rowColor,c
 12634  000AD0  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 12635  000AD4  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 12636  000AD8  50DF               	movf	indf2,w,c
 12637  000ADA  EC23  F019         	call	_menu_navigate
 12638                           
 12639                           ;menu.c: 591: break;
 12640  000ADE  D2E9               	goto	i2l909
 12641  000AE0                     
 12642                           ;menu.c: 593: *(menuShown) = 4;
 12643  000AE0  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 12644  000AE4  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 12645  000AE8  0E04               	movlw	4
 12646  000AEA  6EDF               	movwf	indf2,c
 12647                           
 12648                           ;menu.c: 594: *(menuRow) = 1;
 12649  000AEC  C050  FFD9         	movff	menu_next@menuRow,fsr2l
 12650  000AF0  C051  FFDA         	movff	menu_next@menuRow+1,fsr2h
 12651  000AF4  0E01               	movlw	1
 12652  000AF6  6EDF               	movwf	indf2,c
 12653                           
 12654                           ;menu.c: 595: menu_navigate(*(menuShown),1);
 12655  000AF8  0E01               	movlw	1
 12656  000AFA  6E4C               	movwf	menu_navigate@rowColor,c
 12657  000AFC  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 12658  000B00  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 12659  000B04  50DF               	movf	indf2,w,c
 12660  000B06  EC23  F019         	call	_menu_navigate
 12661                           
 12662                           ;menu.c: 596: break;
 12663  000B0A  D2D3               	goto	i2l909
 12664  000B0C                     
 12665                           ;menu.c: 598: *(menuShown) = 5;
 12666  000B0C  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 12667  000B10  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 12668  000B14  0E05               	movlw	5
 12669  000B16  6EDF               	movwf	indf2,c
 12670                           
 12671                           ;menu.c: 599: *(menuRow) = 1;
 12672  000B18  C050  FFD9         	movff	menu_next@menuRow,fsr2l
 12673  000B1C  C051  FFDA         	movff	menu_next@menuRow+1,fsr2h
 12674  000B20  0E01               	movlw	1
 12675  000B22  6EDF               	movwf	indf2,c
 12676                           
 12677                           ;menu.c: 600: menu_navigate(*(menuShown),1);
 12678  000B24  0E01               	movlw	1
 12679  000B26  6E4C               	movwf	menu_navigate@rowColor,c
 12680  000B28  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 12681  000B2C  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 12682  000B30  50DF               	movf	indf2,w,c
 12683  000B32  EC23  F019         	call	_menu_navigate
 12684                           
 12685                           ;menu.c: 601: break;
 12686  000B36  D2BD               	goto	i2l909
 12687  000B38                     
 12688                           ;menu.c: 603: *(menuShown) = 6;
 12689  000B38  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 12690  000B3C  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 12691  000B40  0E06               	movlw	6
 12692  000B42  6EDF               	movwf	indf2,c
 12693                           
 12694                           ;menu.c: 604: *(menuRow) = 1;
 12695  000B44  C050  FFD9         	movff	menu_next@menuRow,fsr2l
 12696  000B48  C051  FFDA         	movff	menu_next@menuRow+1,fsr2h
 12697  000B4C  0E01               	movlw	1
 12698  000B4E  6EDF               	movwf	indf2,c
 12699                           
 12700                           ;menu.c: 605: menu_navigate(*(menuShown),1);
 12701  000B50  0E01               	movlw	1
 12702  000B52  6E4C               	movwf	menu_navigate@rowColor,c
 12703  000B54  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 12704  000B58  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 12705  000B5C  50DF               	movf	indf2,w,c
 12706  000B5E  EC23  F019         	call	_menu_navigate
 12707                           
 12708                           ;menu.c: 606: break;
 12709  000B62  D2A7               	goto	i2l909
 12710  000B64                     
 12711                           ;menu.c: 608: lcd_set_background(0xF800);
 12712  000B64  0EF8               	movlw	248
 12713  000B66  6E0C               	movwf	i2lcd_set_background@color+1,c
 12714  000B68  0E00               	movlw	0
 12715  000B6A  6E0B               	movwf	i2lcd_set_background@color,c
 12716  000B6C  EC95  F021         	call	i2_lcd_set_background	;wreg free
 12717                           
 12718                           ;menu.c: 609: lcd_set_background(0x07E0);
 12719  000B70  0E07               	movlw	7
 12720  000B72  6E0C               	movwf	i2lcd_set_background@color+1,c
 12721  000B74  0EE0               	movlw	224
 12722  000B76  6E0B               	movwf	i2lcd_set_background@color,c
 12723  000B78  EC95  F021         	call	i2_lcd_set_background	;wreg free
 12724                           
 12725                           ;menu.c: 610: lcd_set_background(0x001F);
 12726  000B7C  0E00               	movlw	0
 12727  000B7E  6E0C               	movwf	i2lcd_set_background@color+1,c
 12728  000B80  0E1F               	movlw	31
 12729  000B82  6E0B               	movwf	i2lcd_set_background@color,c
 12730  000B84  EC95  F021         	call	i2_lcd_set_background	;wreg free
 12731                           
 12732                           ;menu.c: 611: lcd_set_background(0xFFFF);
 12733  000B88  0EFF               	movlw	255
 12734  000B8A  6E0C               	movwf	i2lcd_set_background@color+1,c
 12735  000B8C  680B               	setf	i2lcd_set_background@color,c
 12736  000B8E  EC95  F021         	call	i2_lcd_set_background	;wreg free
 12737                           
 12738                           ;menu.c: 612: *(menuShown) = 0;
 12739  000B92  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 12740  000B96  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 12741  000B9A  0E00               	movlw	0
 12742  000B9C  6EDF               	movwf	indf2,c
 12743                           
 12744                           ;menu.c: 613: *(menuRow) = 1;
 12745  000B9E  C050  FFD9         	movff	menu_next@menuRow,fsr2l
 12746  000BA2  C051  FFDA         	movff	menu_next@menuRow+1,fsr2h
 12747  000BA6  0E01               	movlw	1
 12748  000BA8  6EDF               	movwf	indf2,c
 12749                           
 12750                           ;menu.c: 614: rta = 0;
 12751  000BAA  0E00               	movlw	0
 12752  000BAC  D18D               	goto	L13
 12753  000BAE  C050  FFD9         	movff	menu_next@menuRow,fsr2l
 12754  000BB2  C051  FFDA         	movff	menu_next@menuRow+1,fsr2h
 12755  000BB6  50DF               	movf	indf2,w,c
 12756                           
 12757                           ; Switch size 1, requested type "space"
 12758                           ; Number of cases is 6, Range of values is 1 to 6
 12759                           ; switch strategies available:
 12760                           ; Name         Instructions Cycles
 12761                           ; simple_byte           19    10 (average)
 12762                           ;	Chosen strategy is simple_byte
 12763  000BB8  0A01               	xorlw	1	; case 1
 12764  000BBA  B4D8               	btfsc	status,2,c
 12765  000BBC  D765               	goto	i2l902
 12766  000BBE  0A03               	xorlw	3	; case 2
 12767  000BC0  B4D8               	btfsc	status,2,c
 12768  000BC2  D778               	goto	i2l904
 12769  000BC4  0A01               	xorlw	1	; case 3
 12770  000BC6  B4D8               	btfsc	status,2,c
 12771  000BC8  D78B               	goto	i2l905
 12772  000BCA  0A07               	xorlw	7	; case 4
 12773  000BCC  B4D8               	btfsc	status,2,c
 12774  000BCE  D79E               	goto	i2l906
 12775  000BD0  0A01               	xorlw	1	; case 5
 12776  000BD2  B4D8               	btfsc	status,2,c
 12777  000BD4  D7B1               	goto	i2l907
 12778  000BD6  0A03               	xorlw	3	; case 6
 12779  000BD8  B4D8               	btfsc	status,2,c
 12780  000BDA  D7C4               	goto	i2l908
 12781                           
 12782                           ;menu.c: 617: break;
 12783  000BDC  D26A               	goto	i2l909
 12784  000BDE                     
 12785                           ;menu.c: 621: *(menuShown) = 21;
 12786  000BDE  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 12787  000BE2  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 12788  000BE6  0E15               	movlw	21
 12789  000BE8  6EDF               	movwf	indf2,c
 12790                           
 12791                           ;menu.c: 622: *(menuRow) = 1;
 12792  000BEA  C050  FFD9         	movff	menu_next@menuRow,fsr2l
 12793  000BEE  C051  FFDA         	movff	menu_next@menuRow+1,fsr2h
 12794  000BF2  0E01               	movlw	1
 12795  000BF4  6EDF               	movwf	indf2,c
 12796                           
 12797                           ;menu.c: 623: menu_navigate(*(menuShown),0);
 12798  000BF6  0E00               	movlw	0
 12799  000BF8  6E4C               	movwf	menu_navigate@rowColor,c
 12800  000BFA  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 12801  000BFE  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 12802  000C02  50DF               	movf	indf2,w,c
 12803  000C04  EC23  F019         	call	_menu_navigate
 12804                           
 12805                           ;menu.c: 624: rta = 21;
 12806  000C08  0E15               	movlw	21
 12807  000C0A  D15E               	goto	L13
 12808  000C0C                     
 12809                           ;menu.c: 627: *(menuShown) = 22;
 12810  000C0C  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 12811  000C10  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 12812  000C14  0E16               	movlw	22
 12813  000C16  6EDF               	movwf	indf2,c
 12814                           
 12815                           ;menu.c: 628: *(menuRow) = memDivision;
 12816  000C18  C050  FFD9         	movff	menu_next@menuRow,fsr2l
 12817  000C1C  C051  FFDA         	movff	menu_next@menuRow+1,fsr2h
 12818  000C20  C0B8  FFDF         	movff	_memDivision,indf2
 12819                           
 12820                           ;menu.c: 629: menu_navigate(*(menuShown),*(menuRow));
 12821  000C24  C050  FFD9         	movff	menu_next@menuRow,fsr2l
 12822  000C28  C051  FFDA         	movff	menu_next@menuRow+1,fsr2h
 12823  000C2C  50DF               	movf	indf2,w,c
 12824  000C2E  6E4C               	movwf	menu_navigate@rowColor,c
 12825  000C30  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 12826  000C34  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 12827  000C38  50DF               	movf	indf2,w,c
 12828  000C3A  EC23  F019         	call	_menu_navigate
 12829                           
 12830                           ;menu.c: 630: break;
 12831  000C3E  D239               	goto	i2l909
 12832  000C40                     
 12833                           ;menu.c: 632: *(menuShown) = 23;
 12834  000C40  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 12835  000C44  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 12836  000C48  0E17               	movlw	23
 12837  000C4A  6EDF               	movwf	indf2,c
 12838                           
 12839                           ;menu.c: 633: *(menuRow) = 1;
 12840  000C4C  C050  FFD9         	movff	menu_next@menuRow,fsr2l
 12841  000C50  C051  FFDA         	movff	menu_next@menuRow+1,fsr2h
 12842  000C54  0E01               	movlw	1
 12843  000C56  6EDF               	movwf	indf2,c
 12844                           
 12845                           ;menu.c: 634: menu_navigate(*(menuShown),*(menuRow));
 12846  000C58  C050  FFD9         	movff	menu_next@menuRow,fsr2l
 12847  000C5C  C051  FFDA         	movff	menu_next@menuRow+1,fsr2h
 12848  000C60  50DF               	movf	indf2,w,c
 12849  000C62  6E4C               	movwf	menu_navigate@rowColor,c
 12850  000C64  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 12851  000C68  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 12852  000C6C  50DF               	movf	indf2,w,c
 12853  000C6E  EC23  F019         	call	_menu_navigate
 12854                           
 12855                           ;menu.c: 635: break;
 12856  000C72  D21F               	goto	i2l909
 12857  000C74                     
 12858                           ;menu.c: 637: *(menuShown) = 24;
 12859  000C74  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 12860  000C78  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 12861  000C7C  0E18               	movlw	24
 12862  000C7E  6EDF               	movwf	indf2,c
 12863                           
 12864                           ;menu.c: 638: *(menuRow) = memFilter;
 12865  000C80  C050  FFD9         	movff	menu_next@menuRow,fsr2l
 12866  000C84  C051  FFDA         	movff	menu_next@menuRow+1,fsr2h
 12867  000C88  C0B7  FFDF         	movff	_memFilter,indf2
 12868                           
 12869                           ;menu.c: 639: menu_navigate(*(menuShown),*(menuRow));
 12870  000C8C  C050  FFD9         	movff	menu_next@menuRow,fsr2l
 12871  000C90  C051  FFDA         	movff	menu_next@menuRow+1,fsr2h
 12872  000C94  50DF               	movf	indf2,w,c
 12873  000C96  6E4C               	movwf	menu_navigate@rowColor,c
 12874  000C98  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 12875  000C9C  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 12876  000CA0  50DF               	movf	indf2,w,c
 12877  000CA2  EC23  F019         	call	_menu_navigate
 12878                           
 12879                           ;menu.c: 640: break;
 12880  000CA6  D205               	goto	i2l909
 12881  000CA8                     
 12882                           ;menu.c: 642: *(menuShown) = 25;
 12883  000CA8  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 12884  000CAC  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 12885  000CB0  0E19               	movlw	25
 12886  000CB2  6EDF               	movwf	indf2,c
 12887                           
 12888                           ;menu.c: 643: *(menuRow) = 1;
 12889  000CB4  C050  FFD9         	movff	menu_next@menuRow,fsr2l
 12890  000CB8  C051  FFDA         	movff	menu_next@menuRow+1,fsr2h
 12891  000CBC  0E01               	movlw	1
 12892  000CBE  6EDF               	movwf	indf2,c
 12893                           
 12894                           ;menu.c: 644: menu_navigate(*(menuShown),*(menuRow));
 12895  000CC0  C050  FFD9         	movff	menu_next@menuRow,fsr2l
 12896  000CC4  C051  FFDA         	movff	menu_next@menuRow+1,fsr2h
 12897  000CC8  50DF               	movf	indf2,w,c
 12898  000CCA  6E4C               	movwf	menu_navigate@rowColor,c
 12899  000CCC  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 12900  000CD0  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 12901  000CD4  50DF               	movf	indf2,w,c
 12902  000CD6  EC23  F019         	call	_menu_navigate
 12903                           
 12904                           ;menu.c: 645: break;
 12905  000CDA  D1EB               	goto	i2l909
 12906  000CDC                     
 12907                           ;menu.c: 647: *(menuShown) = 26;
 12908  000CDC  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 12909  000CE0  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 12910  000CE4  0E1A               	movlw	26
 12911  000CE6  6EDF               	movwf	indf2,c
 12912                           
 12913                           ;menu.c: 648: *(menuRow) = 1;
 12914  000CE8  C050  FFD9         	movff	menu_next@menuRow,fsr2l
 12915  000CEC  C051  FFDA         	movff	menu_next@menuRow+1,fsr2h
 12916  000CF0  0E01               	movlw	1
 12917  000CF2  6EDF               	movwf	indf2,c
 12918                           
 12919                           ;menu.c: 649: menu_navigate(*(menuShown),*(menuRow));
 12920  000CF4  C050  FFD9         	movff	menu_next@menuRow,fsr2l
 12921  000CF8  C051  FFDA         	movff	menu_next@menuRow+1,fsr2h
 12922  000CFC  50DF               	movf	indf2,w,c
 12923  000CFE  6E4C               	movwf	menu_navigate@rowColor,c
 12924  000D00  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 12925  000D04  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 12926  000D08  50DF               	movf	indf2,w,c
 12927  000D0A  EC23  F019         	call	_menu_navigate
 12928                           
 12929                           ;menu.c: 650: break;
 12930  000D0E  D1D1               	goto	i2l909
 12931  000D10                     
 12932                           ;menu.c: 652: *(menuShown) = 27;
 12933  000D10  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 12934  000D14  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 12935  000D18  0E1B               	movlw	27
 12936  000D1A  6EDF               	movwf	indf2,c
 12937                           
 12938                           ;menu.c: 653: *(menuRow) = 1;
 12939  000D1C  C050  FFD9         	movff	menu_next@menuRow,fsr2l
 12940  000D20  C051  FFDA         	movff	menu_next@menuRow+1,fsr2h
 12941  000D24  0E01               	movlw	1
 12942  000D26  6EDF               	movwf	indf2,c
 12943                           
 12944                           ;menu.c: 654: menu_navigate(*(menuShown),*(menuRow));
 12945  000D28  C050  FFD9         	movff	menu_next@menuRow,fsr2l
 12946  000D2C  C051  FFDA         	movff	menu_next@menuRow+1,fsr2h
 12947  000D30  50DF               	movf	indf2,w,c
 12948  000D32  6E4C               	movwf	menu_navigate@rowColor,c
 12949  000D34  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 12950  000D38  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 12951  000D3C  50DF               	movf	indf2,w,c
 12952  000D3E  EC23  F019         	call	_menu_navigate
 12953                           
 12954                           ;menu.c: 656: }
 12955                           
 12956                           ;menu.c: 655: break;
 12957  000D42  D1B7               	goto	i2l909
 12958  000D44  C050  FFD9         	movff	menu_next@menuRow,fsr2l
 12959  000D48  C051  FFDA         	movff	menu_next@menuRow+1,fsr2h
 12960  000D4C  50DF               	movf	indf2,w,c
 12961                           
 12962                           ; Switch size 1, requested type "space"
 12963                           ; Number of cases is 7, Range of values is 1 to 7
 12964                           ; switch strategies available:
 12965                           ; Name         Instructions Cycles
 12966                           ; simple_byte           22    12 (average)
 12967                           ;	Chosen strategy is simple_byte
 12968  000D4E  0A01               	xorlw	1	; case 1
 12969  000D50  B4D8               	btfsc	status,2,c
 12970  000D52  D745               	goto	i2l912
 12971  000D54  0A03               	xorlw	3	; case 2
 12972  000D56  B4D8               	btfsc	status,2,c
 12973  000D58  D759               	goto	i2l914
 12974  000D5A  0A01               	xorlw	1	; case 3
 12975  000D5C  B4D8               	btfsc	status,2,c
 12976  000D5E  D770               	goto	i2l915
 12977  000D60  0A07               	xorlw	7	; case 4
 12978  000D62  B4D8               	btfsc	status,2,c
 12979  000D64  D787               	goto	i2l916
 12980  000D66  0A01               	xorlw	1	; case 5
 12981  000D68  B4D8               	btfsc	status,2,c
 12982  000D6A  D79E               	goto	i2l917
 12983  000D6C  0A03               	xorlw	3	; case 6
 12984  000D6E  B4D8               	btfsc	status,2,c
 12985  000D70  D7B5               	goto	i2l918
 12986  000D72  0A01               	xorlw	1	; case 7
 12987  000D74  B4D8               	btfsc	status,2,c
 12988  000D76  D7CC               	goto	i2l919
 12989                           
 12990                           ;menu.c: 657: break;
 12991  000D78  D19C               	goto	i2l909
 12992  000D7A                     
 12993                           ;menu.c: 659: *(menuShown) = 21;
 12994  000D7A  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 12995  000D7E  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 12996  000D82  0E15               	movlw	21
 12997  000D84  6EDF               	movwf	indf2,c
 12998                           
 12999                           ;menu.c: 660: memDivision = *(menuRow);
 13000  000D86  C050  FFD9         	movff	menu_next@menuRow,fsr2l
 13001  000D8A  C051  FFDA         	movff	menu_next@menuRow+1,fsr2h
 13002  000D8E  50DF               	movf	indf2,w,c
 13003  000D90  0100               	movlb	0	; () banked
 13004  000D92  6FB8               	movwf	_memDivision& (0+255),b
 13005                           
 13006                           ; BSR set to: 0
 13007                           ;menu.c: 661: mem_write (0x21, memDivision);
 13008  000D94  C0B8  F001         	movff	_memDivision,i2mem_write@data
 13009  000D98  0E21               	movlw	33
 13010  000D9A  EC4F  F025         	call	i2_mem_write
 13011                           
 13012                           ;menu.c: 662: menu_navigate(*(menuShown),0);
 13013  000D9E  0E00               	movlw	0
 13014  000DA0  6E4C               	movwf	menu_navigate@rowColor,c
 13015  000DA2  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 13016  000DA6  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 13017  000DAA  50DF               	movf	indf2,w,c
 13018  000DAC  EC23  F019         	call	_menu_navigate
 13019                           
 13020                           ;menu.c: 663: rta = 22;
 13021  000DB0  0E16               	movlw	22
 13022  000DB2  D08A               	goto	L13
 13023  000DB4                     
 13024                           ;menu.c: 666: *(menuShown) = 21;
 13025  000DB4  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 13026  000DB8  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 13027  000DBC  0E15               	movlw	21
 13028  000DBE  6EDF               	movwf	indf2,c
 13029                           
 13030                           ;menu.c: 667: menu_navigate(*(menuShown),0);
 13031  000DC0  0E00               	movlw	0
 13032  000DC2  6E4C               	movwf	menu_navigate@rowColor,c
 13033  000DC4  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 13034  000DC8  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 13035  000DCC  50DF               	movf	indf2,w,c
 13036  000DCE  EC23  F019         	call	_menu_navigate
 13037                           
 13038                           ;menu.c: 668: rta = 23;
 13039  000DD2  0E17               	movlw	23
 13040  000DD4  D079               	goto	L13
 13041  000DD6                     
 13042                           ;menu.c: 671: *(menuShown) = 21;
 13043  000DD6  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 13044  000DDA  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 13045  000DDE  0E15               	movlw	21
 13046  000DE0  6EDF               	movwf	indf2,c
 13047                           
 13048                           ;menu.c: 672: memFilter = *(menuRow);
 13049  000DE2  C050  FFD9         	movff	menu_next@menuRow,fsr2l
 13050  000DE6  C051  FFDA         	movff	menu_next@menuRow+1,fsr2h
 13051  000DEA  50DF               	movf	indf2,w,c
 13052  000DEC  0100               	movlb	0	; () banked
 13053  000DEE  6FB7               	movwf	_memFilter& (0+255),b
 13054                           
 13055                           ; BSR set to: 0
 13056                           ;menu.c: 673: mem_write(0x22, memFilter);
 13057  000DF0  C0B7  F001         	movff	_memFilter,i2mem_write@data
 13058  000DF4  0E22               	movlw	34
 13059  000DF6  EC4F  F025         	call	i2_mem_write
 13060                           
 13061                           ;menu.c: 674: menu_navigate(*(menuShown),0);
 13062  000DFA  0E00               	movlw	0
 13063  000DFC  6E4C               	movwf	menu_navigate@rowColor,c
 13064  000DFE  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 13065  000E02  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 13066  000E06  50DF               	movf	indf2,w,c
 13067  000E08  EC23  F019         	call	_menu_navigate
 13068                           
 13069                           ;menu.c: 675: rta = 24;
 13070  000E0C  0E18               	movlw	24
 13071  000E0E  D05C               	goto	L13
 13072  000E10                     
 13073                           ;menu.c: 678: *(menuShown) = 21;
 13074  000E10  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 13075  000E14  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 13076  000E18  0E15               	movlw	21
 13077  000E1A  6EDF               	movwf	indf2,c
 13078                           
 13079                           ;menu.c: 679: menu_navigate(*(menuShown),1);
 13080  000E1C  0E01               	movlw	1
 13081  000E1E  6E4C               	movwf	menu_navigate@rowColor,c
 13082  000E20  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 13083  000E24  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 13084  000E28  50DF               	movf	indf2,w,c
 13085  000E2A  EC23  F019         	call	_menu_navigate
 13086                           
 13087                           ;menu.c: 680: rta = 25;
 13088  000E2E  0E19               	movlw	25
 13089  000E30  D04B               	goto	L13
 13090  000E32                     
 13091                           ;menu.c: 683: *(menuShown) = 21;
 13092  000E32  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 13093  000E36  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 13094  000E3A  0E15               	movlw	21
 13095  000E3C  6EDF               	movwf	indf2,c
 13096                           
 13097                           ;menu.c: 684: menu_navigate(*(menuShown),1);
 13098  000E3E  0E01               	movlw	1
 13099  000E40  6E4C               	movwf	menu_navigate@rowColor,c
 13100  000E42  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 13101  000E46  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 13102  000E4A  50DF               	movf	indf2,w,c
 13103  000E4C  EC23  F019         	call	_menu_navigate
 13104                           
 13105                           ;menu.c: 685: rta = 26;
 13106  000E50  0E1A               	movlw	26
 13107  000E52  D03A               	goto	L13
 13108  000E54                     
 13109                           ;menu.c: 688: *(menuShown) = 21;
 13110  000E54  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 13111  000E58  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 13112  000E5C  0E15               	movlw	21
 13113  000E5E  6EDF               	movwf	indf2,c
 13114                           
 13115                           ;menu.c: 689: menu_navigate(*(menuShown),1);
 13116  000E60  0E01               	movlw	1
 13117  000E62  6E4C               	movwf	menu_navigate@rowColor,c
 13118  000E64  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 13119  000E68  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 13120  000E6C  50DF               	movf	indf2,w,c
 13121  000E6E  EC23  F019         	call	_menu_navigate
 13122                           
 13123                           ;menu.c: 690: rta = 27;
 13124  000E72  0E1B               	movlw	27
 13125  000E74  D029               	goto	L13
 13126  000E76                     
 13127                           ;menu.c: 695: *(menuShown) = 31;
 13128  000E76  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 13129  000E7A  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 13130  000E7E  0E1F               	movlw	31
 13131  000E80  6EDF               	movwf	indf2,c
 13132                           
 13133                           ;menu.c: 696: *(menuRow) = memBaud;
 13134  000E82  C050  FFD9         	movff	menu_next@menuRow,fsr2l
 13135  000E86  C051  FFDA         	movff	menu_next@menuRow+1,fsr2h
 13136  000E8A  C0B6  FFDF         	movff	_memBaud,indf2
 13137                           
 13138                           ;menu.c: 697: memBaud = mem_read(0x23);
 13139  000E8E  0E23               	movlw	35
 13140  000E90  ECE2  F025         	call	i2_mem_read
 13141  000E94  0100               	movlb	0	; () banked
 13142  000E96  6FB6               	movwf	_memBaud& (0+255),b
 13143                           
 13144                           ; BSR set to: 0
 13145                           ;menu.c: 698: menu_navigate(*(menuShown),*(menuRow));
 13146  000E98  C050  FFD9         	movff	menu_next@menuRow,fsr2l
 13147  000E9C  C051  FFDA         	movff	menu_next@menuRow+1,fsr2h
 13148  000EA0  50DF               	movf	indf2,w,c
 13149  000EA2  6E4C               	movwf	menu_navigate@rowColor,c
 13150  000EA4  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 13151  000EA8  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 13152  000EAC  50DF               	movf	indf2,w,c
 13153  000EAE  EC23  F019         	call	_menu_navigate
 13154                           
 13155                           ;menu.c: 699: break;
 13156  000EB2  D0FF               	goto	i2l909
 13157  000EB4                     
 13158                           ;menu.c: 701: menu_21(1);
 13159  000EB4  0E01               	movlw	1
 13160  000EB6  ECCC  F021         	call	_menu_21
 13161                           
 13162                           ;menu.c: 702: *(menuShown) = 32;
 13163  000EBA  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 13164  000EBE  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 13165  000EC2  0E20               	movlw	32
 13166  000EC4  D0B2               	goto	L17
 13167  000EC6                     i2l9380:
 13168                           
 13169                           ;menu.c: 703: rta = 1;
 13170  000EC6  0E01               	movlw	1
 13171  000EC8                     L13:
 13172  000EC8  6E59               	movwf	menu_next@rta,c
 13173                           
 13174                           ;menu.c: 704: break;
 13175  000ECA  D0F3               	goto	i2l909
 13176  000ECC                     
 13177                           ;menu.c: 706: menu_21(1);
 13178  000ECC  0E01               	movlw	1
 13179  000ECE  ECCC  F021         	call	_menu_21
 13180                           
 13181                           ;menu.c: 707: *(menuShown) = 33;
 13182  000ED2  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 13183  000ED6  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 13184  000EDA  0E21               	movlw	33
 13185  000EDC  D0A6               	goto	L17
 13186  000EDE  C050  FFD9         	movff	menu_next@menuRow,fsr2l
 13187  000EE2  C051  FFDA         	movff	menu_next@menuRow+1,fsr2h
 13188  000EE6  50DF               	movf	indf2,w,c
 13189                           
 13190                           ; Switch size 1, requested type "space"
 13191                           ; Number of cases is 3, Range of values is 1 to 3
 13192                           ; switch strategies available:
 13193                           ; Name         Instructions Cycles
 13194                           ; simple_byte           10     6 (average)
 13195                           ;	Chosen strategy is simple_byte
 13196  000EE8  0A01               	xorlw	1	; case 1
 13197  000EEA  B4D8               	btfsc	status,2,c
 13198  000EEC  D7C4               	goto	i2l928
 13199  000EEE  0A03               	xorlw	3	; case 2
 13200  000EF0  B4D8               	btfsc	status,2,c
 13201  000EF2  D7E0               	goto	i2l930
 13202  000EF4  0A01               	xorlw	1	; case 3
 13203  000EF6  B4D8               	btfsc	status,2,c
 13204  000EF8  D7E9               	goto	i2l931
 13205                           
 13206                           ;menu.c: 711: break;
 13207  000EFA  D0DB               	goto	i2l909
 13208  000EFC                     
 13209                           ;menu.c: 713: menu_21(1);
 13210  000EFC  0E01               	movlw	1
 13211  000EFE  ECCC  F021         	call	_menu_21
 13212  000F02  D7E1               	goto	i2l9380
 13213  000F04                     
 13214                           ;menu.c: 719: *(menuShown) = 41;
 13215  000F04  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 13216  000F08  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 13217  000F0C  0E29               	movlw	41
 13218  000F0E  6EDF               	movwf	indf2,c
 13219                           
 13220                           ;menu.c: 720: *(menuRow) = 0;
 13221  000F10  C050  FFD9         	movff	menu_next@menuRow,fsr2l
 13222  000F14  C051  FFDA         	movff	menu_next@menuRow+1,fsr2h
 13223  000F18  0E00               	movlw	0
 13224  000F1A  6EDF               	movwf	indf2,c
 13225                           
 13226                           ;menu.c: 721: menu_navigate(*(menuShown),*(menuRow));
 13227  000F1C  C050  FFD9         	movff	menu_next@menuRow,fsr2l
 13228  000F20  C051  FFDA         	movff	menu_next@menuRow+1,fsr2h
 13229  000F24  50DF               	movf	indf2,w,c
 13230  000F26  6E4C               	movwf	menu_navigate@rowColor,c
 13231  000F28  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 13232  000F2C  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 13233  000F30  50DF               	movf	indf2,w,c
 13234  000F32  EC23  F019         	call	_menu_navigate
 13235                           
 13236                           ;menu.c: 722: break;
 13237  000F36  D0BD               	goto	i2l909
 13238  000F38                     
 13239                           ;menu.c: 724: *(menuShown) = 42;
 13240  000F38  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 13241  000F3C  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 13242  000F40  0E2A               	movlw	42
 13243  000F42  6EDF               	movwf	indf2,c
 13244                           
 13245                           ;menu.c: 725: *(menuRow) = 0;
 13246  000F44  C050  FFD9         	movff	menu_next@menuRow,fsr2l
 13247  000F48  C051  FFDA         	movff	menu_next@menuRow+1,fsr2h
 13248  000F4C  0E00               	movlw	0
 13249  000F4E  6EDF               	movwf	indf2,c
 13250                           
 13251                           ;menu.c: 726: menu_navigate(*(menuShown),*(menuRow));
 13252  000F50  C050  FFD9         	movff	menu_next@menuRow,fsr2l
 13253  000F54  C051  FFDA         	movff	menu_next@menuRow+1,fsr2h
 13254  000F58  50DF               	movf	indf2,w,c
 13255  000F5A  6E4C               	movwf	menu_navigate@rowColor,c
 13256  000F5C  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 13257  000F60  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 13258  000F64  50DF               	movf	indf2,w,c
 13259  000F66  EC23  F019         	call	_menu_navigate
 13260                           
 13261                           ;menu.c: 727: break;
 13262  000F6A  D0A3               	goto	i2l909
 13263  000F6C                     
 13264                           ;menu.c: 729: *(menuShown) = 43;
 13265  000F6C  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 13266  000F70  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 13267  000F74  0E2B               	movlw	43
 13268  000F76  6EDF               	movwf	indf2,c
 13269                           
 13270                           ;menu.c: 730: *(menuRow) = 0;
 13271  000F78  C050  FFD9         	movff	menu_next@menuRow,fsr2l
 13272  000F7C  C051  FFDA         	movff	menu_next@menuRow+1,fsr2h
 13273  000F80  0E00               	movlw	0
 13274  000F82  6EDF               	movwf	indf2,c
 13275                           
 13276                           ;menu.c: 731: menu_navigate(*(menuShown),*(menuRow));
 13277  000F84  C050  FFD9         	movff	menu_next@menuRow,fsr2l
 13278  000F88  C051  FFDA         	movff	menu_next@menuRow+1,fsr2h
 13279  000F8C  50DF               	movf	indf2,w,c
 13280  000F8E  6E4C               	movwf	menu_navigate@rowColor,c
 13281  000F90  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 13282  000F94  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 13283  000F98  50DF               	movf	indf2,w,c
 13284  000F9A  EC23  F019         	call	_menu_navigate
 13285                           
 13286                           ;menu.c: 732: break;
 13287  000F9E  D089               	goto	i2l909
 13288  000FA0                     
 13289                           ;menu.c: 734: *(menuShown) = 44;
 13290  000FA0  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 13291  000FA4  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 13292  000FA8  0E2C               	movlw	44
 13293  000FAA  6EDF               	movwf	indf2,c
 13294                           
 13295                           ;menu.c: 735: *(menuRow) = 0;
 13296  000FAC  C050  FFD9         	movff	menu_next@menuRow,fsr2l
 13297  000FB0  C051  FFDA         	movff	menu_next@menuRow+1,fsr2h
 13298  000FB4  0E00               	movlw	0
 13299  000FB6  6EDF               	movwf	indf2,c
 13300                           
 13301                           ;menu.c: 736: menu_navigate(*(menuShown),*(menuRow));
 13302  000FB8  C050  FFD9         	movff	menu_next@menuRow,fsr2l
 13303  000FBC  C051  FFDA         	movff	menu_next@menuRow+1,fsr2h
 13304  000FC0  50DF               	movf	indf2,w,c
 13305  000FC2  6E4C               	movwf	menu_navigate@rowColor,c
 13306  000FC4  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 13307  000FC8  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 13308  000FCC  50DF               	movf	indf2,w,c
 13309  000FCE  EC23  F019         	call	_menu_navigate
 13310                           
 13311                           ;menu.c: 737: break;
 13312  000FD2  D06F               	goto	i2l909
 13313  000FD4                     
 13314                           ;menu.c: 739: *(menuShown) = 45;
 13315  000FD4  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 13316  000FD8  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 13317  000FDC  0E2D               	movlw	45
 13318  000FDE  6EDF               	movwf	indf2,c
 13319                           
 13320                           ;menu.c: 740: *(menuRow) = 0;
 13321  000FE0  C050  FFD9         	movff	menu_next@menuRow,fsr2l
 13322  000FE4  C051  FFDA         	movff	menu_next@menuRow+1,fsr2h
 13323  000FE8  0E00               	movlw	0
 13324  000FEA  6EDF               	movwf	indf2,c
 13325                           
 13326                           ;menu.c: 741: menu_navigate(*(menuShown),*(menuRow));
 13327  000FEC  C050  FFD9         	movff	menu_next@menuRow,fsr2l
 13328  000FF0  C051  FFDA         	movff	menu_next@menuRow+1,fsr2h
 13329  000FF4  50DF               	movf	indf2,w,c
 13330  000FF6  6E4C               	movwf	menu_navigate@rowColor,c
 13331  000FF8  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 13332  000FFC  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 13333  001000  50DF               	movf	indf2,w,c
 13334  001002  EC23  F019         	call	_menu_navigate
 13335                           
 13336                           ;menu.c: 742: break;
 13337  001006  D055               	goto	i2l909
 13338  001008                     
 13339                           ;menu.c: 744: menu_21(1);
 13340  001008  0E01               	movlw	1
 13341  00100A  ECCC  F021         	call	_menu_21
 13342                           
 13343                           ;menu.c: 745: *(menuShown) = 46;
 13344  00100E  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 13345  001012  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 13346  001016  0E2E               	movlw	46
 13347  001018  D008               	goto	L17
 13348  00101A                     
 13349                           ;menu.c: 749: menu_21(1);
 13350  00101A  0E01               	movlw	1
 13351  00101C  ECCC  F021         	call	_menu_21
 13352                           
 13353                           ;menu.c: 750: *(menuShown) = 47;
 13354  001020  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 13355  001024  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 13356  001028  0E2F               	movlw	47
 13357  00102A                     L17:
 13358  00102A  6EDF               	movwf	indf2,c
 13359  00102C  D74C               	goto	i2l9380
 13360  00102E  C050  FFD9         	movff	menu_next@menuRow,fsr2l
 13361  001032  C051  FFDA         	movff	menu_next@menuRow+1,fsr2h
 13362  001036  50DF               	movf	indf2,w,c
 13363                           
 13364                           ; Switch size 1, requested type "space"
 13365                           ; Number of cases is 7, Range of values is 1 to 7
 13366                           ; switch strategies available:
 13367                           ; Name         Instructions Cycles
 13368                           ; simple_byte           22    12 (average)
 13369                           ;	Chosen strategy is simple_byte
 13370  001038  0A01               	xorlw	1	; case 1
 13371  00103A  B4D8               	btfsc	status,2,c
 13372  00103C  D763               	goto	i2l935
 13373  00103E  0A03               	xorlw	3	; case 2
 13374  001040  B4D8               	btfsc	status,2,c
 13375  001042  D77A               	goto	i2l937
 13376  001044  0A01               	xorlw	1	; case 3
 13377  001046  B4D8               	btfsc	status,2,c
 13378  001048  D791               	goto	i2l938
 13379  00104A  0A07               	xorlw	7	; case 4
 13380  00104C  B4D8               	btfsc	status,2,c
 13381  00104E  D7A8               	goto	i2l939
 13382  001050  0A01               	xorlw	1	; case 5
 13383  001052  B4D8               	btfsc	status,2,c
 13384  001054  D7BF               	goto	i2l940
 13385  001056  0A03               	xorlw	3	; case 6
 13386  001058  B4D8               	btfsc	status,2,c
 13387  00105A  D7D6               	goto	i2l941
 13388  00105C  0A01               	xorlw	1	; case 7
 13389  00105E  B4D8               	btfsc	status,2,c
 13390  001060  D7DC               	goto	i2l942
 13391                           
 13392                           ;menu.c: 759: }
 13393                           
 13394                           ;menu.c: 758: break;
 13395                           
 13396                           ;menu.c: 756: case 43:
 13397                           
 13398                           ;menu.c: 755: break;
 13399  001062  D027               	goto	i2l909
 13400  001064  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 13401  001068  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 13402  00106C  50DF               	movf	indf2,w,c
 13403                           
 13404                           ; Switch size 1, requested type "space"
 13405                           ; Number of cases is 12, Range of values is 1 to 43
 13406                           ; switch strategies available:
 13407                           ; Name         Instructions Cycles
 13408                           ; simple_byte           37    19 (average)
 13409                           ;	Chosen strategy is simple_byte
 13410  00106E  0A01               	xorlw	1	; case 1
 13411  001070  B4D8               	btfsc	status,2,c
 13412  001072  D59D               	goto	i2l901
 13413  001074  0A03               	xorlw	3	; case 2
 13414  001076  B4D8               	btfsc	status,2,c
 13415  001078  D665               	goto	i2l911
 13416  00107A  0A01               	xorlw	1	; case 3
 13417  00107C  B4D8               	btfsc	status,2,c
 13418  00107E  D72F               	goto	i2l927
 13419  001080  0A07               	xorlw	7	; case 4
 13420  001082  B4D8               	btfsc	status,2,c
 13421  001084  D7D4               	goto	i2l934
 13422  001086  0A12               	xorlw	18	; case 22
 13423  001088  B4D8               	btfsc	status,2,c
 13424  00108A  D677               	goto	i2l920
 13425  00108C  0A01               	xorlw	1	; case 23
 13426  00108E  B4D8               	btfsc	status,2,c
 13427  001090  D691               	goto	i2l921
 13428  001092  0A0F               	xorlw	15	; case 24
 13429  001094  B4D8               	btfsc	status,2,c
 13430  001096  D69F               	goto	i2l922
 13431  001098  0A01               	xorlw	1	; case 25
 13432  00109A  B4D8               	btfsc	status,2,c
 13433  00109C  D6B9               	goto	i2l923
 13434  00109E  0A03               	xorlw	3	; case 26
 13435  0010A0  B4D8               	btfsc	status,2,c
 13436  0010A2  D6C7               	goto	i2l924
 13437  0010A4  0A01               	xorlw	1	; case 27
 13438  0010A6  B4D8               	btfsc	status,2,c
 13439  0010A8  D6D5               	goto	i2l925
 13440  0010AA  0A04               	xorlw	4	; case 31
 13441  0010AC  B4D8               	btfsc	status,2,c
 13442  0010AE  D726               	goto	i2l932
 13443  0010B0  0A34               	xorlw	52	; case 43
 13444  0010B2                     i2l909:
 13445                           
 13446                           ;menu.c: 760: m1 = 0;
 13447  0010B2  0E00               	movlw	0
 13448  0010B4  6E5A               	movwf	_m1,c
 13449                           
 13450                           ;menu.c: 761: for (char i=0;i<15;i++) {
 13451  0010B6  0E00               	movlw	0
 13452  0010B8  6E57               	movwf	menu_next@i,c
 13453  0010BA                     i2l9438:
 13454  0010BA  0E0E               	movlw	14
 13455  0010BC  6457               	cpfsgt	menu_next@i,c
 13456  0010BE  D001               	goto	i2l944
 13457  0010C0  D254               	goto	i2l873
 13458  0010C2                     i2l944:
 13459                           
 13460                           ;menu.c: 762: memBuff1[i] = ' ';
 13461  0010C2  5057               	movf	menu_next@i,w,c
 13462  0010C4  0D01               	mullw	1
 13463  0010C6  0EBC               	movlw	low _memBuff1
 13464  0010C8  24F3               	addwf	prodl,w,c
 13465  0010CA  6ED9               	movwf	fsr2l,c
 13466  0010CC  0E00               	movlw	high _memBuff1
 13467  0010CE  20F4               	addwfc	prodh,w,c
 13468  0010D0  6EDA               	movwf	fsr2h,c
 13469  0010D2  0E20               	movlw	32
 13470  0010D4  6EDF               	movwf	indf2,c
 13471  0010D6  2A57               	incf	menu_next@i,f,c
 13472  0010D8  D7F0               	goto	i2l9438
 13473  0010DA                     
 13474                           ;menu.c: 766: if (*(menuShown) > 1) {
 13475  0010DA  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 13476  0010DE  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 13477  0010E2  0E01               	movlw	1
 13478  0010E4  64DF               	cpfsgt	indf2,c
 13479  0010E6  D03B               	goto	i2l949
 13480                           
 13481                           ;menu.c: 767: if (*(menuShown) < 10) {
 13482  0010E8  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 13483  0010EC  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 13484  0010F0  0E0A               	movlw	10
 13485  0010F2  60DF               	cpfslt	indf2,c
 13486  0010F4  D012               	goto	i2l948
 13487                           
 13488                           ;menu.c: 768: *(menuRow) = *(menuShown) - 1;
 13489  0010F6  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 13490  0010FA  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 13491  0010FE  50DF               	movf	indf2,w,c
 13492  001100  6E55               	movwf	??_menu_next& (0+255),c
 13493  001102  0455               	decf	??_menu_next,w,c
 13494  001104  C050  FFD9         	movff	menu_next@menuRow,fsr2l
 13495  001108  C051  FFDA         	movff	menu_next@menuRow+1,fsr2h
 13496  00110C  6EDF               	movwf	indf2,c
 13497                           
 13498                           ;menu.c: 769: *(menuShown) = 1;
 13499  00110E  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 13500  001112  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 13501  001116  0E01               	movlw	1
 13502  001118  D021               	goto	L15
 13503  00111A                     i2l948:
 13504                           
 13505                           ;menu.c: 771: aux1 = *(menuShown);
 13506  00111A  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 13507  00111E  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 13508  001122  50DF               	movf	indf2,w,c
 13509  001124  6E56               	movwf	menu_next@aux1,c
 13510                           
 13511                           ;menu.c: 772: (*(menuShown)) /= 10;
 13512  001126  0E0A               	movlw	10
 13513  001128  6E01               	movwf	___lbdiv@divisor,c
 13514  00112A  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 13515  00112E  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 13516  001132  50DF               	movf	indf2,w,c
 13517  001134  ECD6  F024         	call	___lbdiv
 13518  001138  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 13519  00113C  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 13520  001140  6EDF               	movwf	indf2,c
 13521                           
 13522                           ;menu.c: 773: *(menuRow) = aux1 - (*(menuShown)) * 10;
 13523  001142  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 13524  001146  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 13525  00114A  50DF               	movf	indf2,w,c
 13526  00114C  0D0A               	mullw	10
 13527  00114E  50F3               	movf	prodl,w,c
 13528  001150  0800               	sublw	0
 13529  001152  2456               	addwf	menu_next@aux1,w,c
 13530  001154  C050  FFD9         	movff	menu_next@menuRow,fsr2l
 13531  001158  C051  FFDA         	movff	menu_next@menuRow+1,fsr2h
 13532  00115C                     L15:
 13533  00115C  6EDF               	movwf	indf2,c
 13534  00115E                     i2l949:
 13535                           
 13536                           ;menu.c: 774: }
 13537                           ;menu.c: 775: }
 13538                           ;menu.c: 776: menu_navigate(*(menuShown),*(menuRow));
 13539  00115E  C050  FFD9         	movff	menu_next@menuRow,fsr2l
 13540  001162  C051  FFDA         	movff	menu_next@menuRow+1,fsr2h
 13541  001166  50DF               	movf	indf2,w,c
 13542  001168  6E4C               	movwf	menu_navigate@rowColor,c
 13543  00116A  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 13544  00116E  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 13545  001172  50DF               	movf	indf2,w,c
 13546  001174  EC23  F019         	call	_menu_navigate
 13547                           
 13548                           ;menu.c: 777: m1 = 0;
 13549  001178  0E00               	movlw	0
 13550  00117A  6E5A               	movwf	_m1,c
 13551                           
 13552                           ;menu.c: 778: for (char i=0;i<15;i++) {
 13553  00117C  0E00               	movlw	0
 13554  00117E  6E58               	movwf	menu_next@i_1375,c
 13555  001180                     i2l9468:
 13556  001180  0E0E               	movlw	14
 13557  001182  6458               	cpfsgt	menu_next@i_1375,c
 13558  001184  D001               	goto	i2l950
 13559  001186  D1F1               	goto	i2l873
 13560  001188                     i2l950:
 13561                           
 13562                           ;menu.c: 779: memBuff1[i] = ' ';
 13563  001188  5058               	movf	menu_next@i_1375,w,c
 13564  00118A  0D01               	mullw	1
 13565  00118C  0EBC               	movlw	low _memBuff1
 13566  00118E  24F3               	addwf	prodl,w,c
 13567  001190  6ED9               	movwf	fsr2l,c
 13568  001192  0E00               	movlw	high _memBuff1
 13569  001194  20F4               	addwfc	prodh,w,c
 13570  001196  6EDA               	movwf	fsr2h,c
 13571  001198  0E20               	movlw	32
 13572  00119A  6EDF               	movwf	indf2,c
 13573  00119C  2A58               	incf	menu_next@i_1375,f,c
 13574  00119E  D7F0               	goto	i2l9468
 13575  0011A0                     
 13576                           ;menu.c: 783: if (*(menuShown) == 0) {
 13577  0011A0  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 13578  0011A4  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 13579  0011A8  50DF               	movf	indf2,w,c
 13580  0011AA  A4D8               	btfss	status,2,c
 13581  0011AC  D1DE               	goto	i2l873
 13582                           
 13583                           ;menu.c: 784: lcd_set_background(0xFFFF);
 13584  0011AE  0EFF               	movlw	255
 13585  0011B0  6E0C               	movwf	i2lcd_set_background@color+1,c
 13586  0011B2  680B               	setf	i2lcd_set_background@color,c
 13587  0011B4  EC95  F021         	call	i2_lcd_set_background	;wreg free
 13588                           
 13589                           ;menu.c: 785: *(menuShown) = 1;
 13590  0011B8  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 13591  0011BC  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 13592  0011C0  0E01               	movlw	1
 13593  0011C2  6EDF               	movwf	indf2,c
 13594                           
 13595                           ;menu.c: 786: *(menuRow) = 1;
 13596  0011C4  C050  FFD9         	movff	menu_next@menuRow,fsr2l
 13597  0011C8  C051  FFDA         	movff	menu_next@menuRow+1,fsr2h
 13598  0011CC  0E01               	movlw	1
 13599  0011CE  6EDF               	movwf	indf2,c
 13600                           
 13601                           ;menu.c: 787: menu_navigate(*(menuShown),*(menuRow));
 13602  0011D0  C050  FFD9         	movff	menu_next@menuRow,fsr2l
 13603  0011D4  C051  FFDA         	movff	menu_next@menuRow+1,fsr2h
 13604  0011D8  50DF               	movf	indf2,w,c
 13605  0011DA  6E4C               	movwf	menu_navigate@rowColor,c
 13606  0011DC  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 13607  0011E0  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 13608  0011E4  50DF               	movf	indf2,w,c
 13609  0011E6  EC23  F019         	call	_menu_navigate
 13610                           
 13611                           ;menu.c: 790: }
 13612                           ;menu.c: 792: break;
 13613                           
 13614                           ;menu.c: 788: } else {
 13615  0011EA  D1BF               	goto	i2l873
 13616  0011EC                     
 13617                           ;menu.c: 794: if (*(menuShown) == 41) {
 13618  0011EC  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 13619  0011F0  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 13620  0011F4  0E29               	movlw	41
 13621  0011F6  18DE               	xorwf	postinc2,w,c
 13622  0011F8  A4D8               	btfss	status,2,c
 13623  0011FA  D014               	goto	i2l956
 13624                           
 13625                           ;menu.c: 795: memBuff1[m1] = '.';
 13626  0011FC  505A               	movf	_m1,w,c
 13627  0011FE  0D01               	mullw	1
 13628  001200  0EBC               	movlw	low _memBuff1
 13629  001202  24F3               	addwf	prodl,w,c
 13630  001204  6ED9               	movwf	fsr2l,c
 13631  001206  0E00               	movlw	high _memBuff1
 13632  001208  20F4               	addwfc	prodh,w,c
 13633  00120A  6EDA               	movwf	fsr2h,c
 13634  00120C  0E2E               	movlw	46
 13635  00120E  6EDF               	movwf	indf2,c
 13636                           
 13637                           ;menu.c: 796: m1++;
 13638  001210  2A5A               	incf	_m1,f,c
 13639                           
 13640                           ;menu.c: 797: lcd_text(2,memBuff1,1);
 13641  001212  0EBC               	movlw	low _memBuff1
 13642  001214  6E18               	movwf	i2lcd_text@msjPtr,c
 13643  001216  0E00               	movlw	high _memBuff1
 13644  001218  6E19               	movwf	i2lcd_text@msjPtr+1,c
 13645  00121A  0E01               	movlw	1
 13646  00121C  6E1A               	movwf	i2lcd_text@color,c
 13647  00121E  0E02               	movlw	2
 13648  001220  ECE6  F00C         	call	i2_lcd_text
 13649  001224                     i2l956:
 13650                           
 13651                           ;menu.c: 798: }
 13652                           ;menu.c: 799: if (*(menuShown) == 42) {
 13653  001224  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 13654  001228  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 13655  00122C  0E2A               	movlw	42
 13656  00122E  18DE               	xorwf	postinc2,w,c
 13657  001230  A4D8               	btfss	status,2,c
 13658  001232  D014               	goto	i2l957
 13659                           
 13660                           ;menu.c: 800: memBuff1[m1] = '.';
 13661  001234  505A               	movf	_m1,w,c
 13662  001236  0D01               	mullw	1
 13663  001238  0EBC               	movlw	low _memBuff1
 13664  00123A  24F3               	addwf	prodl,w,c
 13665  00123C  6ED9               	movwf	fsr2l,c
 13666  00123E  0E00               	movlw	high _memBuff1
 13667  001240  20F4               	addwfc	prodh,w,c
 13668  001242  6EDA               	movwf	fsr2h,c
 13669  001244  0E2E               	movlw	46
 13670  001246  6EDF               	movwf	indf2,c
 13671                           
 13672                           ;menu.c: 801: m1++;
 13673  001248  2A5A               	incf	_m1,f,c
 13674                           
 13675                           ;menu.c: 802: lcd_text(2,memBuff1,1);
 13676  00124A  0EBC               	movlw	low _memBuff1
 13677  00124C  6E18               	movwf	i2lcd_text@msjPtr,c
 13678  00124E  0E00               	movlw	high _memBuff1
 13679  001250  6E19               	movwf	i2lcd_text@msjPtr+1,c
 13680  001252  0E01               	movlw	1
 13681  001254  6E1A               	movwf	i2lcd_text@color,c
 13682  001256  0E02               	movlw	2
 13683  001258  ECE6  F00C         	call	i2_lcd_text
 13684  00125C                     i2l957:
 13685                           
 13686                           ;menu.c: 803: }
 13687                           ;menu.c: 804: if (*(menuShown) == 43) {
 13688  00125C  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 13689  001260  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 13690  001264  0E2B               	movlw	43
 13691  001266  18DE               	xorwf	postinc2,w,c
 13692  001268  A4D8               	btfss	status,2,c
 13693  00126A  D017               	goto	i2l958
 13694                           
 13695                           ;menu.c: 805: if (m1 < 11) {
 13696  00126C  0E0B               	movlw	11
 13697  00126E  605A               	cpfslt	_m1,c
 13698  001270  D001               	goto	i2l959
 13699                           
 13700                           ;menu.c: 806: m1++;
 13701  001272  2A5A               	incf	_m1,f,c
 13702  001274                     i2l959:
 13703                           
 13704                           ;menu.c: 807: }
 13705                           ;menu.c: 808: memBuff1[m1] = '0';
 13706  001274  505A               	movf	_m1,w,c
 13707  001276  0D01               	mullw	1
 13708  001278  0EBC               	movlw	low _memBuff1
 13709  00127A  24F3               	addwf	prodl,w,c
 13710  00127C  6ED9               	movwf	fsr2l,c
 13711  00127E  0E00               	movlw	high _memBuff1
 13712  001280  20F4               	addwfc	prodh,w,c
 13713  001282  6EDA               	movwf	fsr2h,c
 13714  001284  0E30               	movlw	48
 13715  001286  6EDF               	movwf	indf2,c
 13716                           
 13717                           ;menu.c: 809: lcd_text(2,memBuff1,1);
 13718  001288  0EBC               	movlw	low _memBuff1
 13719  00128A  6E18               	movwf	i2lcd_text@msjPtr,c
 13720  00128C  0E00               	movlw	high _memBuff1
 13721  00128E  6E19               	movwf	i2lcd_text@msjPtr+1,c
 13722  001290  0E01               	movlw	1
 13723  001292  6E1A               	movwf	i2lcd_text@color,c
 13724  001294  0E02               	movlw	2
 13725  001296  ECE6  F00C         	call	i2_lcd_text
 13726  00129A                     i2l958:
 13727                           
 13728                           ;menu.c: 810: }
 13729                           ;menu.c: 811: if (*(menuShown) == 44) {
 13730  00129A  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 13731  00129E  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 13732  0012A2  0E2C               	movlw	44
 13733  0012A4  18DE               	xorwf	postinc2,w,c
 13734  0012A6  A4D8               	btfss	status,2,c
 13735  0012A8  D160               	goto	i2l873
 13736                           
 13737                           ;menu.c: 812: memBuff1[m1] = '.';
 13738  0012AA  505A               	movf	_m1,w,c
 13739  0012AC  0D01               	mullw	1
 13740  0012AE  0EBC               	movlw	low _memBuff1
 13741  0012B0  24F3               	addwf	prodl,w,c
 13742  0012B2  6ED9               	movwf	fsr2l,c
 13743  0012B4  0E00               	movlw	high _memBuff1
 13744  0012B6  20F4               	addwfc	prodh,w,c
 13745  0012B8  6EDA               	movwf	fsr2h,c
 13746  0012BA  0E2E               	movlw	46
 13747  0012BC  6EDF               	movwf	indf2,c
 13748                           
 13749                           ;menu.c: 813: m1++;
 13750  0012BE  2A5A               	incf	_m1,f,c
 13751                           
 13752                           ;menu.c: 814: lcd_text(2,memBuff1,1);
 13753  0012C0  0EBC               	movlw	low _memBuff1
 13754  0012C2  6E18               	movwf	i2lcd_text@msjPtr,c
 13755  0012C4  0E00               	movlw	high _memBuff1
 13756  0012C6  6E19               	movwf	i2lcd_text@msjPtr+1,c
 13757  0012C8  0E01               	movlw	1
 13758  0012CA  6E1A               	movwf	i2lcd_text@color,c
 13759  0012CC  0E02               	movlw	2
 13760  0012CE  ECE6  F00C         	call	i2_lcd_text
 13761                           
 13762                           ;menu.c: 815: }
 13763                           ;menu.c: 816: break;
 13764  0012D2  D14B               	goto	i2l873
 13765  0012D4                     
 13766                           ;menu.c: 818: if (*(menuShown) == 23) {
 13767  0012D4  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 13768  0012D8  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 13769  0012DC  0E17               	movlw	23
 13770  0012DE  18DE               	xorwf	postinc2,w,c
 13771  0012E0  A4D8               	btfss	status,2,c
 13772  0012E2  D009               	goto	i2l962
 13773                           
 13774                           ;menu.c: 819: lcd_text(2,menuText,0);
 13775  0012E4  C053  F018         	movff	menu_next@menuText,i2lcd_text@msjPtr
 13776  0012E8  C054  F019         	movff	menu_next@menuText+1,i2lcd_text@msjPtr+1
 13777  0012EC  0E00               	movlw	0
 13778  0012EE  6E1A               	movwf	i2lcd_text@color,c
 13779  0012F0  0E02               	movlw	2
 13780  0012F2  ECE6  F00C         	call	i2_lcd_text
 13781  0012F6                     i2l962:
 13782                           
 13783                           ;menu.c: 820: }
 13784                           ;menu.c: 821: if (*(menuShown) == 25) {
 13785  0012F6  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 13786  0012FA  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 13787  0012FE  0E19               	movlw	25
 13788  001300  18DE               	xorwf	postinc2,w,c
 13789  001302  A4D8               	btfss	status,2,c
 13790  001304  D009               	goto	i2l963
 13791                           
 13792                           ;menu.c: 822: lcd_text(2,menuText,0);
 13793  001306  C053  F018         	movff	menu_next@menuText,i2lcd_text@msjPtr
 13794  00130A  C054  F019         	movff	menu_next@menuText+1,i2lcd_text@msjPtr+1
 13795  00130E  0E00               	movlw	0
 13796  001310  6E1A               	movwf	i2lcd_text@color,c
 13797  001312  0E02               	movlw	2
 13798  001314  ECE6  F00C         	call	i2_lcd_text
 13799  001318                     i2l963:
 13800                           
 13801                           ;menu.c: 823: }
 13802                           ;menu.c: 824: if (*(menuShown) == 26) {
 13803  001318  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 13804  00131C  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 13805  001320  0E1A               	movlw	26
 13806  001322  18DE               	xorwf	postinc2,w,c
 13807  001324  A4D8               	btfss	status,2,c
 13808  001326  D009               	goto	i2l964
 13809                           
 13810                           ;menu.c: 825: lcd_text(2,menuText,0);
 13811  001328  C053  F018         	movff	menu_next@menuText,i2lcd_text@msjPtr
 13812  00132C  C054  F019         	movff	menu_next@menuText+1,i2lcd_text@msjPtr+1
 13813  001330  0E00               	movlw	0
 13814  001332  6E1A               	movwf	i2lcd_text@color,c
 13815  001334  0E02               	movlw	2
 13816  001336  ECE6  F00C         	call	i2_lcd_text
 13817  00133A                     i2l964:
 13818                           
 13819                           ;menu.c: 826: }
 13820                           ;menu.c: 827: if (*(menuShown) == 27) {
 13821  00133A  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 13822  00133E  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 13823  001342  0E1B               	movlw	27
 13824  001344  18DE               	xorwf	postinc2,w,c
 13825  001346  A4D8               	btfss	status,2,c
 13826  001348  D009               	goto	i2l965
 13827                           
 13828                           ;menu.c: 828: lcd_text(2,menuText,0);
 13829  00134A  C053  F018         	movff	menu_next@menuText,i2lcd_text@msjPtr
 13830  00134E  C054  F019         	movff	menu_next@menuText+1,i2lcd_text@msjPtr+1
 13831  001352  0E00               	movlw	0
 13832  001354  6E1A               	movwf	i2lcd_text@color,c
 13833  001356  0E02               	movlw	2
 13834  001358  ECE6  F00C         	call	i2_lcd_text
 13835  00135C                     i2l965:
 13836                           
 13837                           ;menu.c: 829: }
 13838                           ;menu.c: 830: if (*(menuShown) == 41) {
 13839  00135C  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 13840  001360  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 13841  001364  0E29               	movlw	41
 13842  001366  18DE               	xorwf	postinc2,w,c
 13843  001368  A4D8               	btfss	status,2,c
 13844  00136A  D014               	goto	i2l966
 13845                           
 13846                           ;menu.c: 831: memBuff1[m1] = command;
 13847  00136C  505A               	movf	_m1,w,c
 13848  00136E  0D01               	mullw	1
 13849  001370  0EBC               	movlw	low _memBuff1
 13850  001372  24F3               	addwf	prodl,w,c
 13851  001374  6ED9               	movwf	fsr2l,c
 13852  001376  0E00               	movlw	high _memBuff1
 13853  001378  20F4               	addwfc	prodh,w,c
 13854  00137A  6EDA               	movwf	fsr2h,c
 13855  00137C  C052  FFDF         	movff	menu_next@command,indf2
 13856                           
 13857                           ;menu.c: 832: m1++;
 13858  001380  2A5A               	incf	_m1,f,c
 13859                           
 13860                           ;menu.c: 833: lcd_text(2,memBuff1,1);
 13861  001382  0EBC               	movlw	low _memBuff1
 13862  001384  6E18               	movwf	i2lcd_text@msjPtr,c
 13863  001386  0E00               	movlw	high _memBuff1
 13864  001388  6E19               	movwf	i2lcd_text@msjPtr+1,c
 13865  00138A  0E01               	movlw	1
 13866  00138C  6E1A               	movwf	i2lcd_text@color,c
 13867  00138E  0E02               	movlw	2
 13868  001390  ECE6  F00C         	call	i2_lcd_text
 13869  001394                     i2l966:
 13870                           
 13871                           ;menu.c: 834: }
 13872                           ;menu.c: 835: if (*(menuShown) == 42) {
 13873  001394  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 13874  001398  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 13875  00139C  0E2A               	movlw	42
 13876  00139E  18DE               	xorwf	postinc2,w,c
 13877  0013A0  A4D8               	btfss	status,2,c
 13878  0013A2  D014               	goto	i2l967
 13879                           
 13880                           ;menu.c: 836: memBuff1[m1] = command;
 13881  0013A4  505A               	movf	_m1,w,c
 13882  0013A6  0D01               	mullw	1
 13883  0013A8  0EBC               	movlw	low _memBuff1
 13884  0013AA  24F3               	addwf	prodl,w,c
 13885  0013AC  6ED9               	movwf	fsr2l,c
 13886  0013AE  0E00               	movlw	high _memBuff1
 13887  0013B0  20F4               	addwfc	prodh,w,c
 13888  0013B2  6EDA               	movwf	fsr2h,c
 13889  0013B4  C052  FFDF         	movff	menu_next@command,indf2
 13890                           
 13891                           ;menu.c: 837: m1++;
 13892  0013B8  2A5A               	incf	_m1,f,c
 13893                           
 13894                           ;menu.c: 838: lcd_text(2,memBuff1,1);
 13895  0013BA  0EBC               	movlw	low _memBuff1
 13896  0013BC  6E18               	movwf	i2lcd_text@msjPtr,c
 13897  0013BE  0E00               	movlw	high _memBuff1
 13898  0013C0  6E19               	movwf	i2lcd_text@msjPtr+1,c
 13899  0013C2  0E01               	movlw	1
 13900  0013C4  6E1A               	movwf	i2lcd_text@color,c
 13901  0013C6  0E02               	movlw	2
 13902  0013C8  ECE6  F00C         	call	i2_lcd_text
 13903  0013CC                     i2l967:
 13904                           
 13905                           ;menu.c: 839: }
 13906                           ;menu.c: 840: if (*(menuShown) == 43 && command == '1') {
 13907  0013CC  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 13908  0013D0  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 13909  0013D4  0E2B               	movlw	43
 13910  0013D6  18DE               	xorwf	postinc2,w,c
 13911  0013D8  A4D8               	btfss	status,2,c
 13912  0013DA  D078               	goto	i2l968
 13913  0013DC  0E31               	movlw	49
 13914  0013DE  1852               	xorwf	menu_next@command,w,c
 13915  0013E0  A4D8               	btfss	status,2,c
 13916  0013E2  D074               	goto	i2l968
 13917                           
 13918                           ;menu.c: 841: if (memBuff1[m1] > 47 && memBuff1[m1] < 58) {
 13919  0013E4  505A               	movf	_m1,w,c
 13920  0013E6  0D01               	mullw	1
 13921  0013E8  0EBC               	movlw	low _memBuff1
 13922  0013EA  24F3               	addwf	prodl,w,c
 13923  0013EC  6ED9               	movwf	fsr2l,c
 13924  0013EE  0E00               	movlw	high _memBuff1
 13925  0013F0  20F4               	addwfc	prodh,w,c
 13926  0013F2  6EDA               	movwf	fsr2h,c
 13927  0013F4  0E2F               	movlw	47
 13928  0013F6  64DF               	cpfsgt	indf2,c
 13929  0013F8  D014               	goto	i2l969
 13930  0013FA  505A               	movf	_m1,w,c
 13931  0013FC  0D01               	mullw	1
 13932  0013FE  0EBC               	movlw	low _memBuff1
 13933  001400  24F3               	addwf	prodl,w,c
 13934  001402  6ED9               	movwf	fsr2l,c
 13935  001404  0E00               	movlw	high _memBuff1
 13936  001406  20F4               	addwfc	prodh,w,c
 13937  001408  6EDA               	movwf	fsr2h,c
 13938  00140A  0E3A               	movlw	58
 13939  00140C  60DF               	cpfslt	indf2,c
 13940  00140E  D009               	goto	i2l969
 13941                           
 13942                           ;menu.c: 842: memBuff1[m1]++;
 13943  001410  505A               	movf	_m1,w,c
 13944  001412  0D01               	mullw	1
 13945  001414  0EBC               	movlw	low _memBuff1
 13946  001416  24F3               	addwf	prodl,w,c
 13947  001418  6ED9               	movwf	fsr2l,c
 13948  00141A  0E00               	movlw	high _memBuff1
 13949  00141C  20F4               	addwfc	prodh,w,c
 13950  00141E  6EDA               	movwf	fsr2h,c
 13951  001420  2ADF               	incf	indf2,f,c
 13952  001422                     i2l969:
 13953                           
 13954                           ;menu.c: 843: }
 13955                           ;menu.c: 844: if (memBuff1[m1] == 32 || memBuff1[m1] == 'F') {
 13956  001422  505A               	movf	_m1,w,c
 13957  001424  0D01               	mullw	1
 13958  001426  0EBC               	movlw	low _memBuff1
 13959  001428  24F3               	addwf	prodl,w,c
 13960  00142A  6ED9               	movwf	fsr2l,c
 13961  00142C  0E00               	movlw	high _memBuff1
 13962  00142E  20F4               	addwfc	prodh,w,c
 13963  001430  6EDA               	movwf	fsr2h,c
 13964  001432  0E20               	movlw	32
 13965  001434  18DE               	xorwf	postinc2,w,c
 13966  001436  B4D8               	btfsc	status,2,c
 13967  001438  D00C               	goto	i2u1065_40
 13968  00143A  505A               	movf	_m1,w,c
 13969  00143C  0D01               	mullw	1
 13970  00143E  0EBC               	movlw	low _memBuff1
 13971  001440  24F3               	addwf	prodl,w,c
 13972  001442  6ED9               	movwf	fsr2l,c
 13973  001444  0E00               	movlw	high _memBuff1
 13974  001446  20F4               	addwfc	prodh,w,c
 13975  001448  6EDA               	movwf	fsr2h,c
 13976  00144A  0E46               	movlw	70
 13977  00144C  18DE               	xorwf	postinc2,w,c
 13978  00144E  A4D8               	btfss	status,2,c
 13979  001450  D00A               	goto	i2l970
 13980  001452                     i2u1065_40:
 13981                           
 13982                           ;menu.c: 845: memBuff1[m1] = '0';
 13983  001452  505A               	movf	_m1,w,c
 13984  001454  0D01               	mullw	1
 13985  001456  0EBC               	movlw	low _memBuff1
 13986  001458  24F3               	addwf	prodl,w,c
 13987  00145A  6ED9               	movwf	fsr2l,c
 13988  00145C  0E00               	movlw	high _memBuff1
 13989  00145E  20F4               	addwfc	prodh,w,c
 13990  001460  6EDA               	movwf	fsr2h,c
 13991  001462  0E30               	movlw	48
 13992  001464  6EDF               	movwf	indf2,c
 13993  001466                     i2l970:
 13994                           
 13995                           ;menu.c: 846: }
 13996                           ;menu.c: 847: if (memBuff1[m1] > 64) {
 13997  001466  505A               	movf	_m1,w,c
 13998  001468  0D01               	mullw	1
 13999  00146A  0EBC               	movlw	low _memBuff1
 14000  00146C  24F3               	addwf	prodl,w,c
 14001  00146E  6ED9               	movwf	fsr2l,c
 14002  001470  0E00               	movlw	high _memBuff1
 14003  001472  20F4               	addwfc	prodh,w,c
 14004  001474  6EDA               	movwf	fsr2h,c
 14005  001476  0E40               	movlw	64
 14006  001478  64DF               	cpfsgt	indf2,c
 14007  00147A  D009               	goto	i2l973
 14008                           
 14009                           ;menu.c: 848: memBuff1[m1]++;
 14010  00147C  505A               	movf	_m1,w,c
 14011  00147E  0D01               	mullw	1
 14012  001480  0EBC               	movlw	low _memBuff1
 14013  001482  24F3               	addwf	prodl,w,c
 14014  001484  6ED9               	movwf	fsr2l,c
 14015  001486  0E00               	movlw	high _memBuff1
 14016  001488  20F4               	addwfc	prodh,w,c
 14017  00148A  6EDA               	movwf	fsr2h,c
 14018  00148C  2ADF               	incf	indf2,f,c
 14019  00148E                     i2l973:
 14020                           
 14021                           ;menu.c: 849: }
 14022                           ;menu.c: 850: if (memBuff1[m1] == 58) {
 14023  00148E  505A               	movf	_m1,w,c
 14024  001490  0D01               	mullw	1
 14025  001492  0EBC               	movlw	low _memBuff1
 14026  001494  24F3               	addwf	prodl,w,c
 14027  001496  6ED9               	movwf	fsr2l,c
 14028  001498  0E00               	movlw	high _memBuff1
 14029  00149A  20F4               	addwfc	prodh,w,c
 14030  00149C  6EDA               	movwf	fsr2h,c
 14031  00149E  0E3A               	movlw	58
 14032  0014A0  18DE               	xorwf	postinc2,w,c
 14033  0014A2  A4D8               	btfss	status,2,c
 14034  0014A4  D00A               	goto	i2l974
 14035                           
 14036                           ;menu.c: 851: memBuff1[m1] = 'A';
 14037  0014A6  505A               	movf	_m1,w,c
 14038  0014A8  0D01               	mullw	1
 14039  0014AA  0EBC               	movlw	low _memBuff1
 14040  0014AC  24F3               	addwf	prodl,w,c
 14041  0014AE  6ED9               	movwf	fsr2l,c
 14042  0014B0  0E00               	movlw	high _memBuff1
 14043  0014B2  20F4               	addwfc	prodh,w,c
 14044  0014B4  6EDA               	movwf	fsr2h,c
 14045  0014B6  0E41               	movlw	65
 14046  0014B8  6EDF               	movwf	indf2,c
 14047  0014BA                     i2l974:
 14048                           
 14049                           ;menu.c: 852: }
 14050                           ;menu.c: 853: lcd_text(2,memBuff1,1);
 14051  0014BA  0EBC               	movlw	low _memBuff1
 14052  0014BC  6E18               	movwf	i2lcd_text@msjPtr,c
 14053  0014BE  0E00               	movlw	high _memBuff1
 14054  0014C0  6E19               	movwf	i2lcd_text@msjPtr+1,c
 14055  0014C2  0E01               	movlw	1
 14056  0014C4  6E1A               	movwf	i2lcd_text@color,c
 14057  0014C6  0E02               	movlw	2
 14058  0014C8  ECE6  F00C         	call	i2_lcd_text
 14059  0014CC                     i2l968:
 14060                           
 14061                           ;menu.c: 854: }
 14062                           ;menu.c: 855: if (*(menuShown) == 44) {
 14063  0014CC  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 14064  0014D0  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 14065  0014D4  0E2C               	movlw	44
 14066  0014D6  18DE               	xorwf	postinc2,w,c
 14067  0014D8  A4D8               	btfss	status,2,c
 14068  0014DA  D014               	goto	i2l975
 14069                           
 14070                           ;menu.c: 856: memBuff1[m1] = command;
 14071  0014DC  505A               	movf	_m1,w,c
 14072  0014DE  0D01               	mullw	1
 14073  0014E0  0EBC               	movlw	low _memBuff1
 14074  0014E2  24F3               	addwf	prodl,w,c
 14075  0014E4  6ED9               	movwf	fsr2l,c
 14076  0014E6  0E00               	movlw	high _memBuff1
 14077  0014E8  20F4               	addwfc	prodh,w,c
 14078  0014EA  6EDA               	movwf	fsr2h,c
 14079  0014EC  C052  FFDF         	movff	menu_next@command,indf2
 14080                           
 14081                           ;menu.c: 857: m1++;
 14082  0014F0  2A5A               	incf	_m1,f,c
 14083                           
 14084                           ;menu.c: 858: lcd_text(2,memBuff1,1);
 14085  0014F2  0EBC               	movlw	low _memBuff1
 14086  0014F4  6E18               	movwf	i2lcd_text@msjPtr,c
 14087  0014F6  0E00               	movlw	high _memBuff1
 14088  0014F8  6E19               	movwf	i2lcd_text@msjPtr+1,c
 14089  0014FA  0E01               	movlw	1
 14090  0014FC  6E1A               	movwf	i2lcd_text@color,c
 14091  0014FE  0E02               	movlw	2
 14092  001500  ECE6  F00C         	call	i2_lcd_text
 14093  001504                     i2l975:
 14094                           
 14095                           ;menu.c: 859: }
 14096                           ;menu.c: 860: if (*(menuShown) == 45) {
 14097  001504  C04E  FFD9         	movff	menu_next@menuShown,fsr2l
 14098  001508  C04F  FFDA         	movff	menu_next@menuShown+1,fsr2h
 14099  00150C  0E2D               	movlw	45
 14100  00150E  18DE               	xorwf	postinc2,w,c
 14101  001510  A4D8               	btfss	status,2,c
 14102  001512  D02B               	goto	i2l873
 14103                           
 14104                           ;menu.c: 861: memBuff1[m1] = command;
 14105  001514  505A               	movf	_m1,w,c
 14106  001516  0D01               	mullw	1
 14107  001518  0EBC               	movlw	low _memBuff1
 14108  00151A  24F3               	addwf	prodl,w,c
 14109  00151C  6ED9               	movwf	fsr2l,c
 14110  00151E  0E00               	movlw	high _memBuff1
 14111  001520  20F4               	addwfc	prodh,w,c
 14112  001522  6EDA               	movwf	fsr2h,c
 14113  001524  C052  FFDF         	movff	menu_next@command,indf2
 14114                           
 14115                           ;menu.c: 862: m1++;
 14116  001528  2A5A               	incf	_m1,f,c
 14117                           
 14118                           ;menu.c: 863: lcd_text(2,memBuff1,1);
 14119  00152A  0EBC               	movlw	low _memBuff1
 14120  00152C  6E18               	movwf	i2lcd_text@msjPtr,c
 14121  00152E  0E00               	movlw	high _memBuff1
 14122  001530  6E19               	movwf	i2lcd_text@msjPtr+1,c
 14123  001532  0E01               	movlw	1
 14124  001534  6E1A               	movwf	i2lcd_text@color,c
 14125  001536  0E02               	movlw	2
 14126  001538  ECE6  F00C         	call	i2_lcd_text
 14127                           
 14128                           ;menu.c: 866: }
 14129                           
 14130                           ;menu.c: 864: }
 14131                           ;menu.c: 865: break;
 14132  00153C  D016               	goto	i2l873
 14133  00153E                     i2l867:
 14134  00153E  5052               	movf	menu_next@command,w,c
 14135                           
 14136                           ; Switch size 1, requested type "space"
 14137                           ; Number of cases is 6, Range of values is 35 to 68
 14138                           ; switch strategies available:
 14139                           ; Name         Instructions Cycles
 14140                           ; simple_byte           19    10 (average)
 14141                           ;	Chosen strategy is simple_byte
 14142  001540  0A23               	xorlw	35	; case 35
 14143  001542  B4D8               	btfsc	status,2,c
 14144  001544  D58F               	goto	i2l899
 14145  001546  0A09               	xorlw	9	; case 42
 14146  001548  B4D8               	btfsc	status,2,c
 14147  00154A  D5C7               	goto	i2l946
 14148  00154C  0A6B               	xorlw	107	; case 65
 14149  00154E  B4D8               	btfsc	status,2,c
 14150  001550  EF9E  F004         	goto	i2l868
 14151  001554  0A03               	xorlw	3	; case 66
 14152  001556  B4D8               	btfsc	status,2,c
 14153  001558  EF0E  F005         	goto	i2l875
 14154  00155C  0A01               	xorlw	1	; case 67
 14155  00155E  B4D8               	btfsc	status,2,c
 14156  001560  D61F               	goto	i2l952
 14157  001562  0A07               	xorlw	7	; case 68
 14158  001564  B4D8               	btfsc	status,2,c
 14159  001566  D642               	goto	i2l955
 14160  001568  D6B5               	goto	i2l961
 14161  00156A                     i2l873:
 14162                           
 14163                           ;menu.c: 868: return rta;
 14164  00156A  5059               	movf	menu_next@rta,w,c
 14165  00156C  0012               	return	
 14166  00156E                     __end_of_menu_next:
 14167                           	opt stack 0
 14168                           pclatu	equ	0xFFB
 14169                           pclath	equ	0xFFA
 14170                           tblptru	equ	0xFF8
 14171                           tblptrh	equ	0xFF7
 14172                           tblptrl	equ	0xFF6
 14173                           tablat	equ	0xFF5
 14174                           prodh	equ	0xFF4
 14175                           prodl	equ	0xFF3
 14176                           intcon	equ	0xFF2
 14177                           postinc0	equ	0xFEE
 14178                           fsr0h	equ	0xFEA
 14179                           fsr0l	equ	0xFE9
 14180                           wreg	equ	0xFE8
 14181                           indf1	equ	0xFE7
 14182                           postdec1	equ	0xFE5
 14183                           fsr1h	equ	0xFE2
 14184                           fsr1l	equ	0xFE1
 14185                           indf2	equ	0xFDF
 14186                           postinc2	equ	0xFDE
 14187                           postdec2	equ	0xFDD
 14188                           fsr2h	equ	0xFDA
 14189                           fsr2l	equ	0xFD9
 14190                           status	equ	0xFD8
 14191                           
 14192 ;; *************** function i2_mem_write *****************
 14193 ;; Defined at:
 14194 ;;		line 5 in file "eeprom.c"
 14195 ;; Parameters:    Size  Location     Type
 14196 ;;  address         1    wreg     unsigned char 
 14197 ;;  data            1    0[COMRAM] unsigned char 
 14198 ;; Auto vars:     Size  Location     Type
 14199 ;;  address         1    1[COMRAM] unsigned char 
 14200 ;; Return value:  Size  Location     Type
 14201 ;;                  1    wreg      void 
 14202 ;; Registers used:
 14203 ;;		wreg, status,2
 14204 ;; Tracked objects:
 14205 ;;		On entry : 0/0
 14206 ;;		On exit  : 0/0
 14207 ;;		Unchanged: 0/0
 14208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14209 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14210 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14211 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14212 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14213 ;;Total ram usage:        2 bytes
 14214 ;; Hardware stack levels used:    1
 14215 ;; This function calls:
 14216 ;;		Nothing
 14217 ;; This function is called by:
 14218 ;;		_menu_next
 14219 ;; This function uses a non-reentrant model
 14220 ;;
 14221                           
 14222                           	psect	text39
 14223  004A9E                     __ptext39:
 14224                           	opt stack 0
 14225  004A9E                     i2_mem_write:
 14226                           	opt stack 22
 14227                           
 14228                           ;incstack = 0
 14229                           ;i2mem_write@address stored from wreg
 14230  004A9E  6E02               	movwf	i2mem_write@address,c
 14231                           
 14232                           ;eeprom.c: 6: EEADR = address;
 14233  004AA0  C002  FF74         	movff	i2mem_write@address,3956	;volatile
 14234                           
 14235                           ;eeprom.c: 7: EEADRH = 0;
 14236  004AA4  0E00               	movlw	0
 14237  004AA6  6E75               	movwf	3957,c	;volatile
 14238                           
 14239                           ;eeprom.c: 8: EEDATA = data;
 14240  004AA8  C001  FF73         	movff	i2mem_write@data,3955	;volatile
 14241                           
 14242                           ;eeprom.c: 9: EECON1bits.EEPGD = 0;
 14243  004AAC  9E7F               	bcf	3967,7,c	;volsfr
 14244                           
 14245                           ;eeprom.c: 10: EECON1bits.CFGS = 0;
 14246  004AAE  9C7F               	bcf	3967,6,c	;volsfr
 14247                           
 14248                           ;eeprom.c: 11: EECON1bits.WREN = 1;
 14249  004AB0  847F               	bsf	3967,2,c	;volsfr
 14250                           
 14251                           ;eeprom.c: 12: INTCONbits.GIE = 0;
 14252  004AB2  9EF2               	bcf	intcon,7,c	;volatile
 14253                           
 14254                           ;eeprom.c: 13: EECON2 = 0x55;
 14255  004AB4  0E55               	movlw	85
 14256  004AB6  6E7E               	movwf	3966,c	;volsfr
 14257                           
 14258                           ;eeprom.c: 14: EECON2 = 0xAA;
 14259  004AB8  0EAA               	movlw	170
 14260  004ABA  6E7E               	movwf	3966,c	;volsfr
 14261                           
 14262                           ;eeprom.c: 15: EECON1bits.WR = 1;
 14263  004ABC  827F               	bsf	3967,1,c	;volsfr
 14264                           
 14265                           ;eeprom.c: 16: INTCONbits.GIE = 1;
 14266  004ABE  8EF2               	bsf	intcon,7,c	;volatile
 14267  004AC0  ACB7               	btfss	4023,6,c	;volatile
 14268  004AC2  D7FE               	goto	i2l1069
 14269                           
 14270                           ;eeprom.c: 18: PIR4bits.EEIF = 0;
 14271  004AC4  9CB7               	bcf	4023,6,c	;volatile
 14272  004AC6  0012               	return		;funcret
 14273  004AC8                     __end_ofi2_mem_write:
 14274                           	opt stack 0
 14275                           pclatu	equ	0xFFB
 14276                           pclath	equ	0xFFA
 14277                           tblptru	equ	0xFF8
 14278                           tblptrh	equ	0xFF7
 14279                           tblptrl	equ	0xFF6
 14280                           tablat	equ	0xFF5
 14281                           prodh	equ	0xFF4
 14282                           prodl	equ	0xFF3
 14283                           intcon	equ	0xFF2
 14284                           postinc0	equ	0xFEE
 14285                           fsr0h	equ	0xFEA
 14286                           fsr0l	equ	0xFE9
 14287                           wreg	equ	0xFE8
 14288                           indf1	equ	0xFE7
 14289                           postdec1	equ	0xFE5
 14290                           fsr1h	equ	0xFE2
 14291                           fsr1l	equ	0xFE1
 14292                           indf2	equ	0xFDF
 14293                           postinc2	equ	0xFDE
 14294                           postdec2	equ	0xFDD
 14295                           fsr2h	equ	0xFDA
 14296                           fsr2l	equ	0xFD9
 14297                           status	equ	0xFD8
 14298                           
 14299 ;; *************** function i2_mem_read *****************
 14300 ;; Defined at:
 14301 ;;		line 21 in file "eeprom.c"
 14302 ;; Parameters:    Size  Location     Type
 14303 ;;  address         1    wreg     unsigned char 
 14304 ;; Auto vars:     Size  Location     Type
 14305 ;;  address         1    0[COMRAM] unsigned char 
 14306 ;; Return value:  Size  Location     Type
 14307 ;;                  1    wreg      unsigned char 
 14308 ;; Registers used:
 14309 ;;		wreg, status,2
 14310 ;; Tracked objects:
 14311 ;;		On entry : 0/0
 14312 ;;		On exit  : 0/0
 14313 ;;		Unchanged: 0/0
 14314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14316 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14317 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14318 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14319 ;;Total ram usage:        1 bytes
 14320 ;; Hardware stack levels used:    1
 14321 ;; This function calls:
 14322 ;;		Nothing
 14323 ;; This function is called by:
 14324 ;;		_menu_next
 14325 ;; This function uses a non-reentrant model
 14326 ;;
 14327                           
 14328                           	psect	text40
 14329  004BC4                     __ptext40:
 14330                           	opt stack 0
 14331  004BC4                     i2_mem_read:
 14332                           	opt stack 22
 14333                           
 14334                           ;incstack = 0
 14335                           ;i2mem_read@address stored from wreg
 14336  004BC4  6E01               	movwf	i2mem_read@address,c
 14337                           
 14338                           ;eeprom.c: 22: EEADR = address;
 14339  004BC6  C001  FF74         	movff	i2mem_read@address,3956	;volatile
 14340                           
 14341                           ;eeprom.c: 23: EEADRH = 0;
 14342  004BCA  0E00               	movlw	0
 14343  004BCC  6E75               	movwf	3957,c	;volatile
 14344                           
 14345                           ;eeprom.c: 24: EECON1bits.EEPGD = 0;
 14346  004BCE  9E7F               	bcf	3967,7,c	;volsfr
 14347                           
 14348                           ;eeprom.c: 25: EECON1bits.CFGS = 0;
 14349  004BD0  9C7F               	bcf	3967,6,c	;volsfr
 14350                           
 14351                           ;eeprom.c: 26: EECON1bits.RD = 1;
 14352  004BD2  807F               	bsf	3967,0,c	;volsfr
 14353  004BD4  F000               	nop		;# 
 14354                           
 14355                           ;eeprom.c: 28: return EEDATA;
 14356  004BD6  5073               	movf	3955,w,c	;volatile
 14357  004BD8  0012               	return	
 14358  004BDA                     __end_ofi2_mem_read:
 14359                           	opt stack 0
 14360                           pclatu	equ	0xFFB
 14361                           pclath	equ	0xFFA
 14362                           tblptru	equ	0xFF8
 14363                           tblptrh	equ	0xFF7
 14364                           tblptrl	equ	0xFF6
 14365                           tablat	equ	0xFF5
 14366                           prodh	equ	0xFF4
 14367                           prodl	equ	0xFF3
 14368                           intcon	equ	0xFF2
 14369                           postinc0	equ	0xFEE
 14370                           fsr0h	equ	0xFEA
 14371                           fsr0l	equ	0xFE9
 14372                           wreg	equ	0xFE8
 14373                           indf1	equ	0xFE7
 14374                           postdec1	equ	0xFE5
 14375                           fsr1h	equ	0xFE2
 14376                           fsr1l	equ	0xFE1
 14377                           indf2	equ	0xFDF
 14378                           postinc2	equ	0xFDE
 14379                           postdec2	equ	0xFDD
 14380                           fsr2h	equ	0xFDA
 14381                           fsr2l	equ	0xFD9
 14382                           status	equ	0xFD8
 14383                           
 14384 ;; *************** function i2_lcd_set_background *****************
 14385 ;; Defined at:
 14386 ;;		line 104 in file "tft.c"
 14387 ;; Parameters:    Size  Location     Type
 14388 ;;  color           2   10[COMRAM] unsigned int 
 14389 ;; Auto vars:     Size  Location     Type
 14390 ;;  lcd_set_back    2   14[COMRAM] unsigned int 
 14391 ;;  lcd_set_back    2   12[COMRAM] unsigned int 
 14392 ;; Return value:  Size  Location     Type
 14393 ;;                  1    wreg      void 
 14394 ;; Registers used:
 14395 ;;		wreg, status,2, status,0, cstack
 14396 ;; Tracked objects:
 14397 ;;		On entry : 0/0
 14398 ;;		On exit  : 0/0
 14399 ;;		Unchanged: 0/0
 14400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14401 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14402 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14403 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14404 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14405 ;;Total ram usage:        6 bytes
 14406 ;; Hardware stack levels used:    1
 14407 ;; Hardware stack levels required when called:    3
 14408 ;; This function calls:
 14409 ;;		i2_lcd_memory_start
 14410 ;;		i2_lcd_set_address
 14411 ;;		i2_lcd_write_bus
 14412 ;; This function is called by:
 14413 ;;		_menu_next
 14414 ;; This function uses a non-reentrant model
 14415 ;;
 14416                           
 14417                           	psect	text41
 14418  00432A                     __ptext41:
 14419                           	opt stack 0
 14420  00432A                     i2_lcd_set_background:
 14421                           	opt stack 19
 14422                           
 14423                           ;tft.c: 105: LATA1 = 0;
 14424                           
 14425                           ;incstack = 0
 14426  00432A  9289               	bcf	3977,1,c	;volatile
 14427                           
 14428                           ;tft.c: 106: lcd_set_address(0,0,319,479);
 14429  00432C  0E00               	movlw	0
 14430  00432E  6E04               	movwf	i2lcd_set_address@x1+1,c
 14431  004330  0E00               	movlw	0
 14432  004332  6E03               	movwf	i2lcd_set_address@x1,c
 14433  004334  0E00               	movlw	0
 14434  004336  6E06               	movwf	i2lcd_set_address@y1+1,c
 14435  004338  0E00               	movlw	0
 14436  00433A  6E05               	movwf	i2lcd_set_address@y1,c
 14437  00433C  0E01               	movlw	1
 14438  00433E  6E08               	movwf	i2lcd_set_address@x2+1,c
 14439  004340  0E3F               	movlw	63
 14440  004342  6E07               	movwf	i2lcd_set_address@x2,c
 14441  004344  0E01               	movlw	1
 14442  004346  6E0A               	movwf	i2lcd_set_address@y2+1,c
 14443  004348  0EDF               	movlw	223
 14444  00434A  6E09               	movwf	i2lcd_set_address@y2,c
 14445  00434C  ECB7  F024         	call	i2_lcd_set_address	;wreg free
 14446                           
 14447                           ;tft.c: 107: lcd_memory_start();
 14448  004350  EC28  F026         	call	i2_lcd_memory_start	;wreg free
 14449                           
 14450                           ;tft.c: 108: for (unsigned int i=0;i<320;i++) {
 14451  004354  0E00               	movlw	0
 14452  004356  6E0E               	movwf	i2lcd_set_background@i+1,c
 14453  004358  0E00               	movlw	0
 14454  00435A  6E0D               	movwf	i2lcd_set_background@i,c
 14455  00435C  D015               	goto	i2l8984
 14456  00435E                     
 14457                           ;tft.c: 109: for (unsigned int j=0;j<480;j++) {
 14458  00435E  0E00               	movlw	0
 14459  004360  6E10               	movwf	i2lcd_set_background@j+1,c
 14460  004362  0E00               	movlw	0
 14461  004364  6E0F               	movwf	i2lcd_set_background@j,c
 14462  004366                     i2l8972:
 14463  004366  0EE0               	movlw	224
 14464  004368  5C0F               	subwf	i2lcd_set_background@j,w,c
 14465  00436A  0E01               	movlw	1
 14466  00436C  5810               	subwfb	i2lcd_set_background@j+1,w,c
 14467  00436E  B0D8               	btfsc	status,0,c
 14468  004370  D009               	goto	i2u1001_40
 14469                           
 14470                           ;tft.c: 110: lcd_write_bus(color >> 8);
 14471  004372  500C               	movf	i2lcd_set_background@color+1,w,c
 14472  004374  EC19  F026         	call	i2_lcd_write_bus
 14473                           
 14474                           ;tft.c: 111: lcd_write_bus(color);
 14475  004378  500B               	movf	i2lcd_set_background@color,w,c
 14476  00437A  EC19  F026         	call	i2_lcd_write_bus
 14477  00437E  4A0F               	infsnz	i2lcd_set_background@j,f,c
 14478  004380  2A10               	incf	i2lcd_set_background@j+1,f,c
 14479  004382  D7F1               	goto	i2l8972
 14480  004384                     i2u1001_40:
 14481  004384  4A0D               	infsnz	i2lcd_set_background@i,f,c
 14482  004386  2A0E               	incf	i2lcd_set_background@i+1,f,c
 14483  004388                     i2l8984:
 14484  004388  0E40               	movlw	64
 14485  00438A  5C0D               	subwf	i2lcd_set_background@i,w,c
 14486  00438C  0E01               	movlw	1
 14487  00438E  580E               	subwfb	i2lcd_set_background@i+1,w,c
 14488  004390  A0D8               	btfss	status,0,c
 14489  004392  D7E5               	goto	i2l403
 14490                           
 14491                           ;tft.c: 112: }
 14492                           ;tft.c: 113: }
 14493                           ;tft.c: 114: LATA1 = 1;
 14494  004394  8289               	bsf	3977,1,c	;volatile
 14495  004396  0012               	return		;funcret
 14496  004398                     __end_ofi2_lcd_set_background:
 14497                           	opt stack 0
 14498                           pclatu	equ	0xFFB
 14499                           pclath	equ	0xFFA
 14500                           tblptru	equ	0xFF8
 14501                           tblptrh	equ	0xFF7
 14502                           tblptrl	equ	0xFF6
 14503                           tablat	equ	0xFF5
 14504                           prodh	equ	0xFF4
 14505                           prodl	equ	0xFF3
 14506                           intcon	equ	0xFF2
 14507                           postinc0	equ	0xFEE
 14508                           fsr0h	equ	0xFEA
 14509                           fsr0l	equ	0xFE9
 14510                           wreg	equ	0xFE8
 14511                           indf1	equ	0xFE7
 14512                           postdec1	equ	0xFE5
 14513                           fsr1h	equ	0xFE2
 14514                           fsr1l	equ	0xFE1
 14515                           indf2	equ	0xFDF
 14516                           postinc2	equ	0xFDE
 14517                           postdec2	equ	0xFDD
 14518                           fsr2h	equ	0xFDA
 14519                           fsr2l	equ	0xFD9
 14520                           status	equ	0xFD8
 14521                           
 14522 ;; *************** function _menu_navigate *****************
 14523 ;; Defined at:
 14524 ;;		line 438 in file "menu.c"
 14525 ;; Parameters:    Size  Location     Type
 14526 ;;  opt             1    wreg     unsigned char 
 14527 ;;  rowColor        1   75[COMRAM] unsigned char 
 14528 ;; Auto vars:     Size  Location     Type
 14529 ;;  opt             1   76[COMRAM] unsigned char 
 14530 ;; Return value:  Size  Location     Type
 14531 ;;                  1    wreg      void 
 14532 ;; Registers used:
 14533 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14534 ;; Tracked objects:
 14535 ;;		On entry : 0/0
 14536 ;;		On exit  : 0/0
 14537 ;;		Unchanged: 0/0
 14538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14539 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14540 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14542 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14543 ;;Total ram usage:        2 bytes
 14544 ;; Hardware stack levels used:    1
 14545 ;; Hardware stack levels required when called:    6
 14546 ;; This function calls:
 14547 ;;		_menu_1
 14548 ;;		_menu_2
 14549 ;;		_menu_21
 14550 ;;		_menu_22
 14551 ;;		_menu_23
 14552 ;;		_menu_24
 14553 ;;		_menu_25
 14554 ;;		_menu_26
 14555 ;;		_menu_27
 14556 ;;		_menu_3
 14557 ;;		_menu_31
 14558 ;;		_menu_4
 14559 ;;		_menu_41
 14560 ;;		_menu_42
 14561 ;;		_menu_43
 14562 ;;		_menu_44
 14563 ;;		_menu_45
 14564 ;;		_menu_5
 14565 ;;		_menu_6
 14566 ;; This function is called by:
 14567 ;;		_isr
 14568 ;;		_menu_next
 14569 ;; This function uses a non-reentrant model
 14570 ;;
 14571                           
 14572                           	psect	text42
 14573  003246                     __ptext42:
 14574                           	opt stack 0
 14575  003246                     _menu_navigate:
 14576                           	opt stack 16
 14577                           
 14578                           ;incstack = 0
 14579                           ;menu_navigate@opt stored from wreg
 14580  003246  6E4D               	movwf	menu_navigate@opt,c
 14581                           
 14582                           ;menu.c: 439: switch (opt) {
 14583  003248  D04C               	goto	i2l843
 14584  00324A                     
 14585                           ;menu.c: 441: menu_1(rowColor);
 14586  00324A  504C               	movf	menu_navigate@rowColor,w,c
 14587  00324C  ECC7  F015         	call	_menu_1
 14588                           
 14589                           ;menu.c: 442: break;
 14590  003250  0012               	return	
 14591  003252                     
 14592                           ;menu.c: 444: menu_2(rowColor);
 14593  003252  504C               	movf	menu_navigate@rowColor,w,c
 14594  003254  EC73  F014         	call	_menu_2
 14595                           
 14596                           ;menu.c: 445: break;
 14597  003258  0012               	return	
 14598  00325A                     
 14599                           ;menu.c: 447: menu_3(rowColor);
 14600  00325A  504C               	movf	menu_navigate@rowColor,w,c
 14601  00325C  EC57  F01E         	call	_menu_3
 14602                           
 14603                           ;menu.c: 448: break;
 14604  003260  0012               	return	
 14605  003262                     
 14606                           ;menu.c: 450: menu_4(rowColor);
 14607  003262  504C               	movf	menu_navigate@rowColor,w,c
 14608  003264  ECC8  F013         	call	_menu_4
 14609                           
 14610                           ;menu.c: 451: break;
 14611  003268  0012               	return	
 14612  00326A                     
 14613                           ;menu.c: 453: menu_5(rowColor);
 14614  00326A  504C               	movf	menu_navigate@rowColor,w,c
 14615  00326C  ECF7  F01D         	call	_menu_5
 14616                           
 14617                           ;menu.c: 454: break;
 14618  003270  0012               	return	
 14619  003272                     
 14620                           ;menu.c: 456: menu_6(rowColor);
 14621  003272  504C               	movf	menu_navigate@rowColor,w,c
 14622  003274  EC1A  F020         	call	_menu_6
 14623                           
 14624                           ;menu.c: 457: break;
 14625  003278  0012               	return	
 14626  00327A                     
 14627                           ;menu.c: 459: menu_21(rowColor);
 14628  00327A  504C               	movf	menu_navigate@rowColor,w,c
 14629  00327C  ECCC  F021         	call	_menu_21
 14630                           
 14631                           ;menu.c: 460: break;
 14632  003280  0012               	return	
 14633  003282                     
 14634                           ;menu.c: 462: menu_22(rowColor);
 14635  003282  504C               	movf	menu_navigate@rowColor,w,c
 14636  003284  EC17  F01D         	call	_menu_22
 14637                           
 14638                           ;menu.c: 463: break;
 14639  003288  0012               	return	
 14640  00328A                     
 14641                           ;menu.c: 465: menu_23(rowColor);
 14642  00328A  504C               	movf	menu_navigate@rowColor,w,c
 14643  00328C  ECEE  F023         	call	_menu_23
 14644                           
 14645                           ;menu.c: 466: break;
 14646  003290  0012               	return	
 14647  003292                     
 14648                           ;menu.c: 468: menu_24(rowColor);
 14649  003292  504C               	movf	menu_navigate@rowColor,w,c
 14650  003294  ECB7  F01E         	call	_menu_24
 14651                           
 14652                           ;menu.c: 469: break;
 14653  003298  0012               	return	
 14654  00329A                     
 14655                           ;menu.c: 471: menu_25(rowColor);
 14656  00329A  504C               	movf	menu_navigate@rowColor,w,c
 14657  00329C  ECCA  F023         	call	_menu_25
 14658                           
 14659                           ;menu.c: 472: break;
 14660  0032A0  0012               	return	
 14661  0032A2                     
 14662                           ;menu.c: 474: menu_26(rowColor);
 14663  0032A2  504C               	movf	menu_navigate@rowColor,w,c
 14664  0032A4  ECA6  F023         	call	_menu_26
 14665                           
 14666                           ;menu.c: 475: break;
 14667  0032A8  0012               	return	
 14668  0032AA                     
 14669                           ;menu.c: 477: menu_27(rowColor);
 14670  0032AA  504C               	movf	menu_navigate@rowColor,w,c
 14671  0032AC  EC82  F023         	call	_menu_27
 14672                           
 14673                           ;menu.c: 478: break;
 14674  0032B0  0012               	return	
 14675  0032B2                     
 14676                           ;menu.c: 480: menu_31(rowColor);
 14677  0032B2  504C               	movf	menu_navigate@rowColor,w,c
 14678  0032B4  ECA0  F01C         	call	_menu_31
 14679                           
 14680                           ;menu.c: 481: break;
 14681  0032B8  0012               	return	
 14682  0032BA                     
 14683                           ;menu.c: 483: menu_41(rowColor);
 14684  0032BA  504C               	movf	menu_navigate@rowColor,w,c
 14685  0032BC  EC5D  F023         	call	_menu_41
 14686                           
 14687                           ;menu.c: 484: break;
 14688  0032C0  0012               	return	
 14689  0032C2                     
 14690                           ;menu.c: 486: menu_42(rowColor);
 14691  0032C2  504C               	movf	menu_navigate@rowColor,w,c
 14692  0032C4  EC38  F023         	call	_menu_42
 14693                           
 14694                           ;menu.c: 487: break;
 14695  0032C8  0012               	return	
 14696  0032CA                     
 14697                           ;menu.c: 489: menu_43(rowColor);
 14698  0032CA  504C               	movf	menu_navigate@rowColor,w,c
 14699  0032CC  EC13  F023         	call	_menu_43
 14700                           
 14701                           ;menu.c: 490: break;
 14702  0032D0  0012               	return	
 14703  0032D2                     
 14704                           ;menu.c: 492: menu_44(rowColor);
 14705  0032D2  504C               	movf	menu_navigate@rowColor,w,c
 14706  0032D4  ECEE  F022         	call	_menu_44
 14707                           
 14708                           ;menu.c: 493: break;
 14709  0032D8  0012               	return	
 14710  0032DA                     
 14711                           ;menu.c: 495: menu_45(rowColor);
 14712  0032DA  504C               	movf	menu_navigate@rowColor,w,c
 14713  0032DC  ECC9  F022         	call	_menu_45
 14714                           
 14715                           ;menu.c: 498: }
 14716                           
 14717                           ;menu.c: 496: break;
 14718  0032E0  0012               	return	
 14719  0032E2                     i2l843:
 14720  0032E2  504D               	movf	menu_navigate@opt,w,c
 14721                           
 14722                           ; Switch size 1, requested type "space"
 14723                           ; Number of cases is 19, Range of values is 1 to 45
 14724                           ; switch strategies available:
 14725                           ; Name         Instructions Cycles
 14726                           ; simple_byte           58    30 (average)
 14727                           ;	Chosen strategy is simple_byte
 14728  0032E4  0A01               	xorlw	1	; case 1
 14729  0032E6  B4D8               	btfsc	status,2,c
 14730  0032E8  D7B0               	goto	i2l844
 14731  0032EA  0A03               	xorlw	3	; case 2
 14732  0032EC  B4D8               	btfsc	status,2,c
 14733  0032EE  D7B1               	goto	i2l846
 14734  0032F0  0A01               	xorlw	1	; case 3
 14735  0032F2  B4D8               	btfsc	status,2,c
 14736  0032F4  D7B2               	goto	i2l847
 14737  0032F6  0A07               	xorlw	7	; case 4
 14738  0032F8  B4D8               	btfsc	status,2,c
 14739  0032FA  D7B3               	goto	i2l848
 14740  0032FC  0A01               	xorlw	1	; case 5
 14741  0032FE  B4D8               	btfsc	status,2,c
 14742  003300  D7B4               	goto	i2l849
 14743  003302  0A03               	xorlw	3	; case 6
 14744  003304  B4D8               	btfsc	status,2,c
 14745  003306  D7B5               	goto	i2l850
 14746  003308  0A13               	xorlw	19	; case 21
 14747  00330A  B4D8               	btfsc	status,2,c
 14748  00330C  D7B6               	goto	i2l851
 14749  00330E  0A03               	xorlw	3	; case 22
 14750  003310  B4D8               	btfsc	status,2,c
 14751  003312  D7B7               	goto	i2l852
 14752  003314  0A01               	xorlw	1	; case 23
 14753  003316  B4D8               	btfsc	status,2,c
 14754  003318  D7B8               	goto	i2l853
 14755  00331A  0A0F               	xorlw	15	; case 24
 14756  00331C  B4D8               	btfsc	status,2,c
 14757  00331E  D7B9               	goto	i2l854
 14758  003320  0A01               	xorlw	1	; case 25
 14759  003322  B4D8               	btfsc	status,2,c
 14760  003324  D7BA               	goto	i2l855
 14761  003326  0A03               	xorlw	3	; case 26
 14762  003328  B4D8               	btfsc	status,2,c
 14763  00332A  D7BB               	goto	i2l856
 14764  00332C  0A01               	xorlw	1	; case 27
 14765  00332E  B4D8               	btfsc	status,2,c
 14766  003330  D7BC               	goto	i2l857
 14767  003332  0A04               	xorlw	4	; case 31
 14768  003334  B4D8               	btfsc	status,2,c
 14769  003336  D7BD               	goto	i2l858
 14770  003338  0A36               	xorlw	54	; case 41
 14771  00333A  B4D8               	btfsc	status,2,c
 14772  00333C  D7BE               	goto	i2l859
 14773  00333E  0A03               	xorlw	3	; case 42
 14774  003340  B4D8               	btfsc	status,2,c
 14775  003342  D7BF               	goto	i2l860
 14776  003344  0A01               	xorlw	1	; case 43
 14777  003346  B4D8               	btfsc	status,2,c
 14778  003348  D7C0               	goto	i2l861
 14779  00334A  0A07               	xorlw	7	; case 44
 14780  00334C  B4D8               	btfsc	status,2,c
 14781  00334E  D7C1               	goto	i2l862
 14782  003350  0A01               	xorlw	1	; case 45
 14783  003352  A4D8               	btfss	status,2,c
 14784  003354  0012               	return	
 14785  003356  D7C1               	goto	i2l863
 14786  003358                     __end_of_menu_navigate:
 14787                           	opt stack 0
 14788                           pclatu	equ	0xFFB
 14789                           pclath	equ	0xFFA
 14790                           tblptru	equ	0xFF8
 14791                           tblptrh	equ	0xFF7
 14792                           tblptrl	equ	0xFF6
 14793                           tablat	equ	0xFF5
 14794                           prodh	equ	0xFF4
 14795                           prodl	equ	0xFF3
 14796                           intcon	equ	0xFF2
 14797                           postinc0	equ	0xFEE
 14798                           fsr0h	equ	0xFEA
 14799                           fsr0l	equ	0xFE9
 14800                           wreg	equ	0xFE8
 14801                           indf1	equ	0xFE7
 14802                           postdec1	equ	0xFE5
 14803                           fsr1h	equ	0xFE2
 14804                           fsr1l	equ	0xFE1
 14805                           indf2	equ	0xFDF
 14806                           postinc2	equ	0xFDE
 14807                           postdec2	equ	0xFDD
 14808                           fsr2h	equ	0xFDA
 14809                           fsr2l	equ	0xFD9
 14810                           status	equ	0xFD8
 14811                           
 14812 ;; *************** function _menu_6 *****************
 14813 ;; Defined at:
 14814 ;;		line 420 in file "menu.c"
 14815 ;; Parameters:    Size  Location     Type
 14816 ;;  colorRow        1    wreg     unsigned char 
 14817 ;; Auto vars:     Size  Location     Type
 14818 ;;  colorRow        1   73[COMRAM] unsigned char 
 14819 ;;  i               1   74[COMRAM] unsigned char 
 14820 ;;  mBlank         16   57[COMRAM] unsigned char [16]
 14821 ;; Return value:  Size  Location     Type
 14822 ;;                  1    wreg      void 
 14823 ;; Registers used:
 14824 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14825 ;; Tracked objects:
 14826 ;;		On entry : 0/0
 14827 ;;		On exit  : 0/0
 14828 ;;		Unchanged: 0/0
 14829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14831 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14833 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14834 ;;Total ram usage:       18 bytes
 14835 ;; Hardware stack levels used:    1
 14836 ;; Hardware stack levels required when called:    5
 14837 ;; This function calls:
 14838 ;;		i2_lcd_text
 14839 ;; This function is called by:
 14840 ;;		_menu_navigate
 14841 ;; This function uses a non-reentrant model
 14842 ;;
 14843                           
 14844                           	psect	text43
 14845  004034                     __ptext43:
 14846                           	opt stack 0
 14847  004034                     _menu_6:
 14848                           	opt stack 16
 14849                           
 14850                           ;incstack = 0
 14851                           ;menu_6@colorRow stored from wreg
 14852  004034  6E4A               	movwf	menu_6@colorRow,c
 14853                           
 14854                           ;menu.c: 421: char mBlank[16] = "               ";
 14855  004036  EE25  F000         	lfsr	2,menu_6@F15310
 14856  00403A  EE10  F03A         	lfsr	1,menu_6@mBlank
 14857  00403E  0E0F               	movlw	15
 14858  004040                     i2u953_41:
 14859  004040  CFDB FFE3          	movff	plusw2,plusw1
 14860  004044  06E8               	decf	wreg,f,c
 14861  004046  E2FC               	bc	i2u953_41
 14862                           
 14863                           ;menu.c: 422: if (colorRow == 1) {
 14864  004048  044A               	decf	menu_6@colorRow,w,c
 14865  00404A  A4D8               	btfss	status,2,c
 14866  00404C  D00A               	goto	i2l834
 14867                           
 14868                           ;menu.c: 423: lcd_text(1,msjCONFIRM,1);
 14869  00404E  0E30               	movlw	low _msjCONFIRM
 14870  004050  6E18               	movwf	i2lcd_text@msjPtr,c
 14871  004052  0E02               	movlw	high _msjCONFIRM
 14872  004054  6E19               	movwf	i2lcd_text@msjPtr+1,c
 14873  004056  0E01               	movlw	1
 14874  004058  6E1A               	movwf	i2lcd_text@color,c
 14875  00405A  0E01               	movlw	1
 14876  00405C  ECE6  F00C         	call	i2_lcd_text
 14877                           
 14878                           ;menu.c: 424: } else {
 14879  004060  D009               	goto	i2l835
 14880  004062                     i2l834:
 14881                           
 14882                           ;menu.c: 425: lcd_text(1,msjCONFIRM,0);
 14883  004062  0E30               	movlw	low _msjCONFIRM
 14884  004064  6E18               	movwf	i2lcd_text@msjPtr,c
 14885  004066  0E02               	movlw	high _msjCONFIRM
 14886  004068  6E19               	movwf	i2lcd_text@msjPtr+1,c
 14887  00406A  0E00               	movlw	0
 14888  00406C  6E1A               	movwf	i2lcd_text@color,c
 14889  00406E  0E01               	movlw	1
 14890  004070  ECE6  F00C         	call	i2_lcd_text
 14891  004074                     i2l835:
 14892                           
 14893                           ;menu.c: 426: }
 14894                           ;menu.c: 427: if (colorRow == 2) {
 14895  004074  0E02               	movlw	2
 14896  004076  184A               	xorwf	menu_6@colorRow,w,c
 14897  004078  A4D8               	btfss	status,2,c
 14898  00407A  D00A               	goto	i2l836
 14899                           
 14900                           ;menu.c: 428: lcd_text(2,msjCANCEL,1);
 14901  00407C  0E20               	movlw	low _msjCANCEL
 14902  00407E  6E18               	movwf	i2lcd_text@msjPtr,c
 14903  004080  0E02               	movlw	high _msjCANCEL
 14904  004082  6E19               	movwf	i2lcd_text@msjPtr+1,c
 14905  004084  0E01               	movlw	1
 14906  004086  6E1A               	movwf	i2lcd_text@color,c
 14907  004088  0E02               	movlw	2
 14908  00408A  ECE6  F00C         	call	i2_lcd_text
 14909                           
 14910                           ;menu.c: 429: } else {
 14911  00408E  D009               	goto	i2l837
 14912  004090                     i2l836:
 14913                           
 14914                           ;menu.c: 430: lcd_text(2,msjCANCEL,0);
 14915  004090  0E20               	movlw	low _msjCANCEL
 14916  004092  6E18               	movwf	i2lcd_text@msjPtr,c
 14917  004094  0E02               	movlw	high _msjCANCEL
 14918  004096  6E19               	movwf	i2lcd_text@msjPtr+1,c
 14919  004098  0E00               	movlw	0
 14920  00409A  6E1A               	movwf	i2lcd_text@color,c
 14921  00409C  0E02               	movlw	2
 14922  00409E  ECE6  F00C         	call	i2_lcd_text
 14923  0040A2                     i2l837:
 14924                           
 14925                           ;menu.c: 431: }
 14926                           ;menu.c: 433: for (char i=0;i<5;i++) {
 14927  0040A2  0E00               	movlw	0
 14928  0040A4  6E4B               	movwf	menu_6@i,c
 14929  0040A6                     i2l8708:
 14930  0040A6  0E04               	movlw	4
 14931  0040A8  644B               	cpfsgt	menu_6@i,c
 14932  0040AA  D001               	goto	i2l838
 14933  0040AC  0012               	return	
 14934  0040AE                     i2l838:
 14935                           
 14936                           ;menu.c: 434: lcd_text(3+i,mBlank,0);
 14937  0040AE  0E3A               	movlw	low menu_6@mBlank
 14938  0040B0  6E18               	movwf	i2lcd_text@msjPtr,c
 14939  0040B2  0E00               	movlw	high menu_6@mBlank
 14940  0040B4  6E19               	movwf	i2lcd_text@msjPtr+1,c
 14941  0040B6  0E00               	movlw	0
 14942  0040B8  6E1A               	movwf	i2lcd_text@color,c
 14943  0040BA  504B               	movf	menu_6@i,w,c
 14944  0040BC  0F03               	addlw	3
 14945  0040BE  ECE6  F00C         	call	i2_lcd_text
 14946  0040C2  2A4B               	incf	menu_6@i,f,c
 14947  0040C4  D7F0               	goto	i2l8708
 14948  0040C6                     __end_of_menu_6:
 14949                           	opt stack 0
 14950                           pclatu	equ	0xFFB
 14951                           pclath	equ	0xFFA
 14952                           tblptru	equ	0xFF8
 14953                           tblptrh	equ	0xFF7
 14954                           tblptrl	equ	0xFF6
 14955                           tablat	equ	0xFF5
 14956                           prodh	equ	0xFF4
 14957                           prodl	equ	0xFF3
 14958                           intcon	equ	0xFF2
 14959                           postinc0	equ	0xFEE
 14960                           fsr0h	equ	0xFEA
 14961                           fsr0l	equ	0xFE9
 14962                           wreg	equ	0xFE8
 14963                           indf1	equ	0xFE7
 14964                           postdec1	equ	0xFE5
 14965                           plusw1	equ	0xFE3
 14966                           fsr1h	equ	0xFE2
 14967                           fsr1l	equ	0xFE1
 14968                           indf2	equ	0xFDF
 14969                           postinc2	equ	0xFDE
 14970                           postdec2	equ	0xFDD
 14971                           plusw2	equ	0xFDB
 14972                           fsr2h	equ	0xFDA
 14973                           fsr2l	equ	0xFD9
 14974                           status	equ	0xFD8
 14975                           
 14976 ;; *************** function _menu_5 *****************
 14977 ;; Defined at:
 14978 ;;		line 397 in file "menu.c"
 14979 ;; Parameters:    Size  Location     Type
 14980 ;;  colorRow        1    wreg     unsigned char 
 14981 ;; Auto vars:     Size  Location     Type
 14982 ;;  colorRow        1   73[COMRAM] unsigned char 
 14983 ;;  i               1   74[COMRAM] unsigned char 
 14984 ;;  mBlank         16   57[COMRAM] unsigned char [16]
 14985 ;; Return value:  Size  Location     Type
 14986 ;;                  1    wreg      void 
 14987 ;; Registers used:
 14988 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14989 ;; Tracked objects:
 14990 ;;		On entry : 0/0
 14991 ;;		On exit  : 0/0
 14992 ;;		Unchanged: 0/0
 14993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14995 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14996 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14997 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14998 ;;Total ram usage:       18 bytes
 14999 ;; Hardware stack levels used:    1
 15000 ;; Hardware stack levels required when called:    5
 15001 ;; This function calls:
 15002 ;;		i2_lcd_text
 15003 ;; This function is called by:
 15004 ;;		_menu_navigate
 15005 ;; This function uses a non-reentrant model
 15006 ;;
 15007                           
 15008                           	psect	text44
 15009  003BEE                     __ptext44:
 15010                           	opt stack 0
 15011  003BEE                     _menu_5:
 15012                           	opt stack 16
 15013                           
 15014                           ;incstack = 0
 15015                           ;menu_5@colorRow stored from wreg
 15016  003BEE  6E4A               	movwf	menu_5@colorRow,c
 15017                           
 15018                           ;menu.c: 398: char mBlank[16] = "               ";
 15019  003BF0  EE25  F010         	lfsr	2,menu_5@F15306
 15020  003BF4  EE10  F03A         	lfsr	1,menu_5@mBlank
 15021  003BF8  0E0F               	movlw	15
 15022  003BFA                     i2u947_41:
 15023  003BFA  CFDB FFE3          	movff	plusw2,plusw1
 15024  003BFE  06E8               	decf	wreg,f,c
 15025  003C00  E2FC               	bc	i2u947_41
 15026                           
 15027                           ;menu.c: 399: if (colorRow == 1) {
 15028  003C02  044A               	decf	menu_5@colorRow,w,c
 15029  003C04  A4D8               	btfss	status,2,c
 15030  003C06  D00A               	goto	i2l821
 15031                           
 15032                           ;menu.c: 400: lcd_text(1,msjCHANGE,1);
 15033  003C08  0E60               	movlw	low _msjCHANGE
 15034  003C0A  6E18               	movwf	i2lcd_text@msjPtr,c
 15035  003C0C  0E02               	movlw	high _msjCHANGE
 15036  003C0E  6E19               	movwf	i2lcd_text@msjPtr+1,c
 15037  003C10  0E01               	movlw	1
 15038  003C12  6E1A               	movwf	i2lcd_text@color,c
 15039  003C14  0E01               	movlw	1
 15040  003C16  ECE6  F00C         	call	i2_lcd_text
 15041                           
 15042                           ;menu.c: 401: } else {
 15043  003C1A  D009               	goto	i2l822
 15044  003C1C                     i2l821:
 15045                           
 15046                           ;menu.c: 402: lcd_text(1,msjCHANGE,0);
 15047  003C1C  0E60               	movlw	low _msjCHANGE
 15048  003C1E  6E18               	movwf	i2lcd_text@msjPtr,c
 15049  003C20  0E02               	movlw	high _msjCHANGE
 15050  003C22  6E19               	movwf	i2lcd_text@msjPtr+1,c
 15051  003C24  0E00               	movlw	0
 15052  003C26  6E1A               	movwf	i2lcd_text@color,c
 15053  003C28  0E01               	movlw	1
 15054  003C2A  ECE6  F00C         	call	i2_lcd_text
 15055  003C2E                     i2l822:
 15056                           
 15057                           ;menu.c: 403: }
 15058                           ;menu.c: 404: if (colorRow == 2) {
 15059  003C2E  0E02               	movlw	2
 15060  003C30  184A               	xorwf	menu_5@colorRow,w,c
 15061  003C32  A4D8               	btfss	status,2,c
 15062  003C34  D00A               	goto	i2l823
 15063                           
 15064                           ;menu.c: 405: lcd_text(2,msjON,1);
 15065  003C36  0E15               	movlw	low _msjON
 15066  003C38  6E18               	movwf	i2lcd_text@msjPtr,c
 15067  003C3A  0E01               	movlw	high _msjON
 15068  003C3C  6E19               	movwf	i2lcd_text@msjPtr+1,c
 15069  003C3E  0E01               	movlw	1
 15070  003C40  6E1A               	movwf	i2lcd_text@color,c
 15071  003C42  0E02               	movlw	2
 15072  003C44  ECE6  F00C         	call	i2_lcd_text
 15073                           
 15074                           ;menu.c: 406: } else {
 15075  003C48  D009               	goto	i2l824
 15076  003C4A                     i2l823:
 15077                           
 15078                           ;menu.c: 407: lcd_text(2,msjON,0);
 15079  003C4A  0E15               	movlw	low _msjON
 15080  003C4C  6E18               	movwf	i2lcd_text@msjPtr,c
 15081  003C4E  0E01               	movlw	high _msjON
 15082  003C50  6E19               	movwf	i2lcd_text@msjPtr+1,c
 15083  003C52  0E00               	movlw	0
 15084  003C54  6E1A               	movwf	i2lcd_text@color,c
 15085  003C56  0E02               	movlw	2
 15086  003C58  ECE6  F00C         	call	i2_lcd_text
 15087  003C5C                     i2l824:
 15088                           
 15089                           ;menu.c: 408: }
 15090                           ;menu.c: 409: if (colorRow == 3) {
 15091  003C5C  0E03               	movlw	3
 15092  003C5E  184A               	xorwf	menu_5@colorRow,w,c
 15093  003C60  A4D8               	btfss	status,2,c
 15094  003C62  D00A               	goto	i2l825
 15095                           
 15096                           ;menu.c: 410: lcd_text(3,msjOFF,1);
 15097  003C64  0E05               	movlw	low _msjOFF
 15098  003C66  6E18               	movwf	i2lcd_text@msjPtr,c
 15099  003C68  0E01               	movlw	high _msjOFF
 15100  003C6A  6E19               	movwf	i2lcd_text@msjPtr+1,c
 15101  003C6C  0E01               	movlw	1
 15102  003C6E  6E1A               	movwf	i2lcd_text@color,c
 15103  003C70  0E03               	movlw	3
 15104  003C72  ECE6  F00C         	call	i2_lcd_text
 15105                           
 15106                           ;menu.c: 411: } else {
 15107  003C76  D009               	goto	i2l826
 15108  003C78                     i2l825:
 15109                           
 15110                           ;menu.c: 412: lcd_text(3,msjOFF,0);
 15111  003C78  0E05               	movlw	low _msjOFF
 15112  003C7A  6E18               	movwf	i2lcd_text@msjPtr,c
 15113  003C7C  0E01               	movlw	high _msjOFF
 15114  003C7E  6E19               	movwf	i2lcd_text@msjPtr+1,c
 15115  003C80  0E00               	movlw	0
 15116  003C82  6E1A               	movwf	i2lcd_text@color,c
 15117  003C84  0E03               	movlw	3
 15118  003C86  ECE6  F00C         	call	i2_lcd_text
 15119  003C8A                     i2l826:
 15120                           
 15121                           ;menu.c: 413: }
 15122                           ;menu.c: 415: for (char i=0;i<4;i++) {
 15123  003C8A  0E00               	movlw	0
 15124  003C8C  6E4B               	movwf	menu_5@i,c
 15125  003C8E                     i2l8682:
 15126  003C8E  0E03               	movlw	3
 15127  003C90  644B               	cpfsgt	menu_5@i,c
 15128  003C92  D001               	goto	i2l827
 15129  003C94  0012               	return	
 15130  003C96                     i2l827:
 15131                           
 15132                           ;menu.c: 416: lcd_text(4+i,mBlank,0);
 15133  003C96  0E3A               	movlw	low menu_5@mBlank
 15134  003C98  6E18               	movwf	i2lcd_text@msjPtr,c
 15135  003C9A  0E00               	movlw	high menu_5@mBlank
 15136  003C9C  6E19               	movwf	i2lcd_text@msjPtr+1,c
 15137  003C9E  0E00               	movlw	0
 15138  003CA0  6E1A               	movwf	i2lcd_text@color,c
 15139  003CA2  504B               	movf	menu_5@i,w,c
 15140  003CA4  0F04               	addlw	4
 15141  003CA6  ECE6  F00C         	call	i2_lcd_text
 15142  003CAA  2A4B               	incf	menu_5@i,f,c
 15143  003CAC  D7F0               	goto	i2l8682
 15144  003CAE                     __end_of_menu_5:
 15145                           	opt stack 0
 15146                           pclatu	equ	0xFFB
 15147                           pclath	equ	0xFFA
 15148                           tblptru	equ	0xFF8
 15149                           tblptrh	equ	0xFF7
 15150                           tblptrl	equ	0xFF6
 15151                           tablat	equ	0xFF5
 15152                           prodh	equ	0xFF4
 15153                           prodl	equ	0xFF3
 15154                           intcon	equ	0xFF2
 15155                           postinc0	equ	0xFEE
 15156                           fsr0h	equ	0xFEA
 15157                           fsr0l	equ	0xFE9
 15158                           wreg	equ	0xFE8
 15159                           indf1	equ	0xFE7
 15160                           postdec1	equ	0xFE5
 15161                           plusw1	equ	0xFE3
 15162                           fsr1h	equ	0xFE2
 15163                           fsr1l	equ	0xFE1
 15164                           indf2	equ	0xFDF
 15165                           postinc2	equ	0xFDE
 15166                           postdec2	equ	0xFDD
 15167                           plusw2	equ	0xFDB
 15168                           fsr2h	equ	0xFDA
 15169                           fsr2l	equ	0xFD9
 15170                           status	equ	0xFD8
 15171                           
 15172 ;; *************** function _menu_45 *****************
 15173 ;; Defined at:
 15174 ;;		line 386 in file "menu.c"
 15175 ;; Parameters:    Size  Location     Type
 15176 ;;  colorRow        1    wreg     unsigned char 
 15177 ;; Auto vars:     Size  Location     Type
 15178 ;;  colorRow        1   73[COMRAM] unsigned char 
 15179 ;;  i               1   74[COMRAM] unsigned char 
 15180 ;;  mBlank         16   57[COMRAM] unsigned char [16]
 15181 ;; Return value:  Size  Location     Type
 15182 ;;                  1    wreg      void 
 15183 ;; Registers used:
 15184 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15185 ;; Tracked objects:
 15186 ;;		On entry : 0/0
 15187 ;;		On exit  : 0/0
 15188 ;;		Unchanged: 0/0
 15189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15191 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15192 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15193 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15194 ;;Total ram usage:       18 bytes
 15195 ;; Hardware stack levels used:    1
 15196 ;; Hardware stack levels required when called:    5
 15197 ;; This function calls:
 15198 ;;		i2_lcd_text
 15199 ;; This function is called by:
 15200 ;;		_menu_navigate
 15201 ;; This function uses a non-reentrant model
 15202 ;;
 15203                           
 15204                           	psect	text45
 15205  004592                     __ptext45:
 15206                           	opt stack 0
 15207  004592                     _menu_45:
 15208                           	opt stack 16
 15209                           
 15210                           ;incstack = 0
 15211                           ;menu_45@colorRow stored from wreg
 15212  004592  6E4A               	movwf	menu_45@colorRow,c
 15213                           
 15214                           ;menu.c: 387: char mBlank[16] = "               ";
 15215  004594  EE25  F020         	lfsr	2,menu_45@F15300
 15216  004598  EE10  F03A         	lfsr	1,menu_45@mBlank
 15217  00459C  0E0F               	movlw	15
 15218  00459E                     i2u944_41:
 15219  00459E  CFDB FFE3          	movff	plusw2,plusw1
 15220  0045A2  06E8               	decf	wreg,f,c
 15221  0045A4  E2FC               	bc	i2u944_41
 15222                           
 15223                           ;menu.c: 388: lcd_text(1,memPort,colorRow);
 15224  0045A6  0ED0               	movlw	low _memPort
 15225  0045A8  6E18               	movwf	i2lcd_text@msjPtr,c
 15226  0045AA  0E04               	movlw	high _memPort
 15227  0045AC  6E19               	movwf	i2lcd_text@msjPtr+1,c
 15228  0045AE  C04A  F01A         	movff	menu_45@colorRow,i2lcd_text@color
 15229  0045B2  0E01               	movlw	1
 15230  0045B4  ECE6  F00C         	call	i2_lcd_text
 15231                           
 15232                           ;menu.c: 389: for (char i=0;i<6;i++) {
 15233  0045B8  0E00               	movlw	0
 15234  0045BA  6E4B               	movwf	menu_45@i,c
 15235  0045BC                     i2l8650:
 15236  0045BC  0E05               	movlw	5
 15237  0045BE  644B               	cpfsgt	menu_45@i,c
 15238  0045C0  D001               	goto	i2l814
 15239  0045C2  0012               	return	
 15240  0045C4                     i2l814:
 15241                           
 15242                           ;menu.c: 390: lcd_text(2+i,mBlank,0);
 15243  0045C4  0E3A               	movlw	low menu_45@mBlank
 15244  0045C6  6E18               	movwf	i2lcd_text@msjPtr,c
 15245  0045C8  0E00               	movlw	high menu_45@mBlank
 15246  0045CA  6E19               	movwf	i2lcd_text@msjPtr+1,c
 15247  0045CC  0E00               	movlw	0
 15248  0045CE  6E1A               	movwf	i2lcd_text@color,c
 15249  0045D0  504B               	movf	menu_45@i,w,c
 15250  0045D2  0F02               	addlw	2
 15251  0045D4  ECE6  F00C         	call	i2_lcd_text
 15252  0045D8  2A4B               	incf	menu_45@i,f,c
 15253  0045DA  D7F0               	goto	i2l8650
 15254  0045DC                     __end_of_menu_45:
 15255                           	opt stack 0
 15256                           pclatu	equ	0xFFB
 15257                           pclath	equ	0xFFA
 15258                           tblptru	equ	0xFF8
 15259                           tblptrh	equ	0xFF7
 15260                           tblptrl	equ	0xFF6
 15261                           tablat	equ	0xFF5
 15262                           prodh	equ	0xFF4
 15263                           prodl	equ	0xFF3
 15264                           intcon	equ	0xFF2
 15265                           postinc0	equ	0xFEE
 15266                           fsr0h	equ	0xFEA
 15267                           fsr0l	equ	0xFE9
 15268                           wreg	equ	0xFE8
 15269                           indf1	equ	0xFE7
 15270                           postdec1	equ	0xFE5
 15271                           plusw1	equ	0xFE3
 15272                           fsr1h	equ	0xFE2
 15273                           fsr1l	equ	0xFE1
 15274                           indf2	equ	0xFDF
 15275                           postinc2	equ	0xFDE
 15276                           postdec2	equ	0xFDD
 15277                           plusw2	equ	0xFDB
 15278                           fsr2h	equ	0xFDA
 15279                           fsr2l	equ	0xFD9
 15280                           status	equ	0xFD8
 15281                           
 15282 ;; *************** function _menu_44 *****************
 15283 ;; Defined at:
 15284 ;;		line 378 in file "menu.c"
 15285 ;; Parameters:    Size  Location     Type
 15286 ;;  colorRow        1    wreg     unsigned char 
 15287 ;; Auto vars:     Size  Location     Type
 15288 ;;  colorRow        1   73[COMRAM] unsigned char 
 15289 ;;  i               1   74[COMRAM] unsigned char 
 15290 ;;  mBlank         16   57[COMRAM] unsigned char [16]
 15291 ;; Return value:  Size  Location     Type
 15292 ;;                  1    wreg      void 
 15293 ;; Registers used:
 15294 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15295 ;; Tracked objects:
 15296 ;;		On entry : 0/0
 15297 ;;		On exit  : 0/0
 15298 ;;		Unchanged: 0/0
 15299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15301 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15303 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15304 ;;Total ram usage:       18 bytes
 15305 ;; Hardware stack levels used:    1
 15306 ;; Hardware stack levels required when called:    5
 15307 ;; This function calls:
 15308 ;;		i2_lcd_text
 15309 ;; This function is called by:
 15310 ;;		_menu_navigate
 15311 ;; This function uses a non-reentrant model
 15312 ;;
 15313                           
 15314                           	psect	text46
 15315  0045DC                     __ptext46:
 15316                           	opt stack 0
 15317  0045DC                     _menu_44:
 15318                           	opt stack 16
 15319                           
 15320                           ;incstack = 0
 15321                           ;menu_44@colorRow stored from wreg
 15322  0045DC  6E4A               	movwf	menu_44@colorRow,c
 15323                           
 15324                           ;menu.c: 379: char mBlank[16] = "               ";
 15325  0045DE  EE25  F030         	lfsr	2,menu_44@F15296
 15326  0045E2  EE10  F03A         	lfsr	1,menu_44@mBlank
 15327  0045E6  0E0F               	movlw	15
 15328  0045E8                     i2u941_41:
 15329  0045E8  CFDB FFE3          	movff	plusw2,plusw1
 15330  0045EC  06E8               	decf	wreg,f,c
 15331  0045EE  E2FC               	bc	i2u941_41
 15332                           
 15333                           ;menu.c: 380: lcd_text(1,memIp,colorRow);
 15334  0045F0  0EF0               	movlw	low _memIp
 15335  0045F2  6E18               	movwf	i2lcd_text@msjPtr,c
 15336  0045F4  0E04               	movlw	high _memIp
 15337  0045F6  6E19               	movwf	i2lcd_text@msjPtr+1,c
 15338  0045F8  C04A  F01A         	movff	menu_44@colorRow,i2lcd_text@color
 15339  0045FC  0E01               	movlw	1
 15340  0045FE  ECE6  F00C         	call	i2_lcd_text
 15341                           
 15342                           ;menu.c: 381: for (char i=0;i<6;i++) {
 15343  004602  0E00               	movlw	0
 15344  004604  6E4B               	movwf	menu_44@i,c
 15345  004606                     i2l8634:
 15346  004606  0E05               	movlw	5
 15347  004608  644B               	cpfsgt	menu_44@i,c
 15348  00460A  D001               	goto	i2l807
 15349  00460C  0012               	return	
 15350  00460E                     i2l807:
 15351                           
 15352                           ;menu.c: 382: lcd_text(2+i,mBlank,0);
 15353  00460E  0E3A               	movlw	low menu_44@mBlank
 15354  004610  6E18               	movwf	i2lcd_text@msjPtr,c
 15355  004612  0E00               	movlw	high menu_44@mBlank
 15356  004614  6E19               	movwf	i2lcd_text@msjPtr+1,c
 15357  004616  0E00               	movlw	0
 15358  004618  6E1A               	movwf	i2lcd_text@color,c
 15359  00461A  504B               	movf	menu_44@i,w,c
 15360  00461C  0F02               	addlw	2
 15361  00461E  ECE6  F00C         	call	i2_lcd_text
 15362  004622  2A4B               	incf	menu_44@i,f,c
 15363  004624  D7F0               	goto	i2l8634
 15364  004626                     __end_of_menu_44:
 15365                           	opt stack 0
 15366                           pclatu	equ	0xFFB
 15367                           pclath	equ	0xFFA
 15368                           tblptru	equ	0xFF8
 15369                           tblptrh	equ	0xFF7
 15370                           tblptrl	equ	0xFF6
 15371                           tablat	equ	0xFF5
 15372                           prodh	equ	0xFF4
 15373                           prodl	equ	0xFF3
 15374                           intcon	equ	0xFF2
 15375                           postinc0	equ	0xFEE
 15376                           fsr0h	equ	0xFEA
 15377                           fsr0l	equ	0xFE9
 15378                           wreg	equ	0xFE8
 15379                           indf1	equ	0xFE7
 15380                           postdec1	equ	0xFE5
 15381                           plusw1	equ	0xFE3
 15382                           fsr1h	equ	0xFE2
 15383                           fsr1l	equ	0xFE1
 15384                           indf2	equ	0xFDF
 15385                           postinc2	equ	0xFDE
 15386                           postdec2	equ	0xFDD
 15387                           plusw2	equ	0xFDB
 15388                           fsr2h	equ	0xFDA
 15389                           fsr2l	equ	0xFD9
 15390                           status	equ	0xFD8
 15391                           
 15392 ;; *************** function _menu_43 *****************
 15393 ;; Defined at:
 15394 ;;		line 370 in file "menu.c"
 15395 ;; Parameters:    Size  Location     Type
 15396 ;;  colorRow        1    wreg     unsigned char 
 15397 ;; Auto vars:     Size  Location     Type
 15398 ;;  colorRow        1   73[COMRAM] unsigned char 
 15399 ;;  i               1   74[COMRAM] unsigned char 
 15400 ;;  mBlank         16   57[COMRAM] unsigned char [16]
 15401 ;; Return value:  Size  Location     Type
 15402 ;;                  1    wreg      void 
 15403 ;; Registers used:
 15404 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15405 ;; Tracked objects:
 15406 ;;		On entry : 0/0
 15407 ;;		On exit  : 0/0
 15408 ;;		Unchanged: 0/0
 15409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15411 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15413 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15414 ;;Total ram usage:       18 bytes
 15415 ;; Hardware stack levels used:    1
 15416 ;; Hardware stack levels required when called:    5
 15417 ;; This function calls:
 15418 ;;		i2_lcd_text
 15419 ;; This function is called by:
 15420 ;;		_menu_navigate
 15421 ;; This function uses a non-reentrant model
 15422 ;;
 15423                           
 15424                           	psect	text47
 15425  004626                     __ptext47:
 15426                           	opt stack 0
 15427  004626                     _menu_43:
 15428                           	opt stack 16
 15429                           
 15430                           ;incstack = 0
 15431                           ;menu_43@colorRow stored from wreg
 15432  004626  6E4A               	movwf	menu_43@colorRow,c
 15433                           
 15434                           ;menu.c: 371: char mBlank[16] = "               ";
 15435  004628  EE25  F040         	lfsr	2,menu_43@F15292
 15436  00462C  EE10  F03A         	lfsr	1,menu_43@mBlank
 15437  004630  0E0F               	movlw	15
 15438  004632                     i2u938_41:
 15439  004632  CFDB FFE3          	movff	plusw2,plusw1
 15440  004636  06E8               	decf	wreg,f,c
 15441  004638  E2FC               	bc	i2u938_41
 15442                           
 15443                           ;menu.c: 372: lcd_text(1,memMac,colorRow);
 15444  00463A  0EE0               	movlw	low _memMac
 15445  00463C  6E18               	movwf	i2lcd_text@msjPtr,c
 15446  00463E  0E04               	movlw	high _memMac
 15447  004640  6E19               	movwf	i2lcd_text@msjPtr+1,c
 15448  004642  C04A  F01A         	movff	menu_43@colorRow,i2lcd_text@color
 15449  004646  0E01               	movlw	1
 15450  004648  ECE6  F00C         	call	i2_lcd_text
 15451                           
 15452                           ;menu.c: 373: for (char i=0;i<6;i++) {
 15453  00464C  0E00               	movlw	0
 15454  00464E  6E4B               	movwf	menu_43@i,c
 15455  004650                     i2l8618:
 15456  004650  0E05               	movlw	5
 15457  004652  644B               	cpfsgt	menu_43@i,c
 15458  004654  D001               	goto	i2l800
 15459  004656  0012               	return	
 15460  004658                     i2l800:
 15461                           
 15462                           ;menu.c: 374: lcd_text(2+i,mBlank,0);
 15463  004658  0E3A               	movlw	low menu_43@mBlank
 15464  00465A  6E18               	movwf	i2lcd_text@msjPtr,c
 15465  00465C  0E00               	movlw	high menu_43@mBlank
 15466  00465E  6E19               	movwf	i2lcd_text@msjPtr+1,c
 15467  004660  0E00               	movlw	0
 15468  004662  6E1A               	movwf	i2lcd_text@color,c
 15469  004664  504B               	movf	menu_43@i,w,c
 15470  004666  0F02               	addlw	2
 15471  004668  ECE6  F00C         	call	i2_lcd_text
 15472  00466C  2A4B               	incf	menu_43@i,f,c
 15473  00466E  D7F0               	goto	i2l8618
 15474  004670                     __end_of_menu_43:
 15475                           	opt stack 0
 15476                           pclatu	equ	0xFFB
 15477                           pclath	equ	0xFFA
 15478                           tblptru	equ	0xFF8
 15479                           tblptrh	equ	0xFF7
 15480                           tblptrl	equ	0xFF6
 15481                           tablat	equ	0xFF5
 15482                           prodh	equ	0xFF4
 15483                           prodl	equ	0xFF3
 15484                           intcon	equ	0xFF2
 15485                           postinc0	equ	0xFEE
 15486                           fsr0h	equ	0xFEA
 15487                           fsr0l	equ	0xFE9
 15488                           wreg	equ	0xFE8
 15489                           indf1	equ	0xFE7
 15490                           postdec1	equ	0xFE5
 15491                           plusw1	equ	0xFE3
 15492                           fsr1h	equ	0xFE2
 15493                           fsr1l	equ	0xFE1
 15494                           indf2	equ	0xFDF
 15495                           postinc2	equ	0xFDE
 15496                           postdec2	equ	0xFDD
 15497                           plusw2	equ	0xFDB
 15498                           fsr2h	equ	0xFDA
 15499                           fsr2l	equ	0xFD9
 15500                           status	equ	0xFD8
 15501                           
 15502 ;; *************** function _menu_42 *****************
 15503 ;; Defined at:
 15504 ;;		line 362 in file "menu.c"
 15505 ;; Parameters:    Size  Location     Type
 15506 ;;  colorRow        1    wreg     unsigned char 
 15507 ;; Auto vars:     Size  Location     Type
 15508 ;;  colorRow        1   73[COMRAM] unsigned char 
 15509 ;;  i               1   74[COMRAM] unsigned char 
 15510 ;;  mBlank         16   57[COMRAM] unsigned char [16]
 15511 ;; Return value:  Size  Location     Type
 15512 ;;                  1    wreg      void 
 15513 ;; Registers used:
 15514 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15515 ;; Tracked objects:
 15516 ;;		On entry : 0/0
 15517 ;;		On exit  : 0/0
 15518 ;;		Unchanged: 0/0
 15519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15520 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15521 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15522 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15523 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15524 ;;Total ram usage:       18 bytes
 15525 ;; Hardware stack levels used:    1
 15526 ;; Hardware stack levels required when called:    5
 15527 ;; This function calls:
 15528 ;;		i2_lcd_text
 15529 ;; This function is called by:
 15530 ;;		_menu_navigate
 15531 ;; This function uses a non-reentrant model
 15532 ;;
 15533                           
 15534                           	psect	text48
 15535  004670                     __ptext48:
 15536                           	opt stack 0
 15537  004670                     _menu_42:
 15538                           	opt stack 16
 15539                           
 15540                           ;incstack = 0
 15541                           ;menu_42@colorRow stored from wreg
 15542  004670  6E4A               	movwf	menu_42@colorRow,c
 15543                           
 15544                           ;menu.c: 363: char mBlank[16] = "               ";
 15545  004672  EE25  F050         	lfsr	2,menu_42@F15288
 15546  004676  EE10  F03A         	lfsr	1,menu_42@mBlank
 15547  00467A  0E0F               	movlw	15
 15548  00467C                     i2u935_41:
 15549  00467C  CFDB FFE3          	movff	plusw2,plusw1
 15550  004680  06E8               	decf	wreg,f,c
 15551  004682  E2FC               	bc	i2u935_41
 15552                           
 15553                           ;menu.c: 364: lcd_text(1,memSubnet,colorRow);
 15554  004684  0E00               	movlw	low _memSubnet
 15555  004686  6E18               	movwf	i2lcd_text@msjPtr,c
 15556  004688  0E03               	movlw	high _memSubnet
 15557  00468A  6E19               	movwf	i2lcd_text@msjPtr+1,c
 15558  00468C  C04A  F01A         	movff	menu_42@colorRow,i2lcd_text@color
 15559  004690  0E01               	movlw	1
 15560  004692  ECE6  F00C         	call	i2_lcd_text
 15561                           
 15562                           ;menu.c: 365: for (char i=0;i<6;i++) {
 15563  004696  0E00               	movlw	0
 15564  004698  6E4B               	movwf	menu_42@i,c
 15565  00469A                     i2l8602:
 15566  00469A  0E05               	movlw	5
 15567  00469C  644B               	cpfsgt	menu_42@i,c
 15568  00469E  D001               	goto	i2l793
 15569  0046A0  0012               	return	
 15570  0046A2                     i2l793:
 15571                           
 15572                           ;menu.c: 366: lcd_text(2+i,mBlank,0);
 15573  0046A2  0E3A               	movlw	low menu_42@mBlank
 15574  0046A4  6E18               	movwf	i2lcd_text@msjPtr,c
 15575  0046A6  0E00               	movlw	high menu_42@mBlank
 15576  0046A8  6E19               	movwf	i2lcd_text@msjPtr+1,c
 15577  0046AA  0E00               	movlw	0
 15578  0046AC  6E1A               	movwf	i2lcd_text@color,c
 15579  0046AE  504B               	movf	menu_42@i,w,c
 15580  0046B0  0F02               	addlw	2
 15581  0046B2  ECE6  F00C         	call	i2_lcd_text
 15582  0046B6  2A4B               	incf	menu_42@i,f,c
 15583  0046B8  D7F0               	goto	i2l8602
 15584  0046BA                     __end_of_menu_42:
 15585                           	opt stack 0
 15586                           pclatu	equ	0xFFB
 15587                           pclath	equ	0xFFA
 15588                           tblptru	equ	0xFF8
 15589                           tblptrh	equ	0xFF7
 15590                           tblptrl	equ	0xFF6
 15591                           tablat	equ	0xFF5
 15592                           prodh	equ	0xFF4
 15593                           prodl	equ	0xFF3
 15594                           intcon	equ	0xFF2
 15595                           postinc0	equ	0xFEE
 15596                           fsr0h	equ	0xFEA
 15597                           fsr0l	equ	0xFE9
 15598                           wreg	equ	0xFE8
 15599                           indf1	equ	0xFE7
 15600                           postdec1	equ	0xFE5
 15601                           plusw1	equ	0xFE3
 15602                           fsr1h	equ	0xFE2
 15603                           fsr1l	equ	0xFE1
 15604                           indf2	equ	0xFDF
 15605                           postinc2	equ	0xFDE
 15606                           postdec2	equ	0xFDD
 15607                           plusw2	equ	0xFDB
 15608                           fsr2h	equ	0xFDA
 15609                           fsr2l	equ	0xFD9
 15610                           status	equ	0xFD8
 15611                           
 15612 ;; *************** function _menu_41 *****************
 15613 ;; Defined at:
 15614 ;;		line 354 in file "menu.c"
 15615 ;; Parameters:    Size  Location     Type
 15616 ;;  colorRow        1    wreg     unsigned char 
 15617 ;; Auto vars:     Size  Location     Type
 15618 ;;  colorRow        1   73[COMRAM] unsigned char 
 15619 ;;  i               1   74[COMRAM] unsigned char 
 15620 ;;  mBlank         16   57[COMRAM] unsigned char [16]
 15621 ;; Return value:  Size  Location     Type
 15622 ;;                  1    wreg      void 
 15623 ;; Registers used:
 15624 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15625 ;; Tracked objects:
 15626 ;;		On entry : 0/0
 15627 ;;		On exit  : 0/0
 15628 ;;		Unchanged: 0/0
 15629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15631 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15633 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15634 ;;Total ram usage:       18 bytes
 15635 ;; Hardware stack levels used:    1
 15636 ;; Hardware stack levels required when called:    5
 15637 ;; This function calls:
 15638 ;;		i2_lcd_text
 15639 ;; This function is called by:
 15640 ;;		_menu_navigate
 15641 ;; This function uses a non-reentrant model
 15642 ;;
 15643                           
 15644                           	psect	text49
 15645  0046BA                     __ptext49:
 15646                           	opt stack 0
 15647  0046BA                     _menu_41:
 15648                           	opt stack 16
 15649                           
 15650                           ;incstack = 0
 15651                           ;menu_41@colorRow stored from wreg
 15652  0046BA  6E4A               	movwf	menu_41@colorRow,c
 15653                           
 15654                           ;menu.c: 355: char mBlank[16] = "               ";
 15655  0046BC  EE24  F000         	lfsr	2,menu_41@F15284
 15656  0046C0  EE10  F03A         	lfsr	1,menu_41@mBlank
 15657  0046C4  0E0F               	movlw	15
 15658  0046C6                     i2u932_41:
 15659  0046C6  CFDB FFE3          	movff	plusw2,plusw1
 15660  0046CA  06E8               	decf	wreg,f,c
 15661  0046CC  E2FC               	bc	i2u932_41
 15662                           
 15663                           ;menu.c: 356: lcd_text(1,memGateway,colorRow);
 15664  0046CE  0E10               	movlw	low _memGateway
 15665  0046D0  6E18               	movwf	i2lcd_text@msjPtr,c
 15666  0046D2  0E03               	movlw	high _memGateway
 15667  0046D4  6E19               	movwf	i2lcd_text@msjPtr+1,c
 15668  0046D6  C04A  F01A         	movff	menu_41@colorRow,i2lcd_text@color
 15669  0046DA  0E01               	movlw	1
 15670  0046DC  ECE6  F00C         	call	i2_lcd_text
 15671                           
 15672                           ;menu.c: 357: for (char i=0;i<6;i++) {
 15673  0046E0  0E00               	movlw	0
 15674  0046E2  6E4B               	movwf	menu_41@i,c
 15675  0046E4                     i2l8586:
 15676  0046E4  0E05               	movlw	5
 15677  0046E6  644B               	cpfsgt	menu_41@i,c
 15678  0046E8  D001               	goto	i2l786
 15679  0046EA  0012               	return	
 15680  0046EC                     i2l786:
 15681                           
 15682                           ;menu.c: 358: lcd_text(2+i,mBlank,0);
 15683  0046EC  0E3A               	movlw	low menu_41@mBlank
 15684  0046EE  6E18               	movwf	i2lcd_text@msjPtr,c
 15685  0046F0  0E00               	movlw	high menu_41@mBlank
 15686  0046F2  6E19               	movwf	i2lcd_text@msjPtr+1,c
 15687  0046F4  0E00               	movlw	0
 15688  0046F6  6E1A               	movwf	i2lcd_text@color,c
 15689  0046F8  504B               	movf	menu_41@i,w,c
 15690  0046FA  0F02               	addlw	2
 15691  0046FC  ECE6  F00C         	call	i2_lcd_text
 15692  004700  2A4B               	incf	menu_41@i,f,c
 15693  004702  D7F0               	goto	i2l8586
 15694  004704                     __end_of_menu_41:
 15695                           	opt stack 0
 15696                           pclatu	equ	0xFFB
 15697                           pclath	equ	0xFFA
 15698                           tblptru	equ	0xFF8
 15699                           tblptrh	equ	0xFF7
 15700                           tblptrl	equ	0xFF6
 15701                           tablat	equ	0xFF5
 15702                           prodh	equ	0xFF4
 15703                           prodl	equ	0xFF3
 15704                           intcon	equ	0xFF2
 15705                           postinc0	equ	0xFEE
 15706                           fsr0h	equ	0xFEA
 15707                           fsr0l	equ	0xFE9
 15708                           wreg	equ	0xFE8
 15709                           indf1	equ	0xFE7
 15710                           postdec1	equ	0xFE5
 15711                           plusw1	equ	0xFE3
 15712                           fsr1h	equ	0xFE2
 15713                           fsr1l	equ	0xFE1
 15714                           indf2	equ	0xFDF
 15715                           postinc2	equ	0xFDE
 15716                           postdec2	equ	0xFDD
 15717                           plusw2	equ	0xFDB
 15718                           fsr2h	equ	0xFDA
 15719                           fsr2l	equ	0xFD9
 15720                           status	equ	0xFD8
 15721                           
 15722 ;; *************** function _menu_4 *****************
 15723 ;; Defined at:
 15724 ;;		line 314 in file "menu.c"
 15725 ;; Parameters:    Size  Location     Type
 15726 ;;  colorRow        1    wreg     unsigned char 
 15727 ;; Auto vars:     Size  Location     Type
 15728 ;;  colorRow        1   73[COMRAM] unsigned char 
 15729 ;;  mBlank         16   57[COMRAM] unsigned char [16]
 15730 ;; Return value:  Size  Location     Type
 15731 ;;                  1    wreg      void 
 15732 ;; Registers used:
 15733 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15734 ;; Tracked objects:
 15735 ;;		On entry : 0/0
 15736 ;;		On exit  : 0/0
 15737 ;;		Unchanged: 0/0
 15738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15740 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15742 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15743 ;;Total ram usage:       17 bytes
 15744 ;; Hardware stack levels used:    1
 15745 ;; Hardware stack levels required when called:    5
 15746 ;; This function calls:
 15747 ;;		i2_lcd_text
 15748 ;; This function is called by:
 15749 ;;		_menu_navigate
 15750 ;; This function uses a non-reentrant model
 15751 ;;
 15752                           
 15753                           	psect	text50
 15754  002790                     __ptext50:
 15755                           	opt stack 0
 15756  002790                     _menu_4:
 15757                           	opt stack 16
 15758                           
 15759                           ;incstack = 0
 15760                           ;menu_4@colorRow stored from wreg
 15761  002790  6E4A               	movwf	menu_4@colorRow,c
 15762                           
 15763                           ;menu.c: 315: char mBlank[16] = "               ";
 15764  002792  EE24  F010         	lfsr	2,menu_4@F15281
 15765  002796  EE10  F03A         	lfsr	1,menu_4@mBlank
 15766  00279A  0E0F               	movlw	15
 15767  00279C                     i2u924_41:
 15768  00279C  CFDB FFE3          	movff	plusw2,plusw1
 15769  0027A0  06E8               	decf	wreg,f,c
 15770  0027A2  E2FC               	bc	i2u924_41
 15771                           
 15772                           ;menu.c: 316: if (colorRow == 1) {
 15773  0027A4  044A               	decf	menu_4@colorRow,w,c
 15774  0027A6  A4D8               	btfss	status,2,c
 15775  0027A8  D00A               	goto	i2l767
 15776                           
 15777                           ;menu.c: 317: lcd_text(1,msjGATEWAY,1);
 15778  0027AA  0EC0               	movlw	low _msjGATEWAY
 15779  0027AC  6E18               	movwf	i2lcd_text@msjPtr,c
 15780  0027AE  0E02               	movlw	high _msjGATEWAY
 15781  0027B0  6E19               	movwf	i2lcd_text@msjPtr+1,c
 15782  0027B2  0E01               	movlw	1
 15783  0027B4  6E1A               	movwf	i2lcd_text@color,c
 15784  0027B6  0E01               	movlw	1
 15785  0027B8  ECE6  F00C         	call	i2_lcd_text
 15786                           
 15787                           ;menu.c: 318: } else {
 15788  0027BC  D009               	goto	i2l768
 15789  0027BE                     i2l767:
 15790                           
 15791                           ;menu.c: 319: lcd_text(1,msjGATEWAY,0);
 15792  0027BE  0EC0               	movlw	low _msjGATEWAY
 15793  0027C0  6E18               	movwf	i2lcd_text@msjPtr,c
 15794  0027C2  0E02               	movlw	high _msjGATEWAY
 15795  0027C4  6E19               	movwf	i2lcd_text@msjPtr+1,c
 15796  0027C6  0E00               	movlw	0
 15797  0027C8  6E1A               	movwf	i2lcd_text@color,c
 15798  0027CA  0E01               	movlw	1
 15799  0027CC  ECE6  F00C         	call	i2_lcd_text
 15800  0027D0                     i2l768:
 15801                           
 15802                           ;menu.c: 320: }
 15803                           ;menu.c: 321: if (colorRow == 2) {
 15804  0027D0  0E02               	movlw	2
 15805  0027D2  184A               	xorwf	menu_4@colorRow,w,c
 15806  0027D4  A4D8               	btfss	status,2,c
 15807  0027D6  D00A               	goto	i2l769
 15808                           
 15809                           ;menu.c: 322: lcd_text(2,msjSUBNETMASK,1);
 15810  0027D8  0EB0               	movlw	low _msjSUBNETMASK
 15811  0027DA  6E18               	movwf	i2lcd_text@msjPtr,c
 15812  0027DC  0E02               	movlw	high _msjSUBNETMASK
 15813  0027DE  6E19               	movwf	i2lcd_text@msjPtr+1,c
 15814  0027E0  0E01               	movlw	1
 15815  0027E2  6E1A               	movwf	i2lcd_text@color,c
 15816  0027E4  0E02               	movlw	2
 15817  0027E6  ECE6  F00C         	call	i2_lcd_text
 15818                           
 15819                           ;menu.c: 323: } else {
 15820  0027EA  D009               	goto	i2l770
 15821  0027EC                     i2l769:
 15822                           
 15823                           ;menu.c: 324: lcd_text(2,msjSUBNETMASK,0);
 15824  0027EC  0EB0               	movlw	low _msjSUBNETMASK
 15825  0027EE  6E18               	movwf	i2lcd_text@msjPtr,c
 15826  0027F0  0E02               	movlw	high _msjSUBNETMASK
 15827  0027F2  6E19               	movwf	i2lcd_text@msjPtr+1,c
 15828  0027F4  0E00               	movlw	0
 15829  0027F6  6E1A               	movwf	i2lcd_text@color,c
 15830  0027F8  0E02               	movlw	2
 15831  0027FA  ECE6  F00C         	call	i2_lcd_text
 15832  0027FE                     i2l770:
 15833                           
 15834                           ;menu.c: 325: }
 15835                           ;menu.c: 326: if (colorRow == 3) {
 15836  0027FE  0E03               	movlw	3
 15837  002800  184A               	xorwf	menu_4@colorRow,w,c
 15838  002802  A4D8               	btfss	status,2,c
 15839  002804  D00A               	goto	i2l771
 15840                           
 15841                           ;menu.c: 327: lcd_text(3,msjMAC,1);
 15842  002806  0EA0               	movlw	low _msjMAC
 15843  002808  6E18               	movwf	i2lcd_text@msjPtr,c
 15844  00280A  0E02               	movlw	high _msjMAC
 15845  00280C  6E19               	movwf	i2lcd_text@msjPtr+1,c
 15846  00280E  0E01               	movlw	1
 15847  002810  6E1A               	movwf	i2lcd_text@color,c
 15848  002812  0E03               	movlw	3
 15849  002814  ECE6  F00C         	call	i2_lcd_text
 15850                           
 15851                           ;menu.c: 328: } else {
 15852  002818  D009               	goto	i2l772
 15853  00281A                     i2l771:
 15854                           
 15855                           ;menu.c: 329: lcd_text(3,msjMAC,0);
 15856  00281A  0EA0               	movlw	low _msjMAC
 15857  00281C  6E18               	movwf	i2lcd_text@msjPtr,c
 15858  00281E  0E02               	movlw	high _msjMAC
 15859  002820  6E19               	movwf	i2lcd_text@msjPtr+1,c
 15860  002822  0E00               	movlw	0
 15861  002824  6E1A               	movwf	i2lcd_text@color,c
 15862  002826  0E03               	movlw	3
 15863  002828  ECE6  F00C         	call	i2_lcd_text
 15864  00282C                     i2l772:
 15865                           
 15866                           ;menu.c: 330: }
 15867                           ;menu.c: 331: if (colorRow == 4) {
 15868  00282C  0E04               	movlw	4
 15869  00282E  184A               	xorwf	menu_4@colorRow,w,c
 15870  002830  A4D8               	btfss	status,2,c
 15871  002832  D00A               	goto	i2l773
 15872                           
 15873                           ;menu.c: 332: lcd_text(4,msjIP,1);
 15874  002834  0E90               	movlw	low _msjIP
 15875  002836  6E18               	movwf	i2lcd_text@msjPtr,c
 15876  002838  0E02               	movlw	high _msjIP
 15877  00283A  6E19               	movwf	i2lcd_text@msjPtr+1,c
 15878  00283C  0E01               	movlw	1
 15879  00283E  6E1A               	movwf	i2lcd_text@color,c
 15880  002840  0E04               	movlw	4
 15881  002842  ECE6  F00C         	call	i2_lcd_text
 15882                           
 15883                           ;menu.c: 333: } else {
 15884  002846  D009               	goto	i2l774
 15885  002848                     i2l773:
 15886                           
 15887                           ;menu.c: 334: lcd_text(4,msjIP,0);
 15888  002848  0E90               	movlw	low _msjIP
 15889  00284A  6E18               	movwf	i2lcd_text@msjPtr,c
 15890  00284C  0E02               	movlw	high _msjIP
 15891  00284E  6E19               	movwf	i2lcd_text@msjPtr+1,c
 15892  002850  0E00               	movlw	0
 15893  002852  6E1A               	movwf	i2lcd_text@color,c
 15894  002854  0E04               	movlw	4
 15895  002856  ECE6  F00C         	call	i2_lcd_text
 15896  00285A                     i2l774:
 15897                           
 15898                           ;menu.c: 335: }
 15899                           ;menu.c: 336: if (colorRow == 5) {
 15900  00285A  0E05               	movlw	5
 15901  00285C  184A               	xorwf	menu_4@colorRow,w,c
 15902  00285E  A4D8               	btfss	status,2,c
 15903  002860  D00A               	goto	i2l775
 15904                           
 15905                           ;menu.c: 337: lcd_text(5,msjPORT,1);
 15906  002862  0E80               	movlw	low _msjPORT
 15907  002864  6E18               	movwf	i2lcd_text@msjPtr,c
 15908  002866  0E02               	movlw	high _msjPORT
 15909  002868  6E19               	movwf	i2lcd_text@msjPtr+1,c
 15910  00286A  0E01               	movlw	1
 15911  00286C  6E1A               	movwf	i2lcd_text@color,c
 15912  00286E  0E05               	movlw	5
 15913  002870  ECE6  F00C         	call	i2_lcd_text
 15914                           
 15915                           ;menu.c: 338: } else {
 15916  002874  D009               	goto	i2l776
 15917  002876                     i2l775:
 15918                           
 15919                           ;menu.c: 339: lcd_text(5,msjPORT,0);
 15920  002876  0E80               	movlw	low _msjPORT
 15921  002878  6E18               	movwf	i2lcd_text@msjPtr,c
 15922  00287A  0E02               	movlw	high _msjPORT
 15923  00287C  6E19               	movwf	i2lcd_text@msjPtr+1,c
 15924  00287E  0E00               	movlw	0
 15925  002880  6E1A               	movwf	i2lcd_text@color,c
 15926  002882  0E05               	movlw	5
 15927  002884  ECE6  F00C         	call	i2_lcd_text
 15928  002888                     i2l776:
 15929                           
 15930                           ;menu.c: 340: }
 15931                           ;menu.c: 341: if (colorRow == 6) {
 15932  002888  0E06               	movlw	6
 15933  00288A  184A               	xorwf	menu_4@colorRow,w,c
 15934  00288C  A4D8               	btfss	status,2,c
 15935  00288E  D00A               	goto	i2l777
 15936                           
 15937                           ;menu.c: 342: lcd_text(6,msjON,1);
 15938  002890  0E15               	movlw	low _msjON
 15939  002892  6E18               	movwf	i2lcd_text@msjPtr,c
 15940  002894  0E01               	movlw	high _msjON
 15941  002896  6E19               	movwf	i2lcd_text@msjPtr+1,c
 15942  002898  0E01               	movlw	1
 15943  00289A  6E1A               	movwf	i2lcd_text@color,c
 15944  00289C  0E06               	movlw	6
 15945  00289E  ECE6  F00C         	call	i2_lcd_text
 15946                           
 15947                           ;menu.c: 343: } else {
 15948  0028A2  D009               	goto	i2l778
 15949  0028A4                     i2l777:
 15950                           
 15951                           ;menu.c: 344: lcd_text(6,msjON,0);
 15952  0028A4  0E15               	movlw	low _msjON
 15953  0028A6  6E18               	movwf	i2lcd_text@msjPtr,c
 15954  0028A8  0E01               	movlw	high _msjON
 15955  0028AA  6E19               	movwf	i2lcd_text@msjPtr+1,c
 15956  0028AC  0E00               	movlw	0
 15957  0028AE  6E1A               	movwf	i2lcd_text@color,c
 15958  0028B0  0E06               	movlw	6
 15959  0028B2  ECE6  F00C         	call	i2_lcd_text
 15960  0028B6                     i2l778:
 15961                           
 15962                           ;menu.c: 345: }
 15963                           ;menu.c: 346: if (colorRow == 7) {
 15964  0028B6  0E07               	movlw	7
 15965  0028B8  184A               	xorwf	menu_4@colorRow,w,c
 15966  0028BA  A4D8               	btfss	status,2,c
 15967  0028BC  D00A               	goto	i2l779
 15968                           
 15969                           ;menu.c: 347: lcd_text(7,msjOFF,1);
 15970  0028BE  0E05               	movlw	low _msjOFF
 15971  0028C0  6E18               	movwf	i2lcd_text@msjPtr,c
 15972  0028C2  0E01               	movlw	high _msjOFF
 15973  0028C4  6E19               	movwf	i2lcd_text@msjPtr+1,c
 15974  0028C6  0E01               	movlw	1
 15975  0028C8  6E1A               	movwf	i2lcd_text@color,c
 15976  0028CA  0E07               	movlw	7
 15977  0028CC  ECE6  F00C         	call	i2_lcd_text
 15978                           
 15979                           ;menu.c: 348: } else {
 15980  0028D0  0012               	return	
 15981  0028D2                     i2l779:
 15982                           
 15983                           ;menu.c: 349: lcd_text(7,msjOFF,0);
 15984  0028D2  0E05               	movlw	low _msjOFF
 15985  0028D4  6E18               	movwf	i2lcd_text@msjPtr,c
 15986  0028D6  0E01               	movlw	high _msjOFF
 15987  0028D8  6E19               	movwf	i2lcd_text@msjPtr+1,c
 15988  0028DA  0E00               	movlw	0
 15989  0028DC  6E1A               	movwf	i2lcd_text@color,c
 15990  0028DE  0E07               	movlw	7
 15991  0028E0  ECE6  F00C         	call	i2_lcd_text
 15992  0028E4  0012               	return	
 15993  0028E6                     __end_of_menu_4:
 15994                           	opt stack 0
 15995                           pclatu	equ	0xFFB
 15996                           pclath	equ	0xFFA
 15997                           tblptru	equ	0xFF8
 15998                           tblptrh	equ	0xFF7
 15999                           tblptrl	equ	0xFF6
 16000                           tablat	equ	0xFF5
 16001                           prodh	equ	0xFF4
 16002                           prodl	equ	0xFF3
 16003                           intcon	equ	0xFF2
 16004                           postinc0	equ	0xFEE
 16005                           fsr0h	equ	0xFEA
 16006                           fsr0l	equ	0xFE9
 16007                           wreg	equ	0xFE8
 16008                           indf1	equ	0xFE7
 16009                           postdec1	equ	0xFE5
 16010                           plusw1	equ	0xFE3
 16011                           fsr1h	equ	0xFE2
 16012                           fsr1l	equ	0xFE1
 16013                           indf2	equ	0xFDF
 16014                           postinc2	equ	0xFDE
 16015                           postdec2	equ	0xFDD
 16016                           plusw2	equ	0xFDB
 16017                           fsr2h	equ	0xFDA
 16018                           fsr2l	equ	0xFD9
 16019                           status	equ	0xFD8
 16020                           
 16021 ;; *************** function _menu_31 *****************
 16022 ;; Defined at:
 16023 ;;		line 286 in file "menu.c"
 16024 ;; Parameters:    Size  Location     Type
 16025 ;;  colorRow        1    wreg     unsigned char 
 16026 ;; Auto vars:     Size  Location     Type
 16027 ;;  colorRow        1   74[COMRAM] unsigned char 
 16028 ;;  i               1   73[COMRAM] unsigned char 
 16029 ;;  mBlank         16   57[COMRAM] unsigned char [16]
 16030 ;; Return value:  Size  Location     Type
 16031 ;;                  1    wreg      void 
 16032 ;; Registers used:
 16033 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16034 ;; Tracked objects:
 16035 ;;		On entry : 0/0
 16036 ;;		On exit  : 0/0
 16037 ;;		Unchanged: 0/0
 16038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16040 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16041 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16042 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16043 ;;Total ram usage:       18 bytes
 16044 ;; Hardware stack levels used:    1
 16045 ;; Hardware stack levels required when called:    5
 16046 ;; This function calls:
 16047 ;;		i2_lcd_text
 16048 ;; This function is called by:
 16049 ;;		_menu_navigate
 16050 ;; This function uses a non-reentrant model
 16051 ;;
 16052                           
 16053                           	psect	text51
 16054  003940                     __ptext51:
 16055                           	opt stack 0
 16056  003940                     _menu_31:
 16057                           	opt stack 16
 16058                           
 16059                           ;incstack = 0
 16060                           ;menu_31@colorRow stored from wreg
 16061  003940  6E4B               	movwf	menu_31@colorRow,c
 16062                           
 16063                           ;menu.c: 287: char mBlank[16] = "               ";
 16064  003942  EE24  F020         	lfsr	2,menu_31@F15277
 16065  003946  EE10  F03A         	lfsr	1,menu_31@mBlank
 16066  00394A  0E0F               	movlw	15
 16067  00394C                     i2u917_41:
 16068  00394C  CFDB FFE3          	movff	plusw2,plusw1
 16069  003950  06E8               	decf	wreg,f,c
 16070  003952  E2FC               	bc	i2u917_41
 16071                           
 16072                           ;menu.c: 288: if (colorRow == 1) {
 16073  003954  044B               	decf	menu_31@colorRow,w,c
 16074  003956  A4D8               	btfss	status,2,c
 16075  003958  D00A               	goto	i2l752
 16076                           
 16077                           ;menu.c: 289: lcd_text(1,msjBAUD1,1);
 16078  00395A  0E80               	movlw	low _msjBAUD1
 16079  00395C  6E18               	movwf	i2lcd_text@msjPtr,c
 16080  00395E  0E03               	movlw	high _msjBAUD1
 16081  003960  6E19               	movwf	i2lcd_text@msjPtr+1,c
 16082  003962  0E01               	movlw	1
 16083  003964  6E1A               	movwf	i2lcd_text@color,c
 16084  003966  0E01               	movlw	1
 16085  003968  ECE6  F00C         	call	i2_lcd_text
 16086                           
 16087                           ;menu.c: 290: } else {
 16088  00396C  D009               	goto	i2l753
 16089  00396E                     i2l752:
 16090                           
 16091                           ;menu.c: 291: lcd_text(1,msjBAUD1,0);
 16092  00396E  0E80               	movlw	low _msjBAUD1
 16093  003970  6E18               	movwf	i2lcd_text@msjPtr,c
 16094  003972  0E03               	movlw	high _msjBAUD1
 16095  003974  6E19               	movwf	i2lcd_text@msjPtr+1,c
 16096  003976  0E00               	movlw	0
 16097  003978  6E1A               	movwf	i2lcd_text@color,c
 16098  00397A  0E01               	movlw	1
 16099  00397C  ECE6  F00C         	call	i2_lcd_text
 16100  003980                     i2l753:
 16101                           
 16102                           ;menu.c: 292: }
 16103                           ;menu.c: 293: if (colorRow == 2) {
 16104  003980  0E02               	movlw	2
 16105  003982  184B               	xorwf	menu_31@colorRow,w,c
 16106  003984  A4D8               	btfss	status,2,c
 16107  003986  D00A               	goto	i2l754
 16108                           
 16109                           ;menu.c: 294: lcd_text(2,msjBAUD2,1);
 16110  003988  0E70               	movlw	low _msjBAUD2
 16111  00398A  6E18               	movwf	i2lcd_text@msjPtr,c
 16112  00398C  0E03               	movlw	high _msjBAUD2
 16113  00398E  6E19               	movwf	i2lcd_text@msjPtr+1,c
 16114  003990  0E01               	movlw	1
 16115  003992  6E1A               	movwf	i2lcd_text@color,c
 16116  003994  0E02               	movlw	2
 16117  003996  ECE6  F00C         	call	i2_lcd_text
 16118                           
 16119                           ;menu.c: 295: } else {
 16120  00399A  D009               	goto	i2l755
 16121  00399C                     i2l754:
 16122                           
 16123                           ;menu.c: 296: lcd_text(2,msjBAUD2,0);
 16124  00399C  0E70               	movlw	low _msjBAUD2
 16125  00399E  6E18               	movwf	i2lcd_text@msjPtr,c
 16126  0039A0  0E03               	movlw	high _msjBAUD2
 16127  0039A2  6E19               	movwf	i2lcd_text@msjPtr+1,c
 16128  0039A4  0E00               	movlw	0
 16129  0039A6  6E1A               	movwf	i2lcd_text@color,c
 16130  0039A8  0E02               	movlw	2
 16131  0039AA  ECE6  F00C         	call	i2_lcd_text
 16132  0039AE                     i2l755:
 16133                           
 16134                           ;menu.c: 297: }
 16135                           ;menu.c: 298: if (colorRow == 3) {
 16136  0039AE  0E03               	movlw	3
 16137  0039B0  184B               	xorwf	menu_31@colorRow,w,c
 16138  0039B2  A4D8               	btfss	status,2,c
 16139  0039B4  D00A               	goto	i2l756
 16140                           
 16141                           ;menu.c: 299: lcd_text(3,msjBAUD3,1);
 16142  0039B6  0E60               	movlw	low _msjBAUD3
 16143  0039B8  6E18               	movwf	i2lcd_text@msjPtr,c
 16144  0039BA  0E03               	movlw	high _msjBAUD3
 16145  0039BC  6E19               	movwf	i2lcd_text@msjPtr+1,c
 16146  0039BE  0E01               	movlw	1
 16147  0039C0  6E1A               	movwf	i2lcd_text@color,c
 16148  0039C2  0E03               	movlw	3
 16149  0039C4  ECE6  F00C         	call	i2_lcd_text
 16150                           
 16151                           ;menu.c: 300: } else {
 16152  0039C8  D009               	goto	i2l757
 16153  0039CA                     i2l756:
 16154                           
 16155                           ;menu.c: 301: lcd_text(3,msjBAUD3,0);
 16156  0039CA  0E60               	movlw	low _msjBAUD3
 16157  0039CC  6E18               	movwf	i2lcd_text@msjPtr,c
 16158  0039CE  0E03               	movlw	high _msjBAUD3
 16159  0039D0  6E19               	movwf	i2lcd_text@msjPtr+1,c
 16160  0039D2  0E00               	movlw	0
 16161  0039D4  6E1A               	movwf	i2lcd_text@color,c
 16162  0039D6  0E03               	movlw	3
 16163  0039D8  ECE6  F00C         	call	i2_lcd_text
 16164  0039DC                     i2l757:
 16165                           
 16166                           ;menu.c: 302: }
 16167                           ;menu.c: 303: if (colorRow == 4) {
 16168  0039DC  0E04               	movlw	4
 16169  0039DE  184B               	xorwf	menu_31@colorRow,w,c
 16170  0039E0  A4D8               	btfss	status,2,c
 16171  0039E2  D00A               	goto	i2l758
 16172                           
 16173                           ;menu.c: 304: lcd_text(4,msjBAUD4,1);
 16174  0039E4  0E50               	movlw	low _msjBAUD4
 16175  0039E6  6E18               	movwf	i2lcd_text@msjPtr,c
 16176  0039E8  0E03               	movlw	high _msjBAUD4
 16177  0039EA  6E19               	movwf	i2lcd_text@msjPtr+1,c
 16178  0039EC  0E01               	movlw	1
 16179  0039EE  6E1A               	movwf	i2lcd_text@color,c
 16180  0039F0  0E04               	movlw	4
 16181  0039F2  ECE6  F00C         	call	i2_lcd_text
 16182                           
 16183                           ;menu.c: 305: } else {
 16184  0039F6  D009               	goto	i2l759
 16185  0039F8                     i2l758:
 16186                           
 16187                           ;menu.c: 306: lcd_text(4,msjBAUD4,0);
 16188  0039F8  0E50               	movlw	low _msjBAUD4
 16189  0039FA  6E18               	movwf	i2lcd_text@msjPtr,c
 16190  0039FC  0E03               	movlw	high _msjBAUD4
 16191  0039FE  6E19               	movwf	i2lcd_text@msjPtr+1,c
 16192  003A00  0E00               	movlw	0
 16193  003A02  6E1A               	movwf	i2lcd_text@color,c
 16194  003A04  0E04               	movlw	4
 16195  003A06  ECE6  F00C         	call	i2_lcd_text
 16196  003A0A                     i2l759:
 16197                           
 16198                           ;menu.c: 307: }
 16199                           ;menu.c: 309: for (char i=0;i<3;i++) {
 16200  003A0A  0E00               	movlw	0
 16201  003A0C  6E4A               	movwf	menu_31@i,c
 16202  003A0E                     i2l8526:
 16203  003A0E  0E02               	movlw	2
 16204  003A10  644A               	cpfsgt	menu_31@i,c
 16205  003A12  D001               	goto	i2l760
 16206  003A14  0012               	return	
 16207  003A16                     i2l760:
 16208                           
 16209                           ;menu.c: 310: lcd_text(5+i,mBlank,0);
 16210  003A16  0E3A               	movlw	low menu_31@mBlank
 16211  003A18  6E18               	movwf	i2lcd_text@msjPtr,c
 16212  003A1A  0E00               	movlw	high menu_31@mBlank
 16213  003A1C  6E19               	movwf	i2lcd_text@msjPtr+1,c
 16214  003A1E  0E00               	movlw	0
 16215  003A20  6E1A               	movwf	i2lcd_text@color,c
 16216  003A22  504A               	movf	menu_31@i,w,c
 16217  003A24  0F05               	addlw	5
 16218  003A26  ECE6  F00C         	call	i2_lcd_text
 16219  003A2A  2A4A               	incf	menu_31@i,f,c
 16220  003A2C  D7F0               	goto	i2l8526
 16221  003A2E                     __end_of_menu_31:
 16222                           	opt stack 0
 16223                           pclatu	equ	0xFFB
 16224                           pclath	equ	0xFFA
 16225                           tblptru	equ	0xFF8
 16226                           tblptrh	equ	0xFF7
 16227                           tblptrl	equ	0xFF6
 16228                           tablat	equ	0xFF5
 16229                           prodh	equ	0xFF4
 16230                           prodl	equ	0xFF3
 16231                           intcon	equ	0xFF2
 16232                           postinc0	equ	0xFEE
 16233                           fsr0h	equ	0xFEA
 16234                           fsr0l	equ	0xFE9
 16235                           wreg	equ	0xFE8
 16236                           indf1	equ	0xFE7
 16237                           postdec1	equ	0xFE5
 16238                           plusw1	equ	0xFE3
 16239                           fsr1h	equ	0xFE2
 16240                           fsr1l	equ	0xFE1
 16241                           indf2	equ	0xFDF
 16242                           postinc2	equ	0xFDE
 16243                           postdec2	equ	0xFDD
 16244                           plusw2	equ	0xFDB
 16245                           fsr2h	equ	0xFDA
 16246                           fsr2l	equ	0xFD9
 16247                           status	equ	0xFD8
 16248                           
 16249 ;; *************** function _menu_3 *****************
 16250 ;; Defined at:
 16251 ;;		line 263 in file "menu.c"
 16252 ;; Parameters:    Size  Location     Type
 16253 ;;  colorRow        1    wreg     unsigned char 
 16254 ;; Auto vars:     Size  Location     Type
 16255 ;;  colorRow        1   73[COMRAM] unsigned char 
 16256 ;;  i               1   74[COMRAM] unsigned char 
 16257 ;;  mBlank         16   57[COMRAM] unsigned char [16]
 16258 ;; Return value:  Size  Location     Type
 16259 ;;                  1    wreg      void 
 16260 ;; Registers used:
 16261 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16262 ;; Tracked objects:
 16263 ;;		On entry : 0/0
 16264 ;;		On exit  : 0/0
 16265 ;;		Unchanged: 0/0
 16266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16268 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16270 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16271 ;;Total ram usage:       18 bytes
 16272 ;; Hardware stack levels used:    1
 16273 ;; Hardware stack levels required when called:    5
 16274 ;; This function calls:
 16275 ;;		i2_lcd_text
 16276 ;; This function is called by:
 16277 ;;		_menu_navigate
 16278 ;; This function uses a non-reentrant model
 16279 ;;
 16280                           
 16281                           	psect	text52
 16282  003CAE                     __ptext52:
 16283                           	opt stack 0
 16284  003CAE                     _menu_3:
 16285                           	opt stack 16
 16286                           
 16287                           ;incstack = 0
 16288                           ;menu_3@colorRow stored from wreg
 16289  003CAE  6E4A               	movwf	menu_3@colorRow,c
 16290                           
 16291                           ;menu.c: 264: char mBlank[16] = "               ";
 16292  003CB0  EE24  F030         	lfsr	2,menu_3@F15273
 16293  003CB4  EE10  F03A         	lfsr	1,menu_3@mBlank
 16294  003CB8  0E0F               	movlw	15
 16295  003CBA                     i2u911_41:
 16296  003CBA  CFDB FFE3          	movff	plusw2,plusw1
 16297  003CBE  06E8               	decf	wreg,f,c
 16298  003CC0  E2FC               	bc	i2u911_41
 16299                           
 16300                           ;menu.c: 265: if (colorRow == 1) {
 16301  003CC2  044A               	decf	menu_3@colorRow,w,c
 16302  003CC4  A4D8               	btfss	status,2,c
 16303  003CC6  D00A               	goto	i2l739
 16304                           
 16305                           ;menu.c: 266: lcd_text(1,msjBAUD,1);
 16306  003CC8  0EE0               	movlw	low _msjBAUD
 16307  003CCA  6E18               	movwf	i2lcd_text@msjPtr,c
 16308  003CCC  0E02               	movlw	high _msjBAUD
 16309  003CCE  6E19               	movwf	i2lcd_text@msjPtr+1,c
 16310  003CD0  0E01               	movlw	1
 16311  003CD2  6E1A               	movwf	i2lcd_text@color,c
 16312  003CD4  0E01               	movlw	1
 16313  003CD6  ECE6  F00C         	call	i2_lcd_text
 16314                           
 16315                           ;menu.c: 267: } else {
 16316  003CDA  D009               	goto	i2l740
 16317  003CDC                     i2l739:
 16318                           
 16319                           ;menu.c: 268: lcd_text(1,msjBAUD,0);
 16320  003CDC  0EE0               	movlw	low _msjBAUD
 16321  003CDE  6E18               	movwf	i2lcd_text@msjPtr,c
 16322  003CE0  0E02               	movlw	high _msjBAUD
 16323  003CE2  6E19               	movwf	i2lcd_text@msjPtr+1,c
 16324  003CE4  0E00               	movlw	0
 16325  003CE6  6E1A               	movwf	i2lcd_text@color,c
 16326  003CE8  0E01               	movlw	1
 16327  003CEA  ECE6  F00C         	call	i2_lcd_text
 16328  003CEE                     i2l740:
 16329                           
 16330                           ;menu.c: 269: }
 16331                           ;menu.c: 270: if (colorRow == 2) {
 16332  003CEE  0E02               	movlw	2
 16333  003CF0  184A               	xorwf	menu_3@colorRow,w,c
 16334  003CF2  A4D8               	btfss	status,2,c
 16335  003CF4  D00A               	goto	i2l741
 16336                           
 16337                           ;menu.c: 271: lcd_text(2,msjON,1);
 16338  003CF6  0E15               	movlw	low _msjON
 16339  003CF8  6E18               	movwf	i2lcd_text@msjPtr,c
 16340  003CFA  0E01               	movlw	high _msjON
 16341  003CFC  6E19               	movwf	i2lcd_text@msjPtr+1,c
 16342  003CFE  0E01               	movlw	1
 16343  003D00  6E1A               	movwf	i2lcd_text@color,c
 16344  003D02  0E02               	movlw	2
 16345  003D04  ECE6  F00C         	call	i2_lcd_text
 16346                           
 16347                           ;menu.c: 272: } else {
 16348  003D08  D009               	goto	i2l742
 16349  003D0A                     i2l741:
 16350                           
 16351                           ;menu.c: 273: lcd_text(2,msjON,0);
 16352  003D0A  0E15               	movlw	low _msjON
 16353  003D0C  6E18               	movwf	i2lcd_text@msjPtr,c
 16354  003D0E  0E01               	movlw	high _msjON
 16355  003D10  6E19               	movwf	i2lcd_text@msjPtr+1,c
 16356  003D12  0E00               	movlw	0
 16357  003D14  6E1A               	movwf	i2lcd_text@color,c
 16358  003D16  0E02               	movlw	2
 16359  003D18  ECE6  F00C         	call	i2_lcd_text
 16360  003D1C                     i2l742:
 16361                           
 16362                           ;menu.c: 274: }
 16363                           ;menu.c: 275: if (colorRow == 3) {
 16364  003D1C  0E03               	movlw	3
 16365  003D1E  184A               	xorwf	menu_3@colorRow,w,c
 16366  003D20  A4D8               	btfss	status,2,c
 16367  003D22  D00A               	goto	i2l743
 16368                           
 16369                           ;menu.c: 276: lcd_text(3,msjOFF,1);
 16370  003D24  0E05               	movlw	low _msjOFF
 16371  003D26  6E18               	movwf	i2lcd_text@msjPtr,c
 16372  003D28  0E01               	movlw	high _msjOFF
 16373  003D2A  6E19               	movwf	i2lcd_text@msjPtr+1,c
 16374  003D2C  0E01               	movlw	1
 16375  003D2E  6E1A               	movwf	i2lcd_text@color,c
 16376  003D30  0E03               	movlw	3
 16377  003D32  ECE6  F00C         	call	i2_lcd_text
 16378                           
 16379                           ;menu.c: 277: } else {
 16380  003D36  D009               	goto	i2l744
 16381  003D38                     i2l743:
 16382                           
 16383                           ;menu.c: 278: lcd_text(3,msjOFF,0);
 16384  003D38  0E05               	movlw	low _msjOFF
 16385  003D3A  6E18               	movwf	i2lcd_text@msjPtr,c
 16386  003D3C  0E01               	movlw	high _msjOFF
 16387  003D3E  6E19               	movwf	i2lcd_text@msjPtr+1,c
 16388  003D40  0E00               	movlw	0
 16389  003D42  6E1A               	movwf	i2lcd_text@color,c
 16390  003D44  0E03               	movlw	3
 16391  003D46  ECE6  F00C         	call	i2_lcd_text
 16392  003D4A                     i2l744:
 16393                           
 16394                           ;menu.c: 279: }
 16395                           ;menu.c: 281: for (char i=0;i<4;i++) {
 16396  003D4A  0E00               	movlw	0
 16397  003D4C  6E4B               	movwf	menu_3@i,c
 16398  003D4E                     i2l8488:
 16399  003D4E  0E03               	movlw	3
 16400  003D50  644B               	cpfsgt	menu_3@i,c
 16401  003D52  D001               	goto	i2l745
 16402  003D54  0012               	return	
 16403  003D56                     i2l745:
 16404                           
 16405                           ;menu.c: 282: lcd_text(4+i,mBlank,0);
 16406  003D56  0E3A               	movlw	low menu_3@mBlank
 16407  003D58  6E18               	movwf	i2lcd_text@msjPtr,c
 16408  003D5A  0E00               	movlw	high menu_3@mBlank
 16409  003D5C  6E19               	movwf	i2lcd_text@msjPtr+1,c
 16410  003D5E  0E00               	movlw	0
 16411  003D60  6E1A               	movwf	i2lcd_text@color,c
 16412  003D62  504B               	movf	menu_3@i,w,c
 16413  003D64  0F04               	addlw	4
 16414  003D66  ECE6  F00C         	call	i2_lcd_text
 16415  003D6A  2A4B               	incf	menu_3@i,f,c
 16416  003D6C  D7F0               	goto	i2l8488
 16417  003D6E                     __end_of_menu_3:
 16418                           	opt stack 0
 16419                           pclatu	equ	0xFFB
 16420                           pclath	equ	0xFFA
 16421                           tblptru	equ	0xFF8
 16422                           tblptrh	equ	0xFF7
 16423                           tblptrl	equ	0xFF6
 16424                           tablat	equ	0xFF5
 16425                           prodh	equ	0xFF4
 16426                           prodl	equ	0xFF3
 16427                           intcon	equ	0xFF2
 16428                           postinc0	equ	0xFEE
 16429                           fsr0h	equ	0xFEA
 16430                           fsr0l	equ	0xFE9
 16431                           wreg	equ	0xFE8
 16432                           indf1	equ	0xFE7
 16433                           postdec1	equ	0xFE5
 16434                           plusw1	equ	0xFE3
 16435                           fsr1h	equ	0xFE2
 16436                           fsr1l	equ	0xFE1
 16437                           indf2	equ	0xFDF
 16438                           postinc2	equ	0xFDE
 16439                           postdec2	equ	0xFDD
 16440                           plusw2	equ	0xFDB
 16441                           fsr2h	equ	0xFDA
 16442                           fsr2l	equ	0xFD9
 16443                           status	equ	0xFD8
 16444                           
 16445 ;; *************** function _menu_27 *****************
 16446 ;; Defined at:
 16447 ;;		line 255 in file "menu.c"
 16448 ;; Parameters:    Size  Location     Type
 16449 ;;  colorRow        1    wreg     unsigned char 
 16450 ;; Auto vars:     Size  Location     Type
 16451 ;;  colorRow        1    0[COMRAM] unsigned char 
 16452 ;;  i               1   73[COMRAM] unsigned char 
 16453 ;;  mBlank         16   57[COMRAM] unsigned char [16]
 16454 ;; Return value:  Size  Location     Type
 16455 ;;                  1    wreg      void 
 16456 ;; Registers used:
 16457 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16458 ;; Tracked objects:
 16459 ;;		On entry : 0/0
 16460 ;;		On exit  : 0/0
 16461 ;;		Unchanged: 0/0
 16462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16463 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16464 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16466 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16467 ;;Total ram usage:       17 bytes
 16468 ;; Hardware stack levels used:    1
 16469 ;; Hardware stack levels required when called:    5
 16470 ;; This function calls:
 16471 ;;		i2_lcd_text
 16472 ;; This function is called by:
 16473 ;;		_menu_navigate
 16474 ;; This function uses a non-reentrant model
 16475 ;;
 16476                           
 16477                           	psect	text53
 16478  004704                     __ptext53:
 16479                           	opt stack 0
 16480  004704                     _menu_27:
 16481                           	opt stack 16
 16482                           
 16483                           ;menu.c: 256: char mBlank[16] = "               ";
 16484                           
 16485                           ;incstack = 0
 16486  004704  EE24  F040         	lfsr	2,menu_27@F15269
 16487  004708  EE10  F03A         	lfsr	1,menu_27@mBlank
 16488  00470C  0E0F               	movlw	15
 16489  00470E                     i2u908_41:
 16490  00470E  CFDB FFE3          	movff	plusw2,plusw1
 16491  004712  06E8               	decf	wreg,f,c
 16492  004714  E2FC               	bc	i2u908_41
 16493                           
 16494                           ;menu.c: 257: lcd_text(1,msjVALUEINGR,0);
 16495  004716  0E20               	movlw	low _msjVALUEINGR
 16496  004718  6E18               	movwf	i2lcd_text@msjPtr,c
 16497  00471A  0E03               	movlw	high _msjVALUEINGR
 16498  00471C  6E19               	movwf	i2lcd_text@msjPtr+1,c
 16499  00471E  0E00               	movlw	0
 16500  004720  6E1A               	movwf	i2lcd_text@color,c
 16501  004722  0E01               	movlw	1
 16502  004724  ECE6  F00C         	call	i2_lcd_text
 16503                           
 16504                           ;menu.c: 258: for (char i=0;i<6;i++) {
 16505  004728  0E00               	movlw	0
 16506  00472A  6E4A               	movwf	menu_27@i,c
 16507  00472C                     i2l8456:
 16508  00472C  0E05               	movlw	5
 16509  00472E  644A               	cpfsgt	menu_27@i,c
 16510  004730  D001               	goto	i2l732
 16511  004732  0012               	return	
 16512  004734                     i2l732:
 16513                           
 16514                           ;menu.c: 259: lcd_text(2+i,mBlank,0);
 16515  004734  0E3A               	movlw	low menu_27@mBlank
 16516  004736  6E18               	movwf	i2lcd_text@msjPtr,c
 16517  004738  0E00               	movlw	high menu_27@mBlank
 16518  00473A  6E19               	movwf	i2lcd_text@msjPtr+1,c
 16519  00473C  0E00               	movlw	0
 16520  00473E  6E1A               	movwf	i2lcd_text@color,c
 16521  004740  504A               	movf	menu_27@i,w,c
 16522  004742  0F02               	addlw	2
 16523  004744  ECE6  F00C         	call	i2_lcd_text
 16524  004748  2A4A               	incf	menu_27@i,f,c
 16525  00474A  D7F0               	goto	i2l8456
 16526  00474C                     __end_of_menu_27:
 16527                           	opt stack 0
 16528                           pclatu	equ	0xFFB
 16529                           pclath	equ	0xFFA
 16530                           tblptru	equ	0xFF8
 16531                           tblptrh	equ	0xFF7
 16532                           tblptrl	equ	0xFF6
 16533                           tablat	equ	0xFF5
 16534                           prodh	equ	0xFF4
 16535                           prodl	equ	0xFF3
 16536                           intcon	equ	0xFF2
 16537                           postinc0	equ	0xFEE
 16538                           fsr0h	equ	0xFEA
 16539                           fsr0l	equ	0xFE9
 16540                           wreg	equ	0xFE8
 16541                           indf1	equ	0xFE7
 16542                           postdec1	equ	0xFE5
 16543                           plusw1	equ	0xFE3
 16544                           fsr1h	equ	0xFE2
 16545                           fsr1l	equ	0xFE1
 16546                           indf2	equ	0xFDF
 16547                           postinc2	equ	0xFDE
 16548                           postdec2	equ	0xFDD
 16549                           plusw2	equ	0xFDB
 16550                           fsr2h	equ	0xFDA
 16551                           fsr2l	equ	0xFD9
 16552                           status	equ	0xFD8
 16553                           
 16554 ;; *************** function _menu_26 *****************
 16555 ;; Defined at:
 16556 ;;		line 247 in file "menu.c"
 16557 ;; Parameters:    Size  Location     Type
 16558 ;;  colorRow        1    wreg     unsigned char 
 16559 ;; Auto vars:     Size  Location     Type
 16560 ;;  colorRow        1    0[COMRAM] unsigned char 
 16561 ;;  i               1   73[COMRAM] unsigned char 
 16562 ;;  mBlank         16   57[COMRAM] unsigned char [16]
 16563 ;; Return value:  Size  Location     Type
 16564 ;;                  1    wreg      void 
 16565 ;; Registers used:
 16566 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16567 ;; Tracked objects:
 16568 ;;		On entry : 0/0
 16569 ;;		On exit  : 0/0
 16570 ;;		Unchanged: 0/0
 16571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16573 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16575 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16576 ;;Total ram usage:       17 bytes
 16577 ;; Hardware stack levels used:    1
 16578 ;; Hardware stack levels required when called:    5
 16579 ;; This function calls:
 16580 ;;		i2_lcd_text
 16581 ;; This function is called by:
 16582 ;;		_menu_navigate
 16583 ;; This function uses a non-reentrant model
 16584 ;;
 16585                           
 16586                           	psect	text54
 16587  00474C                     __ptext54:
 16588                           	opt stack 0
 16589  00474C                     _menu_26:
 16590                           	opt stack 16
 16591                           
 16592                           ;menu.c: 248: char mBlank[16] = "               ";
 16593                           
 16594                           ;incstack = 0
 16595  00474C  EE24  F050         	lfsr	2,menu_26@F15265
 16596  004750  EE10  F03A         	lfsr	1,menu_26@mBlank
 16597  004754  0E0F               	movlw	15
 16598  004756                     i2u905_41:
 16599  004756  CFDB FFE3          	movff	plusw2,plusw1
 16600  00475A  06E8               	decf	wreg,f,c
 16601  00475C  E2FC               	bc	i2u905_41
 16602                           
 16603                           ;menu.c: 249: lcd_text(1,msjVALUEINGR,0);
 16604  00475E  0E20               	movlw	low _msjVALUEINGR
 16605  004760  6E18               	movwf	i2lcd_text@msjPtr,c
 16606  004762  0E03               	movlw	high _msjVALUEINGR
 16607  004764  6E19               	movwf	i2lcd_text@msjPtr+1,c
 16608  004766  0E00               	movlw	0
 16609  004768  6E1A               	movwf	i2lcd_text@color,c
 16610  00476A  0E01               	movlw	1
 16611  00476C  ECE6  F00C         	call	i2_lcd_text
 16612                           
 16613                           ;menu.c: 250: for (char i=0;i<6;i++) {
 16614  004770  0E00               	movlw	0
 16615  004772  6E4A               	movwf	menu_26@i,c
 16616  004774                     i2l8440:
 16617  004774  0E05               	movlw	5
 16618  004776  644A               	cpfsgt	menu_26@i,c
 16619  004778  D001               	goto	i2l725
 16620  00477A  0012               	return	
 16621  00477C                     i2l725:
 16622                           
 16623                           ;menu.c: 251: lcd_text(2+i,mBlank,0);
 16624  00477C  0E3A               	movlw	low menu_26@mBlank
 16625  00477E  6E18               	movwf	i2lcd_text@msjPtr,c
 16626  004780  0E00               	movlw	high menu_26@mBlank
 16627  004782  6E19               	movwf	i2lcd_text@msjPtr+1,c
 16628  004784  0E00               	movlw	0
 16629  004786  6E1A               	movwf	i2lcd_text@color,c
 16630  004788  504A               	movf	menu_26@i,w,c
 16631  00478A  0F02               	addlw	2
 16632  00478C  ECE6  F00C         	call	i2_lcd_text
 16633  004790  2A4A               	incf	menu_26@i,f,c
 16634  004792  D7F0               	goto	i2l8440
 16635  004794                     __end_of_menu_26:
 16636                           	opt stack 0
 16637                           pclatu	equ	0xFFB
 16638                           pclath	equ	0xFFA
 16639                           tblptru	equ	0xFF8
 16640                           tblptrh	equ	0xFF7
 16641                           tblptrl	equ	0xFF6
 16642                           tablat	equ	0xFF5
 16643                           prodh	equ	0xFF4
 16644                           prodl	equ	0xFF3
 16645                           intcon	equ	0xFF2
 16646                           postinc0	equ	0xFEE
 16647                           fsr0h	equ	0xFEA
 16648                           fsr0l	equ	0xFE9
 16649                           wreg	equ	0xFE8
 16650                           indf1	equ	0xFE7
 16651                           postdec1	equ	0xFE5
 16652                           plusw1	equ	0xFE3
 16653                           fsr1h	equ	0xFE2
 16654                           fsr1l	equ	0xFE1
 16655                           indf2	equ	0xFDF
 16656                           postinc2	equ	0xFDE
 16657                           postdec2	equ	0xFDD
 16658                           plusw2	equ	0xFDB
 16659                           fsr2h	equ	0xFDA
 16660                           fsr2l	equ	0xFD9
 16661                           status	equ	0xFD8
 16662                           
 16663 ;; *************** function _menu_25 *****************
 16664 ;; Defined at:
 16665 ;;		line 239 in file "menu.c"
 16666 ;; Parameters:    Size  Location     Type
 16667 ;;  colorRow        1    wreg     unsigned char 
 16668 ;; Auto vars:     Size  Location     Type
 16669 ;;  colorRow        1    0[COMRAM] unsigned char 
 16670 ;;  i               1   73[COMRAM] unsigned char 
 16671 ;;  mBlank         16   57[COMRAM] unsigned char [16]
 16672 ;; Return value:  Size  Location     Type
 16673 ;;                  1    wreg      void 
 16674 ;; Registers used:
 16675 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16676 ;; Tracked objects:
 16677 ;;		On entry : 0/0
 16678 ;;		On exit  : 0/0
 16679 ;;		Unchanged: 0/0
 16680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16681 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16682 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16683 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16684 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16685 ;;Total ram usage:       17 bytes
 16686 ;; Hardware stack levels used:    1
 16687 ;; Hardware stack levels required when called:    5
 16688 ;; This function calls:
 16689 ;;		i2_lcd_text
 16690 ;; This function is called by:
 16691 ;;		_menu_navigate
 16692 ;; This function uses a non-reentrant model
 16693 ;;
 16694                           
 16695                           	psect	text55
 16696  004794                     __ptext55:
 16697                           	opt stack 0
 16698  004794                     _menu_25:
 16699                           	opt stack 16
 16700                           
 16701                           ;menu.c: 240: char mBlank[16] = "               ";
 16702                           
 16703                           ;incstack = 0
 16704  004794  EE24  F060         	lfsr	2,menu_25@F15261
 16705  004798  EE10  F03A         	lfsr	1,menu_25@mBlank
 16706  00479C  0E0F               	movlw	15
 16707  00479E                     i2u902_41:
 16708  00479E  CFDB FFE3          	movff	plusw2,plusw1
 16709  0047A2  06E8               	decf	wreg,f,c
 16710  0047A4  E2FC               	bc	i2u902_41
 16711                           
 16712                           ;menu.c: 241: lcd_text(1,msjTAREINGR,0);
 16713  0047A6  0E30               	movlw	low _msjTAREINGR
 16714  0047A8  6E18               	movwf	i2lcd_text@msjPtr,c
 16715  0047AA  0E03               	movlw	high _msjTAREINGR
 16716  0047AC  6E19               	movwf	i2lcd_text@msjPtr+1,c
 16717  0047AE  0E00               	movlw	0
 16718  0047B0  6E1A               	movwf	i2lcd_text@color,c
 16719  0047B2  0E01               	movlw	1
 16720  0047B4  ECE6  F00C         	call	i2_lcd_text
 16721                           
 16722                           ;menu.c: 242: for (char i=0;i<6;i++) {
 16723  0047B8  0E00               	movlw	0
 16724  0047BA  6E4A               	movwf	menu_25@i,c
 16725  0047BC                     i2l8424:
 16726  0047BC  0E05               	movlw	5
 16727  0047BE  644A               	cpfsgt	menu_25@i,c
 16728  0047C0  D001               	goto	i2l718
 16729  0047C2  0012               	return	
 16730  0047C4                     i2l718:
 16731                           
 16732                           ;menu.c: 243: lcd_text(2+i,mBlank,0);
 16733  0047C4  0E3A               	movlw	low menu_25@mBlank
 16734  0047C6  6E18               	movwf	i2lcd_text@msjPtr,c
 16735  0047C8  0E00               	movlw	high menu_25@mBlank
 16736  0047CA  6E19               	movwf	i2lcd_text@msjPtr+1,c
 16737  0047CC  0E00               	movlw	0
 16738  0047CE  6E1A               	movwf	i2lcd_text@color,c
 16739  0047D0  504A               	movf	menu_25@i,w,c
 16740  0047D2  0F02               	addlw	2
 16741  0047D4  ECE6  F00C         	call	i2_lcd_text
 16742  0047D8  2A4A               	incf	menu_25@i,f,c
 16743  0047DA  D7F0               	goto	i2l8424
 16744  0047DC                     __end_of_menu_25:
 16745                           	opt stack 0
 16746                           pclatu	equ	0xFFB
 16747                           pclath	equ	0xFFA
 16748                           tblptru	equ	0xFF8
 16749                           tblptrh	equ	0xFF7
 16750                           tblptrl	equ	0xFF6
 16751                           tablat	equ	0xFF5
 16752                           prodh	equ	0xFF4
 16753                           prodl	equ	0xFF3
 16754                           intcon	equ	0xFF2
 16755                           postinc0	equ	0xFEE
 16756                           fsr0h	equ	0xFEA
 16757                           fsr0l	equ	0xFE9
 16758                           wreg	equ	0xFE8
 16759                           indf1	equ	0xFE7
 16760                           postdec1	equ	0xFE5
 16761                           plusw1	equ	0xFE3
 16762                           fsr1h	equ	0xFE2
 16763                           fsr1l	equ	0xFE1
 16764                           indf2	equ	0xFDF
 16765                           postinc2	equ	0xFDE
 16766                           postdec2	equ	0xFDD
 16767                           plusw2	equ	0xFDB
 16768                           fsr2h	equ	0xFDA
 16769                           fsr2l	equ	0xFD9
 16770                           status	equ	0xFD8
 16771                           
 16772 ;; *************** function _menu_24 *****************
 16773 ;; Defined at:
 16774 ;;		line 217 in file "menu.c"
 16775 ;; Parameters:    Size  Location     Type
 16776 ;;  colorRow        1    wreg     unsigned char 
 16777 ;; Auto vars:     Size  Location     Type
 16778 ;;  colorRow        1   73[COMRAM] unsigned char 
 16779 ;;  i               1   74[COMRAM] unsigned char 
 16780 ;;  mBlank         16   57[COMRAM] unsigned char [16]
 16781 ;; Return value:  Size  Location     Type
 16782 ;;                  1    wreg      void 
 16783 ;; Registers used:
 16784 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16785 ;; Tracked objects:
 16786 ;;		On entry : 0/0
 16787 ;;		On exit  : 0/0
 16788 ;;		Unchanged: 0/0
 16789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16791 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16793 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16794 ;;Total ram usage:       18 bytes
 16795 ;; Hardware stack levels used:    1
 16796 ;; Hardware stack levels required when called:    5
 16797 ;; This function calls:
 16798 ;;		i2_lcd_text
 16799 ;; This function is called by:
 16800 ;;		_menu_navigate
 16801 ;; This function uses a non-reentrant model
 16802 ;;
 16803                           
 16804                           	psect	text56
 16805  003D6E                     __ptext56:
 16806                           	opt stack 0
 16807  003D6E                     _menu_24:
 16808                           	opt stack 16
 16809                           
 16810                           ;incstack = 0
 16811                           ;menu_24@colorRow stored from wreg
 16812  003D6E  6E4A               	movwf	menu_24@colorRow,c
 16813                           
 16814                           ;menu.c: 218: char mBlank[16] = "               ";
 16815  003D70  EE24  F070         	lfsr	2,menu_24@F15257
 16816  003D74  EE10  F03A         	lfsr	1,menu_24@mBlank
 16817  003D78  0E0F               	movlw	15
 16818  003D7A                     i2u896_41:
 16819  003D7A  CFDB FFE3          	movff	plusw2,plusw1
 16820  003D7E  06E8               	decf	wreg,f,c
 16821  003D80  E2FC               	bc	i2u896_41
 16822                           
 16823                           ;menu.c: 219: if (colorRow == 1) {
 16824  003D82  044A               	decf	menu_24@colorRow,w,c
 16825  003D84  A4D8               	btfss	status,2,c
 16826  003D86  D00A               	goto	i2l705
 16827                           
 16828                           ;menu.c: 220: lcd_text(1,msjFILTER1,1);
 16829  003D88  0EB0               	movlw	low _msjFILTER1
 16830  003D8A  6E18               	movwf	i2lcd_text@msjPtr,c
 16831  003D8C  0E03               	movlw	high _msjFILTER1
 16832  003D8E  6E19               	movwf	i2lcd_text@msjPtr+1,c
 16833  003D90  0E01               	movlw	1
 16834  003D92  6E1A               	movwf	i2lcd_text@color,c
 16835  003D94  0E01               	movlw	1
 16836  003D96  ECE6  F00C         	call	i2_lcd_text
 16837                           
 16838                           ;menu.c: 221: } else {
 16839  003D9A  D009               	goto	i2l706
 16840  003D9C                     i2l705:
 16841                           
 16842                           ;menu.c: 222: lcd_text(1,msjFILTER1,0);
 16843  003D9C  0EB0               	movlw	low _msjFILTER1
 16844  003D9E  6E18               	movwf	i2lcd_text@msjPtr,c
 16845  003DA0  0E03               	movlw	high _msjFILTER1
 16846  003DA2  6E19               	movwf	i2lcd_text@msjPtr+1,c
 16847  003DA4  0E00               	movlw	0
 16848  003DA6  6E1A               	movwf	i2lcd_text@color,c
 16849  003DA8  0E01               	movlw	1
 16850  003DAA  ECE6  F00C         	call	i2_lcd_text
 16851  003DAE                     i2l706:
 16852                           
 16853                           ;menu.c: 223: }
 16854                           ;menu.c: 224: if (colorRow == 2) {
 16855  003DAE  0E02               	movlw	2
 16856  003DB0  184A               	xorwf	menu_24@colorRow,w,c
 16857  003DB2  A4D8               	btfss	status,2,c
 16858  003DB4  D00A               	goto	i2l707
 16859                           
 16860                           ;menu.c: 225: lcd_text(2,msjFILTER2,1);
 16861  003DB6  0EA0               	movlw	low _msjFILTER2
 16862  003DB8  6E18               	movwf	i2lcd_text@msjPtr,c
 16863  003DBA  0E03               	movlw	high _msjFILTER2
 16864  003DBC  6E19               	movwf	i2lcd_text@msjPtr+1,c
 16865  003DBE  0E01               	movlw	1
 16866  003DC0  6E1A               	movwf	i2lcd_text@color,c
 16867  003DC2  0E02               	movlw	2
 16868  003DC4  ECE6  F00C         	call	i2_lcd_text
 16869                           
 16870                           ;menu.c: 226: } else {
 16871  003DC8  D009               	goto	i2l708
 16872  003DCA                     i2l707:
 16873                           
 16874                           ;menu.c: 227: lcd_text(2,msjFILTER2,0);
 16875  003DCA  0EA0               	movlw	low _msjFILTER2
 16876  003DCC  6E18               	movwf	i2lcd_text@msjPtr,c
 16877  003DCE  0E03               	movlw	high _msjFILTER2
 16878  003DD0  6E19               	movwf	i2lcd_text@msjPtr+1,c
 16879  003DD2  0E00               	movlw	0
 16880  003DD4  6E1A               	movwf	i2lcd_text@color,c
 16881  003DD6  0E02               	movlw	2
 16882  003DD8  ECE6  F00C         	call	i2_lcd_text
 16883  003DDC                     i2l708:
 16884                           
 16885                           ;menu.c: 228: }
 16886                           ;menu.c: 229: if (colorRow == 3) {
 16887  003DDC  0E03               	movlw	3
 16888  003DDE  184A               	xorwf	menu_24@colorRow,w,c
 16889  003DE0  A4D8               	btfss	status,2,c
 16890  003DE2  D00A               	goto	i2l709
 16891                           
 16892                           ;menu.c: 230: lcd_text(3,msjFILTER3,1);
 16893  003DE4  0E90               	movlw	low _msjFILTER3
 16894  003DE6  6E18               	movwf	i2lcd_text@msjPtr,c
 16895  003DE8  0E03               	movlw	high _msjFILTER3
 16896  003DEA  6E19               	movwf	i2lcd_text@msjPtr+1,c
 16897  003DEC  0E01               	movlw	1
 16898  003DEE  6E1A               	movwf	i2lcd_text@color,c
 16899  003DF0  0E03               	movlw	3
 16900  003DF2  ECE6  F00C         	call	i2_lcd_text
 16901                           
 16902                           ;menu.c: 231: } else {
 16903  003DF6  D009               	goto	i2l710
 16904  003DF8                     i2l709:
 16905                           
 16906                           ;menu.c: 232: lcd_text(3,msjFILTER3,0);
 16907  003DF8  0E90               	movlw	low _msjFILTER3
 16908  003DFA  6E18               	movwf	i2lcd_text@msjPtr,c
 16909  003DFC  0E03               	movlw	high _msjFILTER3
 16910  003DFE  6E19               	movwf	i2lcd_text@msjPtr+1,c
 16911  003E00  0E00               	movlw	0
 16912  003E02  6E1A               	movwf	i2lcd_text@color,c
 16913  003E04  0E03               	movlw	3
 16914  003E06  ECE6  F00C         	call	i2_lcd_text
 16915  003E0A                     i2l710:
 16916                           
 16917                           ;menu.c: 233: }
 16918                           ;menu.c: 235: for (char i=0;i<4;i++) {
 16919  003E0A  0E00               	movlw	0
 16920  003E0C  6E4B               	movwf	menu_24@i,c
 16921  003E0E                     i2l8408:
 16922  003E0E  0E03               	movlw	3
 16923  003E10  644B               	cpfsgt	menu_24@i,c
 16924  003E12  D001               	goto	i2l711
 16925  003E14  0012               	return	
 16926  003E16                     i2l711:
 16927                           
 16928                           ;menu.c: 236: lcd_text(4+i,mBlank,0);
 16929  003E16  0E3A               	movlw	low menu_24@mBlank
 16930  003E18  6E18               	movwf	i2lcd_text@msjPtr,c
 16931  003E1A  0E00               	movlw	high menu_24@mBlank
 16932  003E1C  6E19               	movwf	i2lcd_text@msjPtr+1,c
 16933  003E1E  0E00               	movlw	0
 16934  003E20  6E1A               	movwf	i2lcd_text@color,c
 16935  003E22  504B               	movf	menu_24@i,w,c
 16936  003E24  0F04               	addlw	4
 16937  003E26  ECE6  F00C         	call	i2_lcd_text
 16938  003E2A  2A4B               	incf	menu_24@i,f,c
 16939  003E2C  D7F0               	goto	i2l8408
 16940  003E2E                     __end_of_menu_24:
 16941                           	opt stack 0
 16942                           pclatu	equ	0xFFB
 16943                           pclath	equ	0xFFA
 16944                           tblptru	equ	0xFF8
 16945                           tblptrh	equ	0xFF7
 16946                           tblptrl	equ	0xFF6
 16947                           tablat	equ	0xFF5
 16948                           prodh	equ	0xFF4
 16949                           prodl	equ	0xFF3
 16950                           intcon	equ	0xFF2
 16951                           postinc0	equ	0xFEE
 16952                           fsr0h	equ	0xFEA
 16953                           fsr0l	equ	0xFE9
 16954                           wreg	equ	0xFE8
 16955                           indf1	equ	0xFE7
 16956                           postdec1	equ	0xFE5
 16957                           plusw1	equ	0xFE3
 16958                           fsr1h	equ	0xFE2
 16959                           fsr1l	equ	0xFE1
 16960                           indf2	equ	0xFDF
 16961                           postinc2	equ	0xFDE
 16962                           postdec2	equ	0xFDD
 16963                           plusw2	equ	0xFDB
 16964                           fsr2h	equ	0xFDA
 16965                           fsr2l	equ	0xFD9
 16966                           status	equ	0xFD8
 16967                           
 16968 ;; *************** function _menu_23 *****************
 16969 ;; Defined at:
 16970 ;;		line 209 in file "menu.c"
 16971 ;; Parameters:    Size  Location     Type
 16972 ;;  colorRow        1    wreg     unsigned char 
 16973 ;; Auto vars:     Size  Location     Type
 16974 ;;  colorRow        1    0[COMRAM] unsigned char 
 16975 ;;  i               1   73[COMRAM] unsigned char 
 16976 ;;  mBlank         16   57[COMRAM] unsigned char [16]
 16977 ;; Return value:  Size  Location     Type
 16978 ;;                  1    wreg      void 
 16979 ;; Registers used:
 16980 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16981 ;; Tracked objects:
 16982 ;;		On entry : 0/0
 16983 ;;		On exit  : 0/0
 16984 ;;		Unchanged: 0/0
 16985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16986 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16987 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16989 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16990 ;;Total ram usage:       17 bytes
 16991 ;; Hardware stack levels used:    1
 16992 ;; Hardware stack levels required when called:    5
 16993 ;; This function calls:
 16994 ;;		i2_lcd_text
 16995 ;; This function is called by:
 16996 ;;		_menu_navigate
 16997 ;; This function uses a non-reentrant model
 16998 ;;
 16999                           
 17000                           	psect	text57
 17001  0047DC                     __ptext57:
 17002                           	opt stack 0
 17003  0047DC                     _menu_23:
 17004                           	opt stack 16
 17005                           
 17006                           ;menu.c: 210: char mBlank[16] = "               ";
 17007                           
 17008                           ;incstack = 0
 17009  0047DC  EE24  F080         	lfsr	2,menu_23@F15253
 17010  0047E0  EE10  F03A         	lfsr	1,menu_23@mBlank
 17011  0047E4  0E0F               	movlw	15
 17012  0047E6                     i2u893_41:
 17013  0047E6  CFDB FFE3          	movff	plusw2,plusw1
 17014  0047EA  06E8               	decf	wreg,f,c
 17015  0047EC  E2FC               	bc	i2u893_41
 17016                           
 17017                           ;menu.c: 211: lcd_text(1,msjWEIGHTINGR,0);
 17018  0047EE  0E40               	movlw	low _msjWEIGHTINGR
 17019  0047F0  6E18               	movwf	i2lcd_text@msjPtr,c
 17020  0047F2  0E03               	movlw	high _msjWEIGHTINGR
 17021  0047F4  6E19               	movwf	i2lcd_text@msjPtr+1,c
 17022  0047F6  0E00               	movlw	0
 17023  0047F8  6E1A               	movwf	i2lcd_text@color,c
 17024  0047FA  0E01               	movlw	1
 17025  0047FC  ECE6  F00C         	call	i2_lcd_text
 17026                           
 17027                           ;menu.c: 212: for (char i=0;i<6;i++) {
 17028  004800  0E00               	movlw	0
 17029  004802  6E4A               	movwf	menu_23@i,c
 17030  004804                     i2l8376:
 17031  004804  0E05               	movlw	5
 17032  004806  644A               	cpfsgt	menu_23@i,c
 17033  004808  D001               	goto	i2l698
 17034  00480A  0012               	return	
 17035  00480C                     i2l698:
 17036                           
 17037                           ;menu.c: 213: lcd_text(2+i,mBlank,0);
 17038  00480C  0E3A               	movlw	low menu_23@mBlank
 17039  00480E  6E18               	movwf	i2lcd_text@msjPtr,c
 17040  004810  0E00               	movlw	high menu_23@mBlank
 17041  004812  6E19               	movwf	i2lcd_text@msjPtr+1,c
 17042  004814  0E00               	movlw	0
 17043  004816  6E1A               	movwf	i2lcd_text@color,c
 17044  004818  504A               	movf	menu_23@i,w,c
 17045  00481A  0F02               	addlw	2
 17046  00481C  ECE6  F00C         	call	i2_lcd_text
 17047  004820  2A4A               	incf	menu_23@i,f,c
 17048  004822  D7F0               	goto	i2l8376
 17049  004824                     __end_of_menu_23:
 17050                           	opt stack 0
 17051                           pclatu	equ	0xFFB
 17052                           pclath	equ	0xFFA
 17053                           tblptru	equ	0xFF8
 17054                           tblptrh	equ	0xFF7
 17055                           tblptrl	equ	0xFF6
 17056                           tablat	equ	0xFF5
 17057                           prodh	equ	0xFF4
 17058                           prodl	equ	0xFF3
 17059                           intcon	equ	0xFF2
 17060                           postinc0	equ	0xFEE
 17061                           fsr0h	equ	0xFEA
 17062                           fsr0l	equ	0xFE9
 17063                           wreg	equ	0xFE8
 17064                           indf1	equ	0xFE7
 17065                           postdec1	equ	0xFE5
 17066                           plusw1	equ	0xFE3
 17067                           fsr1h	equ	0xFE2
 17068                           fsr1l	equ	0xFE1
 17069                           indf2	equ	0xFDF
 17070                           postinc2	equ	0xFDE
 17071                           postdec2	equ	0xFDD
 17072                           plusw2	equ	0xFDB
 17073                           fsr2h	equ	0xFDA
 17074                           fsr2l	equ	0xFD9
 17075                           status	equ	0xFD8
 17076                           
 17077 ;; *************** function _menu_22 *****************
 17078 ;; Defined at:
 17079 ;;		line 181 in file "menu.c"
 17080 ;; Parameters:    Size  Location     Type
 17081 ;;  colorRow        1    wreg     unsigned char 
 17082 ;; Auto vars:     Size  Location     Type
 17083 ;;  colorRow        1   74[COMRAM] unsigned char 
 17084 ;;  i               1   73[COMRAM] unsigned char 
 17085 ;;  mBlank         16   57[COMRAM] unsigned char [16]
 17086 ;; Return value:  Size  Location     Type
 17087 ;;                  1    wreg      void 
 17088 ;; Registers used:
 17089 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17090 ;; Tracked objects:
 17091 ;;		On entry : 0/0
 17092 ;;		On exit  : 0/0
 17093 ;;		Unchanged: 0/0
 17094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 17095 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17096 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17097 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17098 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17099 ;;Total ram usage:       18 bytes
 17100 ;; Hardware stack levels used:    1
 17101 ;; Hardware stack levels required when called:    5
 17102 ;; This function calls:
 17103 ;;		i2_lcd_text
 17104 ;; This function is called by:
 17105 ;;		_menu_navigate
 17106 ;; This function uses a non-reentrant model
 17107 ;;
 17108                           
 17109                           	psect	text58
 17110  003A2E                     __ptext58:
 17111                           	opt stack 0
 17112  003A2E                     _menu_22:
 17113                           	opt stack 16
 17114                           
 17115                           ;incstack = 0
 17116                           ;menu_22@colorRow stored from wreg
 17117  003A2E  6E4B               	movwf	menu_22@colorRow,c
 17118                           
 17119                           ;menu.c: 182: char mBlank[16] = "               ";
 17120  003A30  EE24  F090         	lfsr	2,menu_22@F15249
 17121  003A34  EE10  F03A         	lfsr	1,menu_22@mBlank
 17122  003A38  0E0F               	movlw	15
 17123  003A3A                     i2u886_41:
 17124  003A3A  CFDB FFE3          	movff	plusw2,plusw1
 17125  003A3E  06E8               	decf	wreg,f,c
 17126  003A40  E2FC               	bc	i2u886_41
 17127                           
 17128                           ;menu.c: 183: if (colorRow == 1) {
 17129  003A42  044B               	decf	menu_22@colorRow,w,c
 17130  003A44  A4D8               	btfss	status,2,c
 17131  003A46  D00A               	goto	i2l683
 17132                           
 17133                           ;menu.c: 184: lcd_text(1,msjDIVISION0,1);
 17134  003A48  0E10               	movlw	low _msjDIVISION0
 17135  003A4A  6E18               	movwf	i2lcd_text@msjPtr,c
 17136  003A4C  0E02               	movlw	high _msjDIVISION0
 17137  003A4E  6E19               	movwf	i2lcd_text@msjPtr+1,c
 17138  003A50  0E01               	movlw	1
 17139  003A52  6E1A               	movwf	i2lcd_text@color,c
 17140  003A54  0E01               	movlw	1
 17141  003A56  ECE6  F00C         	call	i2_lcd_text
 17142                           
 17143                           ;menu.c: 185: } else {
 17144  003A5A  D009               	goto	i2l684
 17145  003A5C                     i2l683:
 17146                           
 17147                           ;menu.c: 186: lcd_text(1,msjDIVISION0,0);
 17148  003A5C  0E10               	movlw	low _msjDIVISION0
 17149  003A5E  6E18               	movwf	i2lcd_text@msjPtr,c
 17150  003A60  0E02               	movlw	high _msjDIVISION0
 17151  003A62  6E19               	movwf	i2lcd_text@msjPtr+1,c
 17152  003A64  0E00               	movlw	0
 17153  003A66  6E1A               	movwf	i2lcd_text@color,c
 17154  003A68  0E01               	movlw	1
 17155  003A6A  ECE6  F00C         	call	i2_lcd_text
 17156  003A6E                     i2l684:
 17157                           
 17158                           ;menu.c: 187: }
 17159                           ;menu.c: 188: if (colorRow == 2) {
 17160  003A6E  0E02               	movlw	2
 17161  003A70  184B               	xorwf	menu_22@colorRow,w,c
 17162  003A72  A4D8               	btfss	status,2,c
 17163  003A74  D00A               	goto	i2l685
 17164                           
 17165                           ;menu.c: 189: lcd_text(2,msjDIVISION1,1);
 17166  003A76  0E00               	movlw	low _msjDIVISION1
 17167  003A78  6E18               	movwf	i2lcd_text@msjPtr,c
 17168  003A7A  0E02               	movlw	high _msjDIVISION1
 17169  003A7C  6E19               	movwf	i2lcd_text@msjPtr+1,c
 17170  003A7E  0E01               	movlw	1
 17171  003A80  6E1A               	movwf	i2lcd_text@color,c
 17172  003A82  0E02               	movlw	2
 17173  003A84  ECE6  F00C         	call	i2_lcd_text
 17174                           
 17175                           ;menu.c: 190: } else {
 17176  003A88  D009               	goto	i2l686
 17177  003A8A                     i2l685:
 17178                           
 17179                           ;menu.c: 191: lcd_text(2,msjDIVISION1,0);
 17180  003A8A  0E00               	movlw	low _msjDIVISION1
 17181  003A8C  6E18               	movwf	i2lcd_text@msjPtr,c
 17182  003A8E  0E02               	movlw	high _msjDIVISION1
 17183  003A90  6E19               	movwf	i2lcd_text@msjPtr+1,c
 17184  003A92  0E00               	movlw	0
 17185  003A94  6E1A               	movwf	i2lcd_text@color,c
 17186  003A96  0E02               	movlw	2
 17187  003A98  ECE6  F00C         	call	i2_lcd_text
 17188  003A9C                     i2l686:
 17189                           
 17190                           ;menu.c: 192: }
 17191                           ;menu.c: 193: if (colorRow == 3) {
 17192  003A9C  0E03               	movlw	3
 17193  003A9E  184B               	xorwf	menu_22@colorRow,w,c
 17194  003AA0  A4D8               	btfss	status,2,c
 17195  003AA2  D00A               	goto	i2l687
 17196                           
 17197                           ;menu.c: 194: lcd_text(3,msjDIVISION2,1);
 17198  003AA4  0ED0               	movlw	low _msjDIVISION2
 17199  003AA6  6E18               	movwf	i2lcd_text@msjPtr,c
 17200  003AA8  0E03               	movlw	high _msjDIVISION2
 17201  003AAA  6E19               	movwf	i2lcd_text@msjPtr+1,c
 17202  003AAC  0E01               	movlw	1
 17203  003AAE  6E1A               	movwf	i2lcd_text@color,c
 17204  003AB0  0E03               	movlw	3
 17205  003AB2  ECE6  F00C         	call	i2_lcd_text
 17206                           
 17207                           ;menu.c: 195: } else {
 17208  003AB6  D009               	goto	i2l688
 17209  003AB8                     i2l687:
 17210                           
 17211                           ;menu.c: 196: lcd_text(3,msjDIVISION2,0);
 17212  003AB8  0ED0               	movlw	low _msjDIVISION2
 17213  003ABA  6E18               	movwf	i2lcd_text@msjPtr,c
 17214  003ABC  0E03               	movlw	high _msjDIVISION2
 17215  003ABE  6E19               	movwf	i2lcd_text@msjPtr+1,c
 17216  003AC0  0E00               	movlw	0
 17217  003AC2  6E1A               	movwf	i2lcd_text@color,c
 17218  003AC4  0E03               	movlw	3
 17219  003AC6  ECE6  F00C         	call	i2_lcd_text
 17220  003ACA                     i2l688:
 17221                           
 17222                           ;menu.c: 197: }
 17223                           ;menu.c: 198: if (colorRow == 4) {
 17224  003ACA  0E04               	movlw	4
 17225  003ACC  184B               	xorwf	menu_22@colorRow,w,c
 17226  003ACE  A4D8               	btfss	status,2,c
 17227  003AD0  D00A               	goto	i2l689
 17228                           
 17229                           ;menu.c: 199: lcd_text(4,msjDIVISION3,1);
 17230  003AD2  0EC0               	movlw	low _msjDIVISION3
 17231  003AD4  6E18               	movwf	i2lcd_text@msjPtr,c
 17232  003AD6  0E03               	movlw	high _msjDIVISION3
 17233  003AD8  6E19               	movwf	i2lcd_text@msjPtr+1,c
 17234  003ADA  0E01               	movlw	1
 17235  003ADC  6E1A               	movwf	i2lcd_text@color,c
 17236  003ADE  0E04               	movlw	4
 17237  003AE0  ECE6  F00C         	call	i2_lcd_text
 17238                           
 17239                           ;menu.c: 200: } else {
 17240  003AE4  D009               	goto	i2l690
 17241  003AE6                     i2l689:
 17242                           
 17243                           ;menu.c: 201: lcd_text(4,msjDIVISION3,0);
 17244  003AE6  0EC0               	movlw	low _msjDIVISION3
 17245  003AE8  6E18               	movwf	i2lcd_text@msjPtr,c
 17246  003AEA  0E03               	movlw	high _msjDIVISION3
 17247  003AEC  6E19               	movwf	i2lcd_text@msjPtr+1,c
 17248  003AEE  0E00               	movlw	0
 17249  003AF0  6E1A               	movwf	i2lcd_text@color,c
 17250  003AF2  0E04               	movlw	4
 17251  003AF4  ECE6  F00C         	call	i2_lcd_text
 17252  003AF8                     i2l690:
 17253                           
 17254                           ;menu.c: 202: }
 17255                           ;menu.c: 204: for (char i=0;i<3;i++) {
 17256  003AF8  0E00               	movlw	0
 17257  003AFA  6E4A               	movwf	menu_22@i,c
 17258  003AFC                     i2l8360:
 17259  003AFC  0E02               	movlw	2
 17260  003AFE  644A               	cpfsgt	menu_22@i,c
 17261  003B00  D001               	goto	i2l691
 17262  003B02  0012               	return	
 17263  003B04                     i2l691:
 17264                           
 17265                           ;menu.c: 205: lcd_text(5+i,mBlank,0);
 17266  003B04  0E3A               	movlw	low menu_22@mBlank
 17267  003B06  6E18               	movwf	i2lcd_text@msjPtr,c
 17268  003B08  0E00               	movlw	high menu_22@mBlank
 17269  003B0A  6E19               	movwf	i2lcd_text@msjPtr+1,c
 17270  003B0C  0E00               	movlw	0
 17271  003B0E  6E1A               	movwf	i2lcd_text@color,c
 17272  003B10  504A               	movf	menu_22@i,w,c
 17273  003B12  0F05               	addlw	5
 17274  003B14  ECE6  F00C         	call	i2_lcd_text
 17275  003B18  2A4A               	incf	menu_22@i,f,c
 17276  003B1A  D7F0               	goto	i2l8360
 17277  003B1C                     __end_of_menu_22:
 17278                           	opt stack 0
 17279                           pclatu	equ	0xFFB
 17280                           pclath	equ	0xFFA
 17281                           tblptru	equ	0xFF8
 17282                           tblptrh	equ	0xFF7
 17283                           tblptrl	equ	0xFF6
 17284                           tablat	equ	0xFF5
 17285                           prodh	equ	0xFF4
 17286                           prodl	equ	0xFF3
 17287                           intcon	equ	0xFF2
 17288                           postinc0	equ	0xFEE
 17289                           fsr0h	equ	0xFEA
 17290                           fsr0l	equ	0xFE9
 17291                           wreg	equ	0xFE8
 17292                           indf1	equ	0xFE7
 17293                           postdec1	equ	0xFE5
 17294                           plusw1	equ	0xFE3
 17295                           fsr1h	equ	0xFE2
 17296                           fsr1l	equ	0xFE1
 17297                           indf2	equ	0xFDF
 17298                           postinc2	equ	0xFDE
 17299                           postdec2	equ	0xFDD
 17300                           plusw2	equ	0xFDB
 17301                           fsr2h	equ	0xFDA
 17302                           fsr2l	equ	0xFD9
 17303                           status	equ	0xFD8
 17304                           
 17305 ;; *************** function _menu_21 *****************
 17306 ;; Defined at:
 17307 ;;		line 169 in file "menu.c"
 17308 ;; Parameters:    Size  Location     Type
 17309 ;;  colorRow        1    wreg     unsigned char 
 17310 ;; Auto vars:     Size  Location     Type
 17311 ;;  colorRow        1   73[COMRAM] unsigned char 
 17312 ;;  i               1   74[COMRAM] unsigned char 
 17313 ;;  mBlank         16   57[COMRAM] unsigned char [16]
 17314 ;; Return value:  Size  Location     Type
 17315 ;;                  1    wreg      void 
 17316 ;; Registers used:
 17317 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17318 ;; Tracked objects:
 17319 ;;		On entry : 0/0
 17320 ;;		On exit  : 0/0
 17321 ;;		Unchanged: 0/0
 17322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 17323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17324 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17325 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17326 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17327 ;;Total ram usage:       18 bytes
 17328 ;; Hardware stack levels used:    1
 17329 ;; Hardware stack levels required when called:    5
 17330 ;; This function calls:
 17331 ;;		i2_lcd_text
 17332 ;; This function is called by:
 17333 ;;		_menu_navigate
 17334 ;;		_menu_next
 17335 ;; This function uses a non-reentrant model
 17336 ;;
 17337                           
 17338                           	psect	text59
 17339  004398                     __ptext59:
 17340                           	opt stack 0
 17341  004398                     _menu_21:
 17342                           	opt stack 16
 17343                           
 17344                           ;incstack = 0
 17345                           ;menu_21@colorRow stored from wreg
 17346  004398  6E4A               	movwf	menu_21@colorRow,c
 17347                           
 17348                           ;menu.c: 170: char mBlank[16] = "               ";
 17349  00439A  EE24  F0A0         	lfsr	2,menu_21@F15245
 17350  00439E  EE10  F03A         	lfsr	1,menu_21@mBlank
 17351  0043A2  0E0F               	movlw	15
 17352  0043A4                     i2u882_41:
 17353  0043A4  CFDB FFE3          	movff	plusw2,plusw1
 17354  0043A8  06E8               	decf	wreg,f,c
 17355  0043AA  E2FC               	bc	i2u882_41
 17356                           
 17357                           ;menu.c: 171: if (colorRow) {
 17358  0043AC  504A               	movf	menu_21@colorRow,w,c
 17359  0043AE  B4D8               	btfsc	status,2,c
 17360  0043B0  D00A               	goto	i2l674
 17361                           
 17362                           ;menu.c: 172: lcd_text(1,msjDONE,0);
 17363  0043B2  0EF0               	movlw	low _msjDONE
 17364  0043B4  6E18               	movwf	i2lcd_text@msjPtr,c
 17365  0043B6  0E03               	movlw	high _msjDONE
 17366  0043B8  6E19               	movwf	i2lcd_text@msjPtr+1,c
 17367  0043BA  0E00               	movlw	0
 17368  0043BC  6E1A               	movwf	i2lcd_text@color,c
 17369  0043BE  0E01               	movlw	1
 17370  0043C0  ECE6  F00C         	call	i2_lcd_text
 17371                           
 17372                           ;menu.c: 173: } else {
 17373  0043C4  D009               	goto	i2l675
 17374  0043C6                     i2l674:
 17375                           
 17376                           ;menu.c: 174: lcd_text(1,msjWAIT,0);
 17377  0043C6  0EE0               	movlw	low _msjWAIT
 17378  0043C8  6E18               	movwf	i2lcd_text@msjPtr,c
 17379  0043CA  0E03               	movlw	high _msjWAIT
 17380  0043CC  6E19               	movwf	i2lcd_text@msjPtr+1,c
 17381  0043CE  0E00               	movlw	0
 17382  0043D0  6E1A               	movwf	i2lcd_text@color,c
 17383  0043D2  0E01               	movlw	1
 17384  0043D4  ECE6  F00C         	call	i2_lcd_text
 17385  0043D8                     i2l675:
 17386                           
 17387                           ;menu.c: 175: }
 17388                           ;menu.c: 176: for (char i=0;i<6;i++) {
 17389  0043D8  0E00               	movlw	0
 17390  0043DA  6E4B               	movwf	menu_21@i,c
 17391  0043DC                     i2l8322:
 17392  0043DC  0E05               	movlw	5
 17393  0043DE  644B               	cpfsgt	menu_21@i,c
 17394  0043E0  D001               	goto	i2l676
 17395  0043E2  0012               	return	
 17396  0043E4                     i2l676:
 17397                           
 17398                           ;menu.c: 177: lcd_text(2+i,mBlank,0);
 17399  0043E4  0E3A               	movlw	low menu_21@mBlank
 17400  0043E6  6E18               	movwf	i2lcd_text@msjPtr,c
 17401  0043E8  0E00               	movlw	high menu_21@mBlank
 17402  0043EA  6E19               	movwf	i2lcd_text@msjPtr+1,c
 17403  0043EC  0E00               	movlw	0
 17404  0043EE  6E1A               	movwf	i2lcd_text@color,c
 17405  0043F0  504B               	movf	menu_21@i,w,c
 17406  0043F2  0F02               	addlw	2
 17407  0043F4  ECE6  F00C         	call	i2_lcd_text
 17408  0043F8  2A4B               	incf	menu_21@i,f,c
 17409  0043FA  D7F0               	goto	i2l8322
 17410  0043FC                     __end_of_menu_21:
 17411                           	opt stack 0
 17412                           pclatu	equ	0xFFB
 17413                           pclath	equ	0xFFA
 17414                           tblptru	equ	0xFF8
 17415                           tblptrh	equ	0xFF7
 17416                           tblptrl	equ	0xFF6
 17417                           tablat	equ	0xFF5
 17418                           prodh	equ	0xFF4
 17419                           prodl	equ	0xFF3
 17420                           intcon	equ	0xFF2
 17421                           postinc0	equ	0xFEE
 17422                           fsr0h	equ	0xFEA
 17423                           fsr0l	equ	0xFE9
 17424                           wreg	equ	0xFE8
 17425                           indf1	equ	0xFE7
 17426                           postdec1	equ	0xFE5
 17427                           plusw1	equ	0xFE3
 17428                           fsr1h	equ	0xFE2
 17429                           fsr1l	equ	0xFE1
 17430                           indf2	equ	0xFDF
 17431                           postinc2	equ	0xFDE
 17432                           postdec2	equ	0xFDD
 17433                           plusw2	equ	0xFDB
 17434                           fsr2h	equ	0xFDA
 17435                           fsr2l	equ	0xFD9
 17436                           status	equ	0xFD8
 17437                           
 17438 ;; *************** function _menu_2 *****************
 17439 ;; Defined at:
 17440 ;;		line 126 in file "menu.c"
 17441 ;; Parameters:    Size  Location     Type
 17442 ;;  colorRow        1    wreg     unsigned char 
 17443 ;; Auto vars:     Size  Location     Type
 17444 ;;  colorRow        1   73[COMRAM] unsigned char 
 17445 ;;  mBlank         16   57[COMRAM] unsigned char [16]
 17446 ;; Return value:  Size  Location     Type
 17447 ;;                  1    wreg      void 
 17448 ;; Registers used:
 17449 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17450 ;; Tracked objects:
 17451 ;;		On entry : 0/0
 17452 ;;		On exit  : 0/0
 17453 ;;		Unchanged: 0/0
 17454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 17455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17456 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17458 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17459 ;;Total ram usage:       17 bytes
 17460 ;; Hardware stack levels used:    1
 17461 ;; Hardware stack levels required when called:    5
 17462 ;; This function calls:
 17463 ;;		i2_lcd_text
 17464 ;; This function is called by:
 17465 ;;		_menu_navigate
 17466 ;; This function uses a non-reentrant model
 17467 ;;
 17468                           
 17469                           	psect	text60
 17470  0028E6                     __ptext60:
 17471                           	opt stack 0
 17472  0028E6                     _menu_2:
 17473                           	opt stack 16
 17474                           
 17475                           ;incstack = 0
 17476                           ;menu_2@colorRow stored from wreg
 17477  0028E6  6E4A               	movwf	menu_2@colorRow,c
 17478                           
 17479                           ;menu.c: 127: char mBlank[16] = "               ";
 17480  0028E8  EE24  F0B0         	lfsr	2,menu_2@F15242
 17481  0028EC  EE10  F03A         	lfsr	1,menu_2@mBlank
 17482  0028F0  0E0F               	movlw	15
 17483  0028F2                     i2u874_41:
 17484  0028F2  CFDB FFE3          	movff	plusw2,plusw1
 17485  0028F6  06E8               	decf	wreg,f,c
 17486  0028F8  E2FC               	bc	i2u874_41
 17487                           
 17488                           ;menu.c: 128: if (colorRow == 1) {
 17489  0028FA  044A               	decf	menu_2@colorRow,w,c
 17490  0028FC  A4D8               	btfss	status,2,c
 17491  0028FE  D00A               	goto	i2l655
 17492                           
 17493                           ;menu.c: 129: lcd_text(1,msjZERO,1);
 17494  002900  0E85               	movlw	low _msjZERO
 17495  002902  6E18               	movwf	i2lcd_text@msjPtr,c
 17496  002904  0E01               	movlw	high _msjZERO
 17497  002906  6E19               	movwf	i2lcd_text@msjPtr+1,c
 17498  002908  0E01               	movlw	1
 17499  00290A  6E1A               	movwf	i2lcd_text@color,c
 17500  00290C  0E01               	movlw	1
 17501  00290E  ECE6  F00C         	call	i2_lcd_text
 17502                           
 17503                           ;menu.c: 130: } else {
 17504  002912  D009               	goto	i2l656
 17505  002914                     i2l655:
 17506                           
 17507                           ;menu.c: 131: lcd_text(1,msjZERO,0);
 17508  002914  0E85               	movlw	low _msjZERO
 17509  002916  6E18               	movwf	i2lcd_text@msjPtr,c
 17510  002918  0E01               	movlw	high _msjZERO
 17511  00291A  6E19               	movwf	i2lcd_text@msjPtr+1,c
 17512  00291C  0E00               	movlw	0
 17513  00291E  6E1A               	movwf	i2lcd_text@color,c
 17514  002920  0E01               	movlw	1
 17515  002922  ECE6  F00C         	call	i2_lcd_text
 17516  002926                     i2l656:
 17517                           
 17518                           ;menu.c: 132: }
 17519                           ;menu.c: 133: if (colorRow == 2) {
 17520  002926  0E02               	movlw	2
 17521  002928  184A               	xorwf	menu_2@colorRow,w,c
 17522  00292A  A4D8               	btfss	status,2,c
 17523  00292C  D00A               	goto	i2l657
 17524                           
 17525                           ;menu.c: 134: lcd_text(2,msjDIVISIONS,1);
 17526  00292E  0E75               	movlw	low _msjDIVISIONS
 17527  002930  6E18               	movwf	i2lcd_text@msjPtr,c
 17528  002932  0E01               	movlw	high _msjDIVISIONS
 17529  002934  6E19               	movwf	i2lcd_text@msjPtr+1,c
 17530  002936  0E01               	movlw	1
 17531  002938  6E1A               	movwf	i2lcd_text@color,c
 17532  00293A  0E02               	movlw	2
 17533  00293C  ECE6  F00C         	call	i2_lcd_text
 17534                           
 17535                           ;menu.c: 135: } else {
 17536  002940  D009               	goto	i2l658
 17537  002942                     i2l657:
 17538                           
 17539                           ;menu.c: 136: lcd_text(2,msjDIVISIONS,0);
 17540  002942  0E75               	movlw	low _msjDIVISIONS
 17541  002944  6E18               	movwf	i2lcd_text@msjPtr,c
 17542  002946  0E01               	movlw	high _msjDIVISIONS
 17543  002948  6E19               	movwf	i2lcd_text@msjPtr+1,c
 17544  00294A  0E00               	movlw	0
 17545  00294C  6E1A               	movwf	i2lcd_text@color,c
 17546  00294E  0E02               	movlw	2
 17547  002950  ECE6  F00C         	call	i2_lcd_text
 17548  002954                     i2l658:
 17549                           
 17550                           ;menu.c: 137: }
 17551                           ;menu.c: 138: if (colorRow == 3) {
 17552  002954  0E03               	movlw	3
 17553  002956  184A               	xorwf	menu_2@colorRow,w,c
 17554  002958  A4D8               	btfss	status,2,c
 17555  00295A  D00A               	goto	i2l659
 17556                           
 17557                           ;menu.c: 139: lcd_text(3,msjPATTERN,1);
 17558  00295C  0E65               	movlw	low _msjPATTERN
 17559  00295E  6E18               	movwf	i2lcd_text@msjPtr,c
 17560  002960  0E01               	movlw	high _msjPATTERN
 17561  002962  6E19               	movwf	i2lcd_text@msjPtr+1,c
 17562  002964  0E01               	movlw	1
 17563  002966  6E1A               	movwf	i2lcd_text@color,c
 17564  002968  0E03               	movlw	3
 17565  00296A  ECE6  F00C         	call	i2_lcd_text
 17566                           
 17567                           ;menu.c: 140: } else {
 17568  00296E  D009               	goto	i2l660
 17569  002970                     i2l659:
 17570                           
 17571                           ;menu.c: 141: lcd_text(3,msjPATTERN,0);
 17572  002970  0E65               	movlw	low _msjPATTERN
 17573  002972  6E18               	movwf	i2lcd_text@msjPtr,c
 17574  002974  0E01               	movlw	high _msjPATTERN
 17575  002976  6E19               	movwf	i2lcd_text@msjPtr+1,c
 17576  002978  0E00               	movlw	0
 17577  00297A  6E1A               	movwf	i2lcd_text@color,c
 17578  00297C  0E03               	movlw	3
 17579  00297E  ECE6  F00C         	call	i2_lcd_text
 17580  002982                     i2l660:
 17581                           
 17582                           ;menu.c: 142: }
 17583                           ;menu.c: 143: if (colorRow == 4) {
 17584  002982  0E04               	movlw	4
 17585  002984  184A               	xorwf	menu_2@colorRow,w,c
 17586  002986  A4D8               	btfss	status,2,c
 17587  002988  D00A               	goto	i2l661
 17588                           
 17589                           ;menu.c: 144: lcd_text(4,msjFILTER,1);
 17590  00298A  0E55               	movlw	low _msjFILTER
 17591  00298C  6E18               	movwf	i2lcd_text@msjPtr,c
 17592  00298E  0E01               	movlw	high _msjFILTER
 17593  002990  6E19               	movwf	i2lcd_text@msjPtr+1,c
 17594  002992  0E01               	movlw	1
 17595  002994  6E1A               	movwf	i2lcd_text@color,c
 17596  002996  0E04               	movlw	4
 17597  002998  ECE6  F00C         	call	i2_lcd_text
 17598                           
 17599                           ;menu.c: 145: } else {
 17600  00299C  D009               	goto	i2l662
 17601  00299E                     i2l661:
 17602                           
 17603                           ;menu.c: 146: lcd_text(4,msjFILTER,0);
 17604  00299E  0E55               	movlw	low _msjFILTER
 17605  0029A0  6E18               	movwf	i2lcd_text@msjPtr,c
 17606  0029A2  0E01               	movlw	high _msjFILTER
 17607  0029A4  6E19               	movwf	i2lcd_text@msjPtr+1,c
 17608  0029A6  0E00               	movlw	0
 17609  0029A8  6E1A               	movwf	i2lcd_text@color,c
 17610  0029AA  0E04               	movlw	4
 17611  0029AC  ECE6  F00C         	call	i2_lcd_text
 17612  0029B0                     i2l662:
 17613                           
 17614                           ;menu.c: 147: }
 17615                           ;menu.c: 148: if (colorRow == 5) {
 17616  0029B0  0E05               	movlw	5
 17617  0029B2  184A               	xorwf	menu_2@colorRow,w,c
 17618  0029B4  A4D8               	btfss	status,2,c
 17619  0029B6  D00A               	goto	i2l663
 17620                           
 17621                           ;menu.c: 149: lcd_text(5,msjSTEP,1);
 17622  0029B8  0E45               	movlw	low _msjSTEP
 17623  0029BA  6E18               	movwf	i2lcd_text@msjPtr,c
 17624  0029BC  0E01               	movlw	high _msjSTEP
 17625  0029BE  6E19               	movwf	i2lcd_text@msjPtr+1,c
 17626  0029C0  0E01               	movlw	1
 17627  0029C2  6E1A               	movwf	i2lcd_text@color,c
 17628  0029C4  0E05               	movlw	5
 17629  0029C6  ECE6  F00C         	call	i2_lcd_text
 17630                           
 17631                           ;menu.c: 150: } else {
 17632  0029CA  D009               	goto	i2l664
 17633  0029CC                     i2l663:
 17634                           
 17635                           ;menu.c: 151: lcd_text(5,msjSTEP,0);
 17636  0029CC  0E45               	movlw	low _msjSTEP
 17637  0029CE  6E18               	movwf	i2lcd_text@msjPtr,c
 17638  0029D0  0E01               	movlw	high _msjSTEP
 17639  0029D2  6E19               	movwf	i2lcd_text@msjPtr+1,c
 17640  0029D4  0E00               	movlw	0
 17641  0029D6  6E1A               	movwf	i2lcd_text@color,c
 17642  0029D8  0E05               	movlw	5
 17643  0029DA  ECE6  F00C         	call	i2_lcd_text
 17644  0029DE                     i2l664:
 17645                           
 17646                           ;menu.c: 152: }
 17647                           ;menu.c: 153: if (colorRow == 6) {
 17648  0029DE  0E06               	movlw	6
 17649  0029E0  184A               	xorwf	menu_2@colorRow,w,c
 17650  0029E2  A4D8               	btfss	status,2,c
 17651  0029E4  D00A               	goto	i2l665
 17652                           
 17653                           ;menu.c: 154: lcd_text(6,msjTHRESHOLD,1);
 17654  0029E6  0E35               	movlw	low _msjTHRESHOLD
 17655  0029E8  6E18               	movwf	i2lcd_text@msjPtr,c
 17656  0029EA  0E01               	movlw	high _msjTHRESHOLD
 17657  0029EC  6E19               	movwf	i2lcd_text@msjPtr+1,c
 17658  0029EE  0E01               	movlw	1
 17659  0029F0  6E1A               	movwf	i2lcd_text@color,c
 17660  0029F2  0E06               	movlw	6
 17661  0029F4  ECE6  F00C         	call	i2_lcd_text
 17662                           
 17663                           ;menu.c: 155: } else {
 17664  0029F8  D009               	goto	i2l666
 17665  0029FA                     i2l665:
 17666                           
 17667                           ;menu.c: 156: lcd_text(6,msjTHRESHOLD,0);
 17668  0029FA  0E35               	movlw	low _msjTHRESHOLD
 17669  0029FC  6E18               	movwf	i2lcd_text@msjPtr,c
 17670  0029FE  0E01               	movlw	high _msjTHRESHOLD
 17671  002A00  6E19               	movwf	i2lcd_text@msjPtr+1,c
 17672  002A02  0E00               	movlw	0
 17673  002A04  6E1A               	movwf	i2lcd_text@color,c
 17674  002A06  0E06               	movlw	6
 17675  002A08  ECE6  F00C         	call	i2_lcd_text
 17676  002A0C                     i2l666:
 17677                           
 17678                           ;menu.c: 157: }
 17679                           ;menu.c: 158: if (colorRow == 7) {
 17680  002A0C  0E07               	movlw	7
 17681  002A0E  184A               	xorwf	menu_2@colorRow,w,c
 17682  002A10  A4D8               	btfss	status,2,c
 17683  002A12  D00A               	goto	i2l667
 17684                           
 17685                           ;menu.c: 159: lcd_text(7,msjRANGE,1);
 17686  002A14  0E25               	movlw	low _msjRANGE
 17687  002A16  6E18               	movwf	i2lcd_text@msjPtr,c
 17688  002A18  0E01               	movlw	high _msjRANGE
 17689  002A1A  6E19               	movwf	i2lcd_text@msjPtr+1,c
 17690  002A1C  0E01               	movlw	1
 17691  002A1E  6E1A               	movwf	i2lcd_text@color,c
 17692  002A20  0E07               	movlw	7
 17693  002A22  ECE6  F00C         	call	i2_lcd_text
 17694                           
 17695                           ;menu.c: 160: } else {
 17696  002A26  0012               	return	
 17697  002A28                     i2l667:
 17698                           
 17699                           ;menu.c: 161: lcd_text(7,msjRANGE,0);
 17700  002A28  0E25               	movlw	low _msjRANGE
 17701  002A2A  6E18               	movwf	i2lcd_text@msjPtr,c
 17702  002A2C  0E01               	movlw	high _msjRANGE
 17703  002A2E  6E19               	movwf	i2lcd_text@msjPtr+1,c
 17704  002A30  0E00               	movlw	0
 17705  002A32  6E1A               	movwf	i2lcd_text@color,c
 17706  002A34  0E07               	movlw	7
 17707  002A36  ECE6  F00C         	call	i2_lcd_text
 17708  002A3A  0012               	return	
 17709  002A3C                     __end_of_menu_2:
 17710                           	opt stack 0
 17711                           pclatu	equ	0xFFB
 17712                           pclath	equ	0xFFA
 17713                           tblptru	equ	0xFF8
 17714                           tblptrh	equ	0xFF7
 17715                           tblptrl	equ	0xFF6
 17716                           tablat	equ	0xFF5
 17717                           prodh	equ	0xFF4
 17718                           prodl	equ	0xFF3
 17719                           intcon	equ	0xFF2
 17720                           postinc0	equ	0xFEE
 17721                           fsr0h	equ	0xFEA
 17722                           fsr0l	equ	0xFE9
 17723                           wreg	equ	0xFE8
 17724                           indf1	equ	0xFE7
 17725                           postdec1	equ	0xFE5
 17726                           plusw1	equ	0xFE3
 17727                           fsr1h	equ	0xFE2
 17728                           fsr1l	equ	0xFE1
 17729                           indf2	equ	0xFDF
 17730                           postinc2	equ	0xFDE
 17731                           postdec2	equ	0xFDD
 17732                           plusw2	equ	0xFDB
 17733                           fsr2h	equ	0xFDA
 17734                           fsr2l	equ	0xFD9
 17735                           status	equ	0xFD8
 17736                           
 17737 ;; *************** function _menu_1 *****************
 17738 ;; Defined at:
 17739 ;;		line 90 in file "menu.c"
 17740 ;; Parameters:    Size  Location     Type
 17741 ;;  colorRow        1    wreg     unsigned char 
 17742 ;; Auto vars:     Size  Location     Type
 17743 ;;  colorRow        1   73[COMRAM] unsigned char 
 17744 ;;  mBlank         16   57[COMRAM] unsigned char [16]
 17745 ;; Return value:  Size  Location     Type
 17746 ;;                  1    wreg      void 
 17747 ;; Registers used:
 17748 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17749 ;; Tracked objects:
 17750 ;;		On entry : 0/0
 17751 ;;		On exit  : 0/0
 17752 ;;		Unchanged: 0/0
 17753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 17754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17755 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17756 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17757 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17758 ;;Total ram usage:       17 bytes
 17759 ;; Hardware stack levels used:    1
 17760 ;; Hardware stack levels required when called:    5
 17761 ;; This function calls:
 17762 ;;		i2_lcd_text
 17763 ;; This function is called by:
 17764 ;;		_menu_navigate
 17765 ;; This function uses a non-reentrant model
 17766 ;;
 17767                           
 17768                           	psect	text61
 17769  002B8E                     __ptext61:
 17770                           	opt stack 0
 17771  002B8E                     _menu_1:
 17772                           	opt stack 16
 17773                           
 17774                           ;incstack = 0
 17775                           ;menu_1@colorRow stored from wreg
 17776  002B8E  6E4A               	movwf	menu_1@colorRow,c
 17777                           
 17778                           ;menu.c: 91: char mBlank[16] = "               ";
 17779  002B90  EE24  F0C0         	lfsr	2,menu_1@F15239
 17780  002B94  EE10  F03A         	lfsr	1,menu_1@mBlank
 17781  002B98  0E0F               	movlw	15
 17782  002B9A                     i2u867_41:
 17783  002B9A  CFDB FFE3          	movff	plusw2,plusw1
 17784  002B9E  06E8               	decf	wreg,f,c
 17785  002BA0  E2FC               	bc	i2u867_41
 17786                           
 17787                           ;menu.c: 92: if (colorRow == 1) {
 17788  002BA2  044A               	decf	menu_1@colorRow,w,c
 17789  002BA4  A4D8               	btfss	status,2,c
 17790  002BA6  D00A               	goto	i2l638
 17791                           
 17792                           ;menu.c: 93: lcd_text(1,msjCALIBRATE,1);
 17793  002BA8  0E95               	movlw	low _msjCALIBRATE
 17794  002BAA  6E18               	movwf	i2lcd_text@msjPtr,c
 17795  002BAC  0E01               	movlw	high _msjCALIBRATE
 17796  002BAE  6E19               	movwf	i2lcd_text@msjPtr+1,c
 17797  002BB0  0E01               	movlw	1
 17798  002BB2  6E1A               	movwf	i2lcd_text@color,c
 17799  002BB4  0E01               	movlw	1
 17800  002BB6  ECE6  F00C         	call	i2_lcd_text
 17801                           
 17802                           ;menu.c: 94: } else {
 17803  002BBA  D009               	goto	i2l639
 17804  002BBC                     i2l638:
 17805                           
 17806                           ;menu.c: 95: lcd_text(1,msjCALIBRATE,0);
 17807  002BBC  0E95               	movlw	low _msjCALIBRATE
 17808  002BBE  6E18               	movwf	i2lcd_text@msjPtr,c
 17809  002BC0  0E01               	movlw	high _msjCALIBRATE
 17810  002BC2  6E19               	movwf	i2lcd_text@msjPtr+1,c
 17811  002BC4  0E00               	movlw	0
 17812  002BC6  6E1A               	movwf	i2lcd_text@color,c
 17813  002BC8  0E01               	movlw	1
 17814  002BCA  ECE6  F00C         	call	i2_lcd_text
 17815  002BCE                     i2l639:
 17816                           
 17817                           ;menu.c: 96: }
 17818                           ;menu.c: 97: if (colorRow == 2) {
 17819  002BCE  0E02               	movlw	2
 17820  002BD0  184A               	xorwf	menu_1@colorRow,w,c
 17821  002BD2  A4D8               	btfss	status,2,c
 17822  002BD4  D00A               	goto	i2l640
 17823                           
 17824                           ;menu.c: 98: lcd_text(2,msjSERIAL,1);
 17825  002BD6  0EF0               	movlw	low _msjSERIAL
 17826  002BD8  6E18               	movwf	i2lcd_text@msjPtr,c
 17827  002BDA  0E02               	movlw	high _msjSERIAL
 17828  002BDC  6E19               	movwf	i2lcd_text@msjPtr+1,c
 17829  002BDE  0E01               	movlw	1
 17830  002BE0  6E1A               	movwf	i2lcd_text@color,c
 17831  002BE2  0E02               	movlw	2
 17832  002BE4  ECE6  F00C         	call	i2_lcd_text
 17833                           
 17834                           ;menu.c: 99: } else {
 17835  002BE8  D009               	goto	i2l641
 17836  002BEA                     i2l640:
 17837                           
 17838                           ;menu.c: 100: lcd_text(2,msjSERIAL,0);
 17839  002BEA  0EF0               	movlw	low _msjSERIAL
 17840  002BEC  6E18               	movwf	i2lcd_text@msjPtr,c
 17841  002BEE  0E02               	movlw	high _msjSERIAL
 17842  002BF0  6E19               	movwf	i2lcd_text@msjPtr+1,c
 17843  002BF2  0E00               	movlw	0
 17844  002BF4  6E1A               	movwf	i2lcd_text@color,c
 17845  002BF6  0E02               	movlw	2
 17846  002BF8  ECE6  F00C         	call	i2_lcd_text
 17847  002BFC                     i2l641:
 17848                           
 17849                           ;menu.c: 101: }
 17850                           ;menu.c: 102: if (colorRow == 3) {
 17851  002BFC  0E03               	movlw	3
 17852  002BFE  184A               	xorwf	menu_1@colorRow,w,c
 17853  002C00  A4D8               	btfss	status,2,c
 17854  002C02  D00A               	goto	i2l642
 17855                           
 17856                           ;menu.c: 103: lcd_text(3,msjETHERNET,1);
 17857  002C04  0ED0               	movlw	low _msjETHERNET
 17858  002C06  6E18               	movwf	i2lcd_text@msjPtr,c
 17859  002C08  0E02               	movlw	high _msjETHERNET
 17860  002C0A  6E19               	movwf	i2lcd_text@msjPtr+1,c
 17861  002C0C  0E01               	movlw	1
 17862  002C0E  6E1A               	movwf	i2lcd_text@color,c
 17863  002C10  0E03               	movlw	3
 17864  002C12  ECE6  F00C         	call	i2_lcd_text
 17865                           
 17866                           ;menu.c: 104: } else {
 17867  002C16  D009               	goto	i2l643
 17868  002C18                     i2l642:
 17869                           
 17870                           ;menu.c: 105: lcd_text(3,msjETHERNET,0);
 17871  002C18  0ED0               	movlw	low _msjETHERNET
 17872  002C1A  6E18               	movwf	i2lcd_text@msjPtr,c
 17873  002C1C  0E02               	movlw	high _msjETHERNET
 17874  002C1E  6E19               	movwf	i2lcd_text@msjPtr+1,c
 17875  002C20  0E00               	movlw	0
 17876  002C22  6E1A               	movwf	i2lcd_text@color,c
 17877  002C24  0E03               	movlw	3
 17878  002C26  ECE6  F00C         	call	i2_lcd_text
 17879  002C2A                     i2l643:
 17880                           
 17881                           ;menu.c: 106: }
 17882                           ;menu.c: 107: if (colorRow == 4) {
 17883  002C2A  0E04               	movlw	4
 17884  002C2C  184A               	xorwf	menu_1@colorRow,w,c
 17885  002C2E  A4D8               	btfss	status,2,c
 17886  002C30  D00A               	goto	i2l644
 17887                           
 17888                           ;menu.c: 108: lcd_text(4,msjPASSWORD,1);
 17889  002C32  0E70               	movlw	low _msjPASSWORD
 17890  002C34  6E18               	movwf	i2lcd_text@msjPtr,c
 17891  002C36  0E02               	movlw	high _msjPASSWORD
 17892  002C38  6E19               	movwf	i2lcd_text@msjPtr+1,c
 17893  002C3A  0E01               	movlw	1
 17894  002C3C  6E1A               	movwf	i2lcd_text@color,c
 17895  002C3E  0E04               	movlw	4
 17896  002C40  ECE6  F00C         	call	i2_lcd_text
 17897                           
 17898                           ;menu.c: 109: } else {
 17899  002C44  D009               	goto	i2l645
 17900  002C46                     i2l644:
 17901                           
 17902                           ;menu.c: 110: lcd_text(4,msjPASSWORD,0);
 17903  002C46  0E70               	movlw	low _msjPASSWORD
 17904  002C48  6E18               	movwf	i2lcd_text@msjPtr,c
 17905  002C4A  0E02               	movlw	high _msjPASSWORD
 17906  002C4C  6E19               	movwf	i2lcd_text@msjPtr+1,c
 17907  002C4E  0E00               	movlw	0
 17908  002C50  6E1A               	movwf	i2lcd_text@color,c
 17909  002C52  0E04               	movlw	4
 17910  002C54  ECE6  F00C         	call	i2_lcd_text
 17911  002C58                     i2l645:
 17912                           
 17913                           ;menu.c: 111: }
 17914                           ;menu.c: 112: if (colorRow == 5) {
 17915  002C58  0E05               	movlw	5
 17916  002C5A  184A               	xorwf	menu_1@colorRow,w,c
 17917  002C5C  A4D8               	btfss	status,2,c
 17918  002C5E  D00A               	goto	i2l646
 17919                           
 17920                           ;menu.c: 113: lcd_text(5,msjRESET,1);
 17921  002C60  0E50               	movlw	low _msjRESET
 17922  002C62  6E18               	movwf	i2lcd_text@msjPtr,c
 17923  002C64  0E02               	movlw	high _msjRESET
 17924  002C66  6E19               	movwf	i2lcd_text@msjPtr+1,c
 17925  002C68  0E01               	movlw	1
 17926  002C6A  6E1A               	movwf	i2lcd_text@color,c
 17927  002C6C  0E05               	movlw	5
 17928  002C6E  ECE6  F00C         	call	i2_lcd_text
 17929                           
 17930                           ;menu.c: 114: } else {
 17931  002C72  D009               	goto	i2l647
 17932  002C74                     i2l646:
 17933                           
 17934                           ;menu.c: 115: lcd_text(5,msjRESET,0);
 17935  002C74  0E50               	movlw	low _msjRESET
 17936  002C76  6E18               	movwf	i2lcd_text@msjPtr,c
 17937  002C78  0E02               	movlw	high _msjRESET
 17938  002C7A  6E19               	movwf	i2lcd_text@msjPtr+1,c
 17939  002C7C  0E00               	movlw	0
 17940  002C7E  6E1A               	movwf	i2lcd_text@color,c
 17941  002C80  0E05               	movlw	5
 17942  002C82  ECE6  F00C         	call	i2_lcd_text
 17943  002C86                     i2l647:
 17944                           
 17945                           ;menu.c: 116: }
 17946                           ;menu.c: 117: if (colorRow == 6) {
 17947  002C86  0E06               	movlw	6
 17948  002C88  184A               	xorwf	menu_1@colorRow,w,c
 17949  002C8A  A4D8               	btfss	status,2,c
 17950  002C8C  D00A               	goto	i2l648
 17951                           
 17952                           ;menu.c: 118: lcd_text(6,msjFINISH,1);
 17953  002C8E  0E40               	movlw	low _msjFINISH
 17954  002C90  6E18               	movwf	i2lcd_text@msjPtr,c
 17955  002C92  0E02               	movlw	high _msjFINISH
 17956  002C94  6E19               	movwf	i2lcd_text@msjPtr+1,c
 17957  002C96  0E01               	movlw	1
 17958  002C98  6E1A               	movwf	i2lcd_text@color,c
 17959  002C9A  0E06               	movlw	6
 17960  002C9C  ECE6  F00C         	call	i2_lcd_text
 17961                           
 17962                           ;menu.c: 119: } else {
 17963  002CA0  D009               	goto	i2l649
 17964  002CA2                     i2l648:
 17965                           
 17966                           ;menu.c: 120: lcd_text(6,msjFINISH,0);
 17967  002CA2  0E40               	movlw	low _msjFINISH
 17968  002CA4  6E18               	movwf	i2lcd_text@msjPtr,c
 17969  002CA6  0E02               	movlw	high _msjFINISH
 17970  002CA8  6E19               	movwf	i2lcd_text@msjPtr+1,c
 17971  002CAA  0E00               	movlw	0
 17972  002CAC  6E1A               	movwf	i2lcd_text@color,c
 17973  002CAE  0E06               	movlw	6
 17974  002CB0  ECE6  F00C         	call	i2_lcd_text
 17975  002CB4                     i2l649:
 17976                           
 17977                           ;menu.c: 121: }
 17978                           ;menu.c: 123: lcd_text(7,mBlank,0);
 17979  002CB4  0E3A               	movlw	low menu_1@mBlank
 17980  002CB6  6E18               	movwf	i2lcd_text@msjPtr,c
 17981  002CB8  0E00               	movlw	high menu_1@mBlank
 17982  002CBA  6E19               	movwf	i2lcd_text@msjPtr+1,c
 17983  002CBC  0E00               	movlw	0
 17984  002CBE  6E1A               	movwf	i2lcd_text@color,c
 17985  002CC0  0E07               	movlw	7
 17986  002CC2  ECE6  F00C         	call	i2_lcd_text
 17987  002CC6  0012               	return		;funcret
 17988  002CC8                     __end_of_menu_1:
 17989                           	opt stack 0
 17990                           pclatu	equ	0xFFB
 17991                           pclath	equ	0xFFA
 17992                           tblptru	equ	0xFF8
 17993                           tblptrh	equ	0xFF7
 17994                           tblptrl	equ	0xFF6
 17995                           tablat	equ	0xFF5
 17996                           prodh	equ	0xFF4
 17997                           prodl	equ	0xFF3
 17998                           intcon	equ	0xFF2
 17999                           postinc0	equ	0xFEE
 18000                           fsr0h	equ	0xFEA
 18001                           fsr0l	equ	0xFE9
 18002                           wreg	equ	0xFE8
 18003                           indf1	equ	0xFE7
 18004                           postdec1	equ	0xFE5
 18005                           plusw1	equ	0xFE3
 18006                           fsr1h	equ	0xFE2
 18007                           fsr1l	equ	0xFE1
 18008                           indf2	equ	0xFDF
 18009                           postinc2	equ	0xFDE
 18010                           postdec2	equ	0xFDD
 18011                           plusw2	equ	0xFDB
 18012                           fsr2h	equ	0xFDA
 18013                           fsr2l	equ	0xFD9
 18014                           status	equ	0xFD8
 18015                           
 18016 ;; *************** function i2_lcd_text *****************
 18017 ;; Defined at:
 18018 ;;		line 254 in file "tft.c"
 18019 ;; Parameters:    Size  Location     Type
 18020 ;;  renglon         1    wreg     unsigned char 
 18021 ;;  msjPtr          2   23[COMRAM] PTR unsigned char 
 18022 ;;		 -> memBuff1(16), msjCANCEL(16), msjCONFIRM(16), menu_6@mBlank(16), 
 18023 ;;		 -> msjCHANGE(16), menu_5@mBlank(16), memPort(16), menu_45@mBlank(16), 
 18024 ;;		 -> memIp(16), menu_44@mBlank(16), memMac(16), menu_43@mBlank(16), 
 18025 ;;		 -> memSubnet(16), menu_42@mBlank(16), memGateway(16), menu_41@mBlank(16), 
 18026 ;;		 -> msjPORT(16), msjIP(16), msjMAC(16), msjSUBNETMASK(16), 
 18027 ;;		 -> msjGATEWAY(16), msjBAUD4(16), msjBAUD3(16), msjBAUD2(16), 
 18028 ;;		 -> msjBAUD1(16), menu_31@mBlank(16), msjOFF(16), msjON(16), 
 18029 ;;		 -> msjBAUD(16), menu_3@mBlank(16), menu_27@mBlank(16), msjVALUEINGR(16), 
 18030 ;;		 -> menu_26@mBlank(16), msjTAREINGR(16), menu_25@mBlank(16), msjFILTER3(16), 
 18031 ;;		 -> msjFILTER2(16), msjFILTER1(16), menu_24@mBlank(16), msjWEIGHTINGR(16), 
 18032 ;;		 -> menu_23@mBlank(16), msjDIVISION3(16), msjDIVISION2(16), msjDIVISION1(16), 
 18033 ;;		 -> msjDIVISION0(16), menu_22@mBlank(16), msjWAIT(16), msjDONE(16), 
 18034 ;;		 -> menu_21@mBlank(16), msjRANGE(16), msjTHRESHOLD(16), msjSTEP(16), 
 18035 ;;		 -> msjFILTER(16), msjPATTERN(16), msjDIVISIONS(16), msjZERO(16), 
 18036 ;;		 -> msjFINISH(16), msjRESET(16), msjPASSWORD(16), msjETHERNET(16), 
 18037 ;;		 -> msjSERIAL(16), msjCALIBRATE(16), menu_1@mBlank(16), menu_text(16), 
 18038 ;;		 -> lcdText(16), 
 18039 ;;  color           1   25[COMRAM] unsigned char 
 18040 ;; Auto vars:     Size  Location     Type
 18041 ;;  renglon         1   50[COMRAM] unsigned char 
 18042 ;;  lcd_text       15   31[COMRAM] unsigned char [15]
 18043 ;;  lcd_text        2   55[COMRAM] unsigned int 
 18044 ;;  lcd_text        2   53[COMRAM] unsigned int 
 18045 ;;  lcd_text        2   51[COMRAM] unsigned int 
 18046 ;; Return value:  Size  Location     Type
 18047 ;;                  1    wreg      void 
 18048 ;; Registers used:
 18049 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18050 ;; Tracked objects:
 18051 ;;		On entry : 0/0
 18052 ;;		On exit  : 0/0
 18053 ;;		Unchanged: 0/0
 18054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 18055 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18056 ;;      Locals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18057 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18058 ;;      Totals:        34       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18059 ;;Total ram usage:       34 bytes
 18060 ;; Hardware stack levels used:    1
 18061 ;; Hardware stack levels required when called:    4
 18062 ;; This function calls:
 18063 ;;		i2___wmul
 18064 ;;		i2_bitRead
 18065 ;;		i2_lcd_pix
 18066 ;;		i2_lcd_pix_color
 18067 ;; This function is called by:
 18068 ;;		_menu_1
 18069 ;;		_menu_2
 18070 ;;		_menu_21
 18071 ;;		_menu_22
 18072 ;;		_menu_23
 18073 ;;		_menu_24
 18074 ;;		_menu_25
 18075 ;;		_menu_26
 18076 ;;		_menu_27
 18077 ;;		_menu_3
 18078 ;;		_menu_31
 18079 ;;		_menu_4
 18080 ;;		_menu_41
 18081 ;;		_menu_42
 18082 ;;		_menu_43
 18083 ;;		_menu_44
 18084 ;;		_menu_45
 18085 ;;		_menu_5
 18086 ;;		_menu_6
 18087 ;;		_menu_next
 18088 ;;		i2_lcd_legend
 18089 ;; This function uses a non-reentrant model
 18090 ;;
 18091                           
 18092                           	psect	text62
 18093  0019CC                     __ptext62:
 18094                           	opt stack 0
 18095  0019CC                     i2_lcd_text:
 18096                           	opt stack 18
 18097                           
 18098                           ;incstack = 0
 18099                           ;i2lcd_text@renglon stored from wreg
 18100  0019CC  6E33               	movwf	i2lcd_text@renglon,c
 18101                           
 18102                           ;tft.c: 255: unsigned int i,j,k;
 18103                           ;tft.c: 256: char msjPtrCpy[15];
 18104                           ;tft.c: 258: switch (color) {
 18105  0019CE  D1FF               	goto	i2l474
 18106  0019D0                     
 18107                           ;tft.c: 260: for (k=0;k<15;k++) {
 18108  0019D0  0E00               	movlw	0
 18109  0019D2  6E39               	movwf	i2lcd_text@k+1,c
 18110  0019D4  0E00               	movlw	0
 18111  0019D6  6E38               	movwf	i2lcd_text@k,c
 18112  0019D8  5039               	movf	i2lcd_text@k+1,w,c
 18113  0019DA  E105               	bnz	i2u835_40
 18114  0019DC  0E0F               	movlw	15
 18115  0019DE  5C38               	subwf	i2lcd_text@k,w,c
 18116  0019E0  B0D8               	btfsc	status,0,c
 18117  0019E2  0012               	return	
 18118  0019E4  D001               	goto	i2l476
 18119  0019E6                     i2u835_40:
 18120  0019E6  0012               	return	
 18121  0019E8                     i2l476:
 18122                           
 18123                           ;tft.c: 261: if (*(msjPtr+k) == 32 || *(msjPtr+k) == 0) {
 18124  0019E8  5038               	movf	i2lcd_text@k,w,c
 18125  0019EA  2418               	addwf	i2lcd_text@msjPtr,w,c
 18126  0019EC  6ED9               	movwf	fsr2l,c
 18127  0019EE  5039               	movf	i2lcd_text@k+1,w,c
 18128  0019F0  2019               	addwfc	i2lcd_text@msjPtr+1,w,c
 18129  0019F2  6EDA               	movwf	fsr2h,c
 18130  0019F4  0E20               	movlw	32
 18131  0019F6  18DE               	xorwf	postinc2,w,c
 18132  0019F8  B4D8               	btfsc	status,2,c
 18133  0019FA  D009               	goto	i2u837_40
 18134  0019FC  5038               	movf	i2lcd_text@k,w,c
 18135  0019FE  2418               	addwf	i2lcd_text@msjPtr,w,c
 18136  001A00  6ED9               	movwf	fsr2l,c
 18137  001A02  5039               	movf	i2lcd_text@k+1,w,c
 18138  001A04  2019               	addwfc	i2lcd_text@msjPtr+1,w,c
 18139  001A06  6EDA               	movwf	fsr2h,c
 18140  001A08  50DF               	movf	indf2,w,c
 18141  001A0A  A4D8               	btfss	status,2,c
 18142  001A0C  D008               	goto	i2l478
 18143  001A0E                     i2u837_40:
 18144                           
 18145                           ;tft.c: 263: *(msjPtrCpy+k) = 38;
 18146  001A0E  0E20               	movlw	low i2lcd_text@msjPtrCpy
 18147  001A10  2438               	addwf	i2lcd_text@k,w,c
 18148  001A12  6ED9               	movwf	fsr2l,c
 18149  001A14  0E00               	movlw	high i2lcd_text@msjPtrCpy
 18150  001A16  2039               	addwfc	i2lcd_text@k+1,w,c
 18151  001A18  6EDA               	movwf	fsr2h,c
 18152  001A1A  0E26               	movlw	38
 18153  001A1C  6EDF               	movwf	indf2,c
 18154  001A1E                     i2l478:
 18155                           
 18156                           ;tft.c: 264: }
 18157                           ;tft.c: 265: if (*(msjPtr+k) > 47 && *(msjPtr+k) < 58) {
 18158  001A1E  5038               	movf	i2lcd_text@k,w,c
 18159  001A20  2418               	addwf	i2lcd_text@msjPtr,w,c
 18160  001A22  6ED9               	movwf	fsr2l,c
 18161  001A24  5039               	movf	i2lcd_text@k+1,w,c
 18162  001A26  2019               	addwfc	i2lcd_text@msjPtr+1,w,c
 18163  001A28  6EDA               	movwf	fsr2h,c
 18164  001A2A  0E2F               	movlw	47
 18165  001A2C  64DF               	cpfsgt	indf2,c
 18166  001A2E  D018               	goto	i2l481
 18167  001A30  5038               	movf	i2lcd_text@k,w,c
 18168  001A32  2418               	addwf	i2lcd_text@msjPtr,w,c
 18169  001A34  6ED9               	movwf	fsr2l,c
 18170  001A36  5039               	movf	i2lcd_text@k+1,w,c
 18171  001A38  2019               	addwfc	i2lcd_text@msjPtr+1,w,c
 18172  001A3A  6EDA               	movwf	fsr2h,c
 18173  001A3C  0E3A               	movlw	58
 18174  001A3E  60DF               	cpfslt	indf2,c
 18175  001A40  D00F               	goto	i2l481
 18176                           
 18177                           ;tft.c: 267: *(msjPtrCpy+k) = *(msjPtr+k) - 48;
 18178  001A42  0E20               	movlw	low i2lcd_text@msjPtrCpy
 18179  001A44  2438               	addwf	i2lcd_text@k,w,c
 18180  001A46  6ED9               	movwf	fsr2l,c
 18181  001A48  0E00               	movlw	high i2lcd_text@msjPtrCpy
 18182  001A4A  2039               	addwfc	i2lcd_text@k+1,w,c
 18183  001A4C  6EDA               	movwf	fsr2h,c
 18184  001A4E  5038               	movf	i2lcd_text@k,w,c
 18185  001A50  2418               	addwf	i2lcd_text@msjPtr,w,c
 18186  001A52  6EE1               	movwf	fsr1l,c
 18187  001A54  5039               	movf	i2lcd_text@k+1,w,c
 18188  001A56  2019               	addwfc	i2lcd_text@msjPtr+1,w,c
 18189  001A58  6EE2               	movwf	fsr1h,c
 18190  001A5A  50E7               	movf	indf1,w,c
 18191  001A5C  0FD0               	addlw	208
 18192  001A5E  6EDF               	movwf	indf2,c
 18193  001A60                     i2l481:
 18194                           
 18195                           ;tft.c: 268: }
 18196                           ;tft.c: 269: if (*(msjPtr+k) == 58) {
 18197  001A60  5038               	movf	i2lcd_text@k,w,c
 18198  001A62  2418               	addwf	i2lcd_text@msjPtr,w,c
 18199  001A64  6ED9               	movwf	fsr2l,c
 18200  001A66  5039               	movf	i2lcd_text@k+1,w,c
 18201  001A68  2019               	addwfc	i2lcd_text@msjPtr+1,w,c
 18202  001A6A  6EDA               	movwf	fsr2h,c
 18203  001A6C  0E3A               	movlw	58
 18204  001A6E  18DE               	xorwf	postinc2,w,c
 18205  001A70  A4D8               	btfss	status,2,c
 18206  001A72  D008               	goto	i2l482
 18207                           
 18208                           ;tft.c: 270: *(msjPtrCpy+k) = 10;
 18209  001A74  0E20               	movlw	low i2lcd_text@msjPtrCpy
 18210  001A76  2438               	addwf	i2lcd_text@k,w,c
 18211  001A78  6ED9               	movwf	fsr2l,c
 18212  001A7A  0E00               	movlw	high i2lcd_text@msjPtrCpy
 18213  001A7C  2039               	addwfc	i2lcd_text@k+1,w,c
 18214  001A7E  6EDA               	movwf	fsr2h,c
 18215  001A80  0E0A               	movlw	10
 18216  001A82  6EDF               	movwf	indf2,c
 18217  001A84                     i2l482:
 18218                           
 18219                           ;tft.c: 271: }
 18220                           ;tft.c: 272: if (*(msjPtr+k) > 64) {
 18221  001A84  5038               	movf	i2lcd_text@k,w,c
 18222  001A86  2418               	addwf	i2lcd_text@msjPtr,w,c
 18223  001A88  6ED9               	movwf	fsr2l,c
 18224  001A8A  5039               	movf	i2lcd_text@k+1,w,c
 18225  001A8C  2019               	addwfc	i2lcd_text@msjPtr+1,w,c
 18226  001A8E  6EDA               	movwf	fsr2h,c
 18227  001A90  0E40               	movlw	64
 18228  001A92  64DF               	cpfsgt	indf2,c
 18229  001A94  D00F               	goto	i2l483
 18230                           
 18231                           ;tft.c: 274: *(msjPtrCpy+k) = *(msjPtr+k) - 53;
 18232  001A96  0E20               	movlw	low i2lcd_text@msjPtrCpy
 18233  001A98  2438               	addwf	i2lcd_text@k,w,c
 18234  001A9A  6ED9               	movwf	fsr2l,c
 18235  001A9C  0E00               	movlw	high i2lcd_text@msjPtrCpy
 18236  001A9E  2039               	addwfc	i2lcd_text@k+1,w,c
 18237  001AA0  6EDA               	movwf	fsr2h,c
 18238  001AA2  5038               	movf	i2lcd_text@k,w,c
 18239  001AA4  2418               	addwf	i2lcd_text@msjPtr,w,c
 18240  001AA6  6EE1               	movwf	fsr1l,c
 18241  001AA8  5039               	movf	i2lcd_text@k+1,w,c
 18242  001AAA  2019               	addwfc	i2lcd_text@msjPtr+1,w,c
 18243  001AAC  6EE2               	movwf	fsr1h,c
 18244  001AAE  50E7               	movf	indf1,w,c
 18245  001AB0  0FCB               	addlw	203
 18246  001AB2  6EDF               	movwf	indf2,c
 18247  001AB4                     i2l483:
 18248                           
 18249                           ;tft.c: 275: }
 18250                           ;tft.c: 277: if (*(msjPtr+k) == 46) {
 18251  001AB4  5038               	movf	i2lcd_text@k,w,c
 18252  001AB6  2418               	addwf	i2lcd_text@msjPtr,w,c
 18253  001AB8  6ED9               	movwf	fsr2l,c
 18254  001ABA  5039               	movf	i2lcd_text@k+1,w,c
 18255  001ABC  2019               	addwfc	i2lcd_text@msjPtr+1,w,c
 18256  001ABE  6EDA               	movwf	fsr2h,c
 18257  001AC0  0E2E               	movlw	46
 18258  001AC2  18DE               	xorwf	postinc2,w,c
 18259  001AC4  A4D8               	btfss	status,2,c
 18260  001AC6  D008               	goto	i2l484
 18261                           
 18262                           ;tft.c: 278: *(msjPtrCpy+k) = 39;
 18263  001AC8  0E20               	movlw	low i2lcd_text@msjPtrCpy
 18264  001ACA  2438               	addwf	i2lcd_text@k,w,c
 18265  001ACC  6ED9               	movwf	fsr2l,c
 18266  001ACE  0E00               	movlw	high i2lcd_text@msjPtrCpy
 18267  001AD0  2039               	addwfc	i2lcd_text@k+1,w,c
 18268  001AD2  6EDA               	movwf	fsr2h,c
 18269  001AD4  0E27               	movlw	39
 18270  001AD6  6EDF               	movwf	indf2,c
 18271  001AD8                     i2l484:
 18272                           
 18273                           ;tft.c: 279: }
 18274                           ;tft.c: 281: for (i=0;i<8;i++) {
 18275  001AD8  0E00               	movlw	0
 18276  001ADA  6E35               	movwf	i2lcd_text@i+1,c
 18277  001ADC  0E00               	movlw	0
 18278  001ADE  6E34               	movwf	i2lcd_text@i,c
 18279  001AE0  5035               	movf	i2lcd_text@i+1,w,c
 18280  001AE2  E170               	bnz	i2l486
 18281  001AE4  0E08               	movlw	8
 18282  001AE6  5C34               	subwf	i2lcd_text@i,w,c
 18283  001AE8  B0D8               	btfsc	status,0,c
 18284  001AEA  D06C               	goto	i2u846_40
 18285                           
 18286                           ;tft.c: 282: for (j=0;j<8;j++) {
 18287  001AEC  0E00               	movlw	0
 18288  001AEE  6E37               	movwf	i2lcd_text@j+1,c
 18289  001AF0  0E00               	movlw	0
 18290  001AF2  6E36               	movwf	i2lcd_text@j,c
 18291  001AF4                     i2l8080:
 18292  001AF4  5037               	movf	i2lcd_text@j+1,w,c
 18293  001AF6  E161               	bnz	i2l8092
 18294  001AF8  0E08               	movlw	8
 18295  001AFA  5C36               	subwf	i2lcd_text@j,w,c
 18296  001AFC  B0D8               	btfsc	status,0,c
 18297  001AFE  D05D               	goto	i2u845_40
 18298                           
 18299                           ;tft.c: 283: lcd_pix_color(1+j+(renglon-1)*10,1+i+k*8,bitRead(texto[*(msjPtrCpy+k)][i],j
      +                          ),4);
 18300  001B00  0EFF               	movlw	255
 18301  001B02  2433               	addwf	i2lcd_text@renglon,w,c
 18302  001B04  6E01               	movwf	i2___wmul@multiplier,c
 18303  001B06  6A02               	clrf	i2___wmul@multiplier+1,c
 18304  001B08  0EFF               	movlw	255
 18305  001B0A  2202               	addwfc	i2___wmul@multiplier+1,f,c
 18306  001B0C  0E00               	movlw	0
 18307  001B0E  6E04               	movwf	i2___wmul@multiplicand+1,c
 18308  001B10  0E0A               	movlw	10
 18309  001B12  6E03               	movwf	i2___wmul@multiplicand,c
 18310  001B14  EC78  F025         	call	i2___wmul	;wreg free
 18311  001B18  5036               	movf	i2lcd_text@j,w,c
 18312  001B1A  2601               	addwf	?i2___wmul,f,c
 18313  001B1C  5037               	movf	i2lcd_text@j+1,w,c
 18314  001B1E  2202               	addwfc	?i2___wmul+1,f,c
 18315  001B20  0E01               	movlw	1
 18316  001B22  2401               	addwf	?i2___wmul,w,c
 18317  001B24  6E2F               	movwf	i2_lcd_text$2512,c
 18318  001B26  0E00               	movlw	0
 18319  001B28  2002               	addwfc	?i2___wmul+1,w,c
 18320  001B2A  6E30               	movwf	i2_lcd_text$2512+1,c
 18321                           
 18322                           ;tft.c: 283: lcd_pix_color(1+j+(renglon-1)*10,1+i+k*8,bitRead(texto[*(msjPtrCpy+k)][i],j
      +                          ),4);
 18323  001B2C  C02F  F00B         	movff	i2_lcd_text$2512,i2lcd_pix_color@x
 18324  001B30  C030  F00C         	movff	i2_lcd_text$2512+1,i2lcd_pix_color@x+1
 18325  001B34  C038  F01B         	movff	i2lcd_text@k,??i2_lcd_text
 18326  001B38  C039  F01C         	movff	i2lcd_text@k+1,??i2_lcd_text+1
 18327  001B3C  90D8               	bcf	status,0,c
 18328  001B3E  361B               	rlcf	??i2_lcd_text,f,c
 18329  001B40  361C               	rlcf	??i2_lcd_text+1,f,c
 18330  001B42  90D8               	bcf	status,0,c
 18331  001B44  361B               	rlcf	??i2_lcd_text,f,c
 18332  001B46  361C               	rlcf	??i2_lcd_text+1,f,c
 18333  001B48  90D8               	bcf	status,0,c
 18334  001B4A  361B               	rlcf	??i2_lcd_text,f,c
 18335  001B4C  361C               	rlcf	??i2_lcd_text+1,f,c
 18336  001B4E  5034               	movf	i2lcd_text@i,w,c
 18337  001B50  261B               	addwf	??i2_lcd_text,f,c
 18338  001B52  5035               	movf	i2lcd_text@i+1,w,c
 18339  001B54  221C               	addwfc	??i2_lcd_text+1,f,c
 18340  001B56  0E01               	movlw	1
 18341  001B58  241B               	addwf	??i2_lcd_text,w,c
 18342  001B5A  6E0D               	movwf	i2lcd_pix_color@y,c
 18343  001B5C  0E00               	movlw	0
 18344  001B5E  201C               	addwfc	??i2_lcd_text+1,w,c
 18345  001B60  6E0E               	movwf	i2lcd_pix_color@y+1,c
 18346  001B62  0E20               	movlw	low i2lcd_text@msjPtrCpy
 18347  001B64  2438               	addwf	i2lcd_text@k,w,c
 18348  001B66  6ED9               	movwf	fsr2l,c
 18349  001B68  0E00               	movlw	high i2lcd_text@msjPtrCpy
 18350  001B6A  2039               	addwfc	i2lcd_text@k+1,w,c
 18351  001B6C  6EDA               	movwf	fsr2h,c
 18352  001B6E  50DF               	movf	indf2,w,c
 18353  001B70  6E1D               	movwf	(??i2_lcd_text+2)& (0+255),c
 18354  001B72  501D               	movf	??i2_lcd_text+2,w,c
 18355  001B74  0D08               	mullw	8
 18356  001B76  0E3F               	movlw	low _texto
 18357  001B78  6E1E               	movwf	(??i2_lcd_text+3)& (0+255),c
 18358  001B7A  0EFE               	movlw	high _texto
 18359  001B7C  6E1F               	movwf	(??i2_lcd_text+4)& (0+255),c
 18360  001B7E  50F3               	movf	prodl,w,c
 18361  001B80  261E               	addwf	??i2_lcd_text+3,f,c
 18362  001B82  50F4               	movf	prodh,w,c
 18363  001B84  221F               	addwfc	??i2_lcd_text+4,f,c
 18364  001B86  5034               	movf	i2lcd_text@i,w,c
 18365  001B88  261E               	addwf	??i2_lcd_text+3,f,c
 18366  001B8A  5035               	movf	i2lcd_text@i+1,w,c
 18367  001B8C  221F               	addwfc	??i2_lcd_text+4,f,c
 18368  001B8E  C01E  FFF6         	movff	??i2_lcd_text+3,tblptrl
 18369  001B92  C01F  FFF7         	movff	??i2_lcd_text+4,tblptrh
 18370  001B96                     	if	0	;tblptru may be non-zero
 18371  001B96                     	endif
 18372  001B96                     	if	0	;tblptru may be non-zero
 18373  001B96                     	endif
 18374  001B96  0008               	tblrd		*
 18375  001B98  50F5               	movf	tablat,w,c
 18376  001B9A  6E01               	movwf	i2bitRead@number,c
 18377  001B9C  6A02               	clrf	i2bitRead@number+1,c
 18378  001B9E  C036  F003         	movff	i2lcd_text@j,i2bitRead@position
 18379  001BA2  C037  F004         	movff	i2lcd_text@j+1,i2bitRead@position+1
 18380  001BA6  EC98  F024         	call	i2_bitRead	;wreg free
 18381  001BAA  6E0F               	movwf	i2lcd_pix_color@c,c
 18382  001BAC  0E04               	movlw	4
 18383  001BAE  6E10               	movwf	i2lcd_pix_color@size,c
 18384  001BB0  ECAA  F01B         	call	i2_lcd_pix_color	;wreg free
 18385  001BB4  4A36               	infsnz	i2lcd_text@j,f,c
 18386  001BB6  2A37               	incf	i2lcd_text@j+1,f,c
 18387  001BB8  D79D               	goto	i2l8080
 18388  001BBA                     i2u845_40:
 18389  001BBA                     i2l8092:
 18390  001BBA  4A34               	infsnz	i2lcd_text@i,f,c
 18391  001BBC  2A35               	incf	i2lcd_text@i+1,f,c
 18392  001BBE  5035               	movf	i2lcd_text@i+1,w,c
 18393  001BC0  E101               	bnz	i2l8096
 18394  001BC2  D790               	goto	L18
 18395  001BC4                     i2u846_40:
 18396  001BC4                     i2l486:
 18397  001BC4                     i2l8096:
 18398  001BC4  4A38               	infsnz	i2lcd_text@k,f,c
 18399  001BC6  2A39               	incf	i2lcd_text@k+1,f,c
 18400  001BC8  5039               	movf	i2lcd_text@k+1,w,c
 18401  001BCA  E101               	bnz	i2u847_40
 18402  001BCC  D707               	goto	L19
 18403  001BCE                     i2u847_40:
 18404                           
 18405                           ;tft.c: 284: }
 18406                           ;tft.c: 285: }
 18407                           ;tft.c: 286: }
 18408                           ;tft.c: 287: break;
 18409  001BCE  0012               	return	
 18410  001BD0                     
 18411                           ;tft.c: 289: for (k=0;k<15;k++) {
 18412  001BD0  0E00               	movlw	0
 18413  001BD2  6E39               	movwf	i2lcd_text@k+1,c
 18414  001BD4  0E00               	movlw	0
 18415  001BD6  6E38               	movwf	i2lcd_text@k,c
 18416  001BD8  5039               	movf	i2lcd_text@k+1,w,c
 18417  001BDA  E105               	bnz	i2u848_40
 18418  001BDC  0E0F               	movlw	15
 18419  001BDE  5C38               	subwf	i2lcd_text@k,w,c
 18420  001BE0  B0D8               	btfsc	status,0,c
 18421  001BE2  0012               	return	
 18422  001BE4  D001               	goto	i2l491
 18423  001BE6                     i2u848_40:
 18424  001BE6  0012               	return	
 18425  001BE8                     i2l491:
 18426                           
 18427                           ;tft.c: 290: if (*(msjPtr+k) == 32 || *(msjPtr+k) == 0) {
 18428  001BE8  5038               	movf	i2lcd_text@k,w,c
 18429  001BEA  2418               	addwf	i2lcd_text@msjPtr,w,c
 18430  001BEC  6ED9               	movwf	fsr2l,c
 18431  001BEE  5039               	movf	i2lcd_text@k+1,w,c
 18432  001BF0  2019               	addwfc	i2lcd_text@msjPtr+1,w,c
 18433  001BF2  6EDA               	movwf	fsr2h,c
 18434  001BF4  0E20               	movlw	32
 18435  001BF6  18DE               	xorwf	postinc2,w,c
 18436  001BF8  B4D8               	btfsc	status,2,c
 18437  001BFA  D009               	goto	i2u850_40
 18438  001BFC  5038               	movf	i2lcd_text@k,w,c
 18439  001BFE  2418               	addwf	i2lcd_text@msjPtr,w,c
 18440  001C00  6ED9               	movwf	fsr2l,c
 18441  001C02  5039               	movf	i2lcd_text@k+1,w,c
 18442  001C04  2019               	addwfc	i2lcd_text@msjPtr+1,w,c
 18443  001C06  6EDA               	movwf	fsr2h,c
 18444  001C08  50DF               	movf	indf2,w,c
 18445  001C0A  A4D8               	btfss	status,2,c
 18446  001C0C  D008               	goto	i2l493
 18447  001C0E                     i2u850_40:
 18448                           
 18449                           ;tft.c: 292: *(msjPtrCpy+k) = 38;
 18450  001C0E  0E20               	movlw	low i2lcd_text@msjPtrCpy
 18451  001C10  2438               	addwf	i2lcd_text@k,w,c
 18452  001C12  6ED9               	movwf	fsr2l,c
 18453  001C14  0E00               	movlw	high i2lcd_text@msjPtrCpy
 18454  001C16  2039               	addwfc	i2lcd_text@k+1,w,c
 18455  001C18  6EDA               	movwf	fsr2h,c
 18456  001C1A  0E26               	movlw	38
 18457  001C1C  6EDF               	movwf	indf2,c
 18458  001C1E                     i2l493:
 18459                           
 18460                           ;tft.c: 293: }
 18461                           ;tft.c: 294: if (*(msjPtr+k) > 47 && *(msjPtr+k) < 58) {
 18462  001C1E  5038               	movf	i2lcd_text@k,w,c
 18463  001C20  2418               	addwf	i2lcd_text@msjPtr,w,c
 18464  001C22  6ED9               	movwf	fsr2l,c
 18465  001C24  5039               	movf	i2lcd_text@k+1,w,c
 18466  001C26  2019               	addwfc	i2lcd_text@msjPtr+1,w,c
 18467  001C28  6EDA               	movwf	fsr2h,c
 18468  001C2A  0E2F               	movlw	47
 18469  001C2C  64DF               	cpfsgt	indf2,c
 18470  001C2E  D018               	goto	i2l496
 18471  001C30  5038               	movf	i2lcd_text@k,w,c
 18472  001C32  2418               	addwf	i2lcd_text@msjPtr,w,c
 18473  001C34  6ED9               	movwf	fsr2l,c
 18474  001C36  5039               	movf	i2lcd_text@k+1,w,c
 18475  001C38  2019               	addwfc	i2lcd_text@msjPtr+1,w,c
 18476  001C3A  6EDA               	movwf	fsr2h,c
 18477  001C3C  0E3A               	movlw	58
 18478  001C3E  60DF               	cpfslt	indf2,c
 18479  001C40  D00F               	goto	i2l496
 18480                           
 18481                           ;tft.c: 296: *(msjPtrCpy+k) = *(msjPtr+k) - 48;
 18482  001C42  0E20               	movlw	low i2lcd_text@msjPtrCpy
 18483  001C44  2438               	addwf	i2lcd_text@k,w,c
 18484  001C46  6ED9               	movwf	fsr2l,c
 18485  001C48  0E00               	movlw	high i2lcd_text@msjPtrCpy
 18486  001C4A  2039               	addwfc	i2lcd_text@k+1,w,c
 18487  001C4C  6EDA               	movwf	fsr2h,c
 18488  001C4E  5038               	movf	i2lcd_text@k,w,c
 18489  001C50  2418               	addwf	i2lcd_text@msjPtr,w,c
 18490  001C52  6EE1               	movwf	fsr1l,c
 18491  001C54  5039               	movf	i2lcd_text@k+1,w,c
 18492  001C56  2019               	addwfc	i2lcd_text@msjPtr+1,w,c
 18493  001C58  6EE2               	movwf	fsr1h,c
 18494  001C5A  50E7               	movf	indf1,w,c
 18495  001C5C  0FD0               	addlw	208
 18496  001C5E  6EDF               	movwf	indf2,c
 18497  001C60                     i2l496:
 18498                           
 18499                           ;tft.c: 297: }
 18500                           ;tft.c: 298: if (*(msjPtr+k) == 58) {
 18501  001C60  5038               	movf	i2lcd_text@k,w,c
 18502  001C62  2418               	addwf	i2lcd_text@msjPtr,w,c
 18503  001C64  6ED9               	movwf	fsr2l,c
 18504  001C66  5039               	movf	i2lcd_text@k+1,w,c
 18505  001C68  2019               	addwfc	i2lcd_text@msjPtr+1,w,c
 18506  001C6A  6EDA               	movwf	fsr2h,c
 18507  001C6C  0E3A               	movlw	58
 18508  001C6E  18DE               	xorwf	postinc2,w,c
 18509  001C70  A4D8               	btfss	status,2,c
 18510  001C72  D008               	goto	i2l497
 18511                           
 18512                           ;tft.c: 299: *(msjPtrCpy+k) = 10;
 18513  001C74  0E20               	movlw	low i2lcd_text@msjPtrCpy
 18514  001C76  2438               	addwf	i2lcd_text@k,w,c
 18515  001C78  6ED9               	movwf	fsr2l,c
 18516  001C7A  0E00               	movlw	high i2lcd_text@msjPtrCpy
 18517  001C7C  2039               	addwfc	i2lcd_text@k+1,w,c
 18518  001C7E  6EDA               	movwf	fsr2h,c
 18519  001C80  0E0A               	movlw	10
 18520  001C82  6EDF               	movwf	indf2,c
 18521  001C84                     i2l497:
 18522                           
 18523                           ;tft.c: 300: }
 18524                           ;tft.c: 301: if (*(msjPtr+k) > 64) {
 18525  001C84  5038               	movf	i2lcd_text@k,w,c
 18526  001C86  2418               	addwf	i2lcd_text@msjPtr,w,c
 18527  001C88  6ED9               	movwf	fsr2l,c
 18528  001C8A  5039               	movf	i2lcd_text@k+1,w,c
 18529  001C8C  2019               	addwfc	i2lcd_text@msjPtr+1,w,c
 18530  001C8E  6EDA               	movwf	fsr2h,c
 18531  001C90  0E40               	movlw	64
 18532  001C92  64DF               	cpfsgt	indf2,c
 18533  001C94  D00F               	goto	i2l498
 18534                           
 18535                           ;tft.c: 303: *(msjPtrCpy+k) = *(msjPtr+k) - 53;
 18536  001C96  0E20               	movlw	low i2lcd_text@msjPtrCpy
 18537  001C98  2438               	addwf	i2lcd_text@k,w,c
 18538  001C9A  6ED9               	movwf	fsr2l,c
 18539  001C9C  0E00               	movlw	high i2lcd_text@msjPtrCpy
 18540  001C9E  2039               	addwfc	i2lcd_text@k+1,w,c
 18541  001CA0  6EDA               	movwf	fsr2h,c
 18542  001CA2  5038               	movf	i2lcd_text@k,w,c
 18543  001CA4  2418               	addwf	i2lcd_text@msjPtr,w,c
 18544  001CA6  6EE1               	movwf	fsr1l,c
 18545  001CA8  5039               	movf	i2lcd_text@k+1,w,c
 18546  001CAA  2019               	addwfc	i2lcd_text@msjPtr+1,w,c
 18547  001CAC  6EE2               	movwf	fsr1h,c
 18548  001CAE  50E7               	movf	indf1,w,c
 18549  001CB0  0FCB               	addlw	203
 18550  001CB2  6EDF               	movwf	indf2,c
 18551  001CB4                     i2l498:
 18552                           
 18553                           ;tft.c: 304: }
 18554                           ;tft.c: 306: if (*(msjPtr+k) == 46) {
 18555  001CB4  5038               	movf	i2lcd_text@k,w,c
 18556  001CB6  2418               	addwf	i2lcd_text@msjPtr,w,c
 18557  001CB8  6ED9               	movwf	fsr2l,c
 18558  001CBA  5039               	movf	i2lcd_text@k+1,w,c
 18559  001CBC  2019               	addwfc	i2lcd_text@msjPtr+1,w,c
 18560  001CBE  6EDA               	movwf	fsr2h,c
 18561  001CC0  0E2E               	movlw	46
 18562  001CC2  18DE               	xorwf	postinc2,w,c
 18563  001CC4  A4D8               	btfss	status,2,c
 18564  001CC6  D008               	goto	i2l499
 18565                           
 18566                           ;tft.c: 307: *(msjPtrCpy+k) = 39;
 18567  001CC8  0E20               	movlw	low i2lcd_text@msjPtrCpy
 18568  001CCA  2438               	addwf	i2lcd_text@k,w,c
 18569  001CCC  6ED9               	movwf	fsr2l,c
 18570  001CCE  0E00               	movlw	high i2lcd_text@msjPtrCpy
 18571  001CD0  2039               	addwfc	i2lcd_text@k+1,w,c
 18572  001CD2  6EDA               	movwf	fsr2h,c
 18573  001CD4  0E27               	movlw	39
 18574  001CD6  6EDF               	movwf	indf2,c
 18575  001CD8                     i2l499:
 18576                           
 18577                           ;tft.c: 308: }
 18578                           ;tft.c: 310: for (i=0;i<8;i++) {
 18579  001CD8  0E00               	movlw	0
 18580  001CDA  6E35               	movwf	i2lcd_text@i+1,c
 18581  001CDC  0E00               	movlw	0
 18582  001CDE  6E34               	movwf	i2lcd_text@i,c
 18583  001CE0  5035               	movf	i2lcd_text@i+1,w,c
 18584  001CE2  E170               	bnz	i2l501
 18585  001CE4  0E08               	movlw	8
 18586  001CE6  5C34               	subwf	i2lcd_text@i,w,c
 18587  001CE8  B0D8               	btfsc	status,0,c
 18588  001CEA  D06C               	goto	i2u859_40
 18589                           
 18590                           ;tft.c: 311: for (j=0;j<8;j++) {
 18591  001CEC  0E00               	movlw	0
 18592  001CEE  6E37               	movwf	i2lcd_text@j+1,c
 18593  001CF0  0E00               	movlw	0
 18594  001CF2  6E36               	movwf	i2lcd_text@j,c
 18595  001CF4                     i2l8134:
 18596  001CF4  5037               	movf	i2lcd_text@j+1,w,c
 18597  001CF6  E161               	bnz	i2l8146
 18598  001CF8  0E08               	movlw	8
 18599  001CFA  5C36               	subwf	i2lcd_text@j,w,c
 18600  001CFC  B0D8               	btfsc	status,0,c
 18601  001CFE  D05D               	goto	i2u858_40
 18602                           
 18603                           ;tft.c: 312: lcd_pix(1+j+(renglon-1)*10,1+i+k*8,bitRead(texto[*(msjPtrCpy+k)][i],j),4);
 18604  001D00  0EFF               	movlw	255
 18605  001D02  2433               	addwf	i2lcd_text@renglon,w,c
 18606  001D04  6E01               	movwf	i2___wmul@multiplier,c
 18607  001D06  6A02               	clrf	i2___wmul@multiplier+1,c
 18608  001D08  0EFF               	movlw	255
 18609  001D0A  2202               	addwfc	i2___wmul@multiplier+1,f,c
 18610  001D0C  0E00               	movlw	0
 18611  001D0E  6E04               	movwf	i2___wmul@multiplicand+1,c
 18612  001D10  0E0A               	movlw	10
 18613  001D12  6E03               	movwf	i2___wmul@multiplicand,c
 18614  001D14  EC78  F025         	call	i2___wmul	;wreg free
 18615  001D18  5036               	movf	i2lcd_text@j,w,c
 18616  001D1A  2601               	addwf	?i2___wmul,f,c
 18617  001D1C  5037               	movf	i2lcd_text@j+1,w,c
 18618  001D1E  2202               	addwfc	?i2___wmul+1,f,c
 18619  001D20  0E01               	movlw	1
 18620  001D22  2401               	addwf	?i2___wmul,w,c
 18621  001D24  6E31               	movwf	i2_lcd_text$2513,c
 18622  001D26  0E00               	movlw	0
 18623  001D28  2002               	addwfc	?i2___wmul+1,w,c
 18624  001D2A  6E32               	movwf	i2_lcd_text$2513+1,c
 18625                           
 18626                           ;tft.c: 312: lcd_pix(1+j+(renglon-1)*10,1+i+k*8,bitRead(texto[*(msjPtrCpy+k)][i],j),4);
 18627  001D2C  C031  F00B         	movff	i2_lcd_text$2513,i2lcd_pix@x
 18628  001D30  C032  F00C         	movff	i2_lcd_text$2513+1,i2lcd_pix@x+1
 18629  001D34  C038  F01B         	movff	i2lcd_text@k,??i2_lcd_text
 18630  001D38  C039  F01C         	movff	i2lcd_text@k+1,??i2_lcd_text+1
 18631  001D3C  90D8               	bcf	status,0,c
 18632  001D3E  361B               	rlcf	??i2_lcd_text,f,c
 18633  001D40  361C               	rlcf	??i2_lcd_text+1,f,c
 18634  001D42  90D8               	bcf	status,0,c
 18635  001D44  361B               	rlcf	??i2_lcd_text,f,c
 18636  001D46  361C               	rlcf	??i2_lcd_text+1,f,c
 18637  001D48  90D8               	bcf	status,0,c
 18638  001D4A  361B               	rlcf	??i2_lcd_text,f,c
 18639  001D4C  361C               	rlcf	??i2_lcd_text+1,f,c
 18640  001D4E  5034               	movf	i2lcd_text@i,w,c
 18641  001D50  261B               	addwf	??i2_lcd_text,f,c
 18642  001D52  5035               	movf	i2lcd_text@i+1,w,c
 18643  001D54  221C               	addwfc	??i2_lcd_text+1,f,c
 18644  001D56  0E01               	movlw	1
 18645  001D58  241B               	addwf	??i2_lcd_text,w,c
 18646  001D5A  6E0D               	movwf	i2lcd_pix@y,c
 18647  001D5C  0E00               	movlw	0
 18648  001D5E  201C               	addwfc	??i2_lcd_text+1,w,c
 18649  001D60  6E0E               	movwf	i2lcd_pix@y+1,c
 18650  001D62  0E20               	movlw	low i2lcd_text@msjPtrCpy
 18651  001D64  2438               	addwf	i2lcd_text@k,w,c
 18652  001D66  6ED9               	movwf	fsr2l,c
 18653  001D68  0E00               	movlw	high i2lcd_text@msjPtrCpy
 18654  001D6A  2039               	addwfc	i2lcd_text@k+1,w,c
 18655  001D6C  6EDA               	movwf	fsr2h,c
 18656  001D6E  50DF               	movf	indf2,w,c
 18657  001D70  6E1D               	movwf	(??i2_lcd_text+2)& (0+255),c
 18658  001D72  501D               	movf	??i2_lcd_text+2,w,c
 18659  001D74  0D08               	mullw	8
 18660  001D76  0E3F               	movlw	low _texto
 18661  001D78  6E1E               	movwf	(??i2_lcd_text+3)& (0+255),c
 18662  001D7A  0EFE               	movlw	high _texto
 18663  001D7C  6E1F               	movwf	(??i2_lcd_text+4)& (0+255),c
 18664  001D7E  50F3               	movf	prodl,w,c
 18665  001D80  261E               	addwf	??i2_lcd_text+3,f,c
 18666  001D82  50F4               	movf	prodh,w,c
 18667  001D84  221F               	addwfc	??i2_lcd_text+4,f,c
 18668  001D86  5034               	movf	i2lcd_text@i,w,c
 18669  001D88  261E               	addwf	??i2_lcd_text+3,f,c
 18670  001D8A  5035               	movf	i2lcd_text@i+1,w,c
 18671  001D8C  221F               	addwfc	??i2_lcd_text+4,f,c
 18672  001D8E  C01E  FFF6         	movff	??i2_lcd_text+3,tblptrl
 18673  001D92  C01F  FFF7         	movff	??i2_lcd_text+4,tblptrh
 18674  001D96                     	if	0	;tblptru may be non-zero
 18675  001D96                     	endif
 18676  001D96                     	if	0	;tblptru may be non-zero
 18677  001D96                     	endif
 18678  001D96  0008               	tblrd		*
 18679  001D98  50F5               	movf	tablat,w,c
 18680  001D9A  6E01               	movwf	i2bitRead@number,c
 18681  001D9C  6A02               	clrf	i2bitRead@number+1,c
 18682  001D9E  C036  F003         	movff	i2lcd_text@j,i2bitRead@position
 18683  001DA2  C037  F004         	movff	i2lcd_text@j+1,i2bitRead@position+1
 18684  001DA6  EC98  F024         	call	i2_bitRead	;wreg free
 18685  001DAA  6E0F               	movwf	i2lcd_pix@c,c
 18686  001DAC  0E04               	movlw	4
 18687  001DAE  6E10               	movwf	i2lcd_pix@size,c
 18688  001DB0  EC25  F01C         	call	i2_lcd_pix	;wreg free
 18689  001DB4  4A36               	infsnz	i2lcd_text@j,f,c
 18690  001DB6  2A37               	incf	i2lcd_text@j+1,f,c
 18691  001DB8  D79D               	goto	i2l8134
 18692  001DBA                     i2u858_40:
 18693  001DBA                     i2l8146:
 18694  001DBA  4A34               	infsnz	i2lcd_text@i,f,c
 18695  001DBC  2A35               	incf	i2lcd_text@i+1,f,c
 18696  001DBE  5035               	movf	i2lcd_text@i+1,w,c
 18697  001DC0  E101               	bnz	i2l8150
 18698  001DC2  D790               	goto	L20
 18699  001DC4                     i2u859_40:
 18700  001DC4                     i2l501:
 18701  001DC4                     i2l8150:
 18702  001DC4  4A38               	infsnz	i2lcd_text@k,f,c
 18703  001DC6  2A39               	incf	i2lcd_text@k+1,f,c
 18704  001DC8  5039               	movf	i2lcd_text@k+1,w,c
 18705  001DCA  E109               	bnz	i2l504
 18706  001DCC  D707               	goto	L21
 18707  001DCE                     i2l474:
 18708  001DCE  501A               	movf	i2lcd_text@color,w,c
 18709                           
 18710                           ; Switch size 1, requested type "space"
 18711                           ; Number of cases is 2, Range of values is 0 to 1
 18712                           ; switch strategies available:
 18713                           ; Name         Instructions Cycles
 18714                           ; simple_byte            7     4 (average)
 18715                           ;	Chosen strategy is simple_byte
 18716  001DD0  0A00               	xorlw	0	; case 0
 18717  001DD2  B4D8               	btfsc	status,2,c
 18718  001DD4  D6FD               	goto	i2l490
 18719  001DD6  0A01               	xorlw	1	; case 1
 18720  001DD8  A4D8               	btfss	status,2,c
 18721  001DDA  0012               	return	
 18722  001DDC  D5F9               	goto	i2l475
 18723  001DDE                     i2l504:
 18724  001DDE  0012               	return		;funcret
 18725  001DE0                     __end_ofi2_lcd_text:
 18726                           	opt stack 0
 18727                           pclatu	equ	0xFFB
 18728                           pclath	equ	0xFFA
 18729                           tblptru	equ	0xFF8
 18730                           tblptrh	equ	0xFF7
 18731                           tblptrl	equ	0xFF6
 18732                           tablat	equ	0xFF5
 18733                           prodh	equ	0xFF4
 18734                           prodl	equ	0xFF3
 18735                           intcon	equ	0xFF2
 18736                           postinc0	equ	0xFEE
 18737                           fsr0h	equ	0xFEA
 18738                           fsr0l	equ	0xFE9
 18739                           wreg	equ	0xFE8
 18740                           indf1	equ	0xFE7
 18741                           postdec1	equ	0xFE5
 18742                           plusw1	equ	0xFE3
 18743                           fsr1h	equ	0xFE2
 18744                           fsr1l	equ	0xFE1
 18745                           indf2	equ	0xFDF
 18746                           postinc2	equ	0xFDE
 18747                           postdec2	equ	0xFDD
 18748                           plusw2	equ	0xFDB
 18749                           fsr2h	equ	0xFDA
 18750                           fsr2l	equ	0xFD9
 18751                           status	equ	0xFD8
 18752                           
 18753 ;; *************** function i2_lcd_pix_color *****************
 18754 ;; Defined at:
 18755 ;;		line 146 in file "tft.c"
 18756 ;; Parameters:    Size  Location     Type
 18757 ;;  x               2   10[COMRAM] unsigned int 
 18758 ;;  y               2   12[COMRAM] unsigned int 
 18759 ;;  c               1   14[COMRAM] unsigned char 
 18760 ;;  size            1   15[COMRAM] unsigned char 
 18761 ;; Auto vars:     Size  Location     Type
 18762 ;;  lcd_pix_colo    2   21[COMRAM] unsigned int 
 18763 ;;  lcd_pix_colo    1   20[COMRAM] unsigned char 
 18764 ;; Return value:  Size  Location     Type
 18765 ;;                  1    wreg      void 
 18766 ;; Registers used:
 18767 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 18768 ;; Tracked objects:
 18769 ;;		On entry : 0/0
 18770 ;;		On exit  : 0/0
 18771 ;;		Unchanged: 0/0
 18772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 18773 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18774 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18775 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18776 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18777 ;;Total ram usage:       13 bytes
 18778 ;; Hardware stack levels used:    1
 18779 ;; Hardware stack levels required when called:    3
 18780 ;; This function calls:
 18781 ;;		i2___wmul
 18782 ;;		i2_lcd_memory_start
 18783 ;;		i2_lcd_set_address
 18784 ;;		i2_lcd_write_bus
 18785 ;; This function is called by:
 18786 ;;		i2_lcd_text
 18787 ;; This function uses a non-reentrant model
 18788 ;;
 18789                           
 18790                           	psect	text63
 18791  003754                     __ptext63:
 18792                           	opt stack 0
 18793  003754                     i2_lcd_pix_color:
 18794                           	opt stack 18
 18795                           
 18796                           ;tft.c: 147: unsigned int i;
 18797                           ;tft.c: 148: char n1;
 18798                           ;tft.c: 150: x *= size;
 18799                           
 18800                           ;incstack = 0
 18801  003754  C00B  F001         	movff	i2lcd_pix_color@x,i2___wmul@multiplier
 18802  003758  C00C  F002         	movff	i2lcd_pix_color@x+1,i2___wmul@multiplier+1
 18803  00375C  C010  F003         	movff	i2lcd_pix_color@size,i2___wmul@multiplicand
 18804  003760  6A04               	clrf	i2___wmul@multiplicand+1,c
 18805  003762  EC78  F025         	call	i2___wmul	;wreg free
 18806  003766  C001  F00B         	movff	?i2___wmul,i2lcd_pix_color@x
 18807  00376A  C002  F00C         	movff	?i2___wmul+1,i2lcd_pix_color@x+1
 18808                           
 18809                           ;tft.c: 151: y *= size;
 18810  00376E  C00D  F001         	movff	i2lcd_pix_color@y,i2___wmul@multiplier
 18811  003772  C00E  F002         	movff	i2lcd_pix_color@y+1,i2___wmul@multiplier+1
 18812  003776  C010  F003         	movff	i2lcd_pix_color@size,i2___wmul@multiplicand
 18813  00377A  6A04               	clrf	i2___wmul@multiplicand+1,c
 18814  00377C  EC78  F025         	call	i2___wmul	;wreg free
 18815  003780  C001  F00D         	movff	?i2___wmul,i2lcd_pix_color@y
 18816  003784  C002  F00E         	movff	?i2___wmul+1,i2lcd_pix_color@y+1
 18817                           
 18818                           ;tft.c: 152: n1 = size * size;
 18819  003788  5010               	movf	i2lcd_pix_color@size,w,c
 18820  00378A  0210               	mulwf	i2lcd_pix_color@size,c
 18821  00378C  CFF3 F015          	movff	prodl,i2lcd_pix_color@n1
 18822                           
 18823                           ;tft.c: 153: LATA1 = 0;
 18824  003790  9289               	bcf	3977,1,c	;volatile
 18825                           
 18826                           ;tft.c: 154: lcd_set_address(x,y,x+size-1,y+size-1);
 18827  003792  C00B  F003         	movff	i2lcd_pix_color@x,i2lcd_set_address@x1
 18828  003796  C00C  F004         	movff	i2lcd_pix_color@x+1,i2lcd_set_address@x1+1
 18829  00379A  C00D  F005         	movff	i2lcd_pix_color@y,i2lcd_set_address@y1
 18830  00379E  C00E  F006         	movff	i2lcd_pix_color@y+1,i2lcd_set_address@y1+1
 18831  0037A2  5010               	movf	i2lcd_pix_color@size,w,c
 18832  0037A4  240B               	addwf	i2lcd_pix_color@x,w,c
 18833  0037A6  6E11               	movwf	??i2_lcd_pix_color& (0+255),c
 18834  0037A8  0E00               	movlw	0
 18835  0037AA  200C               	addwfc	i2lcd_pix_color@x+1,w,c
 18836  0037AC  6E12               	movwf	(??i2_lcd_pix_color+1)& (0+255),c
 18837  0037AE  0EFF               	movlw	255
 18838  0037B0  2411               	addwf	??i2_lcd_pix_color,w,c
 18839  0037B2  6E07               	movwf	i2lcd_set_address@x2,c
 18840  0037B4  0EFF               	movlw	255
 18841  0037B6  2012               	addwfc	??i2_lcd_pix_color+1,w,c
 18842  0037B8  6E08               	movwf	i2lcd_set_address@x2+1,c
 18843  0037BA  5010               	movf	i2lcd_pix_color@size,w,c
 18844  0037BC  240D               	addwf	i2lcd_pix_color@y,w,c
 18845  0037BE  6E13               	movwf	(??i2_lcd_pix_color+2)& (0+255),c
 18846  0037C0  0E00               	movlw	0
 18847  0037C2  200E               	addwfc	i2lcd_pix_color@y+1,w,c
 18848  0037C4  6E14               	movwf	(??i2_lcd_pix_color+3)& (0+255),c
 18849  0037C6  0EFF               	movlw	255
 18850  0037C8  2413               	addwf	??i2_lcd_pix_color+2,w,c
 18851  0037CA  6E09               	movwf	i2lcd_set_address@y2,c
 18852  0037CC  0EFF               	movlw	255
 18853  0037CE  2014               	addwfc	??i2_lcd_pix_color+3,w,c
 18854  0037D0  6E0A               	movwf	i2lcd_set_address@y2+1,c
 18855  0037D2  ECB7  F024         	call	i2_lcd_set_address	;wreg free
 18856                           
 18857                           ;tft.c: 155: lcd_memory_start();
 18858  0037D6  EC28  F026         	call	i2_lcd_memory_start	;wreg free
 18859                           
 18860                           ;tft.c: 157: switch (c) {
 18861  0037DA  D02E               	goto	i2l423
 18862  0037DC                     
 18863                           ;tft.c: 159: for(i=0;i<n1;i++) {
 18864  0037DC  0E00               	movlw	0
 18865  0037DE  6E17               	movwf	i2lcd_pix_color@i+1,c
 18866  0037E0  0E00               	movlw	0
 18867  0037E2  6E16               	movwf	i2lcd_pix_color@i,c
 18868  0037E4  D008               	goto	i2l425
 18869  0037E6                     
 18870                           ;tft.c: 160: lcd_write_bus(0xF8);
 18871  0037E6  0EF8               	movlw	248
 18872  0037E8  EC19  F026         	call	i2_lcd_write_bus
 18873                           
 18874                           ;tft.c: 161: lcd_write_bus(0x00);
 18875  0037EC  0E00               	movlw	0
 18876  0037EE  EC19  F026         	call	i2_lcd_write_bus
 18877  0037F2  4A16               	infsnz	i2lcd_pix_color@i,f,c
 18878  0037F4  2A17               	incf	i2lcd_pix_color@i+1,f,c
 18879  0037F6                     i2l425:
 18880  0037F6  5015               	movf	i2lcd_pix_color@n1,w,c
 18881  0037F8  6E11               	movwf	??i2_lcd_pix_color& (0+255),c
 18882  0037FA  6A12               	clrf	(??i2_lcd_pix_color+1)& (0+255),c
 18883  0037FC  5011               	movf	??i2_lcd_pix_color,w,c
 18884  0037FE  5C16               	subwf	i2lcd_pix_color@i,w,c
 18885  003800  5012               	movf	??i2_lcd_pix_color+1,w,c
 18886  003802  5817               	subwfb	i2lcd_pix_color@i+1,w,c
 18887  003804  B0D8               	btfsc	status,0,c
 18888  003806  D01F               	goto	i2l428
 18889  003808  D7EE               	goto	i2l426
 18890  00380A                     
 18891                           ;tft.c: 165: for(i=0;i<n1;i++) {
 18892  00380A  0E00               	movlw	0
 18893  00380C  6E17               	movwf	i2lcd_pix_color@i+1,c
 18894  00380E  0E00               	movlw	0
 18895  003810  6E16               	movwf	i2lcd_pix_color@i,c
 18896  003812  D008               	goto	i2l430
 18897  003814                     
 18898                           ;tft.c: 166: lcd_write_bus(0xFF);
 18899  003814  0EFF               	movlw	255
 18900  003816  EC19  F026         	call	i2_lcd_write_bus
 18901                           
 18902                           ;tft.c: 167: lcd_write_bus(0xFF);
 18903  00381A  0EFF               	movlw	255
 18904  00381C  EC19  F026         	call	i2_lcd_write_bus
 18905  003820  4A16               	infsnz	i2lcd_pix_color@i,f,c
 18906  003822  2A17               	incf	i2lcd_pix_color@i+1,f,c
 18907  003824                     i2l430:
 18908  003824  5015               	movf	i2lcd_pix_color@n1,w,c
 18909  003826  6E11               	movwf	??i2_lcd_pix_color& (0+255),c
 18910  003828  6A12               	clrf	(??i2_lcd_pix_color+1)& (0+255),c
 18911  00382A  5011               	movf	??i2_lcd_pix_color,w,c
 18912  00382C  5C16               	subwf	i2lcd_pix_color@i,w,c
 18913  00382E  5012               	movf	??i2_lcd_pix_color+1,w,c
 18914  003830  5817               	subwfb	i2lcd_pix_color@i+1,w,c
 18915  003832  B0D8               	btfsc	status,0,c
 18916  003834  D008               	goto	i2l428
 18917  003836  D7EE               	goto	i2l431
 18918  003838                     i2l423:
 18919  003838  500F               	movf	i2lcd_pix_color@c,w,c
 18920                           
 18921                           ; Switch size 1, requested type "space"
 18922                           ; Number of cases is 2, Range of values is 0 to 1
 18923                           ; switch strategies available:
 18924                           ; Name         Instructions Cycles
 18925                           ; simple_byte            7     4 (average)
 18926                           ;	Chosen strategy is simple_byte
 18927  00383A  0A00               	xorlw	0	; case 0
 18928  00383C  B4D8               	btfsc	status,2,c
 18929  00383E  D7E5               	goto	i2l429
 18930  003840  0A01               	xorlw	1	; case 1
 18931  003842  B4D8               	btfsc	status,2,c
 18932  003844  D7CB               	goto	i2l424
 18933  003846                     i2l428:
 18934                           
 18935                           ;tft.c: 172: LATA1 = 1;
 18936  003846  8289               	bsf	3977,1,c	;volatile
 18937  003848  0012               	return		;funcret
 18938  00384A                     __end_ofi2_lcd_pix_color:
 18939                           	opt stack 0
 18940                           pclatu	equ	0xFFB
 18941                           pclath	equ	0xFFA
 18942                           tblptru	equ	0xFF8
 18943                           tblptrh	equ	0xFF7
 18944                           tblptrl	equ	0xFF6
 18945                           tablat	equ	0xFF5
 18946                           prodh	equ	0xFF4
 18947                           prodl	equ	0xFF3
 18948                           intcon	equ	0xFF2
 18949                           postinc0	equ	0xFEE
 18950                           fsr0h	equ	0xFEA
 18951                           fsr0l	equ	0xFE9
 18952                           wreg	equ	0xFE8
 18953                           indf1	equ	0xFE7
 18954                           postdec1	equ	0xFE5
 18955                           plusw1	equ	0xFE3
 18956                           fsr1h	equ	0xFE2
 18957                           fsr1l	equ	0xFE1
 18958                           indf2	equ	0xFDF
 18959                           postinc2	equ	0xFDE
 18960                           postdec2	equ	0xFDD
 18961                           plusw2	equ	0xFDB
 18962                           fsr2h	equ	0xFDA
 18963                           fsr2l	equ	0xFD9
 18964                           status	equ	0xFD8
 18965                           
 18966 ;; *************** function ___lbdiv *****************
 18967 ;; Defined at:
 18968 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lbdiv.c"
 18969 ;; Parameters:    Size  Location     Type
 18970 ;;  dividend        1    wreg     unsigned char 
 18971 ;;  divisor         1    0[COMRAM] unsigned char 
 18972 ;; Auto vars:     Size  Location     Type
 18973 ;;  dividend        1    1[COMRAM] unsigned char 
 18974 ;;  quotient        1    3[COMRAM] unsigned char 
 18975 ;;  counter         1    2[COMRAM] unsigned char 
 18976 ;; Return value:  Size  Location     Type
 18977 ;;                  1    wreg      unsigned char 
 18978 ;; Registers used:
 18979 ;;		wreg, status,2, status,0
 18980 ;; Tracked objects:
 18981 ;;		On entry : 0/0
 18982 ;;		On exit  : 0/0
 18983 ;;		Unchanged: 0/0
 18984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 18985 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18986 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18987 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18988 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18989 ;;Total ram usage:        4 bytes
 18990 ;; Hardware stack levels used:    1
 18991 ;; This function calls:
 18992 ;;		Nothing
 18993 ;; This function is called by:
 18994 ;;		_menu_next
 18995 ;; This function uses a non-reentrant model
 18996 ;;
 18997                           
 18998                           	psect	text64
 18999  0049AC                     __ptext64:
 19000                           	opt stack 0
 19001  0049AC                     ___lbdiv:
 19002                           	opt stack 22
 19003                           
 19004                           ;incstack = 0
 19005                           ;___lbdiv@dividend stored from wreg
 19006  0049AC  6E02               	movwf	___lbdiv@dividend,c
 19007  0049AE  0E00               	movlw	0
 19008  0049B0  6E04               	movwf	___lbdiv@quotient,c
 19009  0049B2  5001               	movf	___lbdiv@divisor,w,c
 19010  0049B4  B4D8               	btfsc	status,2,c
 19011  0049B6  D015               	goto	i2l1467
 19012  0049B8  0E01               	movlw	1
 19013  0049BA  6E03               	movwf	___lbdiv@counter,c
 19014  0049BC  D003               	goto	i2l1462
 19015  0049BE  90D8               	bcf	status,0,c
 19016  0049C0  3601               	rlcf	___lbdiv@divisor,f,c
 19017  0049C2  2A03               	incf	___lbdiv@counter,f,c
 19018  0049C4                     i2l1462:
 19019  0049C4  AE01               	btfss	___lbdiv@divisor,7,c
 19020  0049C6  D7FB               	goto	i2l1463
 19021  0049C8                     i2u582_40:
 19022  0049C8  90D8               	bcf	status,0,c
 19023  0049CA  3604               	rlcf	___lbdiv@quotient,f,c
 19024  0049CC  5001               	movf	___lbdiv@divisor,w,c
 19025  0049CE  5C02               	subwf	___lbdiv@dividend,w,c
 19026  0049D0  A0D8               	btfss	status,0,c
 19027  0049D2  D003               	goto	i2l1466
 19028  0049D4  5001               	movf	___lbdiv@divisor,w,c
 19029  0049D6  5E02               	subwf	___lbdiv@dividend,f,c
 19030  0049D8  8004               	bsf	___lbdiv@quotient,0,c
 19031  0049DA                     i2l1466:
 19032  0049DA  90D8               	bcf	status,0,c
 19033  0049DC  3201               	rrcf	___lbdiv@divisor,f,c
 19034  0049DE  2E03               	decfsz	___lbdiv@counter,f,c
 19035  0049E0  D7F3               	goto	i2u582_40
 19036  0049E2                     i2l1467:
 19037  0049E2  5004               	movf	___lbdiv@quotient,w,c
 19038  0049E4  0012               	return	
 19039  0049E6                     __end_of___lbdiv:
 19040                           	opt stack 0
 19041                           pclatu	equ	0xFFB
 19042                           pclath	equ	0xFFA
 19043                           tblptru	equ	0xFF8
 19044                           tblptrh	equ	0xFF7
 19045                           tblptrl	equ	0xFF6
 19046                           tablat	equ	0xFF5
 19047                           prodh	equ	0xFF4
 19048                           prodl	equ	0xFF3
 19049                           intcon	equ	0xFF2
 19050                           postinc0	equ	0xFEE
 19051                           fsr0h	equ	0xFEA
 19052                           fsr0l	equ	0xFE9
 19053                           wreg	equ	0xFE8
 19054                           indf1	equ	0xFE7
 19055                           postdec1	equ	0xFE5
 19056                           plusw1	equ	0xFE3
 19057                           fsr1h	equ	0xFE2
 19058                           fsr1l	equ	0xFE1
 19059                           indf2	equ	0xFDF
 19060                           postinc2	equ	0xFDE
 19061                           postdec2	equ	0xFDD
 19062                           plusw2	equ	0xFDB
 19063                           fsr2h	equ	0xFDA
 19064                           fsr2l	equ	0xFD9
 19065                           status	equ	0xFD8
 19066                           
 19067 ;; *************** function _lcd_point *****************
 19068 ;; Defined at:
 19069 ;;		line 188 in file "tft.c"
 19070 ;; Parameters:    Size  Location     Type
 19071 ;;  place           1    wreg     unsigned char 
 19072 ;; Auto vars:     Size  Location     Type
 19073 ;;  place           1   23[COMRAM] unsigned char 
 19074 ;; Return value:  Size  Location     Type
 19075 ;;                  1    wreg      void 
 19076 ;; Registers used:
 19077 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 19078 ;; Tracked objects:
 19079 ;;		On entry : 0/0
 19080 ;;		On exit  : 0/0
 19081 ;;		Unchanged: 0/0
 19082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19084 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19085 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19086 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19087 ;;Total ram usage:        1 bytes
 19088 ;; Hardware stack levels used:    1
 19089 ;; Hardware stack levels required when called:    4
 19090 ;; This function calls:
 19091 ;;		i2_lcd_pix
 19092 ;; This function is called by:
 19093 ;;		_isr
 19094 ;; This function uses a non-reentrant model
 19095 ;;
 19096                           
 19097                           	psect	text65
 19098  003E2E                     __ptext65:
 19099                           	opt stack 0
 19100  003E2E                     _lcd_point:
 19101                           	opt stack 19
 19102                           
 19103                           ;incstack = 0
 19104                           ;lcd_point@place stored from wreg
 19105  003E2E  6E18               	movwf	lcd_point@place,c
 19106                           
 19107                           ;tft.c: 189: lcd_pix(62,96 - 18 * place,1,5);
 19108  003E30  0E00               	movlw	0
 19109  003E32  6E0C               	movwf	i2lcd_pix@x+1,c
 19110  003E34  0E3E               	movlw	62
 19111  003E36  6E0B               	movwf	i2lcd_pix@x,c
 19112  003E38  5018               	movf	lcd_point@place,w,c
 19113  003E3A  0D12               	mullw	18
 19114  003E3C  1EF3               	comf	prodl,f,c
 19115  003E3E  1EF4               	comf	prodh,f,c
 19116  003E40  4AF3               	infsnz	prodl,f,c
 19117  003E42  2AF4               	incf	prodh,f,c
 19118  003E44  0E60               	movlw	96
 19119  003E46  24F3               	addwf	prodl,w,c
 19120  003E48  6E0D               	movwf	i2lcd_pix@y,c
 19121  003E4A  0E00               	movlw	0
 19122  003E4C  20F4               	addwfc	prodh,w,c
 19123  003E4E  6E0E               	movwf	i2lcd_pix@y+1,c
 19124  003E50  0E01               	movlw	1
 19125  003E52  6E0F               	movwf	i2lcd_pix@c,c
 19126  003E54  0E05               	movlw	5
 19127  003E56  6E10               	movwf	i2lcd_pix@size,c
 19128  003E58  EC25  F01C         	call	i2_lcd_pix	;wreg free
 19129                           
 19130                           ;tft.c: 190: lcd_pix(61,96 - 18 * place,1,5);
 19131  003E5C  0E00               	movlw	0
 19132  003E5E  6E0C               	movwf	i2lcd_pix@x+1,c
 19133  003E60  0E3D               	movlw	61
 19134  003E62  6E0B               	movwf	i2lcd_pix@x,c
 19135  003E64  5018               	movf	lcd_point@place,w,c
 19136  003E66  0D12               	mullw	18
 19137  003E68  1EF3               	comf	prodl,f,c
 19138  003E6A  1EF4               	comf	prodh,f,c
 19139  003E6C  4AF3               	infsnz	prodl,f,c
 19140  003E6E  2AF4               	incf	prodh,f,c
 19141  003E70  0E60               	movlw	96
 19142  003E72  24F3               	addwf	prodl,w,c
 19143  003E74  6E0D               	movwf	i2lcd_pix@y,c
 19144  003E76  0E00               	movlw	0
 19145  003E78  20F4               	addwfc	prodh,w,c
 19146  003E7A  6E0E               	movwf	i2lcd_pix@y+1,c
 19147  003E7C  0E01               	movlw	1
 19148  003E7E  6E0F               	movwf	i2lcd_pix@c,c
 19149  003E80  0E05               	movlw	5
 19150  003E82  6E10               	movwf	i2lcd_pix@size,c
 19151  003E84  EC25  F01C         	call	i2_lcd_pix	;wreg free
 19152                           
 19153                           ;tft.c: 191: lcd_pix(62,97 - 18 * place,1,5);
 19154  003E88  0E00               	movlw	0
 19155  003E8A  6E0C               	movwf	i2lcd_pix@x+1,c
 19156  003E8C  0E3E               	movlw	62
 19157  003E8E  6E0B               	movwf	i2lcd_pix@x,c
 19158  003E90  5018               	movf	lcd_point@place,w,c
 19159  003E92  0D12               	mullw	18
 19160  003E94  1EF3               	comf	prodl,f,c
 19161  003E96  1EF4               	comf	prodh,f,c
 19162  003E98  4AF3               	infsnz	prodl,f,c
 19163  003E9A  2AF4               	incf	prodh,f,c
 19164  003E9C  0E61               	movlw	97
 19165  003E9E  24F3               	addwf	prodl,w,c
 19166  003EA0  6E0D               	movwf	i2lcd_pix@y,c
 19167  003EA2  0E00               	movlw	0
 19168  003EA4  20F4               	addwfc	prodh,w,c
 19169  003EA6  6E0E               	movwf	i2lcd_pix@y+1,c
 19170  003EA8  0E01               	movlw	1
 19171  003EAA  6E0F               	movwf	i2lcd_pix@c,c
 19172  003EAC  0E05               	movlw	5
 19173  003EAE  6E10               	movwf	i2lcd_pix@size,c
 19174  003EB0  EC25  F01C         	call	i2_lcd_pix	;wreg free
 19175                           
 19176                           ;tft.c: 192: lcd_pix(61,97 - 18 * place,1,5);
 19177  003EB4  0E00               	movlw	0
 19178  003EB6  6E0C               	movwf	i2lcd_pix@x+1,c
 19179  003EB8  0E3D               	movlw	61
 19180  003EBA  6E0B               	movwf	i2lcd_pix@x,c
 19181  003EBC  5018               	movf	lcd_point@place,w,c
 19182  003EBE  0D12               	mullw	18
 19183  003EC0  1EF3               	comf	prodl,f,c
 19184  003EC2  1EF4               	comf	prodh,f,c
 19185  003EC4  4AF3               	infsnz	prodl,f,c
 19186  003EC6  2AF4               	incf	prodh,f,c
 19187  003EC8  0E61               	movlw	97
 19188  003ECA  24F3               	addwf	prodl,w,c
 19189  003ECC  6E0D               	movwf	i2lcd_pix@y,c
 19190  003ECE  0E00               	movlw	0
 19191  003ED0  20F4               	addwfc	prodh,w,c
 19192  003ED2  6E0E               	movwf	i2lcd_pix@y+1,c
 19193  003ED4  0E01               	movlw	1
 19194  003ED6  6E0F               	movwf	i2lcd_pix@c,c
 19195  003ED8  0E05               	movlw	5
 19196  003EDA  6E10               	movwf	i2lcd_pix@size,c
 19197  003EDC  EC25  F01C         	call	i2_lcd_pix	;wreg free
 19198                           
 19199                           ;tft.c: 194: decimal_places = place;
 19200  003EE0  C018  F05B         	movff	lcd_point@place,_decimal_places
 19201  003EE4  0012               	return		;funcret
 19202  003EE6                     __end_of_lcd_point:
 19203                           	opt stack 0
 19204                           pclatu	equ	0xFFB
 19205                           pclath	equ	0xFFA
 19206                           tblptru	equ	0xFF8
 19207                           tblptrh	equ	0xFF7
 19208                           tblptrl	equ	0xFF6
 19209                           tablat	equ	0xFF5
 19210                           prodh	equ	0xFF4
 19211                           prodl	equ	0xFF3
 19212                           intcon	equ	0xFF2
 19213                           postinc0	equ	0xFEE
 19214                           fsr0h	equ	0xFEA
 19215                           fsr0l	equ	0xFE9
 19216                           wreg	equ	0xFE8
 19217                           indf1	equ	0xFE7
 19218                           postdec1	equ	0xFE5
 19219                           plusw1	equ	0xFE3
 19220                           fsr1h	equ	0xFE2
 19221                           fsr1l	equ	0xFE1
 19222                           indf2	equ	0xFDF
 19223                           postinc2	equ	0xFDE
 19224                           postdec2	equ	0xFDD
 19225                           plusw2	equ	0xFDB
 19226                           fsr2h	equ	0xFDA
 19227                           fsr2l	equ	0xFD9
 19228                           status	equ	0xFD8
 19229                           
 19230 ;; *************** function _lcd_number *****************
 19231 ;; Defined at:
 19232 ;;		line 197 in file "tft.c"
 19233 ;; Parameters:    Size  Location     Type
 19234 ;;  number          2   24[COMRAM] int 
 19235 ;; Auto vars:     Size  Location     Type
 19236 ;;  index           5   31[COMRAM] unsigned char [5]
 19237 ;;  k               1   38[COMRAM] unsigned char 
 19238 ;;  j               1   37[COMRAM] unsigned char 
 19239 ;;  i               1   36[COMRAM] unsigned char 
 19240 ;; Return value:  Size  Location     Type
 19241 ;;                  1    wreg      void 
 19242 ;; Registers used:
 19243 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19244 ;; Tracked objects:
 19245 ;;		On entry : 0/0
 19246 ;;		On exit  : 0/0
 19247 ;;		Unchanged: 0/0
 19248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19249 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19250 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19251 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19252 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19253 ;;Total ram usage:       15 bytes
 19254 ;; Hardware stack levels used:    1
 19255 ;; Hardware stack levels required when called:    5
 19256 ;; This function calls:
 19257 ;;		_lcd_sign
 19258 ;;		i2_bitRead
 19259 ;;		i2_lcd_pix
 19260 ;; This function is called by:
 19261 ;;		_isr
 19262 ;; This function uses a non-reentrant model
 19263 ;;
 19264                           
 19265                           	psect	text66
 19266  0025D0                     __ptext66:
 19267                           	opt stack 0
 19268  0025D0                     _lcd_number:
 19269                           	opt stack 18
 19270                           
 19271                           ;tft.c: 198: char i,j,k,index[5] = {10,0,0,0,0};
 19272                           
 19273                           ;incstack = 0
 19274  0025D0  EE21  F000         	lfsr	2,lcd_number@F15145
 19275  0025D4  EE10  F020         	lfsr	1,lcd_number@index
 19276  0025D8  0E04               	movlw	4
 19277  0025DA                     i2u1070_41:
 19278  0025DA  CFDB FFE3          	movff	plusw2,plusw1
 19279  0025DE  06E8               	decf	wreg,f,c
 19280  0025E0  E2FC               	bc	i2u1070_41
 19281                           
 19282                           ;tft.c: 200: if (number<0) {
 19283  0025E2  AE1A               	btfss	lcd_number@number+1,7,c
 19284  0025E4  D008               	goto	i2l444
 19285                           
 19286                           ;tft.c: 201: lcd_sign(1);
 19287  0025E6  0E01               	movlw	1
 19288  0025E8  ECF3  F016         	call	_lcd_sign
 19289                           
 19290                           ;tft.c: 202: number = 0 - number;
 19291  0025EC  6C19               	negf	lcd_number@number,c
 19292  0025EE  1E1A               	comf	lcd_number@number+1,f,c
 19293  0025F0  B0D8               	btfsc	status,0,c
 19294  0025F2  2A1A               	incf	lcd_number@number+1,f,c
 19295                           
 19296                           ;tft.c: 203: } else {
 19297  0025F4  D003               	goto	i2l445
 19298  0025F6                     i2l444:
 19299                           
 19300                           ;tft.c: 204: lcd_sign(0);
 19301  0025F6  0E00               	movlw	0
 19302  0025F8  ECF3  F016         	call	_lcd_sign
 19303  0025FC                     i2l445:
 19304                           
 19305                           ;tft.c: 205: }
 19306                           ;tft.c: 206: if (number > 9999) {
 19307  0025FC  BE1A               	btfsc	lcd_number@number+1,7,c
 19308  0025FE  D00E               	goto	i2l447
 19309  002600  0E10               	movlw	16
 19310  002602  5C19               	subwf	lcd_number@number,w,c
 19311  002604  0E27               	movlw	39
 19312  002606  581A               	subwfb	lcd_number@number+1,w,c
 19313  002608  A0D8               	btfss	status,0,c
 19314  00260A  D008               	goto	i2l447
 19315                           
 19316                           ;tft.c: 207: index[0] = 0;
 19317  00260C  0E00               	movlw	0
 19318  00260E  6E20               	movwf	lcd_number@index,c
 19319                           
 19320                           ;tft.c: 208: }
 19321                           ;tft.c: 209: while (number > 9999) {
 19322  002610  D005               	goto	i2l447
 19323  002612                     
 19324                           ;tft.c: 210: index[0] += 1;
 19325  002612  2A20               	incf	lcd_number@index,f,c
 19326                           
 19327                           ;tft.c: 211: number -= 10000;
 19328  002614  0EF0               	movlw	240
 19329  002616  2619               	addwf	lcd_number@number,f,c
 19330  002618  0ED8               	movlw	216
 19331  00261A  221A               	addwfc	lcd_number@number+1,f,c
 19332  00261C                     i2l447:
 19333  00261C  BE1A               	btfsc	lcd_number@number+1,7,c
 19334  00261E  D00C               	goto	i2l450
 19335  002620  0E10               	movlw	16
 19336  002622  5C19               	subwf	lcd_number@number,w,c
 19337  002624  0E27               	movlw	39
 19338  002626  581A               	subwfb	lcd_number@number+1,w,c
 19339  002628  A0D8               	btfss	status,0,c
 19340  00262A  D006               	goto	i2l450
 19341  00262C  D7F2               	goto	i2l448
 19342  00262E                     
 19343                           ;tft.c: 214: index[1] += 1;
 19344  00262E  2A21               	incf	lcd_number@index+1,f,c
 19345                           
 19346                           ;tft.c: 215: number -= 1000;
 19347  002630  0E18               	movlw	24
 19348  002632  2619               	addwf	lcd_number@number,f,c
 19349  002634  0EFC               	movlw	252
 19350  002636  221A               	addwfc	lcd_number@number+1,f,c
 19351  002638                     i2l450:
 19352  002638  BE1A               	btfsc	lcd_number@number+1,7,c
 19353  00263A  D006               	goto	i2u1074_40
 19354  00263C  0EE8               	movlw	232
 19355  00263E  5C19               	subwf	lcd_number@number,w,c
 19356  002640  0E03               	movlw	3
 19357  002642  581A               	subwfb	lcd_number@number+1,w,c
 19358  002644  B0D8               	btfsc	status,0,c
 19359  002646  D7F3               	goto	i2l451
 19360  002648                     i2u1074_40:
 19361                           
 19362                           ;tft.c: 216: }
 19363                           ;tft.c: 217: if (decimal_places < 3) {
 19364  002648  0E03               	movlw	3
 19365  00264A  605B               	cpfslt	_decimal_places,c
 19366  00264C  D00F               	goto	i2l455
 19367                           
 19368                           ;tft.c: 218: if (index[0] == 10 && index[1] == 0) {
 19369  00264E  0E0A               	movlw	10
 19370  002650  1820               	xorwf	lcd_number@index,w,c
 19371  002652  A4D8               	btfss	status,2,c
 19372  002654  D00B               	goto	i2l455
 19373  002656  5021               	movf	lcd_number@index+1,w,c
 19374  002658  A4D8               	btfss	status,2,c
 19375  00265A  D008               	goto	i2l455
 19376                           
 19377                           ;tft.c: 219: index[1] = 10;
 19378  00265C  0E0A               	movlw	10
 19379  00265E  6E21               	movwf	lcd_number@index+1,c
 19380                           
 19381                           ;tft.c: 220: }
 19382                           ;tft.c: 221: }
 19383                           ;tft.c: 223: while (number > 99) {
 19384  002660  D005               	goto	i2l455
 19385  002662                     i2l9636:
 19386                           
 19387                           ;tft.c: 224: index[2] += 1;
 19388  002662  2A22               	incf	lcd_number@index+2,f,c
 19389                           
 19390                           ;tft.c: 225: number -= 100;
 19391  002664  0E9C               	movlw	156
 19392  002666  2619               	addwf	lcd_number@number,f,c
 19393  002668  0EFF               	movlw	255
 19394  00266A  221A               	addwfc	lcd_number@number+1,f,c
 19395  00266C                     i2l455:
 19396  00266C  BE1A               	btfsc	lcd_number@number+1,7,c
 19397  00266E  D006               	goto	i2u1078_40
 19398  002670  501A               	movf	lcd_number@number+1,w,c
 19399  002672  E1F7               	bnz	i2l9636
 19400  002674  0E64               	movlw	100
 19401  002676  5C19               	subwf	lcd_number@number,w,c
 19402  002678  B0D8               	btfsc	status,0,c
 19403  00267A  D7F3               	goto	i2l456
 19404  00267C                     i2u1078_40:
 19405                           
 19406                           ;tft.c: 226: }
 19407                           ;tft.c: 227: if (decimal_places < 2) {
 19408  00267C  0E02               	movlw	2
 19409  00267E  605B               	cpfslt	_decimal_places,c
 19410  002680  D00F               	goto	i2l460
 19411                           
 19412                           ;tft.c: 228: if (index[1] == 10 && index[2] == 0) {
 19413  002682  0E0A               	movlw	10
 19414  002684  1821               	xorwf	lcd_number@index+1,w,c
 19415  002686  A4D8               	btfss	status,2,c
 19416  002688  D00B               	goto	i2l460
 19417  00268A  5022               	movf	lcd_number@index+2,w,c
 19418  00268C  A4D8               	btfss	status,2,c
 19419  00268E  D008               	goto	i2l460
 19420                           
 19421                           ;tft.c: 229: index[2] = 10;
 19422  002690  0E0A               	movlw	10
 19423  002692  6E22               	movwf	lcd_number@index+2,c
 19424                           
 19425                           ;tft.c: 230: }
 19426                           ;tft.c: 231: }
 19427                           ;tft.c: 233: while (number > 9) {
 19428  002694  D005               	goto	i2l460
 19429  002696                     i2l9650:
 19430                           
 19431                           ;tft.c: 234: index[3] += 1;
 19432  002696  2A23               	incf	lcd_number@index+3,f,c
 19433                           
 19434                           ;tft.c: 235: number -= 10;
 19435  002698  0EF6               	movlw	246
 19436  00269A  2619               	addwf	lcd_number@number,f,c
 19437  00269C  0EFF               	movlw	255
 19438  00269E  221A               	addwfc	lcd_number@number+1,f,c
 19439  0026A0                     i2l460:
 19440  0026A0  BE1A               	btfsc	lcd_number@number+1,7,c
 19441  0026A2  D006               	goto	i2u1082_40
 19442  0026A4  501A               	movf	lcd_number@number+1,w,c
 19443  0026A6  E1F7               	bnz	i2l9650
 19444  0026A8  0E0A               	movlw	10
 19445  0026AA  5C19               	subwf	lcd_number@number,w,c
 19446  0026AC  B0D8               	btfsc	status,0,c
 19447  0026AE  D7F3               	goto	i2l461
 19448  0026B0                     i2u1082_40:
 19449                           
 19450                           ;tft.c: 236: }
 19451                           ;tft.c: 237: if (decimal_places < 1) {
 19452  0026B0  505B               	movf	_decimal_places,w,c
 19453  0026B2  A4D8               	btfss	status,2,c
 19454  0026B4  D009               	goto	i2l464
 19455                           
 19456                           ;tft.c: 238: if (index[2] == 10 && index[3] == 0) {
 19457  0026B6  0E0A               	movlw	10
 19458  0026B8  1822               	xorwf	lcd_number@index+2,w,c
 19459  0026BA  A4D8               	btfss	status,2,c
 19460  0026BC  D005               	goto	i2l464
 19461  0026BE  5023               	movf	lcd_number@index+3,w,c
 19462  0026C0  A4D8               	btfss	status,2,c
 19463  0026C2  D002               	goto	i2l464
 19464                           
 19465                           ;tft.c: 239: index[3] = 10;
 19466  0026C4  0E0A               	movlw	10
 19467  0026C6  6E23               	movwf	lcd_number@index+3,c
 19468  0026C8                     i2l464:
 19469                           
 19470                           ;tft.c: 240: }
 19471                           ;tft.c: 241: }
 19472                           ;tft.c: 243: index[4] = number;
 19473  0026C8  C019  F024         	movff	lcd_number@number,lcd_number@index+4
 19474                           
 19475                           ;tft.c: 245: for (k=0;k<5;k++) {
 19476  0026CC  0E00               	movlw	0
 19477  0026CE  6E27               	movwf	lcd_number@k,c
 19478  0026D0                     i2l9666:
 19479  0026D0  0E04               	movlw	4
 19480  0026D2  6427               	cpfsgt	lcd_number@k,c
 19481  0026D4  D001               	goto	i2l465
 19482  0026D6  0012               	return	
 19483  0026D8                     i2l465:
 19484                           
 19485                           ;tft.c: 246: for (i=0;i<22;i++) {
 19486  0026D8  0E00               	movlw	0
 19487  0026DA  6E25               	movwf	lcd_number@i,c
 19488  0026DC                     i2l9672:
 19489  0026DC  0E15               	movlw	21
 19490  0026DE  6425               	cpfsgt	lcd_number@i,c
 19491  0026E0  D001               	goto	i2l467
 19492  0026E2  D054               	goto	i2u1090_40
 19493  0026E4                     i2l467:
 19494                           
 19495                           ;tft.c: 247: for (j=0;j<16;j++) {
 19496  0026E4  0E00               	movlw	0
 19497  0026E6  6E26               	movwf	lcd_number@j,c
 19498  0026E8                     i2l9678:
 19499  0026E8  0E0F               	movlw	15
 19500  0026EA  6426               	cpfsgt	lcd_number@j,c
 19501  0026EC  D001               	goto	i2l469
 19502  0026EE  D04C               	goto	i2u1089_40
 19503  0026F0                     i2l469:
 19504                           
 19505                           ;tft.c: 248: lcd_pix(40+i,(18*k+8)+j,bitRead(digitos[index[k]][i],15-j),5);
 19506  0026F0  0E28               	movlw	40
 19507  0026F2  2425               	addwf	lcd_number@i,w,c
 19508  0026F4  6E0B               	movwf	i2lcd_pix@x,c
 19509  0026F6  6A0C               	clrf	i2lcd_pix@x+1,c
 19510  0026F8  0E00               	movlw	0
 19511  0026FA  220C               	addwfc	i2lcd_pix@x+1,f,c
 19512  0026FC  5027               	movf	lcd_number@k,w,c
 19513  0026FE  0D12               	mullw	18
 19514  002700  5026               	movf	lcd_number@j,w,c
 19515  002702  26F3               	addwf	prodl,f,c
 19516  002704  0E00               	movlw	0
 19517  002706  22F4               	addwfc	prodh,f,c
 19518  002708  0E08               	movlw	8
 19519  00270A  24F3               	addwf	prodl,w,c
 19520  00270C  6E0D               	movwf	i2lcd_pix@y,c
 19521  00270E  0E00               	movlw	0
 19522  002710  20F4               	addwfc	prodh,w,c
 19523  002712  6E0E               	movwf	i2lcd_pix@y+1,c
 19524  002714  5027               	movf	lcd_number@k,w,c
 19525  002716  0D01               	mullw	1
 19526  002718  0E20               	movlw	low lcd_number@index
 19527  00271A  24F3               	addwf	prodl,w,c
 19528  00271C  6ED9               	movwf	fsr2l,c
 19529  00271E  0E00               	movlw	high lcd_number@index
 19530  002720  20F4               	addwfc	prodh,w,c
 19531  002722  6EDA               	movwf	fsr2h,c
 19532  002724  50DF               	movf	indf2,w,c
 19533  002726  6E1B               	movwf	??_lcd_number& (0+255),c
 19534  002728  501B               	movf	??_lcd_number,w,c
 19535  00272A  0D2C               	mullw	44
 19536  00272C  0E5B               	movlw	low _digitos
 19537  00272E  6E1C               	movwf	(??_lcd_number+1)& (0+255),c
 19538  002730  0EFC               	movlw	high _digitos
 19539  002732  6E1D               	movwf	(??_lcd_number+2)& (0+255),c
 19540  002734  50F3               	movf	prodl,w,c
 19541  002736  261C               	addwf	??_lcd_number+1,f,c
 19542  002738  50F4               	movf	prodh,w,c
 19543  00273A  221D               	addwfc	??_lcd_number+2,f,c
 19544  00273C  5025               	movf	lcd_number@i,w,c
 19545  00273E  0D02               	mullw	2
 19546  002740  50F3               	movf	prodl,w,c
 19547  002742  261C               	addwf	??_lcd_number+1,f,c
 19548  002744  50F4               	movf	prodh,w,c
 19549  002746  221D               	addwfc	??_lcd_number+2,f,c
 19550  002748  C01C  FFF6         	movff	??_lcd_number+1,tblptrl
 19551  00274C  C01D  FFF7         	movff	??_lcd_number+2,tblptrh
 19552  002750                     	if	0	;tblptru may be non-zero
 19553  002750                     	endif
 19554  002750                     	if	0	;tblptru may be non-zero
 19555  002750                     	endif
 19556  002750  0009               	tblrd		*+
 19557  002752  CFF5 F001          	movff	tablat,i2bitRead@number
 19558  002756  000A               	tblrd		*-
 19559  002758  CFF5 F002          	movff	tablat,i2bitRead@number+1
 19560  00275C  5026               	movf	lcd_number@j,w,c
 19561  00275E  6E1E               	movwf	(??_lcd_number+3)& (0+255),c
 19562  002760  6A1F               	clrf	(??_lcd_number+4)& (0+255),c
 19563  002762  1E1E               	comf	??_lcd_number+3,f,c
 19564  002764  1E1F               	comf	??_lcd_number+4,f,c
 19565  002766  4A1E               	infsnz	??_lcd_number+3,f,c
 19566  002768  2A1F               	incf	??_lcd_number+4,f,c
 19567  00276A  0E0F               	movlw	15
 19568  00276C  241E               	addwf	??_lcd_number+3,w,c
 19569  00276E  6E03               	movwf	i2bitRead@position,c
 19570  002770  0E00               	movlw	0
 19571  002772  201F               	addwfc	??_lcd_number+4,w,c
 19572  002774  6E04               	movwf	i2bitRead@position+1,c
 19573  002776  EC98  F024         	call	i2_bitRead	;wreg free
 19574  00277A  6E0F               	movwf	i2lcd_pix@c,c
 19575  00277C  0E05               	movlw	5
 19576  00277E  6E10               	movwf	i2lcd_pix@size,c
 19577  002780  EC25  F01C         	call	i2_lcd_pix	;wreg free
 19578  002784  2A26               	incf	lcd_number@j,f,c
 19579  002786  D7B0               	goto	i2l9678
 19580  002788                     i2u1089_40:
 19581  002788  2A25               	incf	lcd_number@i,f,c
 19582  00278A  D7A8               	goto	i2l9672
 19583  00278C                     i2u1090_40:
 19584  00278C  2A27               	incf	lcd_number@k,f,c
 19585  00278E  D7A0               	goto	i2l9666
 19586  002790                     __end_of_lcd_number:
 19587                           	opt stack 0
 19588                           pclatu	equ	0xFFB
 19589                           pclath	equ	0xFFA
 19590                           tblptru	equ	0xFF8
 19591                           tblptrh	equ	0xFF7
 19592                           tblptrl	equ	0xFF6
 19593                           tablat	equ	0xFF5
 19594                           prodh	equ	0xFF4
 19595                           prodl	equ	0xFF3
 19596                           intcon	equ	0xFF2
 19597                           postinc0	equ	0xFEE
 19598                           fsr0h	equ	0xFEA
 19599                           fsr0l	equ	0xFE9
 19600                           wreg	equ	0xFE8
 19601                           indf1	equ	0xFE7
 19602                           postdec1	equ	0xFE5
 19603                           plusw1	equ	0xFE3
 19604                           fsr1h	equ	0xFE2
 19605                           fsr1l	equ	0xFE1
 19606                           indf2	equ	0xFDF
 19607                           postinc2	equ	0xFDE
 19608                           postdec2	equ	0xFDD
 19609                           plusw2	equ	0xFDB
 19610                           fsr2h	equ	0xFDA
 19611                           fsr2l	equ	0xFD9
 19612                           status	equ	0xFD8
 19613                           
 19614 ;; *************** function i2_bitRead *****************
 19615 ;; Defined at:
 19616 ;;		line 5 in file "tft.c"
 19617 ;; Parameters:    Size  Location     Type
 19618 ;;  number          2    0[COMRAM] unsigned int 
 19619 ;;  position        2    2[COMRAM] unsigned int 
 19620 ;; Auto vars:     Size  Location     Type
 19621 ;;		None
 19622 ;; Return value:  Size  Location     Type
 19623 ;;                  1    wreg      unsigned char 
 19624 ;; Registers used:
 19625 ;;		wreg, status,2, status,0
 19626 ;; Tracked objects:
 19627 ;;		On entry : 0/0
 19628 ;;		On exit  : 0/0
 19629 ;;		Unchanged: 0/0
 19630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19631 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19632 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19633 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19634 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19635 ;;Total ram usage:        7 bytes
 19636 ;; Hardware stack levels used:    1
 19637 ;; This function calls:
 19638 ;;		Nothing
 19639 ;; This function is called by:
 19640 ;;		_lcd_number
 19641 ;;		i2_lcd_text
 19642 ;; This function uses a non-reentrant model
 19643 ;;
 19644                           
 19645                           	psect	text67
 19646  004930                     __ptext67:
 19647                           	opt stack 0
 19648  004930                     i2_bitRead:
 19649                           	opt stack 21
 19650                           
 19651                           ;tft.c: 6: position = 1 << position;
 19652                           
 19653                           ;incstack = 0
 19654  004930  C003  F005         	movff	i2bitRead@position,??i2_bitRead
 19655  004934  0E01               	movlw	1
 19656  004936  6E06               	movwf	(??i2_bitRead+1)& (0+255),c
 19657  004938  0E00               	movlw	0
 19658  00493A  6E07               	movwf	(??i2_bitRead+2)& (0+255),c
 19659  00493C  2A05               	incf	??i2_bitRead,f,c
 19660  00493E  D003               	goto	i2u829_44
 19661  004940                     i2u829_45:
 19662  004940  90D8               	bcf	status,0,c
 19663  004942  3606               	rlcf	??i2_bitRead+1,f,c
 19664  004944  3607               	rlcf	??i2_bitRead+2,f,c
 19665  004946                     i2u829_44:
 19666  004946  2E05               	decfsz	??i2_bitRead,f,c
 19667  004948  D7FB               	goto	i2u829_45
 19668  00494A  C006  F003         	movff	??i2_bitRead+1,i2bitRead@position
 19669  00494E  C007  F004         	movff	??i2_bitRead+2,i2bitRead@position+1
 19670                           
 19671                           ;tft.c: 7: if (number & position) {
 19672  004952  5003               	movf	i2bitRead@position,w,c
 19673  004954  1401               	andwf	i2bitRead@number,w,c
 19674  004956  6E05               	movwf	??i2_bitRead& (0+255),c
 19675  004958  5004               	movf	i2bitRead@position+1,w,c
 19676  00495A  1402               	andwf	i2bitRead@number+1,w,c
 19677  00495C  6E06               	movwf	(??i2_bitRead+1)& (0+255),c
 19678  00495E  5005               	movf	??i2_bitRead,w,c
 19679  004960  1006               	iorwf	??i2_bitRead+1,w,c
 19680  004962  B4D8               	btfsc	status,2,c
 19681  004964  D002               	goto	i2l383
 19682                           
 19683                           ;tft.c: 8: return 1;
 19684  004966  0E01               	movlw	1
 19685                           
 19686                           ;tft.c: 9: } else {
 19687  004968  0012               	return	
 19688  00496A                     i2l383:
 19689                           
 19690                           ;tft.c: 10: return 0;
 19691  00496A  0E00               	movlw	0
 19692  00496C  0012               	return	
 19693  00496E                     __end_ofi2_bitRead:
 19694                           	opt stack 0
 19695                           pclatu	equ	0xFFB
 19696                           pclath	equ	0xFFA
 19697                           tblptru	equ	0xFF8
 19698                           tblptrh	equ	0xFF7
 19699                           tblptrl	equ	0xFF6
 19700                           tablat	equ	0xFF5
 19701                           prodh	equ	0xFF4
 19702                           prodl	equ	0xFF3
 19703                           intcon	equ	0xFF2
 19704                           postinc0	equ	0xFEE
 19705                           fsr0h	equ	0xFEA
 19706                           fsr0l	equ	0xFE9
 19707                           wreg	equ	0xFE8
 19708                           indf1	equ	0xFE7
 19709                           postdec1	equ	0xFE5
 19710                           plusw1	equ	0xFE3
 19711                           fsr1h	equ	0xFE2
 19712                           fsr1l	equ	0xFE1
 19713                           indf2	equ	0xFDF
 19714                           postinc2	equ	0xFDE
 19715                           postdec2	equ	0xFDD
 19716                           plusw2	equ	0xFDB
 19717                           fsr2h	equ	0xFDA
 19718                           fsr2l	equ	0xFD9
 19719                           status	equ	0xFD8
 19720                           
 19721 ;; *************** function _lcd_sign *****************
 19722 ;; Defined at:
 19723 ;;		line 175 in file "tft.c"
 19724 ;; Parameters:    Size  Location     Type
 19725 ;;  enable          1    wreg     unsigned char 
 19726 ;; Auto vars:     Size  Location     Type
 19727 ;;  enable          1   23[COMRAM] unsigned char 
 19728 ;; Return value:  Size  Location     Type
 19729 ;;                  1    wreg      void 
 19730 ;; Registers used:
 19731 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 19732 ;; Tracked objects:
 19733 ;;		On entry : 0/0
 19734 ;;		On exit  : 0/0
 19735 ;;		Unchanged: 0/0
 19736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19738 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19740 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19741 ;;Total ram usage:        1 bytes
 19742 ;; Hardware stack levels used:    1
 19743 ;; Hardware stack levels required when called:    4
 19744 ;; This function calls:
 19745 ;;		i2_lcd_pix
 19746 ;; This function is called by:
 19747 ;;		_lcd_number
 19748 ;; This function uses a non-reentrant model
 19749 ;;
 19750                           
 19751                           	psect	text68
 19752  002DE6                     __ptext68:
 19753                           	opt stack 0
 19754  002DE6                     _lcd_sign:
 19755                           	opt stack 18
 19756                           
 19757                           ;incstack = 0
 19758                           ;lcd_sign@enable stored from wreg
 19759  002DE6  6E18               	movwf	lcd_sign@enable,c
 19760                           
 19761                           ;tft.c: 176: lcd_pix(50,1,enable,5);
 19762  002DE8  0E00               	movlw	0
 19763  002DEA  6E0C               	movwf	i2lcd_pix@x+1,c
 19764  002DEC  0E32               	movlw	50
 19765  002DEE  6E0B               	movwf	i2lcd_pix@x,c
 19766  002DF0  0E00               	movlw	0
 19767  002DF2  6E0E               	movwf	i2lcd_pix@y+1,c
 19768  002DF4  0E01               	movlw	1
 19769  002DF6  6E0D               	movwf	i2lcd_pix@y,c
 19770  002DF8  C018  F00F         	movff	lcd_sign@enable,i2lcd_pix@c
 19771  002DFC  0E05               	movlw	5
 19772  002DFE  6E10               	movwf	i2lcd_pix@size,c
 19773  002E00  EC25  F01C         	call	i2_lcd_pix	;wreg free
 19774                           
 19775                           ;tft.c: 177: lcd_pix(50,2,enable,5);
 19776  002E04  0E00               	movlw	0
 19777  002E06  6E0C               	movwf	i2lcd_pix@x+1,c
 19778  002E08  0E32               	movlw	50
 19779  002E0A  6E0B               	movwf	i2lcd_pix@x,c
 19780  002E0C  0E00               	movlw	0
 19781  002E0E  6E0E               	movwf	i2lcd_pix@y+1,c
 19782  002E10  0E02               	movlw	2
 19783  002E12  6E0D               	movwf	i2lcd_pix@y,c
 19784  002E14  C018  F00F         	movff	lcd_sign@enable,i2lcd_pix@c
 19785  002E18  0E05               	movlw	5
 19786  002E1A  6E10               	movwf	i2lcd_pix@size,c
 19787  002E1C  EC25  F01C         	call	i2_lcd_pix	;wreg free
 19788                           
 19789                           ;tft.c: 178: lcd_pix(50,3,enable,5);
 19790  002E20  0E00               	movlw	0
 19791  002E22  6E0C               	movwf	i2lcd_pix@x+1,c
 19792  002E24  0E32               	movlw	50
 19793  002E26  6E0B               	movwf	i2lcd_pix@x,c
 19794  002E28  0E00               	movlw	0
 19795  002E2A  6E0E               	movwf	i2lcd_pix@y+1,c
 19796  002E2C  0E03               	movlw	3
 19797  002E2E  6E0D               	movwf	i2lcd_pix@y,c
 19798  002E30  C018  F00F         	movff	lcd_sign@enable,i2lcd_pix@c
 19799  002E34  0E05               	movlw	5
 19800  002E36  6E10               	movwf	i2lcd_pix@size,c
 19801  002E38  EC25  F01C         	call	i2_lcd_pix	;wreg free
 19802                           
 19803                           ;tft.c: 179: lcd_pix(50,4,enable,5);
 19804  002E3C  0E00               	movlw	0
 19805  002E3E  6E0C               	movwf	i2lcd_pix@x+1,c
 19806  002E40  0E32               	movlw	50
 19807  002E42  6E0B               	movwf	i2lcd_pix@x,c
 19808  002E44  0E00               	movlw	0
 19809  002E46  6E0E               	movwf	i2lcd_pix@y+1,c
 19810  002E48  0E04               	movlw	4
 19811  002E4A  6E0D               	movwf	i2lcd_pix@y,c
 19812  002E4C  C018  F00F         	movff	lcd_sign@enable,i2lcd_pix@c
 19813  002E50  0E05               	movlw	5
 19814  002E52  6E10               	movwf	i2lcd_pix@size,c
 19815  002E54  EC25  F01C         	call	i2_lcd_pix	;wreg free
 19816                           
 19817                           ;tft.c: 180: lcd_pix(50,5,enable,5);
 19818  002E58  0E00               	movlw	0
 19819  002E5A  6E0C               	movwf	i2lcd_pix@x+1,c
 19820  002E5C  0E32               	movlw	50
 19821  002E5E  6E0B               	movwf	i2lcd_pix@x,c
 19822  002E60  0E00               	movlw	0
 19823  002E62  6E0E               	movwf	i2lcd_pix@y+1,c
 19824  002E64  0E05               	movlw	5
 19825  002E66  6E0D               	movwf	i2lcd_pix@y,c
 19826  002E68  C018  F00F         	movff	lcd_sign@enable,i2lcd_pix@c
 19827  002E6C  0E05               	movlw	5
 19828  002E6E  6E10               	movwf	i2lcd_pix@size,c
 19829  002E70  EC25  F01C         	call	i2_lcd_pix	;wreg free
 19830                           
 19831                           ;tft.c: 181: lcd_pix(49,1,enable,5);
 19832  002E74  0E00               	movlw	0
 19833  002E76  6E0C               	movwf	i2lcd_pix@x+1,c
 19834  002E78  0E31               	movlw	49
 19835  002E7A  6E0B               	movwf	i2lcd_pix@x,c
 19836  002E7C  0E00               	movlw	0
 19837  002E7E  6E0E               	movwf	i2lcd_pix@y+1,c
 19838  002E80  0E01               	movlw	1
 19839  002E82  6E0D               	movwf	i2lcd_pix@y,c
 19840  002E84  C018  F00F         	movff	lcd_sign@enable,i2lcd_pix@c
 19841  002E88  0E05               	movlw	5
 19842  002E8A  6E10               	movwf	i2lcd_pix@size,c
 19843  002E8C  EC25  F01C         	call	i2_lcd_pix	;wreg free
 19844                           
 19845                           ;tft.c: 182: lcd_pix(49,2,enable,5);
 19846  002E90  0E00               	movlw	0
 19847  002E92  6E0C               	movwf	i2lcd_pix@x+1,c
 19848  002E94  0E31               	movlw	49
 19849  002E96  6E0B               	movwf	i2lcd_pix@x,c
 19850  002E98  0E00               	movlw	0
 19851  002E9A  6E0E               	movwf	i2lcd_pix@y+1,c
 19852  002E9C  0E02               	movlw	2
 19853  002E9E  6E0D               	movwf	i2lcd_pix@y,c
 19854  002EA0  C018  F00F         	movff	lcd_sign@enable,i2lcd_pix@c
 19855  002EA4  0E05               	movlw	5
 19856  002EA6  6E10               	movwf	i2lcd_pix@size,c
 19857  002EA8  EC25  F01C         	call	i2_lcd_pix	;wreg free
 19858                           
 19859                           ;tft.c: 183: lcd_pix(49,3,enable,5);
 19860  002EAC  0E00               	movlw	0
 19861  002EAE  6E0C               	movwf	i2lcd_pix@x+1,c
 19862  002EB0  0E31               	movlw	49
 19863  002EB2  6E0B               	movwf	i2lcd_pix@x,c
 19864  002EB4  0E00               	movlw	0
 19865  002EB6  6E0E               	movwf	i2lcd_pix@y+1,c
 19866  002EB8  0E03               	movlw	3
 19867  002EBA  6E0D               	movwf	i2lcd_pix@y,c
 19868  002EBC  C018  F00F         	movff	lcd_sign@enable,i2lcd_pix@c
 19869  002EC0  0E05               	movlw	5
 19870  002EC2  6E10               	movwf	i2lcd_pix@size,c
 19871  002EC4  EC25  F01C         	call	i2_lcd_pix	;wreg free
 19872                           
 19873                           ;tft.c: 184: lcd_pix(49,4,enable,5);
 19874  002EC8  0E00               	movlw	0
 19875  002ECA  6E0C               	movwf	i2lcd_pix@x+1,c
 19876  002ECC  0E31               	movlw	49
 19877  002ECE  6E0B               	movwf	i2lcd_pix@x,c
 19878  002ED0  0E00               	movlw	0
 19879  002ED2  6E0E               	movwf	i2lcd_pix@y+1,c
 19880  002ED4  0E04               	movlw	4
 19881  002ED6  6E0D               	movwf	i2lcd_pix@y,c
 19882  002ED8  C018  F00F         	movff	lcd_sign@enable,i2lcd_pix@c
 19883  002EDC  0E05               	movlw	5
 19884  002EDE  6E10               	movwf	i2lcd_pix@size,c
 19885  002EE0  EC25  F01C         	call	i2_lcd_pix	;wreg free
 19886                           
 19887                           ;tft.c: 185: lcd_pix(49,5,enable,5);
 19888  002EE4  0E00               	movlw	0
 19889  002EE6  6E0C               	movwf	i2lcd_pix@x+1,c
 19890  002EE8  0E31               	movlw	49
 19891  002EEA  6E0B               	movwf	i2lcd_pix@x,c
 19892  002EEC  0E00               	movlw	0
 19893  002EEE  6E0E               	movwf	i2lcd_pix@y+1,c
 19894  002EF0  0E05               	movlw	5
 19895  002EF2  6E0D               	movwf	i2lcd_pix@y,c
 19896  002EF4  C018  F00F         	movff	lcd_sign@enable,i2lcd_pix@c
 19897  002EF8  0E05               	movlw	5
 19898  002EFA  6E10               	movwf	i2lcd_pix@size,c
 19899  002EFC  EC25  F01C         	call	i2_lcd_pix	;wreg free
 19900  002F00  0012               	return		;funcret
 19901  002F02                     __end_of_lcd_sign:
 19902                           	opt stack 0
 19903                           pclatu	equ	0xFFB
 19904                           pclath	equ	0xFFA
 19905                           tblptru	equ	0xFF8
 19906                           tblptrh	equ	0xFF7
 19907                           tblptrl	equ	0xFF6
 19908                           tablat	equ	0xFF5
 19909                           prodh	equ	0xFF4
 19910                           prodl	equ	0xFF3
 19911                           intcon	equ	0xFF2
 19912                           postinc0	equ	0xFEE
 19913                           fsr0h	equ	0xFEA
 19914                           fsr0l	equ	0xFE9
 19915                           wreg	equ	0xFE8
 19916                           indf1	equ	0xFE7
 19917                           postdec1	equ	0xFE5
 19918                           plusw1	equ	0xFE3
 19919                           fsr1h	equ	0xFE2
 19920                           fsr1l	equ	0xFE1
 19921                           indf2	equ	0xFDF
 19922                           postinc2	equ	0xFDE
 19923                           postdec2	equ	0xFDD
 19924                           plusw2	equ	0xFDB
 19925                           fsr2h	equ	0xFDA
 19926                           fsr2l	equ	0xFD9
 19927                           status	equ	0xFD8
 19928                           
 19929 ;; *************** function i2_lcd_pix *****************
 19930 ;; Defined at:
 19931 ;;		line 117 in file "tft.c"
 19932 ;; Parameters:    Size  Location     Type
 19933 ;;  x               2   10[COMRAM] unsigned int 
 19934 ;;  y               2   12[COMRAM] unsigned int 
 19935 ;;  c               1   14[COMRAM] unsigned char 
 19936 ;;  size            1   15[COMRAM] unsigned char 
 19937 ;; Auto vars:     Size  Location     Type
 19938 ;;  lcd_pix         2   21[COMRAM] unsigned int 
 19939 ;;  lcd_pix         1   20[COMRAM] unsigned char 
 19940 ;; Return value:  Size  Location     Type
 19941 ;;                  1    wreg      void 
 19942 ;; Registers used:
 19943 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 19944 ;; Tracked objects:
 19945 ;;		On entry : 0/0
 19946 ;;		On exit  : 0/0
 19947 ;;		Unchanged: 0/0
 19948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19949 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19950 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19951 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19952 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19953 ;;Total ram usage:       13 bytes
 19954 ;; Hardware stack levels used:    1
 19955 ;; Hardware stack levels required when called:    3
 19956 ;; This function calls:
 19957 ;;		i2___wmul
 19958 ;;		i2_lcd_memory_start
 19959 ;;		i2_lcd_set_address
 19960 ;;		i2_lcd_write_bus
 19961 ;; This function is called by:
 19962 ;;		_lcd_sign
 19963 ;;		_lcd_point
 19964 ;;		_lcd_number
 19965 ;;		i2_lcd_text
 19966 ;; This function uses a non-reentrant model
 19967 ;;
 19968                           
 19969                           	psect	text69
 19970  00384A                     __ptext69:
 19971                           	opt stack 0
 19972  00384A                     i2_lcd_pix:
 19973                           	opt stack 18
 19974                           
 19975                           ;tft.c: 118: unsigned int i;
 19976                           ;tft.c: 119: char n1;
 19977                           ;tft.c: 121: x *= size;
 19978                           
 19979                           ;incstack = 0
 19980  00384A  C00B  F001         	movff	i2lcd_pix@x,i2___wmul@multiplier
 19981  00384E  C00C  F002         	movff	i2lcd_pix@x+1,i2___wmul@multiplier+1
 19982  003852  C010  F003         	movff	i2lcd_pix@size,i2___wmul@multiplicand
 19983  003856  6A04               	clrf	i2___wmul@multiplicand+1,c
 19984  003858  EC78  F025         	call	i2___wmul	;wreg free
 19985  00385C  C001  F00B         	movff	?i2___wmul,i2lcd_pix@x
 19986  003860  C002  F00C         	movff	?i2___wmul+1,i2lcd_pix@x+1
 19987                           
 19988                           ;tft.c: 122: y *= size;
 19989  003864  C00D  F001         	movff	i2lcd_pix@y,i2___wmul@multiplier
 19990  003868  C00E  F002         	movff	i2lcd_pix@y+1,i2___wmul@multiplier+1
 19991  00386C  C010  F003         	movff	i2lcd_pix@size,i2___wmul@multiplicand
 19992  003870  6A04               	clrf	i2___wmul@multiplicand+1,c
 19993  003872  EC78  F025         	call	i2___wmul	;wreg free
 19994  003876  C001  F00D         	movff	?i2___wmul,i2lcd_pix@y
 19995  00387A  C002  F00E         	movff	?i2___wmul+1,i2lcd_pix@y+1
 19996                           
 19997                           ;tft.c: 123: n1 = size * size;
 19998  00387E  5010               	movf	i2lcd_pix@size,w,c
 19999  003880  0210               	mulwf	i2lcd_pix@size,c
 20000  003882  CFF3 F015          	movff	prodl,i2lcd_pix@n1
 20001                           
 20002                           ;tft.c: 124: LATA1 = 0;
 20003  003886  9289               	bcf	3977,1,c	;volatile
 20004                           
 20005                           ;tft.c: 125: lcd_set_address(x,y,x+size-1,y+size-1);
 20006  003888  C00B  F003         	movff	i2lcd_pix@x,i2lcd_set_address@x1
 20007  00388C  C00C  F004         	movff	i2lcd_pix@x+1,i2lcd_set_address@x1+1
 20008  003890  C00D  F005         	movff	i2lcd_pix@y,i2lcd_set_address@y1
 20009  003894  C00E  F006         	movff	i2lcd_pix@y+1,i2lcd_set_address@y1+1
 20010  003898  5010               	movf	i2lcd_pix@size,w,c
 20011  00389A  240B               	addwf	i2lcd_pix@x,w,c
 20012  00389C  6E11               	movwf	??i2_lcd_pix& (0+255),c
 20013  00389E  0E00               	movlw	0
 20014  0038A0  200C               	addwfc	i2lcd_pix@x+1,w,c
 20015  0038A2  6E12               	movwf	(??i2_lcd_pix+1)& (0+255),c
 20016  0038A4  0EFF               	movlw	255
 20017  0038A6  2411               	addwf	??i2_lcd_pix,w,c
 20018  0038A8  6E07               	movwf	i2lcd_set_address@x2,c
 20019  0038AA  0EFF               	movlw	255
 20020  0038AC  2012               	addwfc	??i2_lcd_pix+1,w,c
 20021  0038AE  6E08               	movwf	i2lcd_set_address@x2+1,c
 20022  0038B0  5010               	movf	i2lcd_pix@size,w,c
 20023  0038B2  240D               	addwf	i2lcd_pix@y,w,c
 20024  0038B4  6E13               	movwf	(??i2_lcd_pix+2)& (0+255),c
 20025  0038B6  0E00               	movlw	0
 20026  0038B8  200E               	addwfc	i2lcd_pix@y+1,w,c
 20027  0038BA  6E14               	movwf	(??i2_lcd_pix+3)& (0+255),c
 20028  0038BC  0EFF               	movlw	255
 20029  0038BE  2413               	addwf	??i2_lcd_pix+2,w,c
 20030  0038C0  6E09               	movwf	i2lcd_set_address@y2,c
 20031  0038C2  0EFF               	movlw	255
 20032  0038C4  2014               	addwfc	??i2_lcd_pix+3,w,c
 20033  0038C6  6E0A               	movwf	i2lcd_set_address@y2+1,c
 20034  0038C8  ECB7  F024         	call	i2_lcd_set_address	;wreg free
 20035                           
 20036                           ;tft.c: 126: lcd_memory_start();
 20037  0038CC  EC28  F026         	call	i2_lcd_memory_start	;wreg free
 20038                           
 20039                           ;tft.c: 128: switch (c) {
 20040  0038D0  D02E               	goto	i2l410
 20041  0038D2                     
 20042                           ;tft.c: 130: for(i=0;i<n1;i++) {
 20043  0038D2  0E00               	movlw	0
 20044  0038D4  6E17               	movwf	i2lcd_pix@i+1,c
 20045  0038D6  0E00               	movlw	0
 20046  0038D8  6E16               	movwf	i2lcd_pix@i,c
 20047  0038DA  D008               	goto	i2l412
 20048  0038DC                     
 20049                           ;tft.c: 131: lcd_write_bus(0x00);
 20050  0038DC  0E00               	movlw	0
 20051  0038DE  EC19  F026         	call	i2_lcd_write_bus
 20052                           
 20053                           ;tft.c: 132: lcd_write_bus(0x00);
 20054  0038E2  0E00               	movlw	0
 20055  0038E4  EC19  F026         	call	i2_lcd_write_bus
 20056  0038E8  4A16               	infsnz	i2lcd_pix@i,f,c
 20057  0038EA  2A17               	incf	i2lcd_pix@i+1,f,c
 20058  0038EC                     i2l412:
 20059  0038EC  5015               	movf	i2lcd_pix@n1,w,c
 20060  0038EE  6E11               	movwf	??i2_lcd_pix& (0+255),c
 20061  0038F0  6A12               	clrf	(??i2_lcd_pix+1)& (0+255),c
 20062  0038F2  5011               	movf	??i2_lcd_pix,w,c
 20063  0038F4  5C16               	subwf	i2lcd_pix@i,w,c
 20064  0038F6  5012               	movf	??i2_lcd_pix+1,w,c
 20065  0038F8  5817               	subwfb	i2lcd_pix@i+1,w,c
 20066  0038FA  B0D8               	btfsc	status,0,c
 20067  0038FC  D01F               	goto	i2l415
 20068  0038FE  D7EE               	goto	i2l413
 20069  003900                     
 20070                           ;tft.c: 136: for(i=0;i<n1;i++) {
 20071  003900  0E00               	movlw	0
 20072  003902  6E17               	movwf	i2lcd_pix@i+1,c
 20073  003904  0E00               	movlw	0
 20074  003906  6E16               	movwf	i2lcd_pix@i,c
 20075  003908  D008               	goto	i2l417
 20076  00390A                     
 20077                           ;tft.c: 137: lcd_write_bus(0xFF);
 20078  00390A  0EFF               	movlw	255
 20079  00390C  EC19  F026         	call	i2_lcd_write_bus
 20080                           
 20081                           ;tft.c: 138: lcd_write_bus(0xFF);
 20082  003910  0EFF               	movlw	255
 20083  003912  EC19  F026         	call	i2_lcd_write_bus
 20084  003916  4A16               	infsnz	i2lcd_pix@i,f,c
 20085  003918  2A17               	incf	i2lcd_pix@i+1,f,c
 20086  00391A                     i2l417:
 20087  00391A  5015               	movf	i2lcd_pix@n1,w,c
 20088  00391C  6E11               	movwf	??i2_lcd_pix& (0+255),c
 20089  00391E  6A12               	clrf	(??i2_lcd_pix+1)& (0+255),c
 20090  003920  5011               	movf	??i2_lcd_pix,w,c
 20091  003922  5C16               	subwf	i2lcd_pix@i,w,c
 20092  003924  5012               	movf	??i2_lcd_pix+1,w,c
 20093  003926  5817               	subwfb	i2lcd_pix@i+1,w,c
 20094  003928  B0D8               	btfsc	status,0,c
 20095  00392A  D008               	goto	i2l415
 20096  00392C  D7EE               	goto	i2l418
 20097  00392E                     i2l410:
 20098  00392E  500F               	movf	i2lcd_pix@c,w,c
 20099                           
 20100                           ; Switch size 1, requested type "space"
 20101                           ; Number of cases is 2, Range of values is 0 to 1
 20102                           ; switch strategies available:
 20103                           ; Name         Instructions Cycles
 20104                           ; simple_byte            7     4 (average)
 20105                           ;	Chosen strategy is simple_byte
 20106  003930  0A00               	xorlw	0	; case 0
 20107  003932  B4D8               	btfsc	status,2,c
 20108  003934  D7E5               	goto	i2l416
 20109  003936  0A01               	xorlw	1	; case 1
 20110  003938  B4D8               	btfsc	status,2,c
 20111  00393A  D7CB               	goto	i2l411
 20112  00393C                     i2l415:
 20113                           
 20114                           ;tft.c: 143: LATA1 = 1;
 20115  00393C  8289               	bsf	3977,1,c	;volatile
 20116  00393E  0012               	return		;funcret
 20117  003940                     __end_ofi2_lcd_pix:
 20118                           	opt stack 0
 20119                           pclatu	equ	0xFFB
 20120                           pclath	equ	0xFFA
 20121                           tblptru	equ	0xFF8
 20122                           tblptrh	equ	0xFF7
 20123                           tblptrl	equ	0xFF6
 20124                           tablat	equ	0xFF5
 20125                           prodh	equ	0xFF4
 20126                           prodl	equ	0xFF3
 20127                           intcon	equ	0xFF2
 20128                           postinc0	equ	0xFEE
 20129                           fsr0h	equ	0xFEA
 20130                           fsr0l	equ	0xFE9
 20131                           wreg	equ	0xFE8
 20132                           indf1	equ	0xFE7
 20133                           postdec1	equ	0xFE5
 20134                           plusw1	equ	0xFE3
 20135                           fsr1h	equ	0xFE2
 20136                           fsr1l	equ	0xFE1
 20137                           indf2	equ	0xFDF
 20138                           postinc2	equ	0xFDE
 20139                           postdec2	equ	0xFDD
 20140                           plusw2	equ	0xFDB
 20141                           fsr2h	equ	0xFDA
 20142                           fsr2l	equ	0xFD9
 20143                           status	equ	0xFD8
 20144                           
 20145 ;; *************** function i2_lcd_set_address *****************
 20146 ;; Defined at:
 20147 ;;		line 27 in file "tft.c"
 20148 ;; Parameters:    Size  Location     Type
 20149 ;;  x1              2    2[COMRAM] unsigned int 
 20150 ;;  y1              2    4[COMRAM] unsigned int 
 20151 ;;  x2              2    6[COMRAM] unsigned int 
 20152 ;;  y2              2    8[COMRAM] unsigned int 
 20153 ;; Auto vars:     Size  Location     Type
 20154 ;;		None
 20155 ;; Return value:  Size  Location     Type
 20156 ;;                  1    wreg      void 
 20157 ;; Registers used:
 20158 ;;		wreg, status,2, cstack
 20159 ;; Tracked objects:
 20160 ;;		On entry : 0/0
 20161 ;;		On exit  : 0/0
 20162 ;;		Unchanged: 0/0
 20163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 20164 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20165 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20167 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20168 ;;Total ram usage:        8 bytes
 20169 ;; Hardware stack levels used:    1
 20170 ;; Hardware stack levels required when called:    2
 20171 ;; This function calls:
 20172 ;;		i2_lcd_write_bus
 20173 ;;		i2_lcd_write_command
 20174 ;; This function is called by:
 20175 ;;		i2_lcd_set_background
 20176 ;;		i2_lcd_pix
 20177 ;;		i2_lcd_pix_color
 20178 ;; This function uses a non-reentrant model
 20179 ;;
 20180                           
 20181                           	psect	text70
 20182  00496E                     __ptext70:
 20183                           	opt stack 0
 20184  00496E                     i2_lcd_set_address:
 20185                           	opt stack 18
 20186                           
 20187                           ;tft.c: 28: lcd_write_command(0x2A);
 20188                           
 20189                           ;incstack = 0
 20190  00496E  0E2A               	movlw	42
 20191  004970  EC12  F026         	call	i2_lcd_write_command
 20192                           
 20193                           ;tft.c: 29: lcd_write_bus(x1>>8);
 20194  004974  5004               	movf	i2lcd_set_address@x1+1,w,c
 20195  004976  EC19  F026         	call	i2_lcd_write_bus
 20196                           
 20197                           ;tft.c: 30: lcd_write_bus(x1);
 20198  00497A  5003               	movf	i2lcd_set_address@x1,w,c
 20199  00497C  EC19  F026         	call	i2_lcd_write_bus
 20200                           
 20201                           ;tft.c: 31: lcd_write_bus(x2>>8);
 20202  004980  5008               	movf	i2lcd_set_address@x2+1,w,c
 20203  004982  EC19  F026         	call	i2_lcd_write_bus
 20204                           
 20205                           ;tft.c: 32: lcd_write_bus(x2);
 20206  004986  5007               	movf	i2lcd_set_address@x2,w,c
 20207  004988  EC19  F026         	call	i2_lcd_write_bus
 20208                           
 20209                           ;tft.c: 34: lcd_write_command(0x2B);
 20210  00498C  0E2B               	movlw	43
 20211  00498E  EC12  F026         	call	i2_lcd_write_command
 20212                           
 20213                           ;tft.c: 35: lcd_write_bus(y1>>8);
 20214  004992  5006               	movf	i2lcd_set_address@y1+1,w,c
 20215  004994  EC19  F026         	call	i2_lcd_write_bus
 20216                           
 20217                           ;tft.c: 36: lcd_write_bus(y1);
 20218  004998  5005               	movf	i2lcd_set_address@y1,w,c
 20219  00499A  EC19  F026         	call	i2_lcd_write_bus
 20220                           
 20221                           ;tft.c: 37: lcd_write_bus(y2>>8);
 20222  00499E  500A               	movf	i2lcd_set_address@y2+1,w,c
 20223  0049A0  EC19  F026         	call	i2_lcd_write_bus
 20224                           
 20225                           ;tft.c: 38: lcd_write_bus(y2);
 20226  0049A4  5009               	movf	i2lcd_set_address@y2,w,c
 20227  0049A6  EC19  F026         	call	i2_lcd_write_bus
 20228  0049AA  0012               	return		;funcret
 20229  0049AC                     __end_ofi2_lcd_set_address:
 20230                           	opt stack 0
 20231                           pclatu	equ	0xFFB
 20232                           pclath	equ	0xFFA
 20233                           tblptru	equ	0xFF8
 20234                           tblptrh	equ	0xFF7
 20235                           tblptrl	equ	0xFF6
 20236                           tablat	equ	0xFF5
 20237                           prodh	equ	0xFF4
 20238                           prodl	equ	0xFF3
 20239                           intcon	equ	0xFF2
 20240                           postinc0	equ	0xFEE
 20241                           fsr0h	equ	0xFEA
 20242                           fsr0l	equ	0xFE9
 20243                           wreg	equ	0xFE8
 20244                           indf1	equ	0xFE7
 20245                           postdec1	equ	0xFE5
 20246                           plusw1	equ	0xFE3
 20247                           fsr1h	equ	0xFE2
 20248                           fsr1l	equ	0xFE1
 20249                           indf2	equ	0xFDF
 20250                           postinc2	equ	0xFDE
 20251                           postdec2	equ	0xFDD
 20252                           plusw2	equ	0xFDB
 20253                           fsr2h	equ	0xFDA
 20254                           fsr2l	equ	0xFD9
 20255                           status	equ	0xFD8
 20256                           
 20257 ;; *************** function i2_lcd_memory_start *****************
 20258 ;; Defined at:
 20259 ;;		line 41 in file "tft.c"
 20260 ;; Parameters:    Size  Location     Type
 20261 ;;		None
 20262 ;; Auto vars:     Size  Location     Type
 20263 ;;		None
 20264 ;; Return value:  Size  Location     Type
 20265 ;;                  1    wreg      void 
 20266 ;; Registers used:
 20267 ;;		wreg, status,2, cstack
 20268 ;; Tracked objects:
 20269 ;;		On entry : 0/0
 20270 ;;		On exit  : 0/0
 20271 ;;		Unchanged: 0/0
 20272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 20273 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20274 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20275 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20276 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20277 ;;Total ram usage:        0 bytes
 20278 ;; Hardware stack levels used:    1
 20279 ;; Hardware stack levels required when called:    2
 20280 ;; This function calls:
 20281 ;;		i2_lcd_write_command
 20282 ;; This function is called by:
 20283 ;;		i2_lcd_set_background
 20284 ;;		i2_lcd_pix
 20285 ;;		i2_lcd_pix_color
 20286 ;; This function uses a non-reentrant model
 20287 ;;
 20288                           
 20289                           	psect	text71
 20290  004C50                     __ptext71:
 20291                           	opt stack 0
 20292  004C50                     i2_lcd_memory_start:
 20293                           	opt stack 18
 20294                           
 20295                           ;tft.c: 42: lcd_write_command(0x2C);
 20296                           
 20297                           ;incstack = 0
 20298  004C50  0E2C               	movlw	44
 20299  004C52  EC12  F026         	call	i2_lcd_write_command
 20300  004C56  0012               	return		;funcret
 20301  004C58                     __end_ofi2_lcd_memory_start:
 20302                           	opt stack 0
 20303                           pclatu	equ	0xFFB
 20304                           pclath	equ	0xFFA
 20305                           tblptru	equ	0xFF8
 20306                           tblptrh	equ	0xFF7
 20307                           tblptrl	equ	0xFF6
 20308                           tablat	equ	0xFF5
 20309                           prodh	equ	0xFF4
 20310                           prodl	equ	0xFF3
 20311                           intcon	equ	0xFF2
 20312                           postinc0	equ	0xFEE
 20313                           fsr0h	equ	0xFEA
 20314                           fsr0l	equ	0xFE9
 20315                           wreg	equ	0xFE8
 20316                           indf1	equ	0xFE7
 20317                           postdec1	equ	0xFE5
 20318                           plusw1	equ	0xFE3
 20319                           fsr1h	equ	0xFE2
 20320                           fsr1l	equ	0xFE1
 20321                           indf2	equ	0xFDF
 20322                           postinc2	equ	0xFDE
 20323                           postdec2	equ	0xFDD
 20324                           plusw2	equ	0xFDB
 20325                           fsr2h	equ	0xFDA
 20326                           fsr2l	equ	0xFD9
 20327                           status	equ	0xFD8
 20328                           
 20329 ;; *************** function i2_lcd_write_command *****************
 20330 ;; Defined at:
 20331 ;;		line 21 in file "tft.c"
 20332 ;; Parameters:    Size  Location     Type
 20333 ;;  cmd             1    wreg     unsigned char 
 20334 ;; Auto vars:     Size  Location     Type
 20335 ;;  cmd             1    1[COMRAM] unsigned char 
 20336 ;; Return value:  Size  Location     Type
 20337 ;;                  1    wreg      void 
 20338 ;; Registers used:
 20339 ;;		wreg, status,2, cstack
 20340 ;; Tracked objects:
 20341 ;;		On entry : 0/0
 20342 ;;		On exit  : 0/0
 20343 ;;		Unchanged: 0/0
 20344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 20345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20346 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20348 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20349 ;;Total ram usage:        1 bytes
 20350 ;; Hardware stack levels used:    1
 20351 ;; Hardware stack levels required when called:    1
 20352 ;; This function calls:
 20353 ;;		i2_lcd_write_bus
 20354 ;; This function is called by:
 20355 ;;		i2_lcd_set_address
 20356 ;;		i2_lcd_memory_start
 20357 ;; This function uses a non-reentrant model
 20358 ;;
 20359                           
 20360                           	psect	text72
 20361  004C24                     __ptext72:
 20362                           	opt stack 0
 20363  004C24                     i2_lcd_write_command:
 20364                           	opt stack 18
 20365                           
 20366                           ;incstack = 0
 20367                           ;i2lcd_write_command@cmd stored from wreg
 20368  004C24  6E02               	movwf	i2lcd_write_command@cmd,c
 20369                           
 20370                           ;tft.c: 22: LATA2 = 0;
 20371  004C26  9489               	bcf	3977,2,c	;volatile
 20372                           
 20373                           ;tft.c: 23: lcd_write_bus(cmd);
 20374  004C28  5002               	movf	i2lcd_write_command@cmd,w,c
 20375  004C2A  EC19  F026         	call	i2_lcd_write_bus
 20376                           
 20377                           ;tft.c: 24: LATA2 = 1;
 20378  004C2E  8489               	bsf	3977,2,c	;volatile
 20379  004C30  0012               	return		;funcret
 20380  004C32                     __end_ofi2_lcd_write_command:
 20381                           	opt stack 0
 20382                           pclatu	equ	0xFFB
 20383                           pclath	equ	0xFFA
 20384                           tblptru	equ	0xFF8
 20385                           tblptrh	equ	0xFF7
 20386                           tblptrl	equ	0xFF6
 20387                           tablat	equ	0xFF5
 20388                           prodh	equ	0xFF4
 20389                           prodl	equ	0xFF3
 20390                           intcon	equ	0xFF2
 20391                           postinc0	equ	0xFEE
 20392                           fsr0h	equ	0xFEA
 20393                           fsr0l	equ	0xFE9
 20394                           wreg	equ	0xFE8
 20395                           indf1	equ	0xFE7
 20396                           postdec1	equ	0xFE5
 20397                           plusw1	equ	0xFE3
 20398                           fsr1h	equ	0xFE2
 20399                           fsr1l	equ	0xFE1
 20400                           indf2	equ	0xFDF
 20401                           postinc2	equ	0xFDE
 20402                           postdec2	equ	0xFDD
 20403                           plusw2	equ	0xFDB
 20404                           fsr2h	equ	0xFDA
 20405                           fsr2l	equ	0xFD9
 20406                           status	equ	0xFD8
 20407                           
 20408 ;; *************** function i2_lcd_write_bus *****************
 20409 ;; Defined at:
 20410 ;;		line 14 in file "tft.c"
 20411 ;; Parameters:    Size  Location     Type
 20412 ;;  data            1    wreg     unsigned char 
 20413 ;; Auto vars:     Size  Location     Type
 20414 ;;  data            1    0[COMRAM] unsigned char 
 20415 ;; Return value:  Size  Location     Type
 20416 ;;                  1    wreg      void 
 20417 ;; Registers used:
 20418 ;;		wreg
 20419 ;; Tracked objects:
 20420 ;;		On entry : 0/0
 20421 ;;		On exit  : 0/0
 20422 ;;		Unchanged: 0/0
 20423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 20424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20425 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20426 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20427 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20428 ;;Total ram usage:        1 bytes
 20429 ;; Hardware stack levels used:    1
 20430 ;; This function calls:
 20431 ;;		Nothing
 20432 ;; This function is called by:
 20433 ;;		i2_lcd_write_command
 20434 ;;		i2_lcd_set_address
 20435 ;;		i2_lcd_set_background
 20436 ;;		i2_lcd_pix
 20437 ;;		i2_lcd_pix_color
 20438 ;; This function uses a non-reentrant model
 20439 ;;
 20440                           
 20441                           	psect	text73
 20442  004C32                     __ptext73:
 20443                           	opt stack 0
 20444  004C32                     i2_lcd_write_bus:
 20445                           	opt stack 20
 20446                           
 20447                           ;incstack = 0
 20448                           ;i2lcd_write_bus@data stored from wreg
 20449  004C32  6E01               	movwf	i2lcd_write_bus@data,c
 20450                           
 20451                           ;tft.c: 15: LATB = data;
 20452  004C34  C001  FF8A         	movff	i2lcd_write_bus@data,3978	;volatile
 20453                           
 20454                           ;tft.c: 16: LATA3 = 0;
 20455  004C38  9689               	bcf	3977,3,c	;volatile
 20456                           
 20457                           ;tft.c: 18: LATA3 = 1;
 20458  004C3A  8689               	bsf	3977,3,c	;volatile
 20459  004C3C  0012               	return		;funcret
 20460  004C3E                     __end_ofi2_lcd_write_bus:
 20461                           	opt stack 0
 20462                           pclatu	equ	0xFFB
 20463                           pclath	equ	0xFFA
 20464                           tblptru	equ	0xFF8
 20465                           tblptrh	equ	0xFF7
 20466                           tblptrl	equ	0xFF6
 20467                           tablat	equ	0xFF5
 20468                           prodh	equ	0xFF4
 20469                           prodl	equ	0xFF3
 20470                           intcon	equ	0xFF2
 20471                           postinc0	equ	0xFEE
 20472                           fsr0h	equ	0xFEA
 20473                           fsr0l	equ	0xFE9
 20474                           wreg	equ	0xFE8
 20475                           indf1	equ	0xFE7
 20476                           postdec1	equ	0xFE5
 20477                           plusw1	equ	0xFE3
 20478                           fsr1h	equ	0xFE2
 20479                           fsr1l	equ	0xFE1
 20480                           indf2	equ	0xFDF
 20481                           postinc2	equ	0xFDE
 20482                           postdec2	equ	0xFDD
 20483                           plusw2	equ	0xFDB
 20484                           fsr2h	equ	0xFDA
 20485                           fsr2l	equ	0xFD9
 20486                           status	equ	0xFD8
 20487                           
 20488 ;; *************** function i2___wmul *****************
 20489 ;; Defined at:
 20490 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 20491 ;; Parameters:    Size  Location     Type
 20492 ;;  multiplier      2    0[COMRAM] unsigned int 
 20493 ;;  multiplicand    2    2[COMRAM] unsigned int 
 20494 ;; Auto vars:     Size  Location     Type
 20495 ;;  __wmul          2    4[COMRAM] unsigned int 
 20496 ;; Return value:  Size  Location     Type
 20497 ;;                  2    0[COMRAM] unsigned int 
 20498 ;; Registers used:
 20499 ;;		wreg, status,2, status,0, prodl, prodh
 20500 ;; Tracked objects:
 20501 ;;		On entry : 0/0
 20502 ;;		On exit  : 0/0
 20503 ;;		Unchanged: 0/0
 20504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 20505 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20506 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20508 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20509 ;;Total ram usage:        6 bytes
 20510 ;; Hardware stack levels used:    1
 20511 ;; This function calls:
 20512 ;;		Nothing
 20513 ;; This function is called by:
 20514 ;;		_isr
 20515 ;;		i2_lcd_pix
 20516 ;;		i2_lcd_pix_color
 20517 ;;		i2_lcd_text
 20518 ;;		i2_printf
 20519 ;; This function uses a non-reentrant model
 20520 ;;
 20521                           
 20522                           	psect	text74
 20523  004AF0                     __ptext74:
 20524                           	opt stack 0
 20525  004AF0                     i2___wmul:
 20526                           	opt stack 22
 20527                           
 20528                           ;incstack = 0
 20529  004AF0  5001               	movf	i2___wmul@multiplier,w,c
 20530  004AF2  0203               	mulwf	i2___wmul@multiplicand,c
 20531  004AF4  CFF3 F005          	movff	prodl,i2___wmul@product
 20532  004AF8  CFF4 F006          	movff	prodh,i2___wmul@product+1
 20533  004AFC  5001               	movf	i2___wmul@multiplier,w,c
 20534  004AFE  0204               	mulwf	i2___wmul@multiplicand+1,c
 20535  004B00  50F3               	movf	prodl,w,c
 20536  004B02  2606               	addwf	i2___wmul@product+1,f,c
 20537  004B04  5002               	movf	i2___wmul@multiplier+1,w,c
 20538  004B06  0203               	mulwf	i2___wmul@multiplicand,c
 20539  004B08  50F3               	movf	prodl,w,c
 20540  004B0A  2606               	addwf	i2___wmul@product+1,f,c
 20541  004B0C  C005  F001         	movff	i2___wmul@product,?i2___wmul
 20542  004B10  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 20543  004B14  0012               	return	
 20544  004B16                     __end_ofi2___wmul:
 20545                           	opt stack 0
 20546                           pclatu	equ	0xFFB
 20547                           pclath	equ	0xFFA
 20548                           tblptru	equ	0xFF8
 20549                           tblptrh	equ	0xFF7
 20550                           tblptrl	equ	0xFF6
 20551                           tablat	equ	0xFF5
 20552                           prodh	equ	0xFF4
 20553                           prodl	equ	0xFF3
 20554                           intcon	equ	0xFF2
 20555                           postinc0	equ	0xFEE
 20556                           fsr0h	equ	0xFEA
 20557                           fsr0l	equ	0xFE9
 20558                           wreg	equ	0xFE8
 20559                           indf1	equ	0xFE7
 20560                           postdec1	equ	0xFE5
 20561                           plusw1	equ	0xFE3
 20562                           fsr1h	equ	0xFE2
 20563                           fsr1l	equ	0xFE1
 20564                           indf2	equ	0xFDF
 20565                           postinc2	equ	0xFDE
 20566                           postdec2	equ	0xFDD
 20567                           plusw2	equ	0xFDB
 20568                           fsr2h	equ	0xFDA
 20569                           fsr2l	equ	0xFD9
 20570                           status	equ	0xFD8
 20571                           
 20572 ;; *************** function _key_trigger *****************
 20573 ;; Defined at:
 20574 ;;		line 171 in file "keyboard.c"
 20575 ;; Parameters:    Size  Location     Type
 20576 ;;		None
 20577 ;; Auto vars:     Size  Location     Type
 20578 ;;		None
 20579 ;; Return value:  Size  Location     Type
 20580 ;;                  1    wreg      unsigned char 
 20581 ;; Registers used:
 20582 ;;		wreg
 20583 ;; Tracked objects:
 20584 ;;		On entry : 0/0
 20585 ;;		On exit  : 0/0
 20586 ;;		Unchanged: 0/0
 20587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 20588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20589 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20591 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20592 ;;Total ram usage:        0 bytes
 20593 ;; Hardware stack levels used:    1
 20594 ;; This function calls:
 20595 ;;		Nothing
 20596 ;; This function is called by:
 20597 ;;		_isr
 20598 ;; This function uses a non-reentrant model
 20599 ;;
 20600                           
 20601                           	psect	text75
 20602  004BDA                     __ptext75:
 20603                           	opt stack 0
 20604  004BDA                     _key_trigger:
 20605                           	opt stack 23
 20606                           
 20607                           ;keyboard.c: 172: if (PORTCbits.RC3 || PORTCbits.RC2 || PORTCbits.RC1 || PORTCbits.RC0) 
      +                          {
 20608                           
 20609                           ;incstack = 0
 20610  004BDA  A682               	btfss	3970,3,c	;volatile
 20611  004BDC  B482               	btfsc	3970,2,c	;volatile
 20612  004BDE  D004               	goto	i2u622_40
 20613  004BE0  B282               	btfsc	3970,1,c	;volatile
 20614  004BE2  D002               	goto	i2u622_40
 20615  004BE4  A082               	btfss	3970,0,c	;volatile
 20616  004BE6  D002               	goto	i2l1018
 20617  004BE8                     i2u622_40:
 20618                           
 20619                           ;keyboard.c: 173: return 1;
 20620  004BE8  0E01               	movlw	1
 20621                           
 20622                           ;keyboard.c: 174: } else {
 20623  004BEA  0012               	return	
 20624  004BEC                     i2l1018:
 20625                           
 20626                           ;keyboard.c: 175: return 0;
 20627  004BEC  0E00               	movlw	0
 20628  004BEE  0012               	return	
 20629  004BF0                     __end_of_key_trigger:
 20630                           	opt stack 0
 20631                           pclatu	equ	0xFFB
 20632                           pclath	equ	0xFFA
 20633                           tblptru	equ	0xFF8
 20634                           tblptrh	equ	0xFF7
 20635                           tblptrl	equ	0xFF6
 20636                           tablat	equ	0xFF5
 20637                           prodh	equ	0xFF4
 20638                           prodl	equ	0xFF3
 20639                           intcon	equ	0xFF2
 20640                           postinc0	equ	0xFEE
 20641                           fsr0h	equ	0xFEA
 20642                           fsr0l	equ	0xFE9
 20643                           wreg	equ	0xFE8
 20644                           indf1	equ	0xFE7
 20645                           postdec1	equ	0xFE5
 20646                           plusw1	equ	0xFE3
 20647                           fsr1h	equ	0xFE2
 20648                           fsr1l	equ	0xFE1
 20649                           indf2	equ	0xFDF
 20650                           postinc2	equ	0xFDE
 20651                           postdec2	equ	0xFDD
 20652                           plusw2	equ	0xFDB
 20653                           fsr2h	equ	0xFDA
 20654                           fsr2l	equ	0xFD9
 20655                           status	equ	0xFD8
 20656                           
 20657 ;; *************** function _key_pressed *****************
 20658 ;; Defined at:
 20659 ;;		line 10 in file "keyboard.c"
 20660 ;; Parameters:    Size  Location     Type
 20661 ;;		None
 20662 ;; Auto vars:     Size  Location     Type
 20663 ;;  inPort          1    3[COMRAM] unsigned char 
 20664 ;;  keyRta          1    2[COMRAM] unsigned char 
 20665 ;;  colPressed      1    1[COMRAM] unsigned char 
 20666 ;;  outPort         1    0[COMRAM] unsigned char 
 20667 ;; Return value:  Size  Location     Type
 20668 ;;                  1    wreg      unsigned char 
 20669 ;; Registers used:
 20670 ;;		wreg, status,2, status,0
 20671 ;; Tracked objects:
 20672 ;;		On entry : 0/0
 20673 ;;		On exit  : 0/0
 20674 ;;		Unchanged: 0/0
 20675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 20676 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20677 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20679 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20680 ;;Total ram usage:        4 bytes
 20681 ;; Hardware stack levels used:    1
 20682 ;; This function calls:
 20683 ;;		Nothing
 20684 ;; This function is called by:
 20685 ;;		_isr
 20686 ;; This function uses a non-reentrant model
 20687 ;;
 20688                           
 20689                           	psect	text76
 20690  001DE0                     __ptext76:
 20691                           	opt stack 0
 20692  001DE0                     _key_pressed:
 20693                           	opt stack 23
 20694                           
 20695                           ;keyboard.c: 11: char keyRta = 20;
 20696                           
 20697                           ;incstack = 0
 20698  001DE0  0E14               	movlw	20
 20699  001DE2  6E03               	movwf	key_pressed@keyRta,c
 20700                           
 20701                           ;keyboard.c: 12: char inPort = 0;
 20702  001DE4  0E00               	movlw	0
 20703  001DE6  6E04               	movwf	key_pressed@inPort,c
 20704                           
 20705                           ;keyboard.c: 13: char colPressed = 0;
 20706  001DE8  0E00               	movlw	0
 20707  001DEA  6E02               	movwf	key_pressed@colPressed,c
 20708                           
 20709                           ;keyboard.c: 14: char outPort = 1;
 20710  001DEC  0E01               	movlw	1
 20711  001DEE  6E01               	movwf	key_pressed@outPort,c
 20712                           
 20713                           ;keyboard.c: 16: colPressed = PORTC & 0x0F;
 20714  001DF0  5082               	movf	3970,w,c	;volatile
 20715  001DF2  0B0F               	andlw	15
 20716  001DF4  6E02               	movwf	key_pressed@colPressed,c
 20717                           
 20718                           ;keyboard.c: 17: _delay((unsigned long)((10)*(64000000/4000000.0)));
 20719  001DF6  0E35               	movlw	53
 20720  001DF8                     i2u1199_47:
 20721  001DF8  2EE8               	decfsz	wreg,f,c
 20722  001DFA  D7FE               	bra	i2u1199_47
 20723  001DFC  F000               	nop	
 20724                           
 20725                           ;keyboard.c: 18: LATDbits.LATD3 = 0;
 20726  001DFE  968C               	bcf	3980,3,c	;volatile
 20727                           
 20728                           ;keyboard.c: 19: LATDbits.LATD2 = 0;
 20729  001E00  948C               	bcf	3980,2,c	;volatile
 20730                           
 20731                           ;keyboard.c: 20: LATDbits.LATD1 = 0;
 20732  001E02  928C               	bcf	3980,1,c	;volatile
 20733                           
 20734                           ;keyboard.c: 21: LATDbits.LATD0 = 0;
 20735  001E04  908C               	bcf	3980,0,c	;volatile
 20736                           
 20737                           ;keyboard.c: 22: _delay((unsigned long)((10)*(64000000/4000000.0)));
 20738  001E06  0E35               	movlw	53
 20739  001E08                     i2u1200_47:
 20740  001E08  2EE8               	decfsz	wreg,f,c
 20741  001E0A  D7FE               	bra	i2u1200_47
 20742  001E0C  F000               	nop	
 20743                           
 20744                           ;keyboard.c: 23: switch (colPressed) {
 20745  001E0E  D161               	goto	i2l993
 20746  001E10                     
 20747                           ;keyboard.c: 25: LATD = LATD & 0xF0;
 20748  001E10  508C               	movf	3980,w,c	;volatile
 20749  001E12  0BF0               	andlw	240
 20750  001E14  6E8C               	movwf	3980,c	;volatile
 20751                           
 20752                           ;keyboard.c: 26: _delay((unsigned long)((10)*(64000000/4000000.0)));
 20753  001E16  0E35               	movlw	53
 20754  001E18                     i2u1201_47:
 20755  001E18  2EE8               	decfsz	wreg,f,c
 20756  001E1A  D7FE               	bra	i2u1201_47
 20757  001E1C  F000               	nop	
 20758                           
 20759                           ;keyboard.c: 27: LATD = LATD | 0x01;
 20760  001E1E  508C               	movf	3980,w,c	;volatile
 20761  001E20  0901               	iorlw	1
 20762  001E22  6E8C               	movwf	3980,c	;volatile
 20763                           
 20764                           ;keyboard.c: 28: _delay((unsigned long)((10)*(64000000/4000000.0)));
 20765  001E24  0E35               	movlw	53
 20766  001E26                     i2u1202_47:
 20767  001E26  2EE8               	decfsz	wreg,f,c
 20768  001E28  D7FE               	bra	i2u1202_47
 20769  001E2A  F000               	nop	
 20770                           
 20771                           ;keyboard.c: 29: inPort = PORTC & 0x0F;
 20772  001E2C  5082               	movf	3970,w,c	;volatile
 20773  001E2E  0B0F               	andlw	15
 20774  001E30  6E04               	movwf	key_pressed@inPort,c
 20775                           
 20776                           ;keyboard.c: 30: if (inPort) {
 20777  001E32  5004               	movf	key_pressed@inPort,w,c
 20778  001E34  B4D8               	btfsc	status,2,c
 20779  001E36  D002               	goto	i2l995
 20780                           
 20781                           ;keyboard.c: 31: keyRta = 'D';
 20782  001E38  0E44               	movlw	68
 20783  001E3A  6E03               	movwf	key_pressed@keyRta,c
 20784  001E3C                     i2l995:
 20785                           
 20786                           ;keyboard.c: 32: }
 20787                           ;keyboard.c: 33: LATD = LATD & 0xF0;
 20788  001E3C  508C               	movf	3980,w,c	;volatile
 20789  001E3E  0BF0               	andlw	240
 20790  001E40  6E8C               	movwf	3980,c	;volatile
 20791                           
 20792                           ;keyboard.c: 34: _delay((unsigned long)((10)*(64000000/4000000.0)));
 20793  001E42  0E35               	movlw	53
 20794  001E44                     i2u1203_47:
 20795  001E44  2EE8               	decfsz	wreg,f,c
 20796  001E46  D7FE               	bra	i2u1203_47
 20797  001E48  F000               	nop	
 20798                           
 20799                           ;keyboard.c: 35: LATD = LATD | 0x02;
 20800  001E4A  508C               	movf	3980,w,c	;volatile
 20801  001E4C  0902               	iorlw	2
 20802  001E4E  6E8C               	movwf	3980,c	;volatile
 20803                           
 20804                           ;keyboard.c: 36: _delay((unsigned long)((10)*(64000000/4000000.0)));
 20805  001E50  0E35               	movlw	53
 20806  001E52                     i2u1204_47:
 20807  001E52  2EE8               	decfsz	wreg,f,c
 20808  001E54  D7FE               	bra	i2u1204_47
 20809  001E56  F000               	nop	
 20810                           
 20811                           ;keyboard.c: 37: inPort = PORTC & 0x0F;
 20812  001E58  5082               	movf	3970,w,c	;volatile
 20813  001E5A  0B0F               	andlw	15
 20814  001E5C  6E04               	movwf	key_pressed@inPort,c
 20815                           
 20816                           ;keyboard.c: 38: if (inPort) {
 20817  001E5E  5004               	movf	key_pressed@inPort,w,c
 20818  001E60  B4D8               	btfsc	status,2,c
 20819  001E62  D002               	goto	i2l996
 20820                           
 20821                           ;keyboard.c: 39: keyRta = 'C';
 20822  001E64  0E43               	movlw	67
 20823  001E66  6E03               	movwf	key_pressed@keyRta,c
 20824  001E68                     i2l996:
 20825                           
 20826                           ;keyboard.c: 40: }
 20827                           ;keyboard.c: 41: LATD = LATD & 0xF0;
 20828  001E68  508C               	movf	3980,w,c	;volatile
 20829  001E6A  0BF0               	andlw	240
 20830  001E6C  6E8C               	movwf	3980,c	;volatile
 20831                           
 20832                           ;keyboard.c: 42: _delay((unsigned long)((10)*(64000000/4000000.0)));
 20833  001E6E  0E35               	movlw	53
 20834  001E70                     i2u1205_47:
 20835  001E70  2EE8               	decfsz	wreg,f,c
 20836  001E72  D7FE               	bra	i2u1205_47
 20837  001E74  F000               	nop	
 20838                           
 20839                           ;keyboard.c: 43: LATD = LATD | 0x04;
 20840  001E76  508C               	movf	3980,w,c	;volatile
 20841  001E78  0904               	iorlw	4
 20842  001E7A  6E8C               	movwf	3980,c	;volatile
 20843                           
 20844                           ;keyboard.c: 44: _delay((unsigned long)((10)*(64000000/4000000.0)));
 20845  001E7C  0E35               	movlw	53
 20846  001E7E                     i2u1206_47:
 20847  001E7E  2EE8               	decfsz	wreg,f,c
 20848  001E80  D7FE               	bra	i2u1206_47
 20849  001E82  F000               	nop	
 20850                           
 20851                           ;keyboard.c: 45: inPort = PORTC & 0x0F;
 20852  001E84  5082               	movf	3970,w,c	;volatile
 20853  001E86  0B0F               	andlw	15
 20854  001E88  6E04               	movwf	key_pressed@inPort,c
 20855                           
 20856                           ;keyboard.c: 46: if (inPort) {
 20857  001E8A  5004               	movf	key_pressed@inPort,w,c
 20858  001E8C  B4D8               	btfsc	status,2,c
 20859  001E8E  D002               	goto	i2l997
 20860                           
 20861                           ;keyboard.c: 47: keyRta = 'B';
 20862  001E90  0E42               	movlw	66
 20863  001E92  6E03               	movwf	key_pressed@keyRta,c
 20864  001E94                     i2l997:
 20865                           
 20866                           ;keyboard.c: 48: }
 20867                           ;keyboard.c: 49: LATD = LATD & 0xF0;
 20868  001E94  508C               	movf	3980,w,c	;volatile
 20869  001E96  0BF0               	andlw	240
 20870  001E98  6E8C               	movwf	3980,c	;volatile
 20871                           
 20872                           ;keyboard.c: 50: _delay((unsigned long)((10)*(64000000/4000000.0)));
 20873  001E9A  0E35               	movlw	53
 20874  001E9C                     i2u1207_47:
 20875  001E9C  2EE8               	decfsz	wreg,f,c
 20876  001E9E  D7FE               	bra	i2u1207_47
 20877  001EA0  F000               	nop	
 20878                           
 20879                           ;keyboard.c: 51: LATD = LATD | 0x08;
 20880  001EA2  508C               	movf	3980,w,c	;volatile
 20881  001EA4  0908               	iorlw	8
 20882  001EA6  6E8C               	movwf	3980,c	;volatile
 20883                           
 20884                           ;keyboard.c: 52: _delay((unsigned long)((10)*(64000000/4000000.0)));
 20885  001EA8  0E35               	movlw	53
 20886  001EAA                     i2u1208_47:
 20887  001EAA  2EE8               	decfsz	wreg,f,c
 20888  001EAC  D7FE               	bra	i2u1208_47
 20889  001EAE  F000               	nop	
 20890                           
 20891                           ;keyboard.c: 53: inPort = PORTC & 0x0F;
 20892  001EB0  5082               	movf	3970,w,c	;volatile
 20893  001EB2  0B0F               	andlw	15
 20894  001EB4  6E04               	movwf	key_pressed@inPort,c
 20895                           
 20896                           ;keyboard.c: 54: if (inPort) {
 20897  001EB6  5004               	movf	key_pressed@inPort,w,c
 20898  001EB8  B4D8               	btfsc	status,2,c
 20899  001EBA  D118               	goto	i2l999
 20900                           
 20901                           ;keyboard.c: 55: keyRta = 'A';
 20902  001EBC  0E41               	movlw	65
 20903  001EBE  D107               	goto	L24
 20904  001EC0                     
 20905                           ;keyboard.c: 59: LATD = LATD & 0xF0;
 20906  001EC0  508C               	movf	3980,w,c	;volatile
 20907  001EC2  0BF0               	andlw	240
 20908  001EC4  6E8C               	movwf	3980,c	;volatile
 20909                           
 20910                           ;keyboard.c: 60: _delay((unsigned long)((10)*(64000000/4000000.0)));
 20911  001EC6  0E35               	movlw	53
 20912  001EC8                     i2u1209_47:
 20913  001EC8  2EE8               	decfsz	wreg,f,c
 20914  001ECA  D7FE               	bra	i2u1209_47
 20915  001ECC  F000               	nop	
 20916                           
 20917                           ;keyboard.c: 61: LATD = LATD | 0x01;
 20918  001ECE  508C               	movf	3980,w,c	;volatile
 20919  001ED0  0901               	iorlw	1
 20920  001ED2  6E8C               	movwf	3980,c	;volatile
 20921                           
 20922                           ;keyboard.c: 62: _delay((unsigned long)((10)*(64000000/4000000.0)));
 20923  001ED4  0E35               	movlw	53
 20924  001ED6                     i2u1210_47:
 20925  001ED6  2EE8               	decfsz	wreg,f,c
 20926  001ED8  D7FE               	bra	i2u1210_47
 20927  001EDA  F000               	nop	
 20928                           
 20929                           ;keyboard.c: 63: inPort = PORTC & 0x0F;
 20930  001EDC  5082               	movf	3970,w,c	;volatile
 20931  001EDE  0B0F               	andlw	15
 20932  001EE0  6E04               	movwf	key_pressed@inPort,c
 20933                           
 20934                           ;keyboard.c: 64: if (inPort) {
 20935  001EE2  5004               	movf	key_pressed@inPort,w,c
 20936  001EE4  B4D8               	btfsc	status,2,c
 20937  001EE6  D002               	goto	i2l1001
 20938                           
 20939                           ;keyboard.c: 65: keyRta = '#';
 20940  001EE8  0E23               	movlw	35
 20941  001EEA  6E03               	movwf	key_pressed@keyRta,c
 20942  001EEC                     i2l1001:
 20943                           
 20944                           ;keyboard.c: 66: }
 20945                           ;keyboard.c: 67: LATD = LATD & 0xF0;
 20946  001EEC  508C               	movf	3980,w,c	;volatile
 20947  001EEE  0BF0               	andlw	240
 20948  001EF0  6E8C               	movwf	3980,c	;volatile
 20949                           
 20950                           ;keyboard.c: 68: _delay((unsigned long)((10)*(64000000/4000000.0)));
 20951  001EF2  0E35               	movlw	53
 20952  001EF4                     i2u1211_47:
 20953  001EF4  2EE8               	decfsz	wreg,f,c
 20954  001EF6  D7FE               	bra	i2u1211_47
 20955  001EF8  F000               	nop	
 20956                           
 20957                           ;keyboard.c: 69: LATD = LATD | 0x02;
 20958  001EFA  508C               	movf	3980,w,c	;volatile
 20959  001EFC  0902               	iorlw	2
 20960  001EFE  6E8C               	movwf	3980,c	;volatile
 20961                           
 20962                           ;keyboard.c: 70: _delay((unsigned long)((10)*(64000000/4000000.0)));
 20963  001F00  0E35               	movlw	53
 20964  001F02                     i2u1212_47:
 20965  001F02  2EE8               	decfsz	wreg,f,c
 20966  001F04  D7FE               	bra	i2u1212_47
 20967  001F06  F000               	nop	
 20968                           
 20969                           ;keyboard.c: 71: inPort = PORTC & 0x0F;
 20970  001F08  5082               	movf	3970,w,c	;volatile
 20971  001F0A  0B0F               	andlw	15
 20972  001F0C  6E04               	movwf	key_pressed@inPort,c
 20973                           
 20974                           ;keyboard.c: 72: if (inPort) {
 20975  001F0E  5004               	movf	key_pressed@inPort,w,c
 20976  001F10  B4D8               	btfsc	status,2,c
 20977  001F12  D002               	goto	i2l1002
 20978                           
 20979                           ;keyboard.c: 73: keyRta = '9';
 20980  001F14  0E39               	movlw	57
 20981  001F16  6E03               	movwf	key_pressed@keyRta,c
 20982  001F18                     i2l1002:
 20983                           
 20984                           ;keyboard.c: 74: }
 20985                           ;keyboard.c: 75: LATD = LATD & 0xF0;
 20986  001F18  508C               	movf	3980,w,c	;volatile
 20987  001F1A  0BF0               	andlw	240
 20988  001F1C  6E8C               	movwf	3980,c	;volatile
 20989                           
 20990                           ;keyboard.c: 76: _delay((unsigned long)((10)*(64000000/4000000.0)));
 20991  001F1E  0E35               	movlw	53
 20992  001F20                     i2u1213_47:
 20993  001F20  2EE8               	decfsz	wreg,f,c
 20994  001F22  D7FE               	bra	i2u1213_47
 20995  001F24  F000               	nop	
 20996                           
 20997                           ;keyboard.c: 77: LATD = LATD | 0x04;
 20998  001F26  508C               	movf	3980,w,c	;volatile
 20999  001F28  0904               	iorlw	4
 21000  001F2A  6E8C               	movwf	3980,c	;volatile
 21001                           
 21002                           ;keyboard.c: 78: _delay((unsigned long)((10)*(64000000/4000000.0)));
 21003  001F2C  0E35               	movlw	53
 21004  001F2E                     i2u1214_47:
 21005  001F2E  2EE8               	decfsz	wreg,f,c
 21006  001F30  D7FE               	bra	i2u1214_47
 21007  001F32  F000               	nop	
 21008                           
 21009                           ;keyboard.c: 79: inPort = PORTC & 0x0F;
 21010  001F34  5082               	movf	3970,w,c	;volatile
 21011  001F36  0B0F               	andlw	15
 21012  001F38  6E04               	movwf	key_pressed@inPort,c
 21013                           
 21014                           ;keyboard.c: 80: if (inPort) {
 21015  001F3A  5004               	movf	key_pressed@inPort,w,c
 21016  001F3C  B4D8               	btfsc	status,2,c
 21017  001F3E  D002               	goto	i2l1003
 21018                           
 21019                           ;keyboard.c: 81: keyRta = '6';
 21020  001F40  0E36               	movlw	54
 21021  001F42  6E03               	movwf	key_pressed@keyRta,c
 21022  001F44                     i2l1003:
 21023                           
 21024                           ;keyboard.c: 82: }
 21025                           ;keyboard.c: 83: LATD = LATD & 0xF0;
 21026  001F44  508C               	movf	3980,w,c	;volatile
 21027  001F46  0BF0               	andlw	240
 21028  001F48  6E8C               	movwf	3980,c	;volatile
 21029                           
 21030                           ;keyboard.c: 84: _delay((unsigned long)((10)*(64000000/4000000.0)));
 21031  001F4A  0E35               	movlw	53
 21032  001F4C                     i2u1215_47:
 21033  001F4C  2EE8               	decfsz	wreg,f,c
 21034  001F4E  D7FE               	bra	i2u1215_47
 21035  001F50  F000               	nop	
 21036                           
 21037                           ;keyboard.c: 85: LATD = LATD | 0x08;
 21038  001F52  508C               	movf	3980,w,c	;volatile
 21039  001F54  0908               	iorlw	8
 21040  001F56  6E8C               	movwf	3980,c	;volatile
 21041                           
 21042                           ;keyboard.c: 86: _delay((unsigned long)((10)*(64000000/4000000.0)));
 21043  001F58  0E35               	movlw	53
 21044  001F5A                     i2u1216_47:
 21045  001F5A  2EE8               	decfsz	wreg,f,c
 21046  001F5C  D7FE               	bra	i2u1216_47
 21047  001F5E  F000               	nop	
 21048                           
 21049                           ;keyboard.c: 87: inPort = PORTC & 0x0F;
 21050  001F60  5082               	movf	3970,w,c	;volatile
 21051  001F62  0B0F               	andlw	15
 21052  001F64  6E04               	movwf	key_pressed@inPort,c
 21053                           
 21054                           ;keyboard.c: 88: if (inPort) {
 21055  001F66  5004               	movf	key_pressed@inPort,w,c
 21056  001F68  B4D8               	btfsc	status,2,c
 21057  001F6A  D0C0               	goto	i2l999
 21058                           
 21059                           ;keyboard.c: 89: keyRta = '3';
 21060  001F6C  0E33               	movlw	51
 21061  001F6E  D0AF               	goto	L24
 21062  001F70                     
 21063                           ;keyboard.c: 93: LATD = LATD & 0xF0;
 21064  001F70  508C               	movf	3980,w,c	;volatile
 21065  001F72  0BF0               	andlw	240
 21066  001F74  6E8C               	movwf	3980,c	;volatile
 21067                           
 21068                           ;keyboard.c: 94: _delay((unsigned long)((10)*(64000000/4000000.0)));
 21069  001F76  0E35               	movlw	53
 21070  001F78                     i2u1217_47:
 21071  001F78  2EE8               	decfsz	wreg,f,c
 21072  001F7A  D7FE               	bra	i2u1217_47
 21073  001F7C  F000               	nop	
 21074                           
 21075                           ;keyboard.c: 95: LATD = LATD | 0x01;
 21076  001F7E  508C               	movf	3980,w,c	;volatile
 21077  001F80  0901               	iorlw	1
 21078  001F82  6E8C               	movwf	3980,c	;volatile
 21079                           
 21080                           ;keyboard.c: 96: _delay((unsigned long)((10)*(64000000/4000000.0)));
 21081  001F84  0E35               	movlw	53
 21082  001F86                     i2u1218_47:
 21083  001F86  2EE8               	decfsz	wreg,f,c
 21084  001F88  D7FE               	bra	i2u1218_47
 21085  001F8A  F000               	nop	
 21086                           
 21087                           ;keyboard.c: 97: inPort = PORTC & 0x0F;
 21088  001F8C  5082               	movf	3970,w,c	;volatile
 21089  001F8E  0B0F               	andlw	15
 21090  001F90  6E04               	movwf	key_pressed@inPort,c
 21091                           
 21092                           ;keyboard.c: 98: if (inPort) {
 21093  001F92  5004               	movf	key_pressed@inPort,w,c
 21094  001F94  B4D8               	btfsc	status,2,c
 21095  001F96  D002               	goto	i2l1006
 21096                           
 21097                           ;keyboard.c: 99: keyRta = '0';
 21098  001F98  0E30               	movlw	48
 21099  001F9A  6E03               	movwf	key_pressed@keyRta,c
 21100  001F9C                     i2l1006:
 21101                           
 21102                           ;keyboard.c: 100: }
 21103                           ;keyboard.c: 101: LATD = LATD & 0xF0;
 21104  001F9C  508C               	movf	3980,w,c	;volatile
 21105  001F9E  0BF0               	andlw	240
 21106  001FA0  6E8C               	movwf	3980,c	;volatile
 21107                           
 21108                           ;keyboard.c: 102: _delay((unsigned long)((10)*(64000000/4000000.0)));
 21109  001FA2  0E35               	movlw	53
 21110  001FA4                     i2u1219_47:
 21111  001FA4  2EE8               	decfsz	wreg,f,c
 21112  001FA6  D7FE               	bra	i2u1219_47
 21113  001FA8  F000               	nop	
 21114                           
 21115                           ;keyboard.c: 103: LATD = LATD | 0x02;
 21116  001FAA  508C               	movf	3980,w,c	;volatile
 21117  001FAC  0902               	iorlw	2
 21118  001FAE  6E8C               	movwf	3980,c	;volatile
 21119                           
 21120                           ;keyboard.c: 104: _delay((unsigned long)((10)*(64000000/4000000.0)));
 21121  001FB0  0E35               	movlw	53
 21122  001FB2                     i2u1220_47:
 21123  001FB2  2EE8               	decfsz	wreg,f,c
 21124  001FB4  D7FE               	bra	i2u1220_47
 21125  001FB6  F000               	nop	
 21126                           
 21127                           ;keyboard.c: 105: inPort = PORTC & 0x0F;
 21128  001FB8  5082               	movf	3970,w,c	;volatile
 21129  001FBA  0B0F               	andlw	15
 21130  001FBC  6E04               	movwf	key_pressed@inPort,c
 21131                           
 21132                           ;keyboard.c: 106: if (inPort) {
 21133  001FBE  5004               	movf	key_pressed@inPort,w,c
 21134  001FC0  B4D8               	btfsc	status,2,c
 21135  001FC2  D002               	goto	i2l1007
 21136                           
 21137                           ;keyboard.c: 107: keyRta = '8';
 21138  001FC4  0E38               	movlw	56
 21139  001FC6  6E03               	movwf	key_pressed@keyRta,c
 21140  001FC8                     i2l1007:
 21141                           
 21142                           ;keyboard.c: 108: }
 21143                           ;keyboard.c: 109: LATD = LATD & 0xF0;
 21144  001FC8  508C               	movf	3980,w,c	;volatile
 21145  001FCA  0BF0               	andlw	240
 21146  001FCC  6E8C               	movwf	3980,c	;volatile
 21147                           
 21148                           ;keyboard.c: 110: _delay((unsigned long)((10)*(64000000/4000000.0)));
 21149  001FCE  0E35               	movlw	53
 21150  001FD0                     i2u1221_47:
 21151  001FD0  2EE8               	decfsz	wreg,f,c
 21152  001FD2  D7FE               	bra	i2u1221_47
 21153  001FD4  F000               	nop	
 21154                           
 21155                           ;keyboard.c: 111: LATD = LATD | 0x04;
 21156  001FD6  508C               	movf	3980,w,c	;volatile
 21157  001FD8  0904               	iorlw	4
 21158  001FDA  6E8C               	movwf	3980,c	;volatile
 21159                           
 21160                           ;keyboard.c: 112: _delay((unsigned long)((10)*(64000000/4000000.0)));
 21161  001FDC  0E35               	movlw	53
 21162  001FDE                     i2u1222_47:
 21163  001FDE  2EE8               	decfsz	wreg,f,c
 21164  001FE0  D7FE               	bra	i2u1222_47
 21165  001FE2  F000               	nop	
 21166                           
 21167                           ;keyboard.c: 113: inPort = PORTC & 0x0F;
 21168  001FE4  5082               	movf	3970,w,c	;volatile
 21169  001FE6  0B0F               	andlw	15
 21170  001FE8  6E04               	movwf	key_pressed@inPort,c
 21171                           
 21172                           ;keyboard.c: 114: if (inPort) {
 21173  001FEA  5004               	movf	key_pressed@inPort,w,c
 21174  001FEC  B4D8               	btfsc	status,2,c
 21175  001FEE  D002               	goto	i2l1008
 21176                           
 21177                           ;keyboard.c: 115: keyRta = '5';
 21178  001FF0  0E35               	movlw	53
 21179  001FF2  6E03               	movwf	key_pressed@keyRta,c
 21180  001FF4                     i2l1008:
 21181                           
 21182                           ;keyboard.c: 116: }
 21183                           ;keyboard.c: 117: LATD = LATD & 0xF0;
 21184  001FF4  508C               	movf	3980,w,c	;volatile
 21185  001FF6  0BF0               	andlw	240
 21186  001FF8  6E8C               	movwf	3980,c	;volatile
 21187                           
 21188                           ;keyboard.c: 118: _delay((unsigned long)((10)*(64000000/4000000.0)));
 21189  001FFA  0E35               	movlw	53
 21190  001FFC                     i2u1223_47:
 21191  001FFC  2EE8               	decfsz	wreg,f,c
 21192  001FFE  D7FE               	bra	i2u1223_47
 21193  002000  F000               	nop	
 21194                           
 21195                           ;keyboard.c: 119: LATD = LATD | 0x08;
 21196  002002  508C               	movf	3980,w,c	;volatile
 21197  002004  0908               	iorlw	8
 21198  002006  6E8C               	movwf	3980,c	;volatile
 21199                           
 21200                           ;keyboard.c: 120: _delay((unsigned long)((10)*(64000000/4000000.0)));
 21201  002008  0E35               	movlw	53
 21202  00200A                     i2u1224_47:
 21203  00200A  2EE8               	decfsz	wreg,f,c
 21204  00200C  D7FE               	bra	i2u1224_47
 21205  00200E  F000               	nop	
 21206                           
 21207                           ;keyboard.c: 121: inPort = PORTC & 0x0F;
 21208  002010  5082               	movf	3970,w,c	;volatile
 21209  002012  0B0F               	andlw	15
 21210  002014  6E04               	movwf	key_pressed@inPort,c
 21211                           
 21212                           ;keyboard.c: 122: if (inPort) {
 21213  002016  5004               	movf	key_pressed@inPort,w,c
 21214  002018  B4D8               	btfsc	status,2,c
 21215  00201A  D068               	goto	i2l999
 21216                           
 21217                           ;keyboard.c: 123: keyRta = '2';
 21218  00201C  0E32               	movlw	50
 21219  00201E  D057               	goto	L24
 21220  002020                     
 21221                           ;keyboard.c: 127: LATD = LATD & 0xF0;
 21222  002020  508C               	movf	3980,w,c	;volatile
 21223  002022  0BF0               	andlw	240
 21224  002024  6E8C               	movwf	3980,c	;volatile
 21225                           
 21226                           ;keyboard.c: 128: _delay((unsigned long)((10)*(64000000/4000000.0)));
 21227  002026  0E35               	movlw	53
 21228  002028                     i2u1225_47:
 21229  002028  2EE8               	decfsz	wreg,f,c
 21230  00202A  D7FE               	bra	i2u1225_47
 21231  00202C  F000               	nop	
 21232                           
 21233                           ;keyboard.c: 129: LATD = LATD | 0x01;
 21234  00202E  508C               	movf	3980,w,c	;volatile
 21235  002030  0901               	iorlw	1
 21236  002032  6E8C               	movwf	3980,c	;volatile
 21237                           
 21238                           ;keyboard.c: 130: _delay((unsigned long)((10)*(64000000/4000000.0)));
 21239  002034  0E35               	movlw	53
 21240  002036                     i2u1226_47:
 21241  002036  2EE8               	decfsz	wreg,f,c
 21242  002038  D7FE               	bra	i2u1226_47
 21243  00203A  F000               	nop	
 21244                           
 21245                           ;keyboard.c: 131: inPort = PORTC & 0x0F;
 21246  00203C  5082               	movf	3970,w,c	;volatile
 21247  00203E  0B0F               	andlw	15
 21248  002040  6E04               	movwf	key_pressed@inPort,c
 21249                           
 21250                           ;keyboard.c: 132: if (inPort) {
 21251  002042  5004               	movf	key_pressed@inPort,w,c
 21252  002044  B4D8               	btfsc	status,2,c
 21253  002046  D002               	goto	i2l1011
 21254                           
 21255                           ;keyboard.c: 133: keyRta = '*';
 21256  002048  0E2A               	movlw	42
 21257  00204A  6E03               	movwf	key_pressed@keyRta,c
 21258  00204C                     i2l1011:
 21259                           
 21260                           ;keyboard.c: 134: }
 21261                           ;keyboard.c: 135: LATD = LATD & 0xF0;
 21262  00204C  508C               	movf	3980,w,c	;volatile
 21263  00204E  0BF0               	andlw	240
 21264  002050  6E8C               	movwf	3980,c	;volatile
 21265                           
 21266                           ;keyboard.c: 136: _delay((unsigned long)((10)*(64000000/4000000.0)));
 21267  002052  0E35               	movlw	53
 21268  002054                     i2u1227_47:
 21269  002054  2EE8               	decfsz	wreg,f,c
 21270  002056  D7FE               	bra	i2u1227_47
 21271  002058  F000               	nop	
 21272                           
 21273                           ;keyboard.c: 137: LATD = LATD | 0x02;
 21274  00205A  508C               	movf	3980,w,c	;volatile
 21275  00205C  0902               	iorlw	2
 21276  00205E  6E8C               	movwf	3980,c	;volatile
 21277                           
 21278                           ;keyboard.c: 138: _delay((unsigned long)((10)*(64000000/4000000.0)));
 21279  002060  0E35               	movlw	53
 21280  002062                     i2u1228_47:
 21281  002062  2EE8               	decfsz	wreg,f,c
 21282  002064  D7FE               	bra	i2u1228_47
 21283  002066  F000               	nop	
 21284                           
 21285                           ;keyboard.c: 139: inPort = PORTC & 0x0F;
 21286  002068  5082               	movf	3970,w,c	;volatile
 21287  00206A  0B0F               	andlw	15
 21288  00206C  6E04               	movwf	key_pressed@inPort,c
 21289                           
 21290                           ;keyboard.c: 140: if (inPort) {
 21291  00206E  5004               	movf	key_pressed@inPort,w,c
 21292  002070  B4D8               	btfsc	status,2,c
 21293  002072  D002               	goto	i2l1012
 21294                           
 21295                           ;keyboard.c: 141: keyRta = '7';
 21296  002074  0E37               	movlw	55
 21297  002076  6E03               	movwf	key_pressed@keyRta,c
 21298  002078                     i2l1012:
 21299                           
 21300                           ;keyboard.c: 142: }
 21301                           ;keyboard.c: 143: LATD = LATD & 0xF0;
 21302  002078  508C               	movf	3980,w,c	;volatile
 21303  00207A  0BF0               	andlw	240
 21304  00207C  6E8C               	movwf	3980,c	;volatile
 21305                           
 21306                           ;keyboard.c: 144: _delay((unsigned long)((10)*(64000000/4000000.0)));
 21307  00207E  0E35               	movlw	53
 21308  002080                     i2u1229_47:
 21309  002080  2EE8               	decfsz	wreg,f,c
 21310  002082  D7FE               	bra	i2u1229_47
 21311  002084  F000               	nop	
 21312                           
 21313                           ;keyboard.c: 145: LATD = LATD | 0x04;
 21314  002086  508C               	movf	3980,w,c	;volatile
 21315  002088  0904               	iorlw	4
 21316  00208A  6E8C               	movwf	3980,c	;volatile
 21317                           
 21318                           ;keyboard.c: 146: _delay((unsigned long)((10)*(64000000/4000000.0)));
 21319  00208C  0E35               	movlw	53
 21320  00208E                     i2u1230_47:
 21321  00208E  2EE8               	decfsz	wreg,f,c
 21322  002090  D7FE               	bra	i2u1230_47
 21323  002092  F000               	nop	
 21324                           
 21325                           ;keyboard.c: 147: inPort = PORTC & 0x0F;
 21326  002094  5082               	movf	3970,w,c	;volatile
 21327  002096  0B0F               	andlw	15
 21328  002098  6E04               	movwf	key_pressed@inPort,c
 21329                           
 21330                           ;keyboard.c: 148: if (inPort) {
 21331  00209A  5004               	movf	key_pressed@inPort,w,c
 21332  00209C  B4D8               	btfsc	status,2,c
 21333  00209E  D002               	goto	i2l1013
 21334                           
 21335                           ;keyboard.c: 149: keyRta = '4';
 21336  0020A0  0E34               	movlw	52
 21337  0020A2  6E03               	movwf	key_pressed@keyRta,c
 21338  0020A4                     i2l1013:
 21339                           
 21340                           ;keyboard.c: 150: }
 21341                           ;keyboard.c: 151: LATD = LATD & 0xF0;
 21342  0020A4  508C               	movf	3980,w,c	;volatile
 21343  0020A6  0BF0               	andlw	240
 21344  0020A8  6E8C               	movwf	3980,c	;volatile
 21345                           
 21346                           ;keyboard.c: 152: _delay((unsigned long)((10)*(64000000/4000000.0)));
 21347  0020AA  0E35               	movlw	53
 21348  0020AC                     i2u1231_47:
 21349  0020AC  2EE8               	decfsz	wreg,f,c
 21350  0020AE  D7FE               	bra	i2u1231_47
 21351  0020B0  F000               	nop	
 21352                           
 21353                           ;keyboard.c: 153: LATD = LATD | 0x08;
 21354  0020B2  508C               	movf	3980,w,c	;volatile
 21355  0020B4  0908               	iorlw	8
 21356  0020B6  6E8C               	movwf	3980,c	;volatile
 21357                           
 21358                           ;keyboard.c: 154: _delay((unsigned long)((10)*(64000000/4000000.0)));
 21359  0020B8  0E35               	movlw	53
 21360  0020BA                     i2u1232_47:
 21361  0020BA  2EE8               	decfsz	wreg,f,c
 21362  0020BC  D7FE               	bra	i2u1232_47
 21363  0020BE  F000               	nop	
 21364                           
 21365                           ;keyboard.c: 155: inPort = PORTC & 0x0F;
 21366  0020C0  5082               	movf	3970,w,c	;volatile
 21367  0020C2  0B0F               	andlw	15
 21368  0020C4  6E04               	movwf	key_pressed@inPort,c
 21369                           
 21370                           ;keyboard.c: 156: if (inPort) {
 21371  0020C6  5004               	movf	key_pressed@inPort,w,c
 21372  0020C8  B4D8               	btfsc	status,2,c
 21373  0020CA  D010               	goto	i2l999
 21374                           
 21375                           ;keyboard.c: 157: keyRta = '1';
 21376  0020CC  0E31               	movlw	49
 21377  0020CE                     L24:
 21378  0020CE  6E03               	movwf	key_pressed@keyRta,c
 21379                           
 21380                           ;keyboard.c: 160: }
 21381                           
 21382                           ;keyboard.c: 158: }
 21383                           ;keyboard.c: 159: break;
 21384  0020D0  D00D               	goto	i2l999
 21385  0020D2                     i2l993:
 21386  0020D2  5002               	movf	key_pressed@colPressed,w,c
 21387                           
 21388                           ; Switch size 1, requested type "space"
 21389                           ; Number of cases is 4, Range of values is 1 to 8
 21390                           ; switch strategies available:
 21391                           ; Name         Instructions Cycles
 21392                           ; simple_byte           13     7 (average)
 21393                           ;	Chosen strategy is simple_byte
 21394  0020D4  0A01               	xorlw	1	; case 1
 21395  0020D6  B4D8               	btfsc	status,2,c
 21396  0020D8  D69B               	goto	i2l994
 21397  0020DA  0A03               	xorlw	3	; case 2
 21398  0020DC  B4D8               	btfsc	status,2,c
 21399  0020DE  D6F0               	goto	i2l1000
 21400  0020E0  0A06               	xorlw	6	; case 4
 21401  0020E2  B4D8               	btfsc	status,2,c
 21402  0020E4  D745               	goto	i2l1005
 21403  0020E6  0A0C               	xorlw	12	; case 8
 21404  0020E8  B4D8               	btfsc	status,2,c
 21405  0020EA  D79A               	goto	i2l1010
 21406  0020EC                     i2l999:
 21407                           
 21408                           ;keyboard.c: 161: _delay((unsigned long)((10)*(64000000/4000000.0)));
 21409  0020EC  0E35               	movlw	53
 21410  0020EE                     i2u1233_47:
 21411  0020EE  2EE8               	decfsz	wreg,f,c
 21412  0020F0  D7FE               	bra	i2u1233_47
 21413  0020F2  F000               	nop	
 21414                           
 21415                           ;keyboard.c: 163: LATDbits.LATD3 = 1;
 21416  0020F4  868C               	bsf	3980,3,c	;volatile
 21417                           
 21418                           ;keyboard.c: 164: LATDbits.LATD2 = 1;
 21419  0020F6  848C               	bsf	3980,2,c	;volatile
 21420                           
 21421                           ;keyboard.c: 165: LATDbits.LATD1 = 1;
 21422  0020F8  828C               	bsf	3980,1,c	;volatile
 21423                           
 21424                           ;keyboard.c: 166: LATDbits.LATD0 = 1;
 21425  0020FA  808C               	bsf	3980,0,c	;volatile
 21426                           
 21427                           ;keyboard.c: 168: return keyRta;
 21428  0020FC  5003               	movf	key_pressed@keyRta,w,c
 21429  0020FE  0012               	return	
 21430  002100                     __end_of_key_pressed:
 21431                           	opt stack 0
 21432                           pclatu	equ	0xFFB
 21433                           pclath	equ	0xFFA
 21434                           tblptru	equ	0xFF8
 21435                           tblptrh	equ	0xFF7
 21436                           tblptrl	equ	0xFF6
 21437                           tablat	equ	0xFF5
 21438                           prodh	equ	0xFF4
 21439                           prodl	equ	0xFF3
 21440                           intcon	equ	0xFF2
 21441                           postinc0	equ	0xFEE
 21442                           fsr0h	equ	0xFEA
 21443                           fsr0l	equ	0xFE9
 21444                           wreg	equ	0xFE8
 21445                           indf1	equ	0xFE7
 21446                           postdec1	equ	0xFE5
 21447                           plusw1	equ	0xFE3
 21448                           fsr1h	equ	0xFE2
 21449                           fsr1l	equ	0xFE1
 21450                           indf2	equ	0xFDF
 21451                           postinc2	equ	0xFDE
 21452                           postdec2	equ	0xFDD
 21453                           plusw2	equ	0xFDB
 21454                           fsr2h	equ	0xFDA
 21455                           fsr2l	equ	0xFD9
 21456                           status	equ	0xFD8
 21457                           
 21458 ;; *************** function ___awdiv *****************
 21459 ;; Defined at:
 21460 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
 21461 ;; Parameters:    Size  Location     Type
 21462 ;;  dividend        2    0[COMRAM] int 
 21463 ;;  divisor         2    2[COMRAM] int 
 21464 ;; Auto vars:     Size  Location     Type
 21465 ;;  quotient        2    6[COMRAM] int 
 21466 ;;  sign            1    5[COMRAM] unsigned char 
 21467 ;;  counter         1    4[COMRAM] unsigned char 
 21468 ;; Return value:  Size  Location     Type
 21469 ;;                  2    0[COMRAM] int 
 21470 ;; Registers used:
 21471 ;;		wreg, status,2, status,0
 21472 ;; Tracked objects:
 21473 ;;		On entry : 0/0
 21474 ;;		On exit  : 0/0
 21475 ;;		Unchanged: 0/0
 21476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 21477 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21478 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21480 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21481 ;;Total ram usage:        8 bytes
 21482 ;; Hardware stack levels used:    1
 21483 ;; This function calls:
 21484 ;;		Nothing
 21485 ;; This function is called by:
 21486 ;;		_isr
 21487 ;; This function uses a non-reentrant model
 21488 ;;
 21489                           
 21490                           	psect	text77
 21491  0040C6                     __ptext77:
 21492                           	opt stack 0
 21493  0040C6                     ___awdiv:
 21494                           	opt stack 23
 21495                           
 21496                           ;incstack = 0
 21497  0040C6  0E00               	movlw	0
 21498  0040C8  6E06               	movwf	___awdiv@sign,c
 21499  0040CA  AE04               	btfss	___awdiv@divisor+1,7,c
 21500  0040CC  D006               	goto	i2l1295
 21501  0040CE  6C03               	negf	___awdiv@divisor,c
 21502  0040D0  1E04               	comf	___awdiv@divisor+1,f,c
 21503  0040D2  B0D8               	btfsc	status,0,c
 21504  0040D4  2A04               	incf	___awdiv@divisor+1,f,c
 21505  0040D6  0E01               	movlw	1
 21506  0040D8  6E06               	movwf	___awdiv@sign,c
 21507  0040DA                     i2l1295:
 21508  0040DA  AE02               	btfss	___awdiv@dividend+1,7,c
 21509  0040DC  D006               	goto	i2l1296
 21510  0040DE  6C01               	negf	___awdiv@dividend,c
 21511  0040E0  1E02               	comf	___awdiv@dividend+1,f,c
 21512  0040E2  B0D8               	btfsc	status,0,c
 21513  0040E4  2A02               	incf	___awdiv@dividend+1,f,c
 21514  0040E6  0E01               	movlw	1
 21515  0040E8  1A06               	xorwf	___awdiv@sign,f,c
 21516  0040EA                     i2l1296:
 21517  0040EA  0E00               	movlw	0
 21518  0040EC  6E08               	movwf	___awdiv@quotient+1,c
 21519  0040EE  0E00               	movlw	0
 21520  0040F0  6E07               	movwf	___awdiv@quotient,c
 21521  0040F2  5003               	movf	___awdiv@divisor,w,c
 21522  0040F4  1004               	iorwf	___awdiv@divisor+1,w,c
 21523  0040F6  B4D8               	btfsc	status,2,c
 21524  0040F8  D01C               	goto	i2l1303
 21525  0040FA  0E01               	movlw	1
 21526  0040FC  6E05               	movwf	___awdiv@counter,c
 21527  0040FE  D004               	goto	i2l1298
 21528  004100  90D8               	bcf	status,0,c
 21529  004102  3603               	rlcf	___awdiv@divisor,f,c
 21530  004104  3604               	rlcf	___awdiv@divisor+1,f,c
 21531  004106  2A05               	incf	___awdiv@counter,f,c
 21532  004108                     i2l1298:
 21533  004108  AE04               	btfss	___awdiv@divisor+1,7,c
 21534  00410A  D7FA               	goto	i2l1299
 21535  00410C                     i2u729_40:
 21536  00410C  90D8               	bcf	status,0,c
 21537  00410E  3607               	rlcf	___awdiv@quotient,f,c
 21538  004110  3608               	rlcf	___awdiv@quotient+1,f,c
 21539  004112  5003               	movf	___awdiv@divisor,w,c
 21540  004114  5C01               	subwf	___awdiv@dividend,w,c
 21541  004116  5004               	movf	___awdiv@divisor+1,w,c
 21542  004118  5802               	subwfb	___awdiv@dividend+1,w,c
 21543  00411A  A0D8               	btfss	status,0,c
 21544  00411C  D005               	goto	i2l1302
 21545  00411E  5003               	movf	___awdiv@divisor,w,c
 21546  004120  5E01               	subwf	___awdiv@dividend,f,c
 21547  004122  5004               	movf	___awdiv@divisor+1,w,c
 21548  004124  5A02               	subwfb	___awdiv@dividend+1,f,c
 21549  004126  8007               	bsf	___awdiv@quotient,0,c
 21550  004128                     i2l1302:
 21551  004128  90D8               	bcf	status,0,c
 21552  00412A  3204               	rrcf	___awdiv@divisor+1,f,c
 21553  00412C  3203               	rrcf	___awdiv@divisor,f,c
 21554  00412E  2E05               	decfsz	___awdiv@counter,f,c
 21555  004130  D7ED               	goto	i2u729_40
 21556  004132                     i2l1303:
 21557  004132  5006               	movf	___awdiv@sign,w,c
 21558  004134  B4D8               	btfsc	status,2,c
 21559  004136  D004               	goto	i2l1304
 21560  004138  6C07               	negf	___awdiv@quotient,c
 21561  00413A  1E08               	comf	___awdiv@quotient+1,f,c
 21562  00413C  B0D8               	btfsc	status,0,c
 21563  00413E  2A08               	incf	___awdiv@quotient+1,f,c
 21564  004140                     i2l1304:
 21565  004140  C007  F001         	movff	___awdiv@quotient,?___awdiv
 21566  004144  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
 21567  004148  0012               	return	
 21568  00414A                     __end_of___awdiv:
 21569                           	opt stack 0
 21570                           pclatu	equ	0xFFB
 21571                           pclath	equ	0xFFA
 21572                           tblptru	equ	0xFF8
 21573                           tblptrh	equ	0xFF7
 21574                           tblptrl	equ	0xFF6
 21575                           tablat	equ	0xFF5
 21576                           prodh	equ	0xFF4
 21577                           prodl	equ	0xFF3
 21578                           intcon	equ	0xFF2
 21579                           postinc0	equ	0xFEE
 21580                           fsr0h	equ	0xFEA
 21581                           fsr0l	equ	0xFE9
 21582                           wreg	equ	0xFE8
 21583                           indf1	equ	0xFE7
 21584                           postdec1	equ	0xFE5
 21585                           plusw1	equ	0xFE3
 21586                           fsr1h	equ	0xFE2
 21587                           fsr1l	equ	0xFE1
 21588                           indf2	equ	0xFDF
 21589                           postinc2	equ	0xFDE
 21590                           postdec2	equ	0xFDD
 21591                           plusw2	equ	0xFDB
 21592                           fsr2h	equ	0xFDA
 21593                           fsr2l	equ	0xFD9
 21594                           status	equ	0xFD8
 21595                           pclatu	equ	0xFFB
 21596                           pclath	equ	0xFFA
 21597                           tblptru	equ	0xFF8
 21598                           tblptrh	equ	0xFF7
 21599                           tblptrl	equ	0xFF6
 21600                           tablat	equ	0xFF5
 21601                           prodh	equ	0xFF4
 21602                           prodl	equ	0xFF3
 21603                           intcon	equ	0xFF2
 21604                           postinc0	equ	0xFEE
 21605                           fsr0h	equ	0xFEA
 21606                           fsr0l	equ	0xFE9
 21607                           wreg	equ	0xFE8
 21608                           indf1	equ	0xFE7
 21609                           postdec1	equ	0xFE5
 21610                           plusw1	equ	0xFE3
 21611                           fsr1h	equ	0xFE2
 21612                           fsr1l	equ	0xFE1
 21613                           indf2	equ	0xFDF
 21614                           postinc2	equ	0xFDE
 21615                           postdec2	equ	0xFDD
 21616                           plusw2	equ	0xFDB
 21617                           fsr2h	equ	0xFDA
 21618                           fsr2l	equ	0xFD9
 21619                           status	equ	0xFD8
 21620                           
 21621                           	psect	rparam
 21622  0000                     pclatu	equ	0xFFB
 21623                           pclath	equ	0xFFA
 21624                           tblptru	equ	0xFF8
 21625                           tblptrh	equ	0xFF7
 21626                           tblptrl	equ	0xFF6
 21627                           tablat	equ	0xFF5
 21628                           prodh	equ	0xFF4
 21629                           prodl	equ	0xFF3
 21630                           intcon	equ	0xFF2
 21631                           postinc0	equ	0xFEE
 21632                           fsr0h	equ	0xFEA
 21633                           fsr0l	equ	0xFE9
 21634                           wreg	equ	0xFE8
 21635                           indf1	equ	0xFE7
 21636                           postdec1	equ	0xFE5
 21637                           plusw1	equ	0xFE3
 21638                           fsr1h	equ	0xFE2
 21639                           fsr1l	equ	0xFE1
 21640                           indf2	equ	0xFDF
 21641                           postinc2	equ	0xFDE
 21642                           postdec2	equ	0xFDD
 21643                           plusw2	equ	0xFDB
 21644                           fsr2h	equ	0xFDA
 21645                           fsr2l	equ	0xFD9
 21646                           status	equ	0xFD8
 21647                           
 21648                           	psect	temp
 21649  00005F                     btemp:
 21650                           	opt stack 0
 21651  00005F                     	ds	1
 21652  0000                     int$flags	set	btemp
 21653  0000                     wtemp6	set	btemp+1
 21654                           pclatu	equ	0xFFB
 21655                           pclath	equ	0xFFA
 21656                           tblptru	equ	0xFF8
 21657                           tblptrh	equ	0xFF7
 21658                           tblptrl	equ	0xFF6
 21659                           tablat	equ	0xFF5
 21660                           prodh	equ	0xFF4
 21661                           prodl	equ	0xFF3
 21662                           intcon	equ	0xFF2
 21663                           postinc0	equ	0xFEE
 21664                           fsr0h	equ	0xFEA
 21665                           fsr0l	equ	0xFE9
 21666                           wreg	equ	0xFE8
 21667                           indf1	equ	0xFE7
 21668                           postdec1	equ	0xFE5
 21669                           plusw1	equ	0xFE3
 21670                           fsr1h	equ	0xFE2
 21671                           fsr1l	equ	0xFE1
 21672                           indf2	equ	0xFDF
 21673                           postinc2	equ	0xFDE
 21674                           postdec2	equ	0xFDD
 21675                           plusw2	equ	0xFDB
 21676                           fsr2h	equ	0xFDA
 21677                           fsr2l	equ	0xFD9
 21678                           status	equ	0xFD8


Data Sizes:
    Strings     84
    Constant    847
    Data        1085
    BSS         109
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     89      94
    BANK0           160     58     109
    BANK1           256     18     256
    BANK2           256      0     256
    BANK3           256      0     256
    BANK4           256      0     256
    BANK5           256     41     173
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14           65      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_1(CODE[17]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 16
		 -> lcdText(BANK1[16]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 16
		 -> lcdText(BANK1[16]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_18(CODE[3]), STR_17(CODE[6]), STR_16(CODE[3]), STR_15(CODE[3]), 
		 -> STR_14(CODE[3]), STR_13(CODE[3]), STR_12(CODE[5]), STR_11(CODE[5]), 
		 -> STR_10(CODE[5]), STR_9(CODE[3]), STR_8(CODE[3]), STR_7(CODE[3]), 
		 -> STR_6(CODE[6]), STR_5(CODE[3]), STR_4(CODE[6]), STR_3(CODE[4]), 
		 -> STR_2(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK1[2]), 

    menu_next@menuText	PTR unsigned char  size(2) Largest target is 16
		 -> menu_text(BANK1[16]), 

    menu_next@menuRow	PTR unsigned char  size(2) Largest target is 1
		 -> menu_rowColor(BANK0[1]), 

    menu_next@menuShown	PTR unsigned char  size(2) Largest target is 1
		 -> menu_shown(BANK0[1]), 

    lcd_text@msjPtr	PTR unsigned char  size(2) Largest target is 16
		 -> memBuff1(BANK0[16]), msjCANCEL(BANK2[16]), msjCONFIRM(BANK2[16]), menu_6@mBlank(COMRAM[16]), 
		 -> msjCHANGE(BANK2[16]), menu_5@mBlank(COMRAM[16]), memPort(BANK4[16]), menu_45@mBlank(COMRAM[16]), 
		 -> memIp(BANK4[16]), menu_44@mBlank(COMRAM[16]), memMac(BANK4[16]), menu_43@mBlank(COMRAM[16]), 
		 -> memSubnet(BANK3[16]), menu_42@mBlank(COMRAM[16]), memGateway(BANK3[16]), menu_41@mBlank(COMRAM[16]), 
		 -> msjPORT(BANK2[16]), msjIP(BANK2[16]), msjMAC(BANK2[16]), msjSUBNETMASK(BANK2[16]), 
		 -> msjGATEWAY(BANK2[16]), msjBAUD4(BANK3[16]), msjBAUD3(BANK3[16]), msjBAUD2(BANK3[16]), 
		 -> msjBAUD1(BANK3[16]), menu_31@mBlank(COMRAM[16]), msjOFF(BANK1[16]), msjON(BANK1[16]), 
		 -> msjBAUD(BANK2[16]), menu_3@mBlank(COMRAM[16]), menu_27@mBlank(COMRAM[16]), msjVALUEINGR(BANK3[16]), 
		 -> menu_26@mBlank(COMRAM[16]), msjTAREINGR(BANK3[16]), menu_25@mBlank(COMRAM[16]), msjFILTER3(BANK3[16]), 
		 -> msjFILTER2(BANK3[16]), msjFILTER1(BANK3[16]), menu_24@mBlank(COMRAM[16]), msjWEIGHTINGR(BANK3[16]), 
		 -> menu_23@mBlank(COMRAM[16]), msjDIVISION3(BANK3[16]), msjDIVISION2(BANK3[16]), msjDIVISION1(BANK2[16]), 
		 -> msjDIVISION0(BANK2[16]), menu_22@mBlank(COMRAM[16]), msjWAIT(BANK3[16]), msjDONE(BANK3[16]), 
		 -> menu_21@mBlank(COMRAM[16]), msjRANGE(BANK1[16]), msjTHRESHOLD(BANK1[16]), msjSTEP(BANK1[16]), 
		 -> msjFILTER(BANK1[16]), msjPATTERN(BANK1[16]), msjDIVISIONS(BANK1[16]), msjZERO(BANK1[16]), 
		 -> msjFINISH(BANK2[16]), msjRESET(BANK2[16]), msjPASSWORD(BANK2[16]), msjETHERNET(BANK2[16]), 
		 -> msjSERIAL(BANK2[16]), msjCALIBRATE(BANK1[16]), menu_1@mBlank(COMRAM[16]), menu_text(BANK1[16]), 
		 -> lcdText(BANK1[16]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 16
		 -> lcdText(BANK1[16]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _isr in COMRAM

    _isr->_menu_next
    i2_printf->i2___lwmod
    i2___lwmod->i2___lwdiv
    i2_lcd_legend->i2_lcd_text
    _menu_next->_menu_navigate
    i2_lcd_set_background->i2_lcd_set_address
    _menu_navigate->_menu_21
    _menu_navigate->_menu_22
    _menu_navigate->_menu_24
    _menu_navigate->_menu_3
    _menu_navigate->_menu_31
    _menu_navigate->_menu_41
    _menu_navigate->_menu_42
    _menu_navigate->_menu_43
    _menu_navigate->_menu_44
    _menu_navigate->_menu_45
    _menu_navigate->_menu_5
    _menu_navigate->_menu_6
    _menu_6->i2_lcd_text
    _menu_5->i2_lcd_text
    _menu_45->i2_lcd_text
    _menu_44->i2_lcd_text
    _menu_43->i2_lcd_text
    _menu_42->i2_lcd_text
    _menu_41->i2_lcd_text
    _menu_4->i2_lcd_text
    _menu_31->i2_lcd_text
    _menu_3->i2_lcd_text
    _menu_27->i2_lcd_text
    _menu_26->i2_lcd_text
    _menu_25->i2_lcd_text
    _menu_24->i2_lcd_text
    _menu_23->i2_lcd_text
    _menu_22->i2_lcd_text
    _menu_21->i2_lcd_text
    _menu_2->i2_lcd_text
    _menu_1->i2_lcd_text
    i2_lcd_text->i2_lcd_pix
    i2_lcd_text->i2_lcd_pix_color
    i2_lcd_pix_color->i2_lcd_set_address
    _lcd_point->i2_lcd_pix
    _lcd_number->_lcd_sign
    _lcd_sign->i2_lcd_pix
    i2_lcd_pix->i2_lcd_set_address
    i2_lcd_set_address->i2_lcd_write_command
    i2_lcd_memory_start->i2_lcd_write_command
    i2_lcd_write_command->i2_lcd_write_bus

Critical Paths under _main in BANK0

    _uart2_config->___lldiv
    _uart1_config->___lldiv
    _printf->___lwdiv
    ___lwmod->___lwdiv
    _menu_init->_mem_write
    _lcd_text->_bitRead
    _lcd_pix_color->_bitRead
    _lcd_pix->_bitRead
    _lcd_set_address->_lcd_write_command
    _lcd_memory_start->_lcd_write_command
    _lcd_init->_lcd_write_command
    _lcd_write_command->_lcd_write_bus

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _uart2_config->___lldiv
    _uart1_config->___lldiv
    _printf->___lwmod
    _lcd_set_background->_lcd_set_address
    _lcd_text->_lcd_pix
    _lcd_text->_lcd_pix_color
    _lcd_pix_color->_lcd_set_address
    _lcd_pix->_lcd_set_address

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    _main->_lcd_legend
    _lcd_legend->_lcd_text
    _lcd_text->_lcd_pix
    _lcd_text->_lcd_pix_color

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   40565
                                             40 BANK5      1     1      0
                          _gpio_init
                      _keyboard_init
                           _lcd_init
                         _lcd_legend
                 _lcd_set_background
                          _menu_init
                             _printf
                              _putch
                          _rw_eeprom
                      _timer2_config
                       _uart1_config
                       _uart2_config
 ---------------------------------------------------------------------------------
 (1) _uart2_config                                         8     4      4     892
                                             56 BANK0      1     1      0
                                              8 BANK1      7     3      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (1) _uart1_config                                         8     4      4     892
                                             56 BANK0      1     1      0
                                              8 BANK1      7     3      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     601
                                             51 BANK0      5     5      0
                                              0 BANK1      8     0      8
 ---------------------------------------------------------------------------------
 (1) _timer2_config                                        4     2      2     265
                                             51 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _rw_eeprom                                            3     1      2     844
                                             51 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _printf                                              24    22      2    4771
                                              5 BANK1      6     4      2
                                              0 BANK5      9     9      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (1) _putch                                                1     1      0      62
                                             51 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             51 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     412
                                              0 BANK1      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     531
                                             51 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _menu_init                                            0     0      0     470
                           _mem_read
                          _mem_write
 ---------------------------------------------------------------------------------
 (2) _mem_write                                            2     1      1     448
                                             51 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (2) _mem_read                                             1     1      0      22
                                             51 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _lcd_set_background                                   6     4      2    2077
                                             53 BANK0      2     0      2
                                              8 BANK1      4     4      0
                   _lcd_memory_start
                    _lcd_set_address
                      _lcd_write_bus
 ---------------------------------------------------------------------------------
 (1) _lcd_legend                                           3     3      0   30199
                                             37 BANK5      3     3      0
                           _lcd_text
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4     289
                                             51 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _lcd_text                                            34    31      3   29675
                                              3 BANK5     34    31      3
                             ___wmul
                            _bitRead
                            _lcd_pix
                      _lcd_pix_color
 ---------------------------------------------------------------------------------
 (3) _lcd_pix_color                                       13     7      6    4030
                                              8 BANK1     10     4      6
                                              0 BANK5      3     3      0
                             ___wmul
                            _bitRead (ARG)
                   _lcd_memory_start
                    _lcd_set_address
                      _lcd_write_bus
 ---------------------------------------------------------------------------------
 (3) _lcd_pix                                             13     7      6    7330
                                              8 BANK1     10     4      6
                                              0 BANK5      3     3      0
                             ___wmul
                            _bitRead (ARG)
                   _lcd_memory_start
                    _lcd_set_address
                      _lcd_write_bus
 ---------------------------------------------------------------------------------
 (2) _lcd_set_address                                      8     0      8    1421
                                              0 BANK1      8     0      8
                      _lcd_write_bus
                  _lcd_write_command
 ---------------------------------------------------------------------------------
 (2) _lcd_memory_start                                     0     0      0      62
                  _lcd_write_command
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1608
                                             51 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _bitRead                                              7     3      4     566
                                             51 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             2     2      0      93
                                             53 BANK0      2     2      0
                      _lcd_write_bus
                  _lcd_write_command
 ---------------------------------------------------------------------------------
 (3) _lcd_write_command                                    1     1      0      62
                                             52 BANK0      1     1      0
                      _lcd_write_bus
 ---------------------------------------------------------------------------------
 (2) _lcd_write_bus                                        1     1      0      31
                                             51 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _keyboard_init                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _gpio_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _isr                                                 51    51      0  826392
                                              0 BANK0     51    51      0
                            ___awdiv
                        _key_pressed
                        _key_trigger
                         _lcd_number
                          _lcd_point
                      _menu_navigate
                          _menu_next
                          i2___lwdiv
                           i2___wmul
                       i2_lcd_legend
                           i2_printf
                            i2_putch
                        i2_rw_eeprom
 ---------------------------------------------------------------------------------
 (8) i2_rw_eeprom                                          3     1      2     244
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (8) i2_printf                                            26    22      4    3024
                                             12 COMRAM    17    13      4
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (8) i2_putch                                              1     1      0      44
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (9) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (9) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (8) i2_lcd_legend                                         3     3      0   19349
                                             57 COMRAM     3     3      0
                         i2_lcd_text
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (9) i2_strcpy                                             6     2      4     127
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) _menu_next                                           12     5      7  414878
                                             77 COMRAM    12     5      7
                            ___lbdiv
                            _menu_21
                      _menu_navigate
               i2_lcd_set_background
                         i2_lcd_text
                         i2_mem_read
                        i2_mem_write
 ---------------------------------------------------------------------------------
 (9) i2_mem_write                                          2     1      1      96
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (9) i2_mem_read                                           1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) i2_lcd_set_background                                 6     4      2    1227
                                             10 COMRAM     6     4      2
                 i2_lcd_memory_start
                  i2_lcd_set_address
                    i2_lcd_write_bus
 ---------------------------------------------------------------------------------
 (9) _menu_navigate                                        2     1      1  369382
                                             75 COMRAM     2     1      1
                             _menu_1
                             _menu_2
                            _menu_21
                            _menu_22
                            _menu_23
                            _menu_24
                            _menu_25
                            _menu_26
                            _menu_27
                             _menu_3
                            _menu_31
                             _menu_4
                            _menu_41
                            _menu_42
                            _menu_43
                            _menu_44
                            _menu_45
                             _menu_5
                             _menu_6
 ---------------------------------------------------------------------------------
 (10) _menu_6                                             18    18      0   19290
                                             57 COMRAM    18    18      0
                         i2_lcd_text
 ---------------------------------------------------------------------------------
 (10) _menu_5                                             18    18      0   19321
                                             57 COMRAM    18    18      0
                         i2_lcd_text
 ---------------------------------------------------------------------------------
 (10) _menu_45                                            18    18      0   19259
                                             57 COMRAM    18    18      0
                         i2_lcd_text
 ---------------------------------------------------------------------------------
 (10) _menu_44                                            18    18      0   19259
                                             57 COMRAM    18    18      0
                         i2_lcd_text
 ---------------------------------------------------------------------------------
 (10) _menu_43                                            18    18      0   19259
                                             57 COMRAM    18    18      0
                         i2_lcd_text
 ---------------------------------------------------------------------------------
 (10) _menu_42                                            18    18      0   19259
                                             57 COMRAM    18    18      0
                         i2_lcd_text
 ---------------------------------------------------------------------------------
 (10) _menu_41                                            18    18      0   19259
                                             57 COMRAM    18    18      0
                         i2_lcd_text
 ---------------------------------------------------------------------------------
 (10) _menu_4                                             17    17      0   19207
                                             57 COMRAM    17    17      0
                         i2_lcd_text
 ---------------------------------------------------------------------------------
 (10) _menu_31                                            18    18      0   19352
                                             57 COMRAM    18    18      0
                         i2_lcd_text
 ---------------------------------------------------------------------------------
 (10) _menu_3                                             18    18      0   19321
                                             57 COMRAM    18    18      0
                         i2_lcd_text
 ---------------------------------------------------------------------------------
 (10) _menu_27                                            18    18      0   19228
                                             57 COMRAM    17    17      0
                         i2_lcd_text
 ---------------------------------------------------------------------------------
 (10) _menu_26                                            18    18      0   19228
                                             57 COMRAM    17    17      0
                         i2_lcd_text
 ---------------------------------------------------------------------------------
 (10) _menu_25                                            18    18      0   19228
                                             57 COMRAM    17    17      0
                         i2_lcd_text
 ---------------------------------------------------------------------------------
 (10) _menu_24                                            18    18      0   19321
                                             57 COMRAM    18    18      0
                         i2_lcd_text
 ---------------------------------------------------------------------------------
 (10) _menu_23                                            18    18      0   19228
                                             57 COMRAM    17    17      0
                         i2_lcd_text
 ---------------------------------------------------------------------------------
 (10) _menu_22                                            18    18      0   19352
                                             57 COMRAM    18    18      0
                         i2_lcd_text
 ---------------------------------------------------------------------------------
 (10) _menu_21                                            18    18      0   19259
                                             57 COMRAM    18    18      0
                         i2_lcd_text
 ---------------------------------------------------------------------------------
 (10) _menu_2                                             17    17      0   19207
                                             57 COMRAM    17    17      0
                         i2_lcd_text
 ---------------------------------------------------------------------------------
 (10) _menu_1                                             17    17      0   19315
                                             57 COMRAM    17    17      0
                         i2_lcd_text
 ---------------------------------------------------------------------------------
 (9) i2_lcd_text                                          34    31      3   18987
                                             23 COMRAM    34    31      3
                           i2___wmul
                          i2_bitRead
                          i2_lcd_pix
                    i2_lcd_pix_color
 ---------------------------------------------------------------------------------
 (10) i2_lcd_pix_color                                    13     7      6    2328
                                             10 COMRAM    13     7      6
                           i2___wmul
                          i2_bitRead (ARG)
                 i2_lcd_memory_start
                  i2_lcd_set_address
                    i2_lcd_write_bus
 ---------------------------------------------------------------------------------
 (9) ___lbdiv                                              4     3      1     215
                                              0 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (8) _lcd_point                                            1     1      0    4583
                                             23 COMRAM     1     1      0
                          i2_lcd_pix
 ---------------------------------------------------------------------------------
 (8) _lcd_number                                          15    13      2   10718
                                             24 COMRAM    15    13      2
                           _lcd_sign
                          i2_bitRead
                          i2_lcd_pix
 ---------------------------------------------------------------------------------
 (10) i2_bitRead                                           7     3      4     306
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (9) _lcd_sign                                             1     1      0    4738
                                             23 COMRAM     1     1      0
                          i2_lcd_pix
 ---------------------------------------------------------------------------------
 (10) i2_lcd_pix                                          13     7      6    4428
                                             10 COMRAM    13     7      6
                           i2___wmul
                          i2_bitRead (ARG)
                 i2_lcd_memory_start
                  i2_lcd_set_address
                    i2_lcd_write_bus
 ---------------------------------------------------------------------------------
 (11) i2_lcd_set_address                                   8     0      8     761
                                              2 COMRAM     8     0      8
                    i2_lcd_write_bus
                i2_lcd_write_command
 ---------------------------------------------------------------------------------
 (11) i2_lcd_memory_start                                  0     0      0      62
                i2_lcd_write_command
 ---------------------------------------------------------------------------------
 (12) i2_lcd_write_command                                 1     1      0      62
                                              1 COMRAM     1     1      0
                    i2_lcd_write_bus
 ---------------------------------------------------------------------------------
 (11) i2_lcd_write_bus                                     1     1      0      31
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) i2___wmul                                             6     2      4     786
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) _key_trigger                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _key_pressed                                          4     4      0     433
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (8) ___awdiv                                              8     4      4     756
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _gpio_init
   _keyboard_init
   _lcd_init
     _lcd_write_bus
     _lcd_write_command
       _lcd_write_bus
   _lcd_legend
     _lcd_text
       ___wmul
       _bitRead
       _lcd_pix
         ___wmul
         _bitRead (ARG)
         _lcd_memory_start (ARG)
           _lcd_write_command
             _lcd_write_bus
         _lcd_set_address (ARG)
           _lcd_write_bus
           _lcd_write_command
             _lcd_write_bus
         _lcd_write_bus (ARG)
       _lcd_pix_color
         ___wmul
         _bitRead (ARG)
         _lcd_memory_start (ARG)
           _lcd_write_command
             _lcd_write_bus
         _lcd_set_address (ARG)
           _lcd_write_bus
           _lcd_write_command
             _lcd_write_bus
         _lcd_write_bus (ARG)
     _strcpy
   _lcd_set_background
     _lcd_memory_start
       _lcd_write_command
         _lcd_write_bus
     _lcd_set_address
       _lcd_write_bus
       _lcd_write_command
         _lcd_write_bus
     _lcd_write_bus
   _menu_init
     _mem_read
     _mem_write
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
   _putch
   _rw_eeprom
   _timer2_config
   _uart1_config
     ___lldiv
   _uart2_config
     ___lldiv

 _isr (ROOT)
   ___awdiv
   _key_pressed
   _key_trigger
   _lcd_number
     _lcd_sign
       i2_lcd_pix
         i2___wmul
         i2_bitRead (ARG)
         i2_lcd_memory_start (ARG)
           i2_lcd_write_command
             i2_lcd_write_bus
         i2_lcd_set_address (ARG)
           i2_lcd_write_bus
           i2_lcd_write_command
             i2_lcd_write_bus
         i2_lcd_write_bus (ARG)
     i2_bitRead
     i2_lcd_pix
       i2___wmul
       i2_bitRead (ARG)
       i2_lcd_memory_start (ARG)
         i2_lcd_write_command
           i2_lcd_write_bus
       i2_lcd_set_address (ARG)
         i2_lcd_write_bus
         i2_lcd_write_command
           i2_lcd_write_bus
       i2_lcd_write_bus (ARG)
   _lcd_point
     i2_lcd_pix
       i2___wmul
       i2_bitRead (ARG)
       i2_lcd_memory_start (ARG)
         i2_lcd_write_command
           i2_lcd_write_bus
       i2_lcd_set_address (ARG)
         i2_lcd_write_bus
         i2_lcd_write_command
           i2_lcd_write_bus
       i2_lcd_write_bus (ARG)
   _menu_navigate
     _menu_1
       i2_lcd_text
         i2___wmul
         i2_bitRead
         i2_lcd_pix
           i2___wmul
           i2_bitRead (ARG)
           i2_lcd_memory_start (ARG)
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_set_address (ARG)
             i2_lcd_write_bus
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_write_bus (ARG)
         i2_lcd_pix_color
           i2___wmul
           i2_bitRead (ARG)
           i2_lcd_memory_start (ARG)
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_set_address (ARG)
             i2_lcd_write_bus
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_write_bus (ARG)
     _menu_2
       i2_lcd_text
         i2___wmul
         i2_bitRead
         i2_lcd_pix
           i2___wmul
           i2_bitRead (ARG)
           i2_lcd_memory_start (ARG)
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_set_address (ARG)
             i2_lcd_write_bus
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_write_bus (ARG)
         i2_lcd_pix_color
           i2___wmul
           i2_bitRead (ARG)
           i2_lcd_memory_start (ARG)
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_set_address (ARG)
             i2_lcd_write_bus
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_write_bus (ARG)
     _menu_21
       i2_lcd_text
         i2___wmul
         i2_bitRead
         i2_lcd_pix
           i2___wmul
           i2_bitRead (ARG)
           i2_lcd_memory_start (ARG)
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_set_address (ARG)
             i2_lcd_write_bus
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_write_bus (ARG)
         i2_lcd_pix_color
           i2___wmul
           i2_bitRead (ARG)
           i2_lcd_memory_start (ARG)
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_set_address (ARG)
             i2_lcd_write_bus
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_write_bus (ARG)
     _menu_22
       i2_lcd_text
         i2___wmul
         i2_bitRead
         i2_lcd_pix
           i2___wmul
           i2_bitRead (ARG)
           i2_lcd_memory_start (ARG)
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_set_address (ARG)
             i2_lcd_write_bus
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_write_bus (ARG)
         i2_lcd_pix_color
           i2___wmul
           i2_bitRead (ARG)
           i2_lcd_memory_start (ARG)
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_set_address (ARG)
             i2_lcd_write_bus
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_write_bus (ARG)
     _menu_23
       i2_lcd_text
         i2___wmul
         i2_bitRead
         i2_lcd_pix
           i2___wmul
           i2_bitRead (ARG)
           i2_lcd_memory_start (ARG)
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_set_address (ARG)
             i2_lcd_write_bus
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_write_bus (ARG)
         i2_lcd_pix_color
           i2___wmul
           i2_bitRead (ARG)
           i2_lcd_memory_start (ARG)
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_set_address (ARG)
             i2_lcd_write_bus
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_write_bus (ARG)
     _menu_24
       i2_lcd_text
         i2___wmul
         i2_bitRead
         i2_lcd_pix
           i2___wmul
           i2_bitRead (ARG)
           i2_lcd_memory_start (ARG)
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_set_address (ARG)
             i2_lcd_write_bus
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_write_bus (ARG)
         i2_lcd_pix_color
           i2___wmul
           i2_bitRead (ARG)
           i2_lcd_memory_start (ARG)
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_set_address (ARG)
             i2_lcd_write_bus
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_write_bus (ARG)
     _menu_25
       i2_lcd_text
         i2___wmul
         i2_bitRead
         i2_lcd_pix
           i2___wmul
           i2_bitRead (ARG)
           i2_lcd_memory_start (ARG)
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_set_address (ARG)
             i2_lcd_write_bus
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_write_bus (ARG)
         i2_lcd_pix_color
           i2___wmul
           i2_bitRead (ARG)
           i2_lcd_memory_start (ARG)
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_set_address (ARG)
             i2_lcd_write_bus
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_write_bus (ARG)
     _menu_26
       i2_lcd_text
         i2___wmul
         i2_bitRead
         i2_lcd_pix
           i2___wmul
           i2_bitRead (ARG)
           i2_lcd_memory_start (ARG)
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_set_address (ARG)
             i2_lcd_write_bus
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_write_bus (ARG)
         i2_lcd_pix_color
           i2___wmul
           i2_bitRead (ARG)
           i2_lcd_memory_start (ARG)
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_set_address (ARG)
             i2_lcd_write_bus
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_write_bus (ARG)
     _menu_27
       i2_lcd_text
         i2___wmul
         i2_bitRead
         i2_lcd_pix
           i2___wmul
           i2_bitRead (ARG)
           i2_lcd_memory_start (ARG)
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_set_address (ARG)
             i2_lcd_write_bus
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_write_bus (ARG)
         i2_lcd_pix_color
           i2___wmul
           i2_bitRead (ARG)
           i2_lcd_memory_start (ARG)
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_set_address (ARG)
             i2_lcd_write_bus
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_write_bus (ARG)
     _menu_3
       i2_lcd_text
         i2___wmul
         i2_bitRead
         i2_lcd_pix
           i2___wmul
           i2_bitRead (ARG)
           i2_lcd_memory_start (ARG)
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_set_address (ARG)
             i2_lcd_write_bus
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_write_bus (ARG)
         i2_lcd_pix_color
           i2___wmul
           i2_bitRead (ARG)
           i2_lcd_memory_start (ARG)
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_set_address (ARG)
             i2_lcd_write_bus
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_write_bus (ARG)
     _menu_31
       i2_lcd_text
         i2___wmul
         i2_bitRead
         i2_lcd_pix
           i2___wmul
           i2_bitRead (ARG)
           i2_lcd_memory_start (ARG)
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_set_address (ARG)
             i2_lcd_write_bus
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_write_bus (ARG)
         i2_lcd_pix_color
           i2___wmul
           i2_bitRead (ARG)
           i2_lcd_memory_start (ARG)
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_set_address (ARG)
             i2_lcd_write_bus
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_write_bus (ARG)
     _menu_4
       i2_lcd_text
         i2___wmul
         i2_bitRead
         i2_lcd_pix
           i2___wmul
           i2_bitRead (ARG)
           i2_lcd_memory_start (ARG)
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_set_address (ARG)
             i2_lcd_write_bus
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_write_bus (ARG)
         i2_lcd_pix_color
           i2___wmul
           i2_bitRead (ARG)
           i2_lcd_memory_start (ARG)
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_set_address (ARG)
             i2_lcd_write_bus
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_write_bus (ARG)
     _menu_41
       i2_lcd_text
         i2___wmul
         i2_bitRead
         i2_lcd_pix
           i2___wmul
           i2_bitRead (ARG)
           i2_lcd_memory_start (ARG)
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_set_address (ARG)
             i2_lcd_write_bus
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_write_bus (ARG)
         i2_lcd_pix_color
           i2___wmul
           i2_bitRead (ARG)
           i2_lcd_memory_start (ARG)
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_set_address (ARG)
             i2_lcd_write_bus
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_write_bus (ARG)
     _menu_42
       i2_lcd_text
         i2___wmul
         i2_bitRead
         i2_lcd_pix
           i2___wmul
           i2_bitRead (ARG)
           i2_lcd_memory_start (ARG)
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_set_address (ARG)
             i2_lcd_write_bus
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_write_bus (ARG)
         i2_lcd_pix_color
           i2___wmul
           i2_bitRead (ARG)
           i2_lcd_memory_start (ARG)
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_set_address (ARG)
             i2_lcd_write_bus
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_write_bus (ARG)
     _menu_43
       i2_lcd_text
         i2___wmul
         i2_bitRead
         i2_lcd_pix
           i2___wmul
           i2_bitRead (ARG)
           i2_lcd_memory_start (ARG)
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_set_address (ARG)
             i2_lcd_write_bus
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_write_bus (ARG)
         i2_lcd_pix_color
           i2___wmul
           i2_bitRead (ARG)
           i2_lcd_memory_start (ARG)
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_set_address (ARG)
             i2_lcd_write_bus
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_write_bus (ARG)
     _menu_44
       i2_lcd_text
         i2___wmul
         i2_bitRead
         i2_lcd_pix
           i2___wmul
           i2_bitRead (ARG)
           i2_lcd_memory_start (ARG)
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_set_address (ARG)
             i2_lcd_write_bus
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_write_bus (ARG)
         i2_lcd_pix_color
           i2___wmul
           i2_bitRead (ARG)
           i2_lcd_memory_start (ARG)
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_set_address (ARG)
             i2_lcd_write_bus
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_write_bus (ARG)
     _menu_45
       i2_lcd_text
         i2___wmul
         i2_bitRead
         i2_lcd_pix
           i2___wmul
           i2_bitRead (ARG)
           i2_lcd_memory_start (ARG)
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_set_address (ARG)
             i2_lcd_write_bus
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_write_bus (ARG)
         i2_lcd_pix_color
           i2___wmul
           i2_bitRead (ARG)
           i2_lcd_memory_start (ARG)
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_set_address (ARG)
             i2_lcd_write_bus
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_write_bus (ARG)
     _menu_5
       i2_lcd_text
         i2___wmul
         i2_bitRead
         i2_lcd_pix
           i2___wmul
           i2_bitRead (ARG)
           i2_lcd_memory_start (ARG)
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_set_address (ARG)
             i2_lcd_write_bus
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_write_bus (ARG)
         i2_lcd_pix_color
           i2___wmul
           i2_bitRead (ARG)
           i2_lcd_memory_start (ARG)
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_set_address (ARG)
             i2_lcd_write_bus
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_write_bus (ARG)
     _menu_6
       i2_lcd_text
         i2___wmul
         i2_bitRead
         i2_lcd_pix
           i2___wmul
           i2_bitRead (ARG)
           i2_lcd_memory_start (ARG)
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_set_address (ARG)
             i2_lcd_write_bus
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_write_bus (ARG)
         i2_lcd_pix_color
           i2___wmul
           i2_bitRead (ARG)
           i2_lcd_memory_start (ARG)
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_set_address (ARG)
             i2_lcd_write_bus
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_write_bus (ARG)
   _menu_next
     ___lbdiv
     _menu_21
       i2_lcd_text
         i2___wmul
         i2_bitRead
         i2_lcd_pix
           i2___wmul
           i2_bitRead (ARG)
           i2_lcd_memory_start (ARG)
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_set_address (ARG)
             i2_lcd_write_bus
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_write_bus (ARG)
         i2_lcd_pix_color
           i2___wmul
           i2_bitRead (ARG)
           i2_lcd_memory_start (ARG)
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_set_address (ARG)
             i2_lcd_write_bus
             i2_lcd_write_command
               i2_lcd_write_bus
           i2_lcd_write_bus (ARG)
     _menu_navigate
       _menu_1
         i2_lcd_text
           i2___wmul
           i2_bitRead
           i2_lcd_pix
             i2___wmul
             i2_bitRead (ARG)
             i2_lcd_memory_start (ARG)
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_set_address (ARG)
               i2_lcd_write_bus
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_write_bus (ARG)
           i2_lcd_pix_color
             i2___wmul
             i2_bitRead (ARG)
             i2_lcd_memory_start (ARG)
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_set_address (ARG)
               i2_lcd_write_bus
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_write_bus (ARG)
       _menu_2
         i2_lcd_text
           i2___wmul
           i2_bitRead
           i2_lcd_pix
             i2___wmul
             i2_bitRead (ARG)
             i2_lcd_memory_start (ARG)
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_set_address (ARG)
               i2_lcd_write_bus
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_write_bus (ARG)
           i2_lcd_pix_color
             i2___wmul
             i2_bitRead (ARG)
             i2_lcd_memory_start (ARG)
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_set_address (ARG)
               i2_lcd_write_bus
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_write_bus (ARG)
       _menu_21
         i2_lcd_text
           i2___wmul
           i2_bitRead
           i2_lcd_pix
             i2___wmul
             i2_bitRead (ARG)
             i2_lcd_memory_start (ARG)
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_set_address (ARG)
               i2_lcd_write_bus
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_write_bus (ARG)
           i2_lcd_pix_color
             i2___wmul
             i2_bitRead (ARG)
             i2_lcd_memory_start (ARG)
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_set_address (ARG)
               i2_lcd_write_bus
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_write_bus (ARG)
       _menu_22
         i2_lcd_text
           i2___wmul
           i2_bitRead
           i2_lcd_pix
             i2___wmul
             i2_bitRead (ARG)
             i2_lcd_memory_start (ARG)
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_set_address (ARG)
               i2_lcd_write_bus
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_write_bus (ARG)
           i2_lcd_pix_color
             i2___wmul
             i2_bitRead (ARG)
             i2_lcd_memory_start (ARG)
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_set_address (ARG)
               i2_lcd_write_bus
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_write_bus (ARG)
       _menu_23
         i2_lcd_text
           i2___wmul
           i2_bitRead
           i2_lcd_pix
             i2___wmul
             i2_bitRead (ARG)
             i2_lcd_memory_start (ARG)
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_set_address (ARG)
               i2_lcd_write_bus
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_write_bus (ARG)
           i2_lcd_pix_color
             i2___wmul
             i2_bitRead (ARG)
             i2_lcd_memory_start (ARG)
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_set_address (ARG)
               i2_lcd_write_bus
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_write_bus (ARG)
       _menu_24
         i2_lcd_text
           i2___wmul
           i2_bitRead
           i2_lcd_pix
             i2___wmul
             i2_bitRead (ARG)
             i2_lcd_memory_start (ARG)
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_set_address (ARG)
               i2_lcd_write_bus
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_write_bus (ARG)
           i2_lcd_pix_color
             i2___wmul
             i2_bitRead (ARG)
             i2_lcd_memory_start (ARG)
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_set_address (ARG)
               i2_lcd_write_bus
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_write_bus (ARG)
       _menu_25
         i2_lcd_text
           i2___wmul
           i2_bitRead
           i2_lcd_pix
             i2___wmul
             i2_bitRead (ARG)
             i2_lcd_memory_start (ARG)
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_set_address (ARG)
               i2_lcd_write_bus
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_write_bus (ARG)
           i2_lcd_pix_color
             i2___wmul
             i2_bitRead (ARG)
             i2_lcd_memory_start (ARG)
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_set_address (ARG)
               i2_lcd_write_bus
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_write_bus (ARG)
       _menu_26
         i2_lcd_text
           i2___wmul
           i2_bitRead
           i2_lcd_pix
             i2___wmul
             i2_bitRead (ARG)
             i2_lcd_memory_start (ARG)
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_set_address (ARG)
               i2_lcd_write_bus
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_write_bus (ARG)
           i2_lcd_pix_color
             i2___wmul
             i2_bitRead (ARG)
             i2_lcd_memory_start (ARG)
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_set_address (ARG)
               i2_lcd_write_bus
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_write_bus (ARG)
       _menu_27
         i2_lcd_text
           i2___wmul
           i2_bitRead
           i2_lcd_pix
             i2___wmul
             i2_bitRead (ARG)
             i2_lcd_memory_start (ARG)
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_set_address (ARG)
               i2_lcd_write_bus
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_write_bus (ARG)
           i2_lcd_pix_color
             i2___wmul
             i2_bitRead (ARG)
             i2_lcd_memory_start (ARG)
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_set_address (ARG)
               i2_lcd_write_bus
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_write_bus (ARG)
       _menu_3
         i2_lcd_text
           i2___wmul
           i2_bitRead
           i2_lcd_pix
             i2___wmul
             i2_bitRead (ARG)
             i2_lcd_memory_start (ARG)
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_set_address (ARG)
               i2_lcd_write_bus
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_write_bus (ARG)
           i2_lcd_pix_color
             i2___wmul
             i2_bitRead (ARG)
             i2_lcd_memory_start (ARG)
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_set_address (ARG)
               i2_lcd_write_bus
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_write_bus (ARG)
       _menu_31
         i2_lcd_text
           i2___wmul
           i2_bitRead
           i2_lcd_pix
             i2___wmul
             i2_bitRead (ARG)
             i2_lcd_memory_start (ARG)
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_set_address (ARG)
               i2_lcd_write_bus
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_write_bus (ARG)
           i2_lcd_pix_color
             i2___wmul
             i2_bitRead (ARG)
             i2_lcd_memory_start (ARG)
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_set_address (ARG)
               i2_lcd_write_bus
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_write_bus (ARG)
       _menu_4
         i2_lcd_text
           i2___wmul
           i2_bitRead
           i2_lcd_pix
             i2___wmul
             i2_bitRead (ARG)
             i2_lcd_memory_start (ARG)
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_set_address (ARG)
               i2_lcd_write_bus
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_write_bus (ARG)
           i2_lcd_pix_color
             i2___wmul
             i2_bitRead (ARG)
             i2_lcd_memory_start (ARG)
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_set_address (ARG)
               i2_lcd_write_bus
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_write_bus (ARG)
       _menu_41
         i2_lcd_text
           i2___wmul
           i2_bitRead
           i2_lcd_pix
             i2___wmul
             i2_bitRead (ARG)
             i2_lcd_memory_start (ARG)
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_set_address (ARG)
               i2_lcd_write_bus
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_write_bus (ARG)
           i2_lcd_pix_color
             i2___wmul
             i2_bitRead (ARG)
             i2_lcd_memory_start (ARG)
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_set_address (ARG)
               i2_lcd_write_bus
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_write_bus (ARG)
       _menu_42
         i2_lcd_text
           i2___wmul
           i2_bitRead
           i2_lcd_pix
             i2___wmul
             i2_bitRead (ARG)
             i2_lcd_memory_start (ARG)
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_set_address (ARG)
               i2_lcd_write_bus
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_write_bus (ARG)
           i2_lcd_pix_color
             i2___wmul
             i2_bitRead (ARG)
             i2_lcd_memory_start (ARG)
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_set_address (ARG)
               i2_lcd_write_bus
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_write_bus (ARG)
       _menu_43
         i2_lcd_text
           i2___wmul
           i2_bitRead
           i2_lcd_pix
             i2___wmul
             i2_bitRead (ARG)
             i2_lcd_memory_start (ARG)
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_set_address (ARG)
               i2_lcd_write_bus
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_write_bus (ARG)
           i2_lcd_pix_color
             i2___wmul
             i2_bitRead (ARG)
             i2_lcd_memory_start (ARG)
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_set_address (ARG)
               i2_lcd_write_bus
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_write_bus (ARG)
       _menu_44
         i2_lcd_text
           i2___wmul
           i2_bitRead
           i2_lcd_pix
             i2___wmul
             i2_bitRead (ARG)
             i2_lcd_memory_start (ARG)
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_set_address (ARG)
               i2_lcd_write_bus
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_write_bus (ARG)
           i2_lcd_pix_color
             i2___wmul
             i2_bitRead (ARG)
             i2_lcd_memory_start (ARG)
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_set_address (ARG)
               i2_lcd_write_bus
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_write_bus (ARG)
       _menu_45
         i2_lcd_text
           i2___wmul
           i2_bitRead
           i2_lcd_pix
             i2___wmul
             i2_bitRead (ARG)
             i2_lcd_memory_start (ARG)
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_set_address (ARG)
               i2_lcd_write_bus
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_write_bus (ARG)
           i2_lcd_pix_color
             i2___wmul
             i2_bitRead (ARG)
             i2_lcd_memory_start (ARG)
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_set_address (ARG)
               i2_lcd_write_bus
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_write_bus (ARG)
       _menu_5
         i2_lcd_text
           i2___wmul
           i2_bitRead
           i2_lcd_pix
             i2___wmul
             i2_bitRead (ARG)
             i2_lcd_memory_start (ARG)
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_set_address (ARG)
               i2_lcd_write_bus
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_write_bus (ARG)
           i2_lcd_pix_color
             i2___wmul
             i2_bitRead (ARG)
             i2_lcd_memory_start (ARG)
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_set_address (ARG)
               i2_lcd_write_bus
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_write_bus (ARG)
       _menu_6
         i2_lcd_text
           i2___wmul
           i2_bitRead
           i2_lcd_pix
             i2___wmul
             i2_bitRead (ARG)
             i2_lcd_memory_start (ARG)
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_set_address (ARG)
               i2_lcd_write_bus
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_write_bus (ARG)
           i2_lcd_pix_color
             i2___wmul
             i2_bitRead (ARG)
             i2_lcd_memory_start (ARG)
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_set_address (ARG)
               i2_lcd_write_bus
               i2_lcd_write_command
                 i2_lcd_write_bus
             i2_lcd_write_bus (ARG)
     i2_lcd_set_background
       i2_lcd_memory_start
         i2_lcd_write_command
           i2_lcd_write_bus
       i2_lcd_set_address
         i2_lcd_write_bus
         i2_lcd_write_command
           i2_lcd_write_bus
       i2_lcd_write_bus
     i2_lcd_text
       i2___wmul
       i2_bitRead
       i2_lcd_pix
         i2___wmul
         i2_bitRead (ARG)
         i2_lcd_memory_start (ARG)
           i2_lcd_write_command
             i2_lcd_write_bus
         i2_lcd_set_address (ARG)
           i2_lcd_write_bus
           i2_lcd_write_command
             i2_lcd_write_bus
         i2_lcd_write_bus (ARG)
       i2_lcd_pix_color
         i2___wmul
         i2_bitRead (ARG)
         i2_lcd_memory_start (ARG)
           i2_lcd_write_command
             i2_lcd_write_bus
         i2_lcd_set_address (ARG)
           i2_lcd_write_bus
           i2_lcd_write_command
             i2_lcd_write_bus
         i2_lcd_write_bus (ARG)
     i2_mem_read
     i2_mem_write
   i2___lwdiv
   i2___wmul
   i2_lcd_legend
     i2_lcd_text
       i2___wmul
       i2_bitRead
       i2_lcd_pix
         i2___wmul
         i2_bitRead (ARG)
         i2_lcd_memory_start (ARG)
           i2_lcd_write_command
             i2_lcd_write_bus
         i2_lcd_set_address (ARG)
           i2_lcd_write_bus
           i2_lcd_write_command
             i2_lcd_write_bus
         i2_lcd_write_bus (ARG)
       i2_lcd_pix_color
         i2___wmul
         i2_bitRead (ARG)
         i2_lcd_memory_start (ARG)
           i2_lcd_write_command
             i2_lcd_write_bus
         i2_lcd_set_address (ARG)
           i2_lcd_write_bus
           i2_lcd_write_command
             i2_lcd_write_bus
         i2_lcd_write_bus (ARG)
     i2_strcpy
   i2_printf
     i2___lwdiv
     i2___lwmod
       i2___lwdiv (ARG)
     i2___wmul
     i2_isdigit
     i2_putch
   i2_putch
   i2_rw_eeprom

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E40      0       0      35        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100     29      AD      16       67.6%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0     100      14      100.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0     100      12      100.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0     100      10      100.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100     12     100       8      100.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     3A      6D       5       68.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     59      5E       1      100.0%
BITBANK14           41      0       0      33        0.0%
BANK14              41      0       0      34        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     578       6        0.0%
DATA                 0      0     578       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Feb 27 11:48:20 2019

                           _g1 00AE                             _k1 00B4                             _k2 00B3  
                           _m1 005A                             _m2 005D                   ___awdiv@sign 0006  
          ___wmul@multiplicand 0095             i2___lwdiv@dividend 0001                    __CFG_BORV$3 000000  
               _decimal_places 005B                 ?_lcd_pix_color 01F6                   __CFG_CP0$OFF 000000  
                 __CFG_CP1$OFF 000000                   __CFG_CP2$OFF 000000                   __CFG_CP3$OFF 000000  
                menu_next@aux1 0056       __size_ofi2_lcd_write_bus 000C                            l211 3746  
                          l220 36F6                            l212 3668                            l221 36E8  
                          l214 36AA                            l223 371A                            l215 369C  
                          l224 370C                            l217 36CE                            l410 3232  
                          l218 36C0                            l411 31BE                            l403 427A  
                          l412 31DC                            l500 18B8                            l413 31CA  
                          l430 3100                            l415 3242                            l423 311C  
                          l431 30EE                            l183 4B4E                            l416 31F8  
                          l424 30A8                            l504 19CA                            l417 3216  
                          l425 30C6                            l418 3204                            l426 30B4  
                          l194 457E                            l428 312C                            l196 4574  
                          l356 2DCE                            l429 30E2                            l357 2DE4  
                          l383 48EA                            l631 4428                            l481 1606  
                          l474 19B8                            l490 1798                            l482 162A  
                          l491 17B0                            l483 165A                            l475 1574  
                          l484 167E                            l476 158E                            l493 17E6  
                          l485 1696                            l478 15C4                            l496 1828  
                          l497 184C                            l498 187C                            l499 18A0  
                 __CFG_CPB$OFF 000000                            _PR2 000FCB                   __CFG_CPD$OFF 000000  
                          _isr 0008                            _mux 00BB                            prod 000FF3  
                          wreg 000FE8            __end_ofi2_rw_eeprom 48AC                    lcd_pix@size 01FB  
            timer2_config@post 0093                           l1110 2270                           l1111 229E  
                         l1112 22A8                           l1104 21F8                           l1113 22DA  
                         l1122 230C                           l1114 22C0                           l1106 2222  
                         l1123 2362                           l1124 2312                           l1091 2136  
                         l1092 212C                           l1069 4A6C                           l1088 210C  
                         l1097 2166                           l1089 211C                           l1099 21CE  
                         l1540 4494                           l1541 449E                           l1550 4854  
                         l1551 485E                           l1536 4474                           l1537 446C  
                         l1457 4B30                           l1546 483C                           l1547 4834  
                         l1483 3FD4                           l1484 3FC4                           l1487 4010  
                         l1680 49FA                           l1488 4022                           l1681 49F0  
                   i2_lcd_text 19CC                           ?_isr 0001                           l9080 370C  
                         l9072 36E8                           l9136 2226                           l8830 19A4  
                         l8818 18C0                           l8834 19AE                           l8764 169E  
                         l8780 178C                           l8776 1782                           l9764 4282  
                         STR_1 FFAA                           l9776 42AA                           STR_2 FFE6  
                         STR_3 FFDC                           STR_4 FFBB                           STR_5 FFF5  
                         STR_6 FFC1                           STR_7 FFF2                           STR_8 FFFB  
                         STR_9 FFF8        lcd_set_background@color 0095                           _LATA 000F89  
                         _LATB 000F8A                           _LATD 000F8C                           _IPR1 000F9F  
                         _IPR2 000FA2                           _IPR3 000FA5                           _IPR4 000FB8  
                         _IPR5 000F78                           u8614 48C4                           u8615 48BE  
                         u9700 1694                           u9620 158C                           u9720 1782  
                         u9640 15B4                           u9730 178C                           u9740 1796  
                         u9580 4B44                           u9830 18B6                           u9750 17AE  
                         u9910 3FDA                           u9850 19A4                           u9770 17D6  
                         u9860 19AE                           u9940 4478                           u9970 4840  
                  lcd_number@i 0025                    lcd_number@j 0026                    lcd_number@k 0027  
                   i2_mem_read 4BC4         ??i2_lcd_set_background 000D                           _inIp 01C4  
                         _main 2CC8                           _tara 01DC                           fsr0h 000FEA  
                         fsr1h 000FE2             i2___lwdiv@quotient 0005                           fsr2h 000FDA  
                         fsr0l 000FE9                           indf1 000FE7                           indf2 000FDF  
                         fsr1l 000FE1                           fsr2l 000FD9                           btemp 005F  
                         isr@i 0085                           isr@j 0079    __end_ofi2_lcd_write_command 4C32  
                         prodh 000FF4                           prodl 000FF3                           start 092C  
         __end_of_debounceTime FFAA                 ?_lcd_write_bus 0001                  __CFG_IESO$OFF 000000  
             ?_lcd_set_address 01EE                __end_ofi2_putch 4B76                menu_next@i_1375 0058  
                __CFG_MCLRE$ON 000000                   ___param_bank 000000                          ??_isr 0060  
                   i2lcd_pix@c 000F                     i2lcd_pix@i 0016                     i2lcd_pix@x 000B  
                   i2lcd_pix@y 000D                   _BAUDCON1bits 000FA7                   _BAUDCON2bits 000FB9  
                        ?_main 0001                __end_of___awdiv 414A                __end_of___lbdiv 49E6  
                        _EEADR 000F74                          STR_10 FFD7                          STR_11 FFD2  
                        STR_12 FFCD                          STR_13 FFE0                          STR_14 FFE9  
                        STR_15 FFEC                          STR_16 FFEF                          STR_17 FFC7  
                        STR_18 FFE3                __end_of___lldiv 4034                          u10035 41CA  
                        u10060 36B8                          u10045 414E                          u10240 22E2  
                        u10160 2252                          u10250 22F8                          u10270 236C  
              ___awdiv@divisor 0003                          _T2CON 000FCA                          _LATA0 007C48  
                        _LATA1 007C49                          u10940 42A6                          _LATA2 007C4A  
                        _LATA3 007C4B                          u11917 2D4C                          u11927 41BA  
                        u11937 4236                          u11947 2A46                          u11957 2A5E  
                        u11967 2A78                          u11977 2A98                          u11987 2B78  
              __end_of___lwdiv 44A8                __end_of___lwmod 4868                          i2l211 3BE2  
                        i2l220 3BA0                          i2l212 3B28                          i2l300 08C0  
                        i2l221 3B96                          i2l214 3B62                          i2l302 08DA  
                        i2l310 0618                          i2l223 3BBC                          i2l215 3B58  
                        i2l311 0624                          i2l224 3BB2                          i2l320 0648  
                        i2l304 0608                          i2l217 3B80                          i2l321 0666  
                        i2l305 05F2                          i2l410 392E                          i2l218 3B76  
                        i2l330 076E                          i2l322 066C                          i2l314 0628  
                        i2l242 0512                          i2l250 0162                          i2l411 38D2  
                        i2l403 435E                          i2l331 070A                          i2l323 0674  
                        i2l315 0634                          i2l307 05FE                          i2l251 01A0  
                        i2l243 00E2                          i2l235 0078                          i2l412 38EC  
                        i2l340 07A0                          i2l324 0692                          i2l260 0384  
                        i2l252 01C6                          i2l244 0112                          i2l236 0080  
                        i2l413 38DC                          i2l501 1DC4                          i2l333 073A  
                        i2l309 06CC                          i2l325 0698                          i2l317 0638  
                        i2l261 029A                          i2l253 023C                          i2l245 00F6  
                        i2l237 00B4                          i2l430 3824                          i2l350 08A4  
                        i2l342 0878                          i2l334 0730                          i2l326 06A0  
                        i2l318 0644                          i2l270 03C0                          i2l262 0280  
                        i2l254 0204                          i2l238 00A0                          i2l415 393C  
                        i2l423 3838                          i2l431 3814                          i2l183 4B6C  
                        i2l343 081C                          i2l327 06BE                          i2l271 03A6  
                        i2l255 01EA                          i2l247 0148                          i2l416 3900  
                        i2l424 37DC                          i2l504 1DDE                          i2l344 07FC  
                        i2l328 06C4                          i2l264 0310                          i2l248 012C  
                        i2l417 391A                          i2l425 37F6                          i2l337 077A  
                        i2l329 06F6                          i2l281 0492                          i2l273 03DC  
                        i2l265 02BA                          i2l257 0220                          i2l418 390A  
                        i2l450 2638                          i2l426 37E6                          i2l194 4898  
                        i2l451 262E                          i2l339 07AA                          i2l291 0540  
                        i2l283 04D0                          i2l275 046C                          i2l267 0368  
                        i2l259 025C                          i2l460 26A0                          i2l444 25F6  
                        i2l428 3846                          i2l196 4890                          i2l284 04EC  
                        i2l276 0434                          i2l461 2696                          i2l445 25FC  
                        i2l429 380A                          i2l349 0894                          i2l293 056E  
                        i2l285 050C                          i2l277 041A                          i2l269 03F8  
                        i2l710 3E0A                          i2l286 051C                          i2l383 496A  
                        i2l455 266C                          i2l447 261C                          i2l711 3E16  
                        i2l295 05A0                          i2l287 0520                          i2l279 0450  
                        i2l464 26C8                          i2l456 2662                          i2l448 2612  
                        i2l640 2BEA                          i2l800 4658                          i2l465 26D8  
                        i2l481 1A60                          i2l641 2BFC                          i2l705 3D9C  
                        i2l297 05AE                          i2l289 0530                          i2l474 1DCE  
                        i2l490 1BD0                          i2l482 1A84                          i2l642 2C18  
                        i2l706 3DAE                          i2l298 05C4                          i2l467 26E4  
                        i2l491 1BE8                          i2l483 1AB4                          i2l475 19D0  
                        i2l643 2C2A                          i2l707 3DCA                          i2l299 08E0  
                        i2l484 1AD8                          i2l476 19E8                          i2l644 2C46  
                        i2l660 2982                          i2l708 3DDC                          i2l732 4734  
                        i2l740 3CEE                          i2l469 26F0                          i2l493 1C1E  
                        i2l645 2C58                          i2l661 299E                          i2l709 3DF8  
                        i2l725 477C                          i2l741 3D0A                          i2l821 3C1C  
                        i2l901 0BAE                          i2l486 1BC4                          i2l478 1A1E  
                        i2l646 2C74                          i2l638 2BBC                          i2l662 29B0  
                        i2l718 47C4                          i2l742 3D1C                          i2l814 45C4  
                        i2l822 3C2E                          i2l902 0A88                          i2l647 2C86  
                        i2l639 2BCE                          i2l663 29CC                          i2l655 2914  
                        i2l743 3D38                          i2l807 460E                          i2l823 3C4A  
                        i2l911 0D44                          i2l496 1C60                          i2l648 2CA2  
                        i2l664 29DE                          i2l656 2926                          i2l744 3D4A  
                        i2l760 3A16                          i2l752 396E                          i2l824 3C5C  
                        i2l920 0D7A                          i2l912 0BDE                          i2l904 0AB4  
                        i2l497 1C84                          i2l649 2CB4                          i2l665 29FA  
                        i2l657 2942                          i2l745 3D56                          i2l753 3980  
                        i2l825 3C78                          i2l921 0DB4                          i2l905 0AE0  
                        i2l498 1CB4                          i2l666 2A0C                          i2l658 2954  
                        i2l674 43C6                          i2l690 3AF8                          i2l754 399C  
                        i2l770 27FE                          i2l826 3C8A                          i2l834 4062  
                        i2l850 3272                          i2l930 0EB4                          i2l922 0DD6  
                        i2l914 0C0C                          i2l906 0B0C                          i2l499 1CD8  
                        i2l667 2A28                          i2l659 2970                          i2l675 43D8  
                        i2l691 3B04                          i2l683 3A5C                          i2l739 3CDC  
                        i2l755 39AE                          i2l771 281A                          i2l827 3C96  
                        i2l835 4074                          i2l843 32E2                          i2l851 327A  
                        i2l931 0ECC                          i2l923 0E10                          i2l915 0C40  
                        i2l907 0B38                          i2l676 43E4                          i2l684 3A6E  
                        i2l756 39CA                          i2l772 282C                          i2l836 4090  
                        i2l860 32C2                          i2l852 3282                          i2l844 324A  
                        i2l940 0FD4                          i2l932 0EFC                          i2l924 0E32  
                        i2l916 0C74                          i2l908 0B64                          i2l685 3A8A  
                        i2l757 39DC                          i2l773 2848                          i2l837 40A2  
                        i2l861 32CA                          i2l853 328A                          i2l909 10B2  
                        i2l941 1008                          i2l925 0E54                          i2l917 0CA8  
                        i2l686 3A9C                          i2l758 39F8                          i2l774 285A  
                        i2l838 40AE                          i2l862 32D2                          i2l854 3292  
                        i2l846 3252                          i2l950 1188                          i2l934 102E  
                        i2l942 101A                          i2l918 0CDC                          i2l870 0964  
                        i2l687 3AB8                          i2l759 3A0A                          i2l775 2876  
                        i2l767 27BE                          i2l863 32DA                          i2l855 329A  
                        i2l847 325A                          i2l935 0F04                          i2l927 0EDE  
                        i2l919 0D10                          i2l688 3ACA                          i2l776 2888  
                        i2l768 27D0                          i2l856 32A2                          i2l848 3262  
                        i2l952 11A0                          i2l944 10C2                          i2l928 0E76  
                        i2l872 098C                          i2l689 3AE6                          i2l777 28A4  
                        i2l769 27EC                          i2l793 46A2                          i2l857 32AA  
                        i2l849 326A                          i2l873 156A                          i2l961 12D4  
                        i2l937 0F38                          i2l698 480C                          i2l778 28B6  
                        i2l786 46EC                          i2l858 32B2                          i2l970 1466  
                        i2l962 12F6                          i2l946 10DA                          i2l938 0F6C  
                        i2l779 28D2                          i2l859 32BA                          i2l867 153E  
                        i2l963 1318                          i2l955 11EC                          i2l939 0FA0  
                        i2l875 0A1C                          i2l891 09CE                          i2l964 133A  
                        i2l956 1224                          i2l948 111A                          i2l884 09B6  
                        i2l868 093C                ___awdiv@counter 0005                          i2l973 148E  
                        i2l965 135C                          i2l957 125C                          i2l949 115E  
                        i2l877 0A6A                          i2l893 09DA                          i2l974 14BA  
                        i2l966 1394                          i2l958 129A                          i2l878 09AA  
                        i2l975 1504                          i2l967 13CC                          i2l959 1274  
                        i2l895 09F4                          i2l968 14CC                          i2l888 09C2  
                        i2l993 20D2                          i2l969 1422                          i2l994 1E10  
                        i2l995 1E3C                          i2l899 1064                          i2l996 1E68  
                        i2l997 1E94                          i2l999 20EC                          _PORTC 000F82  
                        _TRISA 000F92                          _TRISB 000F93                          _TRISC 000F94  
                        _TRISD 000F95                __end_of_bitRead 48EE                  lcd_legend@aux 0596  
                 ?_key_pressed 0001                  lcd_legend@opt 0595                  __CFG_WRT0$OFF 000000  
                __CFG_WRT1$OFF 000000                  __CFG_WRT2$OFF 000000                  __CFG_WRT3$OFF 000000  
              __end_of_digitos FE3F                 __CFG_EBTR0$OFF 000000                 __CFG_FCMEN$OFF 000000  
               __CFG_EBTR1$OFF 000000                   ?_key_trigger 0001                 __CFG_EBTR2$OFF 000000  
               __CFG_EBTR3$OFF 000000                __end_of_lcd_pix 3246                  __CFG_WRTB$OFF 000000  
                __CFG_WRTC$OFF 000000                  __CFG_WRTD$OFF 000000                 __CFG_EBTRB$OFF 000000  
                   i2isdigit@c 0003                          _inMac 00AD                          _buff1 01B5  
                        _buff2 009A                __end_of_menu_21 43FC                __end_of_menu_22 3B1C  
              __end_of_menu_23 4824                __end_of_menu_31 3A2E                __end_of_menu_24 3E2E  
              __end_of_menu_25 47DC                __end_of_menu_41 4704                __end_of_menu_26 4794  
              __end_of_menu_42 46BA                __end_of_menu_27 474C                __end_of_menu_43 4670  
              __end_of_menu_44 4626                __end_of_menu_45 45DC                __end_of_dpowers FFA9  
                        _memIp 04F0                    i2_mem_write 4A9E                          _msjIP 0290  
             menu_navigate@opt 004D                          _msjON 0115                __end_of_isdigit 4B38  
                        _texto FE3F                          _putch 4B38              i2bitRead@position 0003  
                        pclath 000FFA                          tablat 000FF5               __end_ofi2___wmul 4B16  
                        plusw1 000FE3                          plusw2 000FDB          __size_ofi2_lcd_legend 00D2  
                        status 000FD8                          wtemp6 0060                ___lbdiv@divisor 0001  
              ___lbdiv@counter 0003                  i2printf@width 001B            lcd_set_background@i 01F6  
          lcd_set_background@j 01F8               __end_ofi2_printf 25D0             __size_ofi2___lwdiv 0052  
           __size_ofi2___lwmod 0042              ??i2_lcd_pix_color 0011               __end_ofi2_strcpy 4A48  
              __initialization 2F02             __size_ofi2_bitRead 003E     __size_of_lcd_write_command 0012  
                 __end_of_main 2DE6                     i2printf@ap 0015             __size_ofi2_lcd_pix 00F6  
              ??_lcd_pix_color 01FC             __size_ofi2_isdigit 001E                    i2_rw_eeprom 4868  
                       ??_main 0598                  __activetblptr 000002                  i2rw_eeprom@rw 0002  
               __CFG_PLLCFG$ON 000000                    i2lcd_pix@n1 0015                 __CFG_RETEN$OFF 000000  
             menu_next@command 0052                     i2strcpy@cp 0005            timer2_config@option 0096  
                   i2strcpy@to 0001                    i2lcd_text@i 0034                    i2lcd_text@j 0036  
                  i2lcd_text@k 0038             key_pressed@outPort 0001                   i2_lcd_legend 3B1C  
             menu_next@menuRow 0050     __end_of_lcd_set_background 42BA              ??i2_lcd_write_bus 0001  
                       _EEADRH 000F75                         _EEDATA 000F73                         _EECON2 000F7E  
                       _ANCON0 000F5D                         _ANCON1 000F5C               ___awdiv@dividend 0001  
                       ?_putch 0001                    ?i2_lcd_text 0018                         i2l1000 1EC0  
                       i2l1001 1EEC                         i2l1010 2020                         i2l1002 1F18  
                       i2l1011 204C                         i2l1003 1F44                         i2l1012 2078  
                       i2l1013 20A4                         i2l1005 1F70                         i2l1006 1F9C  
                       i2l1110 24DA                         i2l1007 1FC8                         i2l1111 24FE  
                       i2l1008 1FF4                         i2l1112 2506                         i2l1104 2468  
                       i2l1113 2532                         i2l1018 4BEC                         i2l1122 2560  
                       i2l1114 251C                         i2l1106 2490                         i2l1123 25AE  
                       i2l1124 2566                         i2l1302 4128                         i2l1303 4132  
              __CFG_BBSIZ$BB2K 000000                         i2l1304 4140                         i2l1091 23B8  
                       i2l1092 23B2                         i2l1069 4AC0                         i2l1088 2394  
                       i2l1097 23E6                         i2l1089 23A4                         i2l1099 2442  
                       i2l1540 44E6                         i2l1541 44F0                         i2l1462 49C4  
                       i2l1550 491C                         i2l1295 40DA                         i2l1463 49BE  
                       i2l1551 4926                         i2l1296 40EA                         i2l1536 44C6  
                       i2l1537 44BE                         i2l1457 4B8C                         i2l1298 4108  
                       i2l1466 49DA                         i2l1546 4904                         i2l1299 4100  
                       i2l1467 49E2                         i2l1547 48FC                 __CFG_WDTEN$OFF 000000  
                       i2l1680 4A2A                         i2l1681 4A22                         _INTCON 000FF2  
                       i2l8134 1CF4                         i2l8150 1DC4                         i2l8080 1AF4  
                       i2l8146 1DBA                         i2l8322 43DC                         i2l8092 1BBA  
                       i2l8096 1BC4                         i2l8360 3AFC                         i2l8408 3E0E  
                       i2l8424 47BC                         i2l8440 4774                         i2l8602 469A  
                       i2l8526 3A0E                         i2l8376 4804                         i2l8456 472C  
                       i2l8618 4650                         i2l8634 4606                         i2l8650 45BC  
                       i2l8708 40A6                         i2l9380 0EC6                         i2l9438 10BA  
                       i2l8488 3D4E                         i2l9650 2696                         i2l8586 46E4  
                       i2l8682 3C8E                         i2l9636 2662                         i2l9468 1180  
                       i2l9812 3BB2                         i2l9804 3B96                         i2l9672 26DC  
                       i2l9666 26D0                         i2l8972 4366                         i2l9678 26E8  
                       i2l8984 4388                         i2l9962 00EE                         i2l9868 2494  
                       i2l9978 0124                         _RCREG1 000FAE                         _RCREG2 000F7A  
                       _RCSTA1 000FAB                         _RCSTA2 000FA6                         _OSCCON 000FD3  
                  ?i2_mem_read 0001                         _SPBRG1 000FAF                         _SPBRG2 000F7B  
                    ??i2_putch 0001                ??_lcd_write_bus 0093          key_pressed@colPressed 0002  
                       _TXREG1 000FAD                         _TXREG2 000F79                         _TXSTA1 000FAC  
                       _TXSTA2 000FBA              lcd_text@msjPtrCpy 057F               i2lcd_pix_color@c 000F  
             i2lcd_pix_color@i 0016               i2lcd_pix_color@x 000B               i2lcd_pix_color@y 000D  
                lcd_text@color 0575                    isr@peso_cpy 0077                 __CFG_XINST$OFF 000000  
             __end_of_lcd_init 2B8E               __end_of_lcd_sign 2F02              lcd_write_bus@data 0093  
             __end_of_lcd_text 19CC                         ___wmul 4AC8                      ??___awdiv 0005  
                    ??___lbdiv 0002                 __CFG_STVREN$ON 000000                      ??___lldiv 0093  
                    ??___lwdiv 0097                  rw_eeprom@addr 0095                      ??___lwmod 009A  
       __size_of_keyboard_init 000A                  rw_eeprom@data 0093                         _inPort 00A9  
             __end_of_mem_read 4BAC                         _memMac 04E0                         _msjMAC 02A0  
                       _menu_1 2B8E                         _menu_2 28E6                         _menu_3 3CAE  
                       _menu_4 2790                         _menu_5 3BEE                         _menu_6 4034  
                       _msjOFF 0105    __size_ofi2_lcd_memory_start 0008                         clear_0 2FE6  
                       clear_1 2FF2                         clear_2 2FFE                      ??_bitRead 0097  
             ___awdiv@quotient 0007                         _printf 2100                      ??_lcd_pix 01FC  
                       _strcpy 49E6                         isr@eoc 0081                      ??_menu_21 003A  
                    ??_menu_22 003A                      ??_menu_31 003A                      ??_menu_23 003A  
                    ??_menu_24 003A                      ??_menu_41 003A                      ??_menu_25 003A  
                    ??_menu_42 003A                      ??_menu_26 003A                      ??_menu_43 003A  
                    ??_menu_27 003A                      ??_menu_44 003A                      ??_menu_45 003A  
                 __pdataCOMRAM 005E                      ??_isdigit 0093              __end_ofi2___lwdiv 44FA  
                 __mediumconst FC5A              __end_ofi2___lwmod 4930                         tblptrh 000FF7  
                       tblptrl 000FF6                         tblptru 000FF8              __end_ofi2_bitRead 496E  
             i2lcd_text@msjPtr 0018              __end_ofi2_lcd_pix 3940               ___lbdiv@dividend 0002  
            __end_ofi2_isdigit 4B94                i2mem_write@data 0001                     __accesstop 0060  
      __end_of__initialization 300C         i2lcd_write_command@cmd 0002                  ___rparam_used 000001  
           i2___lwmod@dividend 0008                 __pcstackCOMRAM 0001                  _msjWEIGHTINGR 0340  
                 __pidataBANK0 4BAC                   __pidataBANK1 3EE6                   __pidataBANK2 3358  
                 __pidataBANK3 3458                   __pidataBANK4 3558                   __pidataBANK5 42BA  
       __size_of_menu_navigate 0112                  __end_of_texto FF9F                  __end_of_putch 4B58  
    __size_of_lcd_memory_start 0008            __size_ofi2_lcd_text 0414                    i2printf@val 0018  
             ___lbdiv@quotient 0004            __size_ofi2_mem_read 0016                      ?i2___wmul 0001  
                 menu_1@F15239 04C0                   menu_2@F15242 04B0                    i2putch@data 0001  
                 menu_3@F15273 0430                   _debounceTime FFA9                  _msjSUBNETMASK 02B0  
                 menu_4@F15281 0410                   menu_5@F15306 0510                   menu_6@F15310 0500  
                    ?i2_printf 000D          __end_of_timer2_config 4A9E             __size_of_lcd_point 00B8  
                    ?i2_strcpy 0001           __size_of_key_pressed 0320           __size_of_key_trigger 0016  
                _keyboard_init 4C3E                        ??_putch 0093                     __pbssBANK0 009A  
                   __pbssBANK1 01B5                     __pbssBANK5 0599             __size_of_gpio_init 0014  
           __size_of_mem_write 002C                 lcd_sign@enable 0018                   menu_1@mBlank 003A  
           __size_of_menu_init 0058             __size_of_menu_next 0C3E                   menu_2@mBlank 003A  
                 menu_3@mBlank 003A                   menu_4@mBlank 003A              menu_next@menuText 0053  
                ?_uart1_config 01F6                   menu_5@mBlank 003A                  ?_uart2_config 01F6  
                 menu_6@mBlank 003A                        ?___wmul 0093                 menu_1@colorRow 004A  
                      ?_menu_1 0001                        ?_menu_2 0001                        ?_menu_3 0001  
                      ?_menu_4 0001                        ?_menu_5 0001                        ?_menu_6 0001  
              _debounceCounter 00B1                        ?_printf 01F3                 menu_2@colorRow 004A  
                      ?_strcpy 0093                     ??i2___wmul 0005                  bitRead@number 0093  
               lcd_pix_color@c 01FA                 lcd_pix_color@i 0571                 lcd_pix_color@x 01F6  
               lcd_pix_color@y 01F8                        i2l10030 0218                        i2l10118 03D4  
                      i2l10316 0772                        i2l10148 0448                        i2l10088 0360  
                      i2l10292 0702                 menu_3@colorRow 004A               __CFG_CANMX$PORTB 000000  
              i2_lcd_text$2512 002F                i2_lcd_text$2513 0031                     _lcd_legend 3658  
           __size_of_rw_eeprom 004A                     ??i2_printf 0011                        _OSCTUNE 000F9B  
               menu_4@colorRow 004A                        _SPBRGH1 000F7D                        _SPBRGH2 000F7C  
                   _lcd_number 25D0                 lcd_point@place 0018                     ??i2_strcpy 0005  
               ?_keyboard_init 0001                  _menu_navigate 3246                   ?i2_mem_write 0001  
              i2_lcd_pix_color 3754                     _memGateway 0310                      ?_lcd_init 0001  
                    ?_lcd_sign 0001                      ?_lcd_text 0573                 menu_5@colorRow 004A  
                   _globalVar1 005E                     _keyConfirm 00B0                      ?_mem_read 0001  
                      i2_putch 4B58                 menu_6@colorRow 004A                  _menu_rowColor 00CC  
            i2lcd_pix_color@n1 0015  __size_ofi2_lcd_set_background 006E            uart1_config@option8 01FA  
                   _msjGATEWAY 02C0                __CFG_PWRTEN$OFF 000000                     _msjCONFIRM 0230  
                   _msjFILTER1 03B0                     _msjFILTER2 03A0                     _msjFILTER3 0390  
                      __Hparam 0000                        __Lparam 0000                 lcd_text@msjPtr 0573  
               ??_uart1_config 0098                 ??_uart2_config 0098                     _msjPATTERN 0165  
            __end_of_lcd_point 3EE6                menu_21@colorRow 004A                        ___awdiv 40C6  
                      ___lbdiv 49AC                        ___lldiv 3F9C                __size_of___wmul 0028  
 __size_ofi2_lcd_write_command 000E                        ___lwdiv 4454      i2lcd_set_background@color 000B  
                      ___lwmod 4824       __size_of_lcd_set_address 004E                menu_22@colorRow 004B  
                      _bitRead 48AC                __size_of_menu_1 013A                __size_of_menu_2 0156  
              __size_of_menu_3 00C0                        __pcinit 2F02                __size_of_menu_4 0156  
              __size_of_menu_5 00C0                __size_of_menu_6 0092                i2_lcd_write_bus 4C32  
                 ?i2_rw_eeprom 0001                        __ramtop 0F00          menu_navigate@rowColor 004C  
                      _digitos FC5B                        __ptext0 2CC8                        __ptext1 414A  
                      __ptext2 41C6                        __ptext3 3F9C                        __ptext4 4A74  
                      __ptext5 4548                        __ptext6 2100                        __ptext7 4B38  
                      __ptext8 4B16                        __ptext9 4824                        _lcdText 01DE  
              __size_of_printf 028A              __end_of_gpio_init 4C04                        _memBaud 00B6  
                      _lcd_pix 3130                        _divisor 00AB                menu_31@colorRow 004B  
              menu_23@colorRow 0001                __size_of_strcpy 0032                     _menu_shown 00B5  
                      _msjBAUD 02E0                        _memPort 04D0                        _lastKey 00BA  
                      _menu_21 4398                        _menu_22 3A2E                        _menu_31 3940  
                      _menu_23 47DC                        _menu_24 3D6E                        _msjDONE 03F0  
                      _menu_41 46BA                        _menu_25 4794                        _menu_42 4670  
                      _menu_26 474C                        _menu_43 4626                        _menu_27 4704  
                      _menu_44 45DC                        _menu_45 4592                        _dpowers FF9F  
            __end_of_mem_write 4A74                      _T2CONbits 000FCA              i2mem_read@address 0001  
                      _msjWAIT 03E0                        _msjPORT 0280                        _msjSTEP 0145  
                      _isdigit 4B16                   __size_of_isr 0924                        _msjZERO 0185  
            __end_of_menu_init 4454                menu_24@colorRow 004A              __CFG_MSSPMSK$MSK7 000000  
            __end_of_menu_next 156E                 ?_menu_navigate 004C                bitRead@position 0095  
              menu_41@colorRow 004A                menu_25@colorRow 0001                     ??_lcd_init 0095  
                   ??_lcd_sign 0018                   ??i2_lcd_text 001B                     ??_lcd_text 0576  
         end_of_initialization 300C                        menu_3@i 004B                        isr@aux1 0084  
                      isr@aux2 008D                        menu_5@i 004B                        menu_6@i 004B  
              menu_42@colorRow 004A                menu_26@colorRow 0001                   ??i2_mem_read 0001  
                      isr@peso 0091                     ??_mem_read 0093                  __Lmediumconst FC5A  
          i2___wmul@multiplier 0001                      i2u1001_40 4384                      i2u1200_47 1E08  
                    i2u1201_47 1E18                      i2u1130_40 010E                      i2u1210_47 1ED6  
                    i2u1202_47 1E26                      i2u1115_40 253A                      i2u1107_40 24C0  
                    i2u1211_47 1EF4                      i2u1203_47 1E44                      i2u1116_40 254E  
                    i2u1220_47 1FB2                      i2u1212_47 1F02                      i2u1204_47 1E52  
                    i2u1141_40 0238                      i2u1221_47 1FD0                      i2u1213_47 1F20  
                    i2u1205_47 1E70                      i2u1118_40 25B6                      i2u1134_40 0144  
                    i2u1070_41 25DA                      i2u1230_47 208E                      i2u1222_47 1FDE  
                    i2u1214_47 1F2E                      i2u1206_47 1E7E                      i2u1151_40 03F4  
                    i2u1231_47 20AC                      i2u1223_47 1FFC                      i2u1215_47 1F4C  
                    i2u1207_47 1E9C                      i2u1232_47 20BA                      i2u1224_47 200A  
                    i2u1216_47 1F5A                      i2u1208_47 1EAA                      i2u1065_40 1452  
              menu_43@colorRow 004A                menu_27@colorRow 0001                      i2u1233_47 20EE  
                    i2u1225_47 2028                      i2u1217_47 1F78                      i2u1209_47 1EC8  
                    i2u1090_40 278C                      i2u1082_40 26B0                      i2u1074_40 2648  
                    i2u1226_47 2036                      i2u1218_47 1F86                      i2u1155_40 0468  
                    i2u1147_40 0380                      i2u1227_47 2054                      i2u1219_47 1FA4  
                    i2u1228_47 2062                      i2u1181_40 0764                      i2u1229_47 2080  
                    i2u1078_40 267C                      i2u1184_40 07D4                      i2u1089_40 2788  
                    i2u1097_40 3B6E                      i2u1188_40 0884                      i2u1199_47 1DF8  
           _lcd_set_background 4242                ___lldiv@divisor 01F2                ___lldiv@counter 0097  
             lcd_number@F15145 0100                menu_44@colorRow 004A              __end_of_rw_eeprom 4592  
                      printf@c 0578                        printf@f 01F3                        postdec1 000FE5  
                      postdec2 000FDD                        postinc0 000FEE                        postinc2 000FDE  
              menu_45@colorRow 004A              i2lcd_text@renglon 0033            ?_lcd_set_background 0095  
             _lcd_memory_start 4C48          __end_of_lcd_pix_color 3130              i2_lcd_set_address 496E  
           __end_ofi2_lcd_text 1DE0                      _PORTAbits 000F80                      _PORTCbits 000F82  
                    _PORTDbits 000F83        __end_ofi2_lcd_pix_color 384A            i2lcd_set_address@x1 0003  
          i2lcd_set_address@x2 0007            i2lcd_set_address@y1 0005            i2lcd_set_address@y2 0009  
           ?i2_lcd_set_address 0003             __end_ofi2_mem_read 4BDA               __CFG_FOSC$INTIO2 000000  
                  ?_lcd_legend 0001                ??_keyboard_init 0093                      _TRISAbits 000F92  
                    _TRISCbits 000F94                      _TRISDbits 000F95                    ?_lcd_number 0019  
          ??i2_lcd_set_address 000B              i2___lwdiv@divisor 0003           ??_lcd_set_background 0097  
                _decimal_point 00B2                      i2___lwdiv 44A8                      i2___lwmod 48EE  
            i2___lwdiv@counter 0007                   menu_next@rta 0059                i2lcd_legend@aux 003B  
              i2lcd_legend@opt 003A                      i2_bitRead 4930               lcd_number@number 0019  
             timer2_config@eoc 0094               timer2_config@pre 0095                      i2_lcd_pix 384A  
                  printf@width 0576          __end_of_lcd_write_bus 4C24                      i2_isdigit 4B76  
      __end_ofi2_lcd_write_bus 4C3E     __end_ofi2_lcd_memory_start 4C58      __end_ofi2_lcd_set_address 49AC  
                 _msjCALIBRATE 0195                 __end_of___wmul 4AF0                  __pidataCOMRAM 4C58  
               __end_of_menu_1 2CC8                 __end_of_menu_2 2A3C                 __end_of_menu_3 3D6E  
               __end_of_menu_4 28E6                 __end_of_menu_5 3CAE                 __end_of_menu_6 40C6  
                  rw_eeprom@rw 0094                  menu_21@F15245 04A0               i2___wmul@product 0005  
                menu_22@F15249 0490                 __end_of_printf 238A                  menu_23@F15253 0480  
                menu_31@F15277 0420                ??_menu_navigate 004D                   i2printf@flag 001A  
               __end_of_strcpy 4A18                  menu_24@F15257 0470                   i2printf@prec 0017  
          start_initialization 2F02                  menu_25@F15261 0460                  menu_41@F15284 0400  
            ??_lcd_set_address 0095            i2lcd_pix_color@size 0010              __size_ofi2___wmul 0026  
                menu_26@F15265 0450                  menu_42@F15288 0550                  menu_43@F15292 0540  
                menu_27@F15269 0440                    __end_of_isr 092C           __end_of_uart1_config 4242  
                    i2printf@c 001D                      i2printf@f 000D                  menu_44@F15296 0530  
         __end_of_uart2_config 41C6                  menu_45@F15300 0520              key_pressed@inPort 0004  
                   ?i2___lwdiv 0001                     ?i2___lwmod 0008              key_pressed@keyRta 0003  
            __size_ofi2_printf 0246                   _msjDIVISION0 0210                   _msjDIVISION1 0200  
                 _msjDIVISION2 03D0                   _msjDIVISION3 03C0              __size_ofi2_strcpy 0030  
                 _msjDIVISIONS 0175                     ?i2_bitRead 0001           __size_ofi2_mem_write 002A  
                   ?i2_lcd_pix 000B                     ?i2_isdigit 0001                  menu_21@mBlank 003A  
                menu_22@mBlank 003A                  menu_31@mBlank 003A                  menu_23@mBlank 003A  
                menu_24@mBlank 003A            __size_of_lcd_legend 00FC                  menu_41@mBlank 003A  
                menu_25@mBlank 003A                  menu_42@mBlank 003A                  menu_26@mBlank 003A  
                     ??___wmul 0097                  menu_43@mBlank 003A                  menu_27@mBlank 003A  
          __size_of_lcd_number 01C0                  menu_44@mBlank 003A                    __pdataBANK0 00B6  
                  __pdataBANK1 0100                    __pdataBANK2 0200                    __pdataBANK3 0300  
                  __pdataBANK4 0400                    __pdataBANK5 0500                  menu_45@mBlank 003A  
                     ??_menu_1 003A                       ??_menu_2 003A                       ??_menu_3 003A  
                     ??_menu_4 003A                       ??_menu_5 003A                       ??_menu_6 003A  
              i2lcd_text@color 001A                       ??_printf 01F5                       ??_strcpy 0097  
         __size_ofi2_rw_eeprom 0044               ?i2_lcd_pix_color 000B                     menu_next@i 0057  
                ??_key_pressed 0001                i2rw_eeprom@addr 0003                i2rw_eeprom@data 0001  
                  __pbssCOMRAM 005A                  ??_key_trigger 0001                   _msjVALUEINGR 0320  
                __pcstackBANK0 0060                  __pcstackBANK1 01EE                  __pcstackBANK5 0570  
             mem_write@address 0094              i2___lwmod@divisor 000A              i2___lwmod@counter 000C  
                 _isdigit$1963 0094                   _msjTHRESHOLD 0135            i2_lcd_write_command 4C24  
                i2lcd_pix@size 0010               isr@multiplicador 008F                   i2strcpy@from 0003  
            __size_of_lcd_init 0152                       ?i2_putch 0001              __size_of_lcd_sign 011C  
            __size_of_lcd_text 045E           lcd_write_command@cmd 0094              __size_of_mem_read 0018  
             ___lwdiv@dividend 0093                      _inGateway 01D4               ?i2_lcd_write_bus 0001  
                    __pintcode 0008             menu_next@menuShown 004E                  __pmediumconst FC5A  
                     ?___awdiv 0001                       ?___lbdiv 0001         __size_of_timer2_config 002A  
         ?i2_lcd_write_command 0001                       ?___lldiv 01EE     __size_ofi2_lcd_set_address 003E  
                     ?___lwdiv 0093                       ?___lwmod 01EE                       ?_bitRead 0093  
                    _lcd_point 3E2E                       ?_lcd_pix 01F6                      _memFilter 00B7  
 __end_ofi2_lcd_set_background 4398                      _keyEnable 00B9                       ?_menu_21 0001  
                     ?_menu_22 0001                       ?_menu_31 0001                       ?_menu_23 0001  
                     ?_menu_24 0001                       ?_menu_41 0001                       ?_menu_25 0001  
                     ?_menu_42 0001                       ?_menu_26 0001                       ?_menu_43 0001  
                     ?_menu_27 0001                       ?_menu_44 0001                       ?_menu_45 0001  
                    _msjCANCEL 0220                       ?_isdigit 0001                      _msjCHANGE 0260  
                    _memSubnet 0300                      _msjFINISH 0240                      _msjFILTER 0155  
                ?i2_lcd_legend 0001                      _gpio_init 4BF0                      _msjSERIAL 02F0  
             ___lwdiv@quotient 0098                      _mem_write 4A48                    ??i2___lwdiv 0005  
                  ??i2___lwmod 000C                      _menu_init 43FC                 __size_of_putch 0020  
                    _menu_next 0930                      _menu_text 01A5            __end_of_key_pressed 2100  
     __end_of_lcd_memory_start 4C50                    ??i2_bitRead 0005                lcd_pix_color@n1 0570  
          __end_of_key_trigger 4BF0                 ___wmul@product 0097                       _LATAbits 000F89  
                  ??i2_lcd_pix 0011                       _LATCbits 000F8B                       _LATDbits 000F8C  
                     _PIE1bits 000F9D                       _PIE3bits 000FA3                    ??i2_isdigit 0001  
                     _PIR1bits 000F9E                       i2u604_40 44CA                       _PIR3bits 000FA4  
                     i2u622_40 4BE8                       i2u607_40 4908                       _PIR4bits 000FB7  
                     i2u582_40 49C8                       i2u902_41 479E                       i2u911_41 3CBA  
                     i2u729_40 410C                       i2u593_40 4B62                       i2u905_41 4756  
                     i2u850_40 1C0E                       i2u835_40 19E6                       i2u908_41 470E  
                     i2u924_41 279C                       i2u932_41 46C6                       i2u845_40 1BBA  
                     i2u837_40 1A0E                       i2u917_41 394C                       i2u941_41 45E8  
                     i2u829_44 4946                       i2u829_45 4940                       i2u846_40 1BC4  
                     i2u847_40 1BCE                       i2u935_41 467C                       i2u848_40 1BE6  
                     i2u944_41 459E                       i2u953_41 4040                       i2u858_40 1DBA  
                     i2u874_41 28F2                       i2u882_41 43A4                       i2u938_41 4632  
                     i2u859_40 1DC4                       i2u867_41 2B9A                       i2u947_41 3BFA  
                     i2u893_41 47E6                       i2u886_41 3A3A                       _RCONbits 000FD0  
                     i2u896_41 3D7A          ??i2_lcd_write_command 0002           uart1_config@baudRate 01F6  
                    _rw_eeprom 4548                     ?_lcd_point 0001                mem_read@address 0093  
                  _memDivision 00B8              ___wmul@multiplier 0093               __CFG_SOSCSEL$DIG 000000  
              lcd_number@index 0020          __size_of_uart1_config 007C                       i2___wmul 4AF0  
        __size_of_uart2_config 007C                      lcd_pix@n1 0570                     printf@flag 0575  
                   printf@prec 0572                 ??i2_lcd_legend 003A                      lcd_text@i 058F  
                    lcd_text@j 0591                      lcd_text@k 0593                   ??_lcd_legend 009A  
                   ?_gpio_init 0001                       i2_printf 238A                   ??_lcd_number 001B  
                     i2_strcpy 4A18                     ?_mem_write 0093                  _timer2_config 4A74  
                    copy_data0 2F16                      copy_data1 2F36                      copy_data2 2F5A  
                    copy_data3 2F7E                      copy_data4 2FA2                      copy_data5 2FC2  
              i2bitRead@number 0001                     ?_menu_init 0001                     ?_menu_next 004E  
                    isr@i_1010 0087                      isr@i_1003 0086                      isr@i_1021 0080  
                    isr@i_1013 007D                      isr@i_1022 008A                      isr@i_1014 007E  
                    isr@i_1016 0088                      isr@i_1009 007C                      isr@i_1018 007F  
                    isr@i_1019 0089                      isr@i_1084 008B                      isr@i_1086 008C  
                    isr@i_1088 007B                      isr@j_1087 007A           uart1_config@option16 01FB  
             __size_ofi2_putch 001E                     _EECON1bits 000F7F              lcd_set_address@x1 01EE  
            lcd_set_address@x2 01F2              lcd_set_address@y1 01F0              lcd_set_address@y2 01F4  
                isr@tara_resta 0082                    _msjETHERNET 02D0                       __Hrparam 0000  
              lcd_text@renglon 058E                       __Lrparam 0000             __CFG_BOREN$SBORDIS 000000  
                 _uart1_config 41C6             __end_of_lcd_legend 3754                   _uart2_config 414A  
              _lcd_set_address 44FA                    _msjPASSWORD 0270             __end_of_lcd_number 2790  
             __size_of___awdiv 0084                    _msjTAREINGR 0330               __size_of___lbdiv 003A  
        i2___wmul@multiplicand 0003               __size_of___lldiv 0098               __size_of___lwdiv 0054  
                   ?_rw_eeprom 0093               __size_of___lwmod 0044               __size_of_bitRead 0042  
         uart2_config@baudRate 01F6               __size_of_lcd_pix 0116               __size_of_menu_21 0064  
             __size_of_menu_22 00EE               __size_of_menu_23 0048               __size_of_menu_31 00EE  
             __size_of_menu_24 00C0               __size_of_menu_25 0048               __size_of_menu_41 004A  
             __size_of_menu_26 0048               __size_of_menu_42 004A               __size_of_menu_27 0048  
             __size_of_menu_43 004A                  mem_write@data 0093               __size_of_menu_44 004A  
             __size_of_menu_45 004A             i2_lcd_memory_start 4C50                    _key_pressed 1DE0  
             __size_of_isdigit 0022                    _key_trigger 4BDA                ___lwdiv@divisor 0095  
               ?_timer2_config 0093                ___lwdiv@counter 0097                       __ptext10 4454  
                     __ptext11 43FC                       __ptext20 44FA                       __ptext12 4A48  
                     __ptext21 4C48                       __ptext13 4B94                       __ptext30 4868  
                     __ptext22 4AC8                       __ptext14 4242                       __ptext31 238A  
                     __ptext23 48AC                       __ptext15 3658                       __ptext40 4BC4  
                     __ptext32 4B58                       __ptext24 2A3C                       __ptext16 49E6  
                     __ptext41 432A                       __ptext33 4B76                       __ptext25 4C04  
                     __ptext17 156E                       __ptext50 2790                       __ptext42 3246  
                     __ptext34 48EE                       __ptext26 4C16                       __ptext18 301A  
                     __ptext51 3940                       __ptext43 4034                       __ptext35 44A8  
                     __ptext27 4C3E                       __ptext19 3130                       __ptext60 28E6  
                     __ptext52 3CAE                       __ptext44 3BEE                       __ptext36 3B1C  
                     __ptext28 4BF0                       __ptext61 2B8E                       __ptext53 4704  
                     __ptext45 4592                       __ptext37 4A18                       __ptext70 496E  
                     __ptext62 19CC                       __ptext54 474C                       __ptext46 45DC  
                     __ptext38 0930                       __ptext71 4C50                       __ptext63 3754  
                     __ptext55 4794                       __ptext47 4626                       __ptext39 4A9E  
                     __ptext72 4C24                       __ptext64 49AC                       __ptext56 3D6E  
                     __ptext48 4670                       __ptext73 4C32                       __ptext65 3E2E  
                     __ptext57 47DC                       __ptext49 46BA                       __ptext74 4AF0  
                     __ptext66 25D0                       __ptext58 3A2E                       __ptext75 4BDA  
                     __ptext67 4930                       __ptext59 4398                       __ptext76 1DE0  
                     __ptext68 2DE6                       __ptext77 40C6                       __ptext69 384A  
        __end_of_keyboard_init 4C48                       _lcd_init 2A3C                       _lcd_sign 2DE6  
                     _inSubnet 01CC                       _memBuff1 00BC                       _lcd_text 156E  
  __size_of_lcd_set_background 0078            ?i2_lcd_memory_start 0001                       _msjBAUD1 0380  
                     _msjBAUD2 0370                       _msjBAUD3 0360                       _msjBAUD4 0350  
                     _msjBLANK 0560                     strcpy@from 0095                    _menu_update 005C  
               i2_isdigit$1963 0002                       _mem_read 4B94                       _msjRANGE 0125  
                     _msjRESET 0250                  __size_of_main 011E         __size_of_lcd_pix_color 0116  
         i2_lcd_set_background 432A              lcd_pix_color@size 01FB                       _outBuff2 0599  
         uart2_config@option16 01FB                       int$flags 005F           ??i2_lcd_memory_start 0003  
                     lcd_pix@c 01FA                       lcd_pix@i 0571                       lcd_pix@x 01F6  
                     lcd_pix@y 01F8                      printf@val 0573            __CFG_INTOSCSEL$HIGH 000000  
                  ??_lcd_point 0018            i2lcd_text@msjPtrCpy 0020                      putch@data 0093  
                     menu_21@i 004B                       menu_22@i 004A                       menu_31@i 004A  
                     menu_23@i 004A                       menu_24@i 004B                       menu_41@i 004B  
                     menu_25@i 004A                       menu_42@i 004B                       menu_26@i 004A  
                     menu_43@i 004B                       menu_27@i 004A                       menu_44@i 004B  
                     menu_45@i 004B                     _INTCONbits 000FF2         __size_of_lcd_write_bus 000E  
                  ??_gpio_init 0093          __end_of_menu_navigate 3358            i2lcd_write_bus@data 0001  
                     isdigit@c 0095                  ??i2_mem_write 0002                    ??_mem_write 0094  
                  ??_menu_init 0095                    ??_menu_next 0055                       intlevel2 0000  
             ___lwmod@dividend 01EE               ___lldiv@dividend 01EE          ?i2_lcd_set_background 000B  
                   _RCSTA1bits 000FAB                     _RCSTA2bits 000FA6        __end_of_lcd_set_address 4548  
        i2lcd_set_background@i 000D          i2lcd_set_background@j 000F           __end_ofi2_lcd_legend 3BEE  
          uart2_config@option8 01FA                       printf@ap 0570             __CFG_WDTPS$1048576 000000  
                _lcd_text$2363 057B                  _lcd_text$2364 057D              _lcd_write_command 4C04  
                ??i2_rw_eeprom 0003                    ??_rw_eeprom 0095             ?_lcd_write_command 0001  
                _lcd_pix_color 301A               ___lldiv@quotient 0093                ___lwmod@divisor 01F0  
              ??_timer2_config 0095                       strcpy@cp 0097                       strcpy@to 0093  
              ___lwmod@counter 01F2            ??_lcd_write_command 0094                    _printEnable 00AF  
     __size_ofi2_lcd_pix_color 00F6             i2mem_write@address 0002              ?_lcd_memory_start 0001  
          __CFG_BORPWR$ZPBORMV 000000            __end_ofi2_mem_write 4AC8             ??_lcd_memory_start 0095  
                _lcd_write_bus 4C16      __end_of_lcd_write_command 4C16  
